var resultJson = [{"path":"unused/AddPetToClientCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddPetToClientCommand;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":14,"content":"//@@author jonathanwj-unused"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"// Entire command was merged into AddPetCommand that"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"// currently creates a pet and adds that pet to the client in one command."},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"public class AddPetToClientCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPetToClientCommand.MESSAGE_USAGE);"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    private AddPetToClientCommandParser parser \u003d new AddPetToClientCommandParser();"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"        //no index specified"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" \", MESSAGE_INVALID_FORMAT);"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"        //only one index specified"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" c/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"        // no field specified"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" 1 2\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    public void parse_invalidIndex_failure() {"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        // negative index"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/-1 c/-1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/-1 c/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/1 c/-1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        // zero index"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/0 c/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/1 c/0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/0 c/0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"        // invalid arguments being parsed"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" p/1 wefsef c/0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        Index petIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"        Index clientIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"        String userInput \u003d \" p/\" + petIndex.getOneBased() + \" c/\" + clientIndex.getOneBased();"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand expectedCommand \u003d new AddPetToClientCommand(petIndex, clientIndex);"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        Index petIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        Index clientIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"        String userInput \u003d \" p/\" + petIndex.getZeroBased() + \" c/\" + clientIndex.getZeroBased()"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"                + \" c/\" + clientIndex.getOneBased() + \" p/\" + petIndex.getOneBased();"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand expectedCommand \u003d new AddPetToClientCommand(petIndex, clientIndex);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":54,"null":1,"-":26}},{"path":"unused/AddPetToClientCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_INDEX;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_INDEX;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PETS;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":20,"content":"//@@author jonathanwj-unused"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"// Entire command was merged into AddPetCommand that"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"// currently creates a pet and adds that pet to the client in one command."},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"public class AddPetToClientCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"    public static final String COMMAND_WORD \u003d \"addpettoclient\";"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a owner to a pet \""},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"            + \"by the index number used in the last client and pet listing.\\n\""},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"            + \"Parameters: \""},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_PET_INDEX + \"PET_INDEX \""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_CLIENT_INDEX + \"CLIENT_INDEX\\n\""},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_PET_INDEX + \"1 \" + PREFIX_CLIENT_INDEX + \"2\";"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_ADD_PET_TO_CLIENT_SUCCESS \u003d \"Added Pet To client:\\n%1$s\\n\u003e\u003e %2$s\";"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_CLIENT_HAS_PET \u003d \"Client already has pet\";"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_PET_HAS_OWNER \u003d \"Pet already has an owner\";"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"    private final Index petIndex;"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    private final Index clientIndex;"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    private Optional\u003cPet\u003e pet;"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    private Optional\u003cClient\u003e client;"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"     * @param petIndex of the pet in the filtered pet list to add"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"     * @param clientIndex of the person in the filtered client list to add pet to"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"    public AddPetToClientCommand(Index petIndex, Index clientIndex) {"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(petIndex);"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(clientIndex);"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        this.petIndex \u003d petIndex;"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        this.clientIndex \u003d clientIndex;"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        pet \u003d Optional.empty();"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"        client \u003d Optional.empty();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(pet.get());"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(client.get());"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"            model.addPetToClient(pet.get(), client.get());"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        } catch (ClientAlreadyOwnsPetException e) {"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"            throw new CommandException(MESSAGE_CLIENT_HAS_PET);"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        } catch (PetAlreadyHasOwnerException e) {"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"            throw new CommandException(MESSAGE_PET_HAS_OWNER);"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_PET_TO_CLIENT_SUCCESS, pet.get(), client.get()));"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        List\u003cPet\u003e lastShownListPet \u003d model.getFilteredPetList();"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"        List\u003cClient\u003e lastShownListClient \u003d model.getFilteredClientList();"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"        if (clientIndex.getZeroBased() \u003e\u003d lastShownListClient.size()) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"        if (petIndex.getZeroBased() \u003e\u003d lastShownListPet.size()) {"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"        pet \u003d Optional.of(lastShownListPet.get(petIndex.getZeroBased()));"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"        client \u003d Optional.of(lastShownListClient.get(clientIndex.getZeroBased()));"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"},{"lineNumber":94,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        if (!(other instanceof AddPetToClientCommand)) {"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"        // state check"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand e \u003d (AddPetToClientCommand) other;"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"        return petIndex.equals(e.petIndex)"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 clientIndex.equals(e.clientIndex)"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 pet.equals(e.pet)"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 client.equals(e.client);"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":84,"null":1,"purplepers0n":2,"-":29}},{"path":"unused/AddPetToClientCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_INDEX;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_INDEX;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddPetToClientCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"content":"//@@author jonathanwj-unused"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"// Entire command was merged into AddPetCommand that"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"// currently creates a pet and adds that pet to the client in one command."},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":" * Parses input arguments and creates a new AddPetToClientCommand object"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"public class AddPetToClientCommandParser implements Parser\u003cAddPetToClientCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPetToClientCommand"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"     * and returns an AddPetToClientCommand object for execution."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"    public AddPetToClientCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PET_INDEX, PREFIX_CLIENT_INDEX);"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"        Index indexPet;"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"        Index indexClient;"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PET_INDEX, PREFIX_CLIENT_INDEX)) {"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"                    AddPetToClientCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"            indexPet \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PET_INDEX).get());"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"            indexClient \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLIENT_INDEX).get());"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"                    AddPetToClientCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        return new AddPetToClientCommand(indexPet, indexClient);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":37,"null":1,"-":22}},{"path":"unused/RemovePetFromClientCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_INDEX;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_INDEX;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PETS;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":19,"content":"//@@author jonathanwj-unused"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"// Entire command was merged into AddPetCommand that"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"// currently creates a pet and adds that pet to the client in one command."},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"public class RemovePetFromClientCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"    public static final String COMMAND_WORD \u003d \"removepetfromclient\";"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Remove a pet from an owner \""},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"            + \"by the index number used in the last client and pet listing.\\n\""},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"            + \"Parameters: \""},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_PET_INDEX + \"PET_INDEX \""},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_CLIENT_INDEX + \"CLIENT_INDEX\\n\""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_PET_INDEX + \"1 \" + PREFIX_CLIENT_INDEX + \"2\";"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_ADD_PET_TO_CLIENT_SUCCESS \u003d \"Removed Pet from client:\\n%1$s\\n\u003e\u003e %2$s\";"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_CLIENT_PET_NOT_ASSOCIATED \u003d \"Client is not the owner of the indicated pet\";"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    private final Index petIndex;"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    private final Index clientIndex;"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    private Optional\u003cPet\u003e pet;"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"    private Optional\u003cClient\u003e client;"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"     * @param petIndex of the pet in the filtered pet list to add"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"     * @param clientIndex of the person in the filtered client list to add pet to"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"    public RemovePetFromClientCommand(Index petIndex, Index clientIndex) {"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(petIndex);"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(clientIndex);"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        this.petIndex \u003d petIndex;"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"        this.clientIndex \u003d clientIndex;"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        pet \u003d Optional.empty();"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        client \u003d Optional.empty();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(pet.get());"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(client.get());"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        try {"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"            model.removePetFromClient(pet.get(), client.get());"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        } catch (ClientPetAssociationNotFoundException e) {"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"            throw new CommandException(MESSAGE_CLIENT_PET_NOT_ASSOCIATED);"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_PET_TO_CLIENT_SUCCESS, pet.get(), client.get()));"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"        List\u003cPet\u003e lastShownListPet \u003d model.getFilteredPetList();"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"        List\u003cClient\u003e lastShownListClient \u003d model.getFilteredClientList();"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        if (clientIndex.getZeroBased() \u003e\u003d lastShownListClient.size()) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"        if (petIndex.getZeroBased() \u003e\u003d lastShownListPet.size()) {"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"        pet \u003d Optional.of(lastShownListPet.get(petIndex.getZeroBased()));"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"        client \u003d Optional.of(lastShownListClient.get(clientIndex.getZeroBased()));"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"        if (!(other instanceof RemovePetFromClientCommand)) {"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        // state check"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"        RemovePetFromClientCommand e \u003d (RemovePetFromClientCommand) other;"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"        return petIndex.equals(e.petIndex)"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 clientIndex.equals(e.clientIndex)"},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 pet.equals(e.pet)"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 client.equals(e.client);"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":80,"null":1,"purplepers0n":2,"-":29}},{"path":"unused/RemovePetFromClientCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_INDEX;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_INDEX;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.RemovePetFromClientCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"content":"//@@author jonathanwj-unused"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"// Entire command was merged into AddPetCommand that"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"// currently creates a pet and adds that pet to the client in one command."},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":" * Parses input arguments and creates a new AddPetToClientCommand object"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"public class RemovePetFromClientCommandParser implements Parser\u003cRemovePetFromClientCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPetToClientCommand"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"     * and returns an AddPetToClientCommand object for execution."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"    public RemovePetFromClientCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PET_INDEX, PREFIX_CLIENT_INDEX);"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"        Index indexPet;"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"        Index indexClient;"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PET_INDEX, PREFIX_CLIENT_INDEX)) {"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"                    RemovePetFromClientCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"            indexPet \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PET_INDEX).get());"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"            indexClient \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLIENT_INDEX).get());"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"                    RemovePetFromClientCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        return new RemovePetFromClientCommand(indexPet, indexClient);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":37,"null":1,"-":22}},{"path":"docs/team/ChooWenXin.adoc","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"\u003d Choo Wen Xin - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: VetterAppointments"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"VetterAppointments is a desktop application catered to vets to manage their employees, clients, pets and appointments."},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"The vet interacts with the application mostly by a command line interface (CLI)."},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":"The application, written in Java, has a graphical user interface (GUI) created with JavaFX."},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"This application was created by building upon an existing code base for an address book for the module CS2103T Software Engineering, and has around 20kLoC."},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"The purpose of this portfolio page is to demonstrate my software engineering experience and documentation skills gained from the above mentioned project."},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"* *Major enhancement*: Added `listall` command"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"** What it does: The application will display all relevant details of the client that is queried, such as his/her pets and appointments, in a sidebar display"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"** Justification: When dealing with a client, vets often require a quick overview of the client, so that the vet can easily check the client\u0027s pets and upcoming appointments"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"** Highlights: This command requires iterations through multiple lists, one time to find all pets that belong to the queried client, and another time to search for all appointments that belong to each pet."},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"This command will update a separate sidebar display, instead of the individual lists. Hence much effort was also required to create the layout on the UI"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"* *Minor enhancement*: Modified `list` command and created UI for list tabs and appointment display"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F09-B4/main/blob/master/collated/functional/purplepers0n.md[Functional code]] [https://github.com/CS2103JAN2018-F09-B4/main/blob/master/collated/test/purplepers0n.md[Test code]]"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"* *Other contributions*:"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"** Enhancements to existing features:"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"*** Updated the tag colors (Pull request https://github.com/CS2103JAN2018-F09-B4/main/pull/52[#52])"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"*** Updated existing commands `edit` and `delete` to work only on the currently viewed list (Pull request https://github.com/CS2103JAN2018-F09-B4/main/pull/103[#103])"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"** Documentation:"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"*** Added use cases to Developer Guide (Pull request https://github.com/CS2103JAN2018-F09-B4/main/pull/30[#30])"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"*** Added each member\u0027s feature contribution in Developer Guide (Pull request https://github.com/CS2103JAN2018-F09-B4/main/pull/95[#95])"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"*** Tweaked existing contents of the Developer Guide (Pull requests https://github.com/CS2103JAN2018-F09-B4/main/pull/213[#213], https://github.com/CS2103JAN2018-F09-B4/main/pull/240[#240])"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"** Community:"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"*** Reviewed PRs (with non-trivial review comments): https://github.com/CS2103JAN2018-F09-B4/main/pull/29[#29], https://github.com/CS2103JAN2018-F09-B4/main/pull/261[#261]"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-W10-B1/main/issues/132[1], https://github.com/CS2103JAN2018-W10-B1/main/issues/135[2])"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":47,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"include::../UserGuide.adoc[tag\u003dlists, leveloffset\u003d-1]"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"include::../UserGuide.adoc[tag\u003dlistp, leveloffset\u003d-1]"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":56,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"include::../DeveloperGuide.adoc[tag\u003dlistperson]"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"---"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"include::../DeveloperGuide.adoc[tag\u003dwxEnhancements]"}],"authorContributionMap":{"purplepers0n":44,"-":18}},{"path":"docs/team/ZhongZhengXin-ppp.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Zhong ZhengXin - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: VetterAppointments"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Godxin"},"content":"VetterAppointments is a desktop based application developed from an addressbook application. It is specially designed for vets to facilitate the process of scheduling appointments as well as managing essential data such as clients, pets, meetings and, staff. +"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Godxin"},"content":"The user interacts with the program by typing words through a Command Line Interface (CLI). The result of each interaction will be shown right below where you type. The Graphical User Interface(GUI) neatly displays all critical information to the user. +"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Godxin"},"content":"VetterAppointments is written in java for about 20K line of code, and its GUI is built using JavaFX. +"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"* *Major Enhancement*: Add `schedule` and `reschedule` command."},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"** Overview: +"},{"lineNumber":20,"author":{"gitID":"Godxin"},"content":"Both commands require similar parameters such as date, time, duration and description. The difference is that schedule command requires all parameters presented while rescheduling command only needs at least one of them."},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"** Justification: +"},{"lineNumber":23,"author":{"gitID":"Godxin"},"content":"The enhancements complement one of the significant functionality of Vetterappointments which is to schedule appointments."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"** Highlights: +"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Appointment associates with date, time, duration and description in aggregation. The benefit is that all the component class"},{"lineNumber":27,"author":{"gitID":"-"},"content":"still survives even when an appointment is deleted."},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"Godxin"},"content":"* *Minor Enhancements*: Add support to detect appointment clashes, invalid duration and show suggestions for a valid length."},{"lineNumber":30,"author":{"gitID":"-"},"content":"* *Code Contribution*: +"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"** [https://github.com/CS2103JAN2018-F09-B4/main/blob/master/collated/functional/Godxin.md[Functional code]]"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":" [https://github.com/CS2103JAN2018-F09-B4/main/blob/master/collated/test/Godxin.md[Test code]]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"* *Other contributions:* +"},{"lineNumber":35,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":36,"author":{"gitID":"-"},"content":"*** Uploaded the jar file for releases `v1.4` on GitHub"},{"lineNumber":37,"author":{"gitID":"Godxin"},"content":"*** Managed the releases of `v1.5rc` on GitHub"},{"lineNumber":38,"author":{"gitID":"-"},"content":"** Feature:"},{"lineNumber":39,"author":{"gitID":"-"},"content":"*** Created client class (Pull request https://github.com/CS2103JAN2018-F09-B4/main/pull/31[#31])"},{"lineNumber":40,"author":{"gitID":"-"},"content":"*** Modified appointment class with more exceptions (Pull request https://github.com/CS2103JAN2018-F09-B4/main/pull/61[#61]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"*** Added UniqueAppointment list: +"},{"lineNumber":42,"author":{"gitID":"-"},"content":" (Pull request https://github.com/CS2103JAN2018-F09-B4/main/pull/61[#61]"},{"lineNumber":43,"author":{"gitID":"-"},"content":" https://github.com/CS2103JAN2018-F09-B4/main/pull/67[#67]"},{"lineNumber":44,"author":{"gitID":"-"},"content":" https://github.com/CS2103JAN2018-F09-B4/main/pull/68[#68]"},{"lineNumber":45,"author":{"gitID":"-"},"content":" https://github.com/CS2103JAN2018-F09-B4/main/pull/69[#69])"},{"lineNumber":46,"author":{"gitID":"-"},"content":"*** Added schedule command: +"},{"lineNumber":47,"author":{"gitID":"-"},"content":" (Pull request https://github.com/CS2103JAN2018-F09-B4/main/pull/72[#72]"},{"lineNumber":48,"author":{"gitID":"-"},"content":" https://github.com/CS2103JAN2018-F09-B4/main/pull/74[#74]"},{"lineNumber":49,"author":{"gitID":"-"},"content":" https://github.com/CS2103JAN2018-F09-B4/main/pull/78[#78]"},{"lineNumber":50,"author":{"gitID":"-"},"content":" https://github.com/CS2103JAN2018-F09-B4/main/pull/81[#81])"},{"lineNumber":51,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":52,"author":{"gitID":"-"},"content":"*** Added glossary in Developer Guide (Pull request https://github.com/CS2103JAN2018-F09-B4/main/pull/28[#28])"},{"lineNumber":53,"author":{"gitID":"-"},"content":"*** Added description for commands in User Guide: +"},{"lineNumber":54,"author":{"gitID":"-"},"content":"(Pull request https://github.com/CS2103JAN2018-F09-B4/main/pull/114[#114]"},{"lineNumber":55,"author":{"gitID":"-"},"content":" https://github.com/CS2103JAN2018-F09-B4/main/pull/173[#173])"},{"lineNumber":56,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":57,"author":{"gitID":"-"},"content":"*** Reported and documented bugs for other teams in procedural manner: +"},{"lineNumber":58,"author":{"gitID":"Godxin"},"content":"https://github.com/CS2103JAN2018-F11-B1/main/issues/165[#165],"},{"lineNumber":59,"author":{"gitID":"Godxin"},"content":"https://github.com/CS2103JAN2018-F11-B1/main/issues/169[#169],"},{"lineNumber":60,"author":{"gitID":"Godxin"},"content":"https://github.com/CS2103JAN2018-F11-B1/main/issues/195[#195]"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to userguide"},{"lineNumber":63,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":64,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":65,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dschedule]"},{"lineNumber":68,"author":{"gitID":"Godxin"},"content":"include::../UserGuide.adoc[tag\u003dreschedule]"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":74,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dzzxEnhancements]"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dscheduleappt]"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"jonathanwj":2,"-":68,"Godxin":11}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d VetterAppointments- User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":":toc-title: Table of Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toclevels: 4"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":source-highlighter: rouge"},{"lineNumber":12,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":14,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":15,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":":repoURL: https://github.com/CS2103JAN2018-F09-B4/main"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"By: `F09-B4`      Since: `March 2018`      Licence: `MIT`"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"If you\u0027re a vet and have trouble managing your clients\u0027 appointments, then *VetterAppointments* is the"},{"lineNumber":23,"author":{"gitID":"-"},"content":"right program for you. +"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"*VetterAppointments* allows you to have better control of your scheduling process."},{"lineNumber":26,"author":{"gitID":"-"},"content":"The program helps to organize all of your appointments and"},{"lineNumber":27,"author":{"gitID":"-"},"content":"display only important information to you. The program strips away any unnecessary clutter"},{"lineNumber":28,"author":{"gitID":"-"},"content":"and allows you to focus on what matters to you the most; your clients, the animals under your"},{"lineNumber":29,"author":{"gitID":"-"},"content":"care and their appointments, as well as your staff. This allows the program to help you out on managing your clients. +"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"The program works by typing in commands and executing them. It is also supported by a beautiful design"},{"lineNumber":32,"author":{"gitID":"-"},"content":"that eases navigation. +"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"Don\u0027t worry, this user guide will help you along and guide you on how to get *VetterAppointments* up and running"},{"lineNumber":35,"author":{"gitID":"-"},"content":"as well as reveal all the features and commands available to you."},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"To get the program up and running, follow the instructions below:"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":46,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":48,"author":{"gitID":"-"},"content":"+"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":".  Download the latest `VetterAppointments.jar` link:{repoURL}/releases[here]. You will see the version releases of the program there."},{"lineNumber":50,"author":{"gitID":"-"},"content":".  Copy the file to the folder you want to use as the home folder for your VetterAppointments."},{"lineNumber":51,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. Figure 1 below shows the program upon start up."},{"lineNumber":52,"author":{"gitID":"-"},"content":"+"},{"lineNumber":53,"author":{"gitID":"-"},"content":".VetterAppointments program interface upon starting up."},{"lineNumber":54,"author":{"gitID":"-"},"content":"image::userguide_userInterface_image.PNG[width\u003d\"1000\"]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"// tag::userInterfaceWalkthrough[]"},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d User Interface"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"This section will help you understand the different sections of the user interface for VetterAppointments."},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"Figure 2 below shows a typical user interface of VetterAppointments."},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":".User interface of VetterAppointments program."},{"lineNumber":64,"author":{"gitID":"-"},"content":"image::userguide_interfaceWalkthrough_image.PNG[width\u003d\"1000\"]"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"*Sections of the interface:* +"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":". *Client/Pet/Vet Tech List Panel:* +"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"Displays all your clients/pets/vet technicians in the program."},{"lineNumber":70,"author":{"gitID":"-"},"content":". *Command Box:* +"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"Allows you to input commands into the program."},{"lineNumber":72,"author":{"gitID":"-"},"content":". *Command Box Notification:* +"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"Shows to you the feedback result of your most recent command."},{"lineNumber":74,"author":{"gitID":"-"},"content":". *Appointment Panel:* +"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"Displays all your appointments scheduled in the program."},{"lineNumber":76,"author":{"gitID":"-"},"content":". *List All Panel:* +"},{"lineNumber":77,"author":{"gitID":"-"},"content":"Displays all information of a specified client."},{"lineNumber":78,"author":{"gitID":"-"},"content":"// end::userInterfaceWalkthrough[]"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":82,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user. +"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"E.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"* Items in square brackets are optional. +"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"E.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"* Items with `…`​ after them can be used multiple times including zero times. +"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"E.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"* Parameters can be in any order. +"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"E.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d System Based Commands"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"This section explains commands that are based around the system. These commands are not related to managing your clients, staff, pets and appointments."},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":101,"author":{"gitID":"-"},"content":"*Command format:* `clear` +"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"purplepers0n"},"content":"*Description:* Clears all entries from VetterAppointments. +"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"[CAUTION]"},{"lineNumber":106,"author":{"gitID":"-"},"content":"`clear` command will remove *all* existing clients, pets, appointments and vet technicians"},{"lineNumber":107,"author":{"gitID":"-"},"content":" stored in your program."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":" The program will be completely empty after executing the `clear` command."},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":112,"author":{"gitID":"-"},"content":"*Command format:* `exit` +"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"*Description:* Exits the program. +"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":117,"author":{"gitID":"-"},"content":"Exiting the program in the middle of a command will save the state of the program."},{"lineNumber":118,"author":{"gitID":"-"},"content":"So there\u0027s nothing to worry about, all your data will be saved."},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":121,"author":{"gitID":"-"},"content":"*Command format:* `help` +"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"*Description:* Brings up the user guide. +"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"Upon entering the `help` command, a User Guide manual will pop up displaying the"},{"lineNumber":126,"author":{"gitID":"-"},"content":"available commands for you. You can always enter the `help` command if you need help"},{"lineNumber":127,"author":{"gitID":"-"},"content":"with the program. +"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":130,"author":{"gitID":"-"},"content":"*Command format:* `history` +"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":"*Description:* Lists all your previously entered commands in reverse chronological order. +"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":136,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":137,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":"// tag::undoredo[]"},{"lineNumber":140,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":141,"author":{"gitID":"-"},"content":"*Command format:* `redo` +"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"*Description:* Reverses the most recent `undo` command. +"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":146,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":147,"author":{"gitID":"purplepers0n"},"content":"Redoable commands: those commands that modify the VetterAppointments\u0027 content: +"},{"lineNumber":148,"author":{"gitID":"-"},"content":"`add` `addp` `addappttopet` `sortc` `sortp` `delete` `deletep` `rmapptfrompet` `edit` `editp` `editappt` `clear`"},{"lineNumber":149,"author":{"gitID":"-"},"content":"`schedule` `unschedule` `reschedule`"},{"lineNumber":150,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":153,"author":{"gitID":"-"},"content":"*Command format:* `undo` +"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"purplepers0n"},"content":"*Description:* Restores VetterAppointments to the state before the previous _undoable_ command was executed. +"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":159,"author":{"gitID":"purplepers0n"},"content":"Undoable commands: those commands that modify the VetterAppointments\u0027 content: +"},{"lineNumber":160,"author":{"gitID":"-"},"content":"`add` `addp` `addappttopet` `sortc` `sortp` `delete` `deletep` `rmapptfrompet` `edit` `editp` `editappt` `clear`"},{"lineNumber":161,"author":{"gitID":"-"},"content":"`schedule` `unschedule` `reschedule`"},{"lineNumber":162,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":163,"author":{"gitID":"jonathanwj"},"content":"// end::undoredo[]"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Client \u0026 Staff Related Commands"},{"lineNumber":166,"author":{"gitID":"-"},"content":"This section explains and goes through the commands available to manage your"},{"lineNumber":167,"author":{"gitID":"-"},"content":"client and staff in the clinic."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding a person: `add` `Since v1.1`"},{"lineNumber":171,"author":{"gitID":"-"},"content":"*Command format:* `add r/ROLE n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":174,"author":{"gitID":"-"},"content":"A person\u0027s role can only either be a client or technician. +"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"*Description:* Adds a new person to the program. +"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"Here are some valid examples on how to use the `add` command:"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"* `add r/Client n/Alice Peterson p/91234567 e/alicepeter@email.com a/Blk 123, Bedok Reservoir St24` +"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"* `add r/Client n/Bradly Cooper p/91234567 e/bradlycooper@email.com t/friend t/dogwhisperer a/Blk 123, Bedok Reservoir St24` +"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"//"},{"lineNumber":186,"author":{"gitID":"-"},"content":"Figure 3 below shows the outcome in the command notification box after the execution of the"},{"lineNumber":187,"author":{"gitID":"-"},"content":"`add` command."},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":".Result in command notification box after executing `add` command successfully."},{"lineNumber":190,"author":{"gitID":"-"},"content":"image::userguide_addCommand_image2.PNG[width\u003d\"1000\"]"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"//"},{"lineNumber":193,"author":{"gitID":"-"},"content":"Figure 4 below shows the outcomes of executing the `add` commands."},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":".Result output after adding a clients Alice Peterson and Bradly Cooper"},{"lineNumber":196,"author":{"gitID":"-"},"content":"image::userguide_addCommand_image.PNG[width\u003d\"400\"]"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"jonathanwj"},"content":"// tag::removeperson[]"},{"lineNumber":199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Removing a client or vet technician: `delete` `Since v1.1`"},{"lineNumber":200,"author":{"gitID":"-"},"content":"*Command format:* `delete INDEX` +"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":203,"author":{"gitID":"-"},"content":"The index must be a positive integer. +"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"*Description:* Deletes a person in the program according to the index provided. +"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":208,"author":{"gitID":"-"},"content":"The `delete` command only deletes the person on the currently viewed person listing."},{"lineNumber":209,"author":{"gitID":"-"},"content":"`delete` command deletes a client when viewing the Client list. Likewise it deletes"},{"lineNumber":210,"author":{"gitID":"-"},"content":"the vet technician when viewing the Vet Tech list. +"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"Here is an example of using the command `delete`: +"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"//"},{"lineNumber":218,"author":{"gitID":"-"},"content":"Figure 5 below shows the result of the command box notification of the program when `delete 1` is executed."},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":".Executing the `delete` command on index 1."},{"lineNumber":221,"author":{"gitID":"-"},"content":"image::userguide_deleteCommand_image.PNG[width\u003d\"1000\"]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"//"},{"lineNumber":224,"author":{"gitID":"-"},"content":"Figure 6 below shows the status of client list before executing the `delete 1` command."},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":".Program status before executing `delete 1` command."},{"lineNumber":227,"author":{"gitID":"-"},"content":"image::userguide_addCommand_image.PNG[width\u003d\"400\"]"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"//"},{"lineNumber":230,"author":{"gitID":"-"},"content":"Figure 7 below shows the result of the client list being updated upon executing the `delete 1` command."},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":".The client list after deleting Alice Peterson from the program."},{"lineNumber":233,"author":{"gitID":"-"},"content":"image::userguide_deleteCommand_image2.PNG[width\u003d\"400\"]"},{"lineNumber":234,"author":{"gitID":"jonathanwj"},"content":"// end::removeperson[]"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing a client or vet technician\u0027s details : `edit` `Since v1.1`"},{"lineNumber":239,"author":{"gitID":"-"},"content":"*Command format:* `edit INDEX [r/ROLE] [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":242,"author":{"gitID":"-"},"content":"Index provided must be a positive integer. +"},{"lineNumber":243,"author":{"gitID":"-"},"content":"At least one parameter must be provided when `edit` command is called. +"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"*Description:* Edits the details of a person specified through the index given. +"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"The `edit` command only deletes the person on the currently viewed person listing."},{"lineNumber":249,"author":{"gitID":"-"},"content":"`edit` command deletes a client when viewing the Client list. Likewise it deletes"},{"lineNumber":250,"author":{"gitID":"-"},"content":"the vet technician when viewing the Vet Tech list. +"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"Here is an example on using the command: +"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"* `edit 1 n/Mary Tan` +"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"//"},{"lineNumber":258,"author":{"gitID":"-"},"content":"Figure 8 below shows is the current listing before the `edit 1 n/Mary Tan` command is being executed."},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":".Client list before edit command is being executed."},{"lineNumber":261,"author":{"gitID":"-"},"content":"image::userguide_deleteCommand_image2.PNG[width\u003d\"400\"]"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"//"},{"lineNumber":264,"author":{"gitID":"-"},"content":"After executing the command, the following Bradly Cooper will now have a new name called Mary Tan."},{"lineNumber":265,"author":{"gitID":"-"},"content":"Figure 9 below shows the newly edited details of person at index 1."},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":".Client list after the edit command is being executed."},{"lineNumber":268,"author":{"gitID":"-"},"content":"image::userguide_editCommand_image.PNG[width\u003d\"1000\"]"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d\u003d Finding by name: `find` `Since v1.3`"},{"lineNumber":273,"author":{"gitID":"-"},"content":"*Command format:* `find KEYWORD` +"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":276,"author":{"gitID":"-"},"content":"The `find` command is case-insensitive. +"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"*Description:* Finds all existing clients or vet technician containing the keyword provided."},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"Here is an example on how to use the `find` command: +"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"* `find jonny` +"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"//"},{"lineNumber":286,"author":{"gitID":"-"},"content":"Figure 10 below shows a populated client list."},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":".A populated client list."},{"lineNumber":289,"author":{"gitID":"-"},"content":"image::userguide_findCommand_image.PNG[width\u003d\"400\"]"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"//"},{"lineNumber":292,"author":{"gitID":"-"},"content":"Now let\u0027s execute the `find jonny` command. All persons with \"jonny\" in their name will now be listed"},{"lineNumber":293,"author":{"gitID":"-"},"content":"like like figure 11 below."},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"-"},"content":".The filtered persons and/or pet containing the word \"jonny\"."},{"lineNumber":296,"author":{"gitID":"-"},"content":"image::userguide_findCommand_image2.PNG[width\u003d\"1000\"]"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"//"},{"lineNumber":299,"author":{"gitID":"-"},"content":"Assuming you\u0027re trying to find a keyword that does not exist in any of the persons in the program."},{"lineNumber":300,"author":{"gitID":"-"},"content":"For example running `find hehehaha` will result in an output like the figure below."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":".The filtered list when the command finds no such persons or pet containing the keyword."},{"lineNumber":303,"author":{"gitID":"-"},"content":"image::userguide_findCommand_image3.PNG[width\u003d\"1000\"]"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"purplepers0n"},"content":"// tag::lists[]"},{"lineNumber":307,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d\u003d Listing all information: `listall` `Since v1.5`"},{"lineNumber":308,"author":{"gitID":"-"},"content":"*Command format:* `listall INDEX` +"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":311,"author":{"gitID":"-"},"content":"Index must be a positive integer. +"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"purplepers0n"},"content":"*Description:* Lists all the details of the client at the specified index, including all his/her pets and appointments. +"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"Here is an example of using the command `listall`: +"},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"* `listall 1`  +"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"//"},{"lineNumber":321,"author":{"gitID":"-"},"content":"Figure 13 below shows the outcome upon executing `listall 1`."},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":".The resulting output after executing `listall 1`."},{"lineNumber":324,"author":{"gitID":"-"},"content":"image::userguide_listallCommand_image.PNG[width\u003d\"400\"]"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing all clients: `list client` `Since v1.2`"},{"lineNumber":329,"author":{"gitID":"-"},"content":"*Command format:* `list client` +"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"*Description:* Lists all clients in the program. +"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"Here is an example of using the command: +"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"* `list client`"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"//"},{"lineNumber":338,"author":{"gitID":"-"},"content":"Figure 14 below shows the outcome of executing the `list client` command."},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":".Resulting output upon executing the `list client` command."},{"lineNumber":341,"author":{"gitID":"-"},"content":"image::userguide_findCommand_image.PNG[width\u003d\"400\"]"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing all vet technicians: `list vettech` `Since v1.2`"},{"lineNumber":345,"author":{"gitID":"-"},"content":"*Command format:* `list vettech` +"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"*Description:* Lists all vet technicians in the program. +"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"Here is an example of using the command: +"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"* `list vettech`"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"//"},{"lineNumber":354,"author":{"gitID":"-"},"content":"Figure 15 below shows the outcome of executing the `list vettech` command."},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":".Resulting output upon executing the `list vettech` command."},{"lineNumber":357,"author":{"gitID":"-"},"content":"image::userguide_listVettechCommand_image.PNG[width\u003d\"400\"]"},{"lineNumber":358,"author":{"gitID":"purplepers0n"},"content":"// end::lists[]"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d\u003d Sorting clients in alphabetical order: `sortc` `Since v1.4`"},{"lineNumber":361,"author":{"gitID":"-"},"content":"*Command format:* `sortc` +"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"*Description:* Sorts the client list alphabetically. +"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"Here\u0027s an example of using the command: +"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"* `sortc`"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"//"},{"lineNumber":370,"author":{"gitID":"-"},"content":"Figure 16 below shows an unsorted client list."},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":".The current list of clients in the program."},{"lineNumber":373,"author":{"gitID":"-"},"content":"image::userguide_sortcCommand_image.PNG[width\u003d\"400\"]"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"//"},{"lineNumber":376,"author":{"gitID":"-"},"content":"After executing the `sortc` command, the list will now be sorted alphabetically like the figure 16 below."},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"-"},"content":".The sorted client list in the program."},{"lineNumber":379,"author":{"gitID":"-"},"content":"image::userguide_sortcCommand_image2.PNG[width\u003d\"400\"]"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":""},{"lineNumber":383,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Pets \u0026 Appointment Related Commands"},{"lineNumber":384,"author":{"gitID":"jonathanwj"},"content":"This section explains the commands available that can be used to manage your pets and appointments."},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"// tag::addPetCommand[]"},{"lineNumber":387,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding a pet: `addp` `Since v1.2`"},{"lineNumber":388,"author":{"gitID":"-"},"content":"*Command format:* `addp c/CLIENT_INDEX pn/PET_NAME pa/PET_AGE pg/PET_GENDER t/PET_TAG...` +"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":391,"author":{"gitID":"-"},"content":"The client index must be a positive integer"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"-"},"content":"*Description:* Adds a pet to a client. +"},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"Here are some examples on using the `addp` command: +"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"jonathanwj"},"content":"* `addp c/1 pn/Garfield pa/10 pg/M t/cat t/tabby` +"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"* `addp c/1 pn/Scooby Doo pa/5 pg/M t/dog t/greatdane` +"},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"//"},{"lineNumber":403,"author":{"gitID":"-"},"content":"Figure 18 below shows the outcome of executing the `addp` commands in the examples above."},{"lineNumber":404,"author":{"gitID":"-"},"content":""},{"lineNumber":405,"author":{"gitID":"-"},"content":".The pet list of the program after executing the `addp` example commands."},{"lineNumber":406,"author":{"gitID":"-"},"content":"image::userguide_addpCommand_image.PNG[width\u003d\"400\"]"},{"lineNumber":407,"author":{"gitID":"-"},"content":"// end::addPetCommand[]"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"purplepers0n"},"content":"// tag::listp[]"},{"lineNumber":410,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Listing all pets: `list pet` `Since v1.2`"},{"lineNumber":411,"author":{"gitID":"-"},"content":"*Command format:* `list pet` +"},{"lineNumber":412,"author":{"gitID":"-"},"content":""},{"lineNumber":413,"author":{"gitID":"-"},"content":"*Description:* Lists all pets in the program."},{"lineNumber":414,"author":{"gitID":"-"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"//"},{"lineNumber":416,"author":{"gitID":"-"},"content":"Figure 19 below shows the outcome upon executing `list pet`."},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":".Resulting output upon executing the `list pet` command."},{"lineNumber":419,"author":{"gitID":"-"},"content":"image::userguide_addpCommand_image.PNG[width\u003d\"400\"]"},{"lineNumber":420,"author":{"gitID":"purplepers0n"},"content":"// end::listp[]"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"// tag::schedule[]"},{"lineNumber":423,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d\u003d Scheduling an appointment : `schedule` `Since v1.4`"},{"lineNumber":424,"author":{"gitID":"-"},"content":"*Command format:* schedule da/DATE tm/TIME du/DURATION desc/DESCRIPTION +"},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":427,"author":{"gitID":"-"},"content":"The date is in YYYY-MM-DD format. Year(YYYY) must be later than the current year \"2018\" +"},{"lineNumber":428,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":429,"author":{"gitID":"-"},"content":"The time is in HH:MM format and adapts the 24-hour format from 00:00 to 23:59. +"},{"lineNumber":430,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":431,"author":{"gitID":"-"},"content":"The duration can be any valid integer numbers from 15 to 120. +"},{"lineNumber":432,"author":{"gitID":"-"},"content":""},{"lineNumber":433,"author":{"gitID":"-"},"content":"*Description:* Schedules an appointment. +"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"Here is an example on how you can use the `schedule` command to mark appointment dates: +"},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"-"},"content":" `schedule da/2018-01-02 tm/14:30 du/60 desc/Sterilize Garfield when he\u0027s feeling better.`"},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"Figure 20 below shows the outcome after scheduling an appointment. +"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":".The appointment card being created after the command."},{"lineNumber":442,"author":{"gitID":"-"},"content":"image::userguide_schedule.PNG[width\u003d\"1000\"]"},{"lineNumber":443,"author":{"gitID":"-"},"content":"// end::schedule[]"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"// tag::addAppointmentToPetCommand[]"},{"lineNumber":446,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Adding an appointment to a pet: `addappttopet` `Since v1.3`"},{"lineNumber":447,"author":{"gitID":"-"},"content":"*Command format:* `addappttopet appt/APPOINTMENT_INDEX p/PET_INDEX` +"},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":450,"author":{"gitID":"-"},"content":"Both appointment and pet indexes must be a positive integer."},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"*Description:* Adds an appointment to a specified pet."},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":455,"author":{"gitID":"-"},"content":"You need to schedule an appointment first before executing `addappttopet` command."},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"-"},"content":"Here\u0027s an example on using the `addappttopet` command: +"},{"lineNumber":458,"author":{"gitID":"-"},"content":""},{"lineNumber":459,"author":{"gitID":"-"},"content":"* `addappttopet appt/1 p/1` +"},{"lineNumber":460,"author":{"gitID":"-"},"content":""},{"lineNumber":461,"author":{"gitID":"-"},"content":"//"},{"lineNumber":462,"author":{"gitID":"-"},"content":"Figure 21 below shows the status of the program before executing the command given in the example above."},{"lineNumber":463,"author":{"gitID":"-"},"content":""},{"lineNumber":464,"author":{"gitID":"-"},"content":".Current state of pet and appointment status in the program."},{"lineNumber":465,"author":{"gitID":"-"},"content":"image::userguide_scheduleCommand_image.PNG[width\u003d\"1000\"]"},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"-"},"content":"//"},{"lineNumber":468,"author":{"gitID":"-"},"content":"Executing the command `addappttopet appt/1 p/1` will result in the following output like figure 22 below."},{"lineNumber":469,"author":{"gitID":"-"},"content":"Now the appointment is booked for Garfield."},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":".The appointment card being updated after the command."},{"lineNumber":472,"author":{"gitID":"-"},"content":"image::userguide_addappttopetCommand_image.PNG[width\u003d\"1000\"]"},{"lineNumber":473,"author":{"gitID":"-"},"content":"// end::addAppointmentToPetCommand[]"},{"lineNumber":474,"author":{"gitID":"-"},"content":""},{"lineNumber":475,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d\u003d Adding a vet technician to a appointment: `addvettechtoappointment` `Since v1.4`"},{"lineNumber":476,"author":{"gitID":"-"},"content":"*Command format:* `addvettechtoappointment vt/VETTECH_INDEX appt/APPOINTMENT_INDEX` +"},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":479,"author":{"gitID":"-"},"content":"Both vettech and appointment index must be a positive integer."},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"jonathanwj"},"content":"*Description:* Adds a vet technician to a scheduled appointment. +"},{"lineNumber":482,"author":{"gitID":"-"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":484,"author":{"gitID":"-"},"content":"An appointment needs to be scheduled first before assigning a vet technician to it."},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":""},{"lineNumber":487,"author":{"gitID":"-"},"content":"Here\u0027s an example on using the `addvettechtoappointment` command: +"},{"lineNumber":488,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":489,"author":{"gitID":"jonathanwj"},"content":"* `addvettechtoappointment vt/1 appt/1` +"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"//"},{"lineNumber":492,"author":{"gitID":"-"},"content":"Figure 23 below shows the current state of the program before executing the command given in the example above."},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":".The current state of the program with 1 vet technician and 1 appointment card booked for Garfield."},{"lineNumber":495,"author":{"gitID":"-"},"content":"image::userguide_addvettechtoapptCommand_image.PNG[width\u003d\"1000\"]"},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"//"},{"lineNumber":498,"author":{"gitID":"-"},"content":"Figure 24 below shows the outcome after executing the command."},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"jonathanwj"},"content":".The resulting output after executing the command."},{"lineNumber":501,"author":{"gitID":"-"},"content":"image::userguide_addvettechtoapptCommand_image2.PNG[width\u003d\"1000\"]"},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"// tag::deletePetCommand[]"},{"lineNumber":504,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Removing a pet: `deletep` `Since v1.2`"},{"lineNumber":505,"author":{"gitID":"-"},"content":"*Command format:* `deletep INDEX` +"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":508,"author":{"gitID":"-"},"content":"Index must be a positive integer."},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"*Description:* Removes the specified pet from the program. +"},{"lineNumber":511,"author":{"gitID":"-"},"content":""},{"lineNumber":512,"author":{"gitID":"-"},"content":"Here is an example of using the command `deletep`: +"},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"* `deletep 1` +"},{"lineNumber":515,"author":{"gitID":"-"},"content":""},{"lineNumber":516,"author":{"gitID":"-"},"content":"//"},{"lineNumber":517,"author":{"gitID":"-"},"content":"The figure 25 below shows the results of executing the `deletep 1` command."},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":".The results of exectuing the `deletep 1` command."},{"lineNumber":520,"author":{"gitID":"-"},"content":"image::userguide_deletepCommand_image.PNG[width\u003d\"1000\"]"},{"lineNumber":521,"author":{"gitID":"-"},"content":"// end::deletePetCommand[]"},{"lineNumber":522,"author":{"gitID":"-"},"content":""},{"lineNumber":523,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing a pet\u0027s appointment: `editappt` `coming v2.0`"},{"lineNumber":524,"author":{"gitID":"-"},"content":"*Command format:* `editappt n/CLIENT_NAME pn/PET_NAME [date/DATE (DD.MM.YYYY)] [time/TIME (HHMM)] [vettech/VET_TECHNICIAN_NAME] [cmt/COMMENTS]` +"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"*Description:* Edits a specified appointment. +"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":""},{"lineNumber":529,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Editing a pet\u0027s details: `editp` `coming v2.0`"},{"lineNumber":530,"author":{"gitID":"-"},"content":"*Command format:* `editp INDEX [pn/PET_NAME] [pa/PET_AGE] [pg/PET_GENDER] [t/PET_TAGS]...` +"},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"*Description:* Edits a specified pet\u0027s details. +"},{"lineNumber":533,"author":{"gitID":"-"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"// tag::unscheduleCommand[]"},{"lineNumber":535,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Unscheduling an appointment: `unschedule` `since v1.5`"},{"lineNumber":536,"author":{"gitID":"-"},"content":"*Command format:* `unschedule INDEX` +"},{"lineNumber":537,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":538,"author":{"gitID":"-"},"content":"Index must be a positive integer."},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"*Description:* Removes the specified appointment from the program. +"},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"Here is an example of using the `unschedule` command: +"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"* `unschedule 1` +"},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"//"},{"lineNumber":547,"author":{"gitID":"-"},"content":"Figure 26 below shows the current state of your program before executing `unschedule 1`."},{"lineNumber":548,"author":{"gitID":"-"},"content":""},{"lineNumber":549,"author":{"gitID":"-"},"content":".The current status of appointments in your program."},{"lineNumber":550,"author":{"gitID":"-"},"content":"image::userguide_unscheduleCommand_image.PNG[width\u003d\"1000\"]"},{"lineNumber":551,"author":{"gitID":"-"},"content":""},{"lineNumber":552,"author":{"gitID":"-"},"content":"//"},{"lineNumber":553,"author":{"gitID":"-"},"content":"Figure 27 below shows the outcome after executing the command."},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"-"},"content":".The resulting output after executing the `unschedule 1` command."},{"lineNumber":556,"author":{"gitID":"-"},"content":"image::userguide_unscheduleCommand_image2.PNG[width\u003d\"1000\"]"},{"lineNumber":557,"author":{"gitID":"-"},"content":"// end::unscheduleCommand[]"},{"lineNumber":558,"author":{"gitID":"-"},"content":""},{"lineNumber":559,"author":{"gitID":"-"},"content":"// tag::removeAppointmentFromPetCommand[]"},{"lineNumber":560,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d\u003d Removing an appointment from a pet: `removeapptfrompet` `since v1.3`"},{"lineNumber":561,"author":{"gitID":"-"},"content":"Command format: `removeapptfrompet appt/APPOINTMENT_INDEX` +"},{"lineNumber":562,"author":{"gitID":"-"},"content":""},{"lineNumber":563,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":564,"author":{"gitID":"-"},"content":"Appointment index must be a positive integer."},{"lineNumber":565,"author":{"gitID":"-"},"content":""},{"lineNumber":566,"author":{"gitID":"-"},"content":"*Description:* Removes the specified appointment tagged to a pet. +"},{"lineNumber":567,"author":{"gitID":"-"},"content":""},{"lineNumber":568,"author":{"gitID":"-"},"content":"Here is an example of using the command `removeapptfrompet`: +"},{"lineNumber":569,"author":{"gitID":"-"},"content":""},{"lineNumber":570,"author":{"gitID":"jonathanwj"},"content":"* `removeapptfrompet appt/1` +"},{"lineNumber":571,"author":{"gitID":"-"},"content":""},{"lineNumber":572,"author":{"gitID":"-"},"content":"//"},{"lineNumber":573,"author":{"gitID":"-"},"content":"Figure 28 below shows the current state of your program before executing `removeapptfrompet appt/1`."},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":".Current state of program before running `removeapptfrompet` command."},{"lineNumber":576,"author":{"gitID":"-"},"content":"image::userguide_removeapptfrompetCommand_image.PNG[width\u003d\"1000\"]"},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"//"},{"lineNumber":579,"author":{"gitID":"-"},"content":"Figure 29 below shows the outcome after executing the command."},{"lineNumber":580,"author":{"gitID":"-"},"content":""},{"lineNumber":581,"author":{"gitID":"-"},"content":".State of program after removing the appt from the pet."},{"lineNumber":582,"author":{"gitID":"-"},"content":"image::userguide_removeapptfrompetCommand_image2.PNG[width\u003d\"1000\"]"},{"lineNumber":583,"author":{"gitID":"-"},"content":"// end::removeAppointmentFromPetCommand[]"},{"lineNumber":584,"author":{"gitID":"-"},"content":""},{"lineNumber":585,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d\u003d Removing a vet technician from an appointment: `removevettechfromappt` `Since v1.4`"},{"lineNumber":586,"author":{"gitID":"-"},"content":"*Command format:* `removevettechfromappt INDEX` +"},{"lineNumber":587,"author":{"gitID":"-"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":589,"author":{"gitID":"-"},"content":"Index must be a positive integer."},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"*Description:* Removes the assigned vet technicians from the specified appointment. +"},{"lineNumber":592,"author":{"gitID":"-"},"content":""},{"lineNumber":593,"author":{"gitID":"jonathanwj"},"content":"Here is an example of using the command `removevettechfromappt`: +"},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"jonathanwj"},"content":"* `removevettechfromappt 1` +"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"-"},"content":"//"},{"lineNumber":598,"author":{"gitID":"-"},"content":"Figure 30 below shows the current state of program before executing `removevettechfromappt 1`."},{"lineNumber":599,"author":{"gitID":"-"},"content":""},{"lineNumber":600,"author":{"gitID":"-"},"content":".The appointment card with assigned vet technician Rebecca Ling"},{"lineNumber":601,"author":{"gitID":"-"},"content":"image::userguide_addvettechtoapptCommand_image2.PNG[width\u003d\"1000\"]"},{"lineNumber":602,"author":{"gitID":"-"},"content":""},{"lineNumber":603,"author":{"gitID":"-"},"content":"//"},{"lineNumber":604,"author":{"gitID":"-"},"content":"Calling the command will result in the output shown in figure 31 below."},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":".The resulting output after calling `removevettechfromappt 1` command"},{"lineNumber":607,"author":{"gitID":"-"},"content":"image::userguide_removevettech_image.PNG[width\u003d\"1000\"]"},{"lineNumber":608,"author":{"gitID":"-"},"content":""},{"lineNumber":609,"author":{"gitID":"-"},"content":"// tag::reschedule[]"},{"lineNumber":610,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d\u003d Rescheduling an appointment : `reschedule` `Since v1.4`"},{"lineNumber":611,"author":{"gitID":"-"},"content":"*Command format:* `reschedule INDEX [da/DATE] [tm/TIME] [du/DURATION] [desc/DESCRIPTION] +"},{"lineNumber":612,"author":{"gitID":"-"},"content":""},{"lineNumber":613,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":614,"author":{"gitID":"-"},"content":"Index provided must be a positive integer. +"},{"lineNumber":615,"author":{"gitID":"-"},"content":""},{"lineNumber":616,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":617,"author":{"gitID":"-"},"content":"At least one parameter must be provided. +"},{"lineNumber":618,"author":{"gitID":"-"},"content":"eg. `reschedule 1` is an invalid command."},{"lineNumber":619,"author":{"gitID":"-"},"content":""},{"lineNumber":620,"author":{"gitID":"-"},"content":"*Description:* Reschedules or amends the description of the specified appointment."},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"-"},"content":"Here are some examples on using the command: +"},{"lineNumber":623,"author":{"gitID":"-"},"content":""},{"lineNumber":624,"author":{"gitID":"-"},"content":"* `reschedule 1 tm/15:30` +"},{"lineNumber":625,"author":{"gitID":"-"},"content":""},{"lineNumber":626,"author":{"gitID":"-"},"content":"Figure 32 below shows the current state of the appointment card before rescheduling. +"},{"lineNumber":627,"author":{"gitID":"-"},"content":""},{"lineNumber":628,"author":{"gitID":"-"},"content":".Current state of program before executing `reschedule`"},{"lineNumber":629,"author":{"gitID":"-"},"content":"image::userguide_reschedule1.1.PNG[width\u003d\"1000\"]"},{"lineNumber":630,"author":{"gitID":"-"},"content":""},{"lineNumber":631,"author":{"gitID":"-"},"content":"Figure 33 below shows the outcome after rescheduling the appointment. +"},{"lineNumber":632,"author":{"gitID":"-"},"content":""},{"lineNumber":633,"author":{"gitID":"-"},"content":".Current state of program before executing `reschedule`"},{"lineNumber":634,"author":{"gitID":"-"},"content":"image::userguide_reschedule1.2.PNG[width\u003d\"1000\"]"},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"* `reschedule 1 da/2018-02-01 du/90` +"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"Figure 34 below shows the current state of the appointment card before rescheduling. +"},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":".Current state of program before executing `reschedule`"},{"lineNumber":641,"author":{"gitID":"-"},"content":"image::userguide_reschedule2.1.PNG[width\u003d\"1000\"]"},{"lineNumber":642,"author":{"gitID":"-"},"content":""},{"lineNumber":643,"author":{"gitID":"-"},"content":"Figure 35 below shows the outcome after rescheduling the appointment. +"},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":".Current state of program before executing `reschedule`"},{"lineNumber":646,"author":{"gitID":"-"},"content":"image::userguide_reschedule2.2.PNG[width\u003d\"1000\"]"},{"lineNumber":647,"author":{"gitID":"-"},"content":"// end::reschedule[]"},{"lineNumber":648,"author":{"gitID":"-"},"content":""},{"lineNumber":649,"author":{"gitID":"-"},"content":"// tag::sortpCommand[]"},{"lineNumber":650,"author":{"gitID":"-"},"content":""},{"lineNumber":651,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d\u003d Sorting pets in alphabetical order: `sortp` `Since v1.4`"},{"lineNumber":652,"author":{"gitID":"-"},"content":"*Command format:* `sortp` +"},{"lineNumber":653,"author":{"gitID":"-"},"content":""},{"lineNumber":654,"author":{"gitID":"-"},"content":"*Description:* Sorts the pet list alphabetically."},{"lineNumber":655,"author":{"gitID":"-"},"content":""},{"lineNumber":656,"author":{"gitID":"-"},"content":"Here is an example of using the command: +"},{"lineNumber":657,"author":{"gitID":"-"},"content":""},{"lineNumber":658,"author":{"gitID":"-"},"content":"* `sortp`"},{"lineNumber":659,"author":{"gitID":"-"},"content":""},{"lineNumber":660,"author":{"gitID":"-"},"content":"//"},{"lineNumber":661,"author":{"gitID":"-"},"content":"Figure 34 below shows the current state of the pet list before sorting it."},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":".Populated pet list view"},{"lineNumber":664,"author":{"gitID":"-"},"content":"image::userguide_sortpCommand_image.PNG[width\u003d\"500\"]"},{"lineNumber":665,"author":{"gitID":"-"},"content":""},{"lineNumber":666,"author":{"gitID":"-"},"content":""},{"lineNumber":667,"author":{"gitID":"-"},"content":"//"},{"lineNumber":668,"author":{"gitID":"-"},"content":"Figure 35 below shows the outcome after executing `sortp`."},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":".Sorted pet list"},{"lineNumber":671,"author":{"gitID":"-"},"content":"image::userguide_sortpCommand_image.PNG[width\u003d\"500\"]"},{"lineNumber":672,"author":{"gitID":"-"},"content":"// end::sortpCommand[]"},{"lineNumber":673,"author":{"gitID":"-"},"content":""},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":""},{"lineNumber":676,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":679,"author":{"gitID":"-"},"content":""},{"lineNumber":680,"author":{"gitID":"-"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous VetterAppointments folder. +"},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"*Q*: My program crashed halfway. Will all the data be safe? +"},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"*A*: Yes it will. VetterAppointments ensures that all modification to the program data will be saved. +"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"jonathanwj"},"content":"*Q*: The commands are long. Is there anyway to speed up the process? +"},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"jonathanwj"},"content":"*A*: Yes there is! We have a keyboard shortcut that you might find useful."},{"lineNumber":689,"author":{"gitID":"jonathanwj"},"content":"See \u003c\u003cSection 6.Keyboard_shortcuts, Keyboard Shortcuts\u003e\u003e for more details."},{"lineNumber":690,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":691,"author":{"gitID":"jonathanwj"},"content":"// tag::keyboardshortcuts[]"},{"lineNumber":692,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d Keyboard Shortcuts"},{"lineNumber":693,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":694,"author":{"gitID":"jonathanwj"},"content":"This section shows you the different keyboard shortcuts that are available in VetterAppointments. +"},{"lineNumber":695,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":696,"author":{"gitID":"jonathanwj"},"content":"The table below shows a list of shortcuts you can use. +"},{"lineNumber":697,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":698,"author":{"gitID":"jonathanwj"},"content":"[width\u003d\"100%\"]"},{"lineNumber":699,"author":{"gitID":"jonathanwj"},"content":"[cols\u003d\"3,1\"]"},{"lineNumber":700,"author":{"gitID":"jonathanwj"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":701,"author":{"gitID":"jonathanwj"},"content":"|*Result* |*Shortcut*"},{"lineNumber":702,"author":{"gitID":"jonathanwj"},"content":"|Clears the Command Box |kbd:[Esc]"},{"lineNumber":703,"author":{"gitID":"jonathanwj"},"content":"|Auto-complete your text input |kbd:[Tab]"},{"lineNumber":704,"author":{"gitID":"jonathanwj"},"content":"|Switches panel selection forward |kbd:[Control]+kbd:[Tab]"},{"lineNumber":705,"author":{"gitID":"jonathanwj"},"content":"|Switches panel selection backward |kbd:[Shift]+kbd:[Tab]"},{"lineNumber":706,"author":{"gitID":"jonathanwj"},"content":"|\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":707,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":708,"author":{"gitID":"jonathanwj"},"content":"[NOTE]"},{"lineNumber":709,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":710,"author":{"gitID":"jonathanwj"},"content":"Pressing the kbd:[Tab] key twice will provide you with suggestions of your current command input. +"},{"lineNumber":711,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":712,"author":{"gitID":"jonathanwj"},"content":"* Here is an example of using the auto-complete functionality: +"},{"lineNumber":713,"author":{"gitID":"jonathanwj"},"content":"Suppose you want to type a command `addvettechtoappointment` but it is a hassle to type out the full command. +"},{"lineNumber":714,"author":{"gitID":"jonathanwj"},"content":"In this scenario you can type `addv` and press kbd:[Tab] to auto-complete your `addv` input to `addvettechtoappointment` +"},{"lineNumber":715,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":716,"author":{"gitID":"jonathanwj"},"content":"* Pressing the kbd:[Tab] after a completed command that has a following space will provide you with the next available input parameter for the command."},{"lineNumber":717,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":718,"author":{"gitID":"jonathanwj"},"content":"// end::keyboardshortcuts[]"},{"lineNumber":719,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":""},{"lineNumber":721,"author":{"gitID":"-"},"content":"// tag::commandSummaryTable[]"},{"lineNumber":722,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":723,"author":{"gitID":"-"},"content":"This section provides a quick summary of all the available commands in the program."},{"lineNumber":724,"author":{"gitID":"-"},"content":"It\u0027s categorized neatly so you can find the command that you want easily."},{"lineNumber":725,"author":{"gitID":"-"},"content":""},{"lineNumber":726,"author":{"gitID":"-"},"content":"//sorted alphabetically"},{"lineNumber":727,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Client \u0026 Vet Tech Summarized Table"},{"lineNumber":728,"author":{"gitID":"-"},"content":"The table below lists and summarizes all the commands that are related to the persons in your"},{"lineNumber":729,"author":{"gitID":"-"},"content":"program. You can head to the respective section on the commands if you want to"},{"lineNumber":730,"author":{"gitID":"-"},"content":"know more about them."},{"lineNumber":731,"author":{"gitID":"-"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":"[width\u003d\"100%\"]"},{"lineNumber":733,"author":{"gitID":"jonathanwj"},"content":"[cols\u003d\"1,4,4\"]"},{"lineNumber":734,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":735,"author":{"gitID":"-"},"content":"|*Command* |*Command Format* |*Description*"},{"lineNumber":736,"author":{"gitID":"-"},"content":"|add |`add r/ROLE n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]…` |Adds a person into the program."},{"lineNumber":737,"author":{"gitID":"jonathanwj"},"content":"|delete |`delete INDEX` |Removes a client/vettech from the program based on index."},{"lineNumber":738,"author":{"gitID":"-"},"content":"|edit |`edit INDEX [n/ROLE] [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` |Edits a person\u0027s details."},{"lineNumber":739,"author":{"gitID":"-"},"content":"|find |`find KEYWORD` |Finds a client with keyword."},{"lineNumber":740,"author":{"gitID":"-"},"content":"|listall |`listall INDEX` |Lists all details for a particular client."},{"lineNumber":741,"author":{"gitID":"purplepers0n"},"content":"|list client |`list client` |Lists all clients."},{"lineNumber":742,"author":{"gitID":"purplepers0n"},"content":"|list vettech |`list vettech` |Lists all vet technicians."},{"lineNumber":743,"author":{"gitID":"-"},"content":"|sortc |`sortc` |Sorts the client list alphabetically."},{"lineNumber":744,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":745,"author":{"gitID":"-"},"content":""},{"lineNumber":746,"author":{"gitID":"-"},"content":"//sorted alphabetically"},{"lineNumber":747,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Pets \u0026 Appointments Summarized Table"},{"lineNumber":748,"author":{"gitID":"-"},"content":"The table below lists and summarizes all the commands that are related to the pets and appointments"},{"lineNumber":749,"author":{"gitID":"-"},"content":"in your program. You can head to the respective section on the commands if you want to know more"},{"lineNumber":750,"author":{"gitID":"-"},"content":"about them."},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":"[width\u003d\"100%\"]"},{"lineNumber":753,"author":{"gitID":"jonathanwj"},"content":"[cols\u003d\"1,4,4\"]"},{"lineNumber":754,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":755,"author":{"gitID":"-"},"content":"|*Command* |*Command Format* |*Description*"},{"lineNumber":756,"author":{"gitID":"-"},"content":"|addappttopet |`addapptto appt/APPOINTMENT_INDEX p/PET_INDEX` |Adds an appointment to a pet."},{"lineNumber":757,"author":{"gitID":"-"},"content":"|addp |`addp n/CLIENT_INDEX pn/PET_NAME pa/PET_AGE pg/PET_GENDER t/PET_TAG…​` |Adds a pet to a client."},{"lineNumber":758,"author":{"gitID":"jonathanwj"},"content":"|addvettechtoappointment |`addvettechtoappointment vt/VETTECH_INDEX appt/APPOINTMENT_INDEX​` |Adds a vet technician to an appointment."},{"lineNumber":759,"author":{"gitID":"-"},"content":"|deletep |`deletep INDEX` |Removes a pet from the program based on index."},{"lineNumber":760,"author":{"gitID":"jonathanwj"},"content":"|editappt |`editappt n/CLIENT_NAME pn/PET_NAME +"},{"lineNumber":761,"author":{"gitID":"jonathanwj"},"content":"[date/DATE (DD.MM.YYYY)] +"},{"lineNumber":762,"author":{"gitID":"jonathanwj"},"content":"[time/TIME (HHMM)] +"},{"lineNumber":763,"author":{"gitID":"jonathanwj"},"content":"[vettech/VET_TECHNICIAN_NAME] +"},{"lineNumber":764,"author":{"gitID":"jonathanwj"},"content":"[cmt/COMMENTS]` |Edits an appointment\u0027s details."},{"lineNumber":765,"author":{"gitID":"-"},"content":"|editp |`editp INDEX [pn/PET_NAME] [pa/PET_AGE] [pg/PET_GENDER] [t/PET_TAGS]…​` |Edits a pet\u0027s details."},{"lineNumber":766,"author":{"gitID":"purplepers0n"},"content":"|list pet |`list pet` |Lists all pets."},{"lineNumber":767,"author":{"gitID":"jonathanwj"},"content":"|reschedule |`reschedule INDEX [da/DATE] [tm/TIME] [du/DURATION] [DESC/DESCRIPTION]` | Reschedules an appointment."},{"lineNumber":768,"author":{"gitID":"jonathanwj"},"content":"|removeapptfrompet |`removeapptfrompet p/PET_INDEX` |Removes an appointment from a pet."},{"lineNumber":769,"author":{"gitID":"jonathanwj"},"content":"|removevettechfromappt |`removevettechfromappt INDEX` |Removes a vet technician from appointment based on index."},{"lineNumber":770,"author":{"gitID":"jonathanwj"},"content":"|schedule | `schedule da/DATE tm/TIME du/DURATION desc/DESCRIPTION` |Schedules an appointment given date (YYYY-MM-DD), time (HH:MM), duration (minutes) and description."},{"lineNumber":771,"author":{"gitID":"-"},"content":"|sortp |`sortp` |Sorts the pet list alphabetically."},{"lineNumber":772,"author":{"gitID":"-"},"content":"|unschedule |`unschedule INDEX` |Unschedules an appointment from the program."},{"lineNumber":773,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":774,"author":{"gitID":"-"},"content":""},{"lineNumber":775,"author":{"gitID":"-"},"content":"//sorted alphabetically"},{"lineNumber":776,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Program and Shared Summarized Table"},{"lineNumber":777,"author":{"gitID":"-"},"content":"The table below shows commands that are program based. These commands have no relation to your"},{"lineNumber":778,"author":{"gitID":"-"},"content":"clients, staff, pets and appointments. They\u0027re solely for the program."},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"[width\u003d\"100%\"]"},{"lineNumber":781,"author":{"gitID":"jonathanwj"},"content":"[cols\u003d\"1,2,3\"]"},{"lineNumber":782,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":783,"author":{"gitID":"-"},"content":"|*Command* |*Command Format* |*Description*"},{"lineNumber":784,"author":{"gitID":"-"},"content":"|clear |`clear` |Deletes all data of the program."},{"lineNumber":785,"author":{"gitID":"-"},"content":"|exit |`exit` |Exits the program."},{"lineNumber":786,"author":{"gitID":"-"},"content":"|help |`help` |Displays the user guide."},{"lineNumber":787,"author":{"gitID":"-"},"content":"|history |`history` |Lists the history of commands executed."},{"lineNumber":788,"author":{"gitID":"-"},"content":"|redo |`redo` |Redo the undo command executed."},{"lineNumber":789,"author":{"gitID":"-"},"content":"|undo |`undo` |Undo the previous command executed."},{"lineNumber":790,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":791,"author":{"gitID":"-"},"content":"// end::commandSummaryTable[]"}],"authorContributionMap":{"jonathanwj":90,"purplepers0n":13,"-":688}},{"path":"docs/team/JonathanWeng.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"\u003d Jonathan Weng - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":":experimental:"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d PROJECT: VetterAppointments"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"---"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d Overview"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"VetterAppointments is a desktop application made for vets to manage appointments, clients, pets and staff. The application has a graphical user interface (GUI) created with JavaFX and works via a command line interface (CLI) where users can enter single line commands to interact with the application. +"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"This project is part of a NUS CS2103T module. VetterAppointments was created by building upon an existing code base of the AddressBook-Level 4 project by https://github.com/se-edu/[SE-EDU] initiative. The application is written in Java and has about 20kLOC."},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"This portfolio showcases of some notable contributions that I have made for the CS2103T project. It can be used for the evaluation of my coursework and learning progress from the CS2103T module."},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"* *Major enhancement*: added the *autocomplete* functionality +"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"** What it does: provides the user with suggestions for completing their commands and allows the user to autocomplete their command by pressing tab."},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"** Justification: This feature improves the product significantly because some commands of the application are long. A user can quickly enter the command they wish to type by using this autocomplete feature."},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"** Highlights: This enhancement is an additional component to the existing code base, little modification of the existing code base was required. However, the modification of the UI logic was required to handle the tab key press."},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"* *Minor enhancement*: added the support for *adding and removing clients and vet technicians* in the application +"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"** List of new/modified command enhancements:"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"*** AddCommand"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"*** DeleteCommand"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"*** EditCommand"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"*** AddVetTechToAppointentCommand"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"*** RemoveVetTechFromAppointmentCommand"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F09-B4/main/blob/master/collated/functional/jonathanwj.md[Functional code]] [https://github.com/CS2103JAN2018-F09-B4/main/blob/master/collated/functional/jonathanwj-reused.md[Reused Functional code]] [https://github.com/CS2103JAN2018-F09-B4/main/blob/master/collated/test/jonathanwj.md[Test code]] [https://github.com/CS2103JAN2018-F09-B4/main/blob/master/collated/test/jonathanwj-reused.md[Reused Test code]] [https://github.com/CS2103JAN2018-F09-B4/main/blob/master/collated/unused/jonathanwj-unused.md[Unused code]]"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"* *Other contributions*:"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"** Project management:"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"*** Managed Github issue tracker"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"** Documentation:"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"*** Tweaked and improved existing contents of the User Guide:"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"https://github.com/CS2103JAN2018-F09-B4/main/pull/210[#210],"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"https://github.com/CS2103JAN2018-F09-B4/main/pull/255[#255]"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"** Community:"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"*** PRs reviewed with discussions (with non-trivial review comments): https://github.com/CS2103JAN2018-F09-B4/main/issues/141[#141],"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"https://github.com/CS2103JAN2018-F09-B4/main/issues/159[#159],"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"https://github.com/CS2103JAN2018-F09-B4/main/issues/167[#167]"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"*** Contributed to discussions (examples:"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"https://github.com/CS2103JAN2018-F09-B4/main/issues/251[1],"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"https://github.com/CS2103JAN2018-F09-B4/main/issues/178[2],"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"https://github.com/CS2103JAN2018-F09-B4/main/issues/177[3])"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-W13-B1/main/issues/154[1],"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"https://github.com/CS2103JAN2018-W13-B1/main/issues/146[2],"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"https://github.com/CS2103JAN2018-W13-B1/main/issues/143[3],"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"https://github.com/CS2103JAN2018-W13-B1/main/issues/145[4])"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"** Tools:"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"*** Integrated Travis CI, Appveyor, Coveralls to the team repo"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":62,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":63,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":":figure-number: 4"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"---"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"include::../UserGuide.adoc[tag\u003dremoveperson]"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"---"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"include::../UserGuide.adoc[tag\u003dkeyboardshortcuts, leveloffset\u003d+1]"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":78,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":79,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"---"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"include::../DeveloperGuide.adoc[tag\u003dautocomplete]"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"---"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"include::../DeveloperGuide.adoc[tag\u003dentitymodel]"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":""}],"authorContributionMap":{"jonathanwj":77,"-":11}},{"path":"unused/AddPetToClientCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPetAtIndex;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PET;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":31,"content":"//@@author jonathanwj-unused"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"// Entire command was merged into AddPetCommand that"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"// currently creates a pet and adds that pet to the client in one command."},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":" * and unit tests for AddPetToClientCommand."},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"public class AddPetToClientCommandTest {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"    public void execute_petFilteredList_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        showPetAtIndex(model, INDEX_FIRST_PET);"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        showClientAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        Pet petInFilteredList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d String.format(AddPetToClientCommand.MESSAGE_ADD_PET_TO_CLIENT_SUCCESS,"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"                petInFilteredList, clientInFilteredList);"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addPetToClient(model.getFilteredPetList().get(0), model.getFilteredClientList().get(0));"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(aptcCommand, model, expectedMessage, expectedModel);"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexPet \u003d Index.fromOneBased(model.getFilteredPetList().size() + 1);"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexClient \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(outOfBoundIndexPet, INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(aptcCommand, model, Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, outOfBoundIndexClient);"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(aptcCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"        showClientAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexClient \u003d INDEX_SECOND_PERSON;"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(outOfBoundIndexClient.getZeroBased() \u003c model.getAddressBook().getClientList().size());"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, outOfBoundIndexClient);"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(aptcCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        showPetAtIndex(model, INDEX_FIRST_PET);"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexPet \u003d INDEX_SECOND_PET;"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(outOfBoundIndexPet.getZeroBased() \u003c model.getAddressBook().getClientList().size());"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand \u003d prepareCommand(outOfBoundIndexPet, INDEX_FIRST_PERSON);"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(aptcCommand, model, Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"        // add -\u003e pet added to client"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand.execute();"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"        undoRedoStack.push(aptcCommand);"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered lists to show all"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"        // redo -\u003e add pet back to client"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addPetToClient(model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased()),"},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"                model.getFilteredClientList().get(INDEX_FIRST_PET.getZeroBased()));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexPet \u003d Index.fromOneBased(model.getFilteredPetList().size() + 1);"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexClient \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(outOfBoundIndexPet, outOfBoundIndexClient);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":136,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(aptcCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":"     * 1. Adss a {@code Pet} To a {@code Client} from filtered lists."},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":"     * 2. Undo the command."},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"     * 3. The unfiltered lists should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":148,"author":{"gitID":"jonathanwj"},"content":"     * 4. Redo the command. This ensures {@code RedoCommand} adds the pet to client object regardless of indexing."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":155,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":156,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"jonathanwj"},"content":"        showPetAtIndex(model, INDEX_SECOND_PET);"},{"lineNumber":160,"author":{"gitID":"jonathanwj"},"content":"        showClientAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":161,"author":{"gitID":"jonathanwj"},"content":"        Pet petToAdd \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":162,"author":{"gitID":"jonathanwj"},"content":"        Client clientToAddPetTo \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":163,"author":{"gitID":"jonathanwj"},"content":"        // add -\u003e add first client in filtered client list and the first pet in filtered pet list"},{"lineNumber":164,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand.execute();"},{"lineNumber":165,"author":{"gitID":"jonathanwj"},"content":"        undoRedoStack.push(aptcCommand);"},{"lineNumber":166,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":167,"author":{"gitID":"jonathanwj"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all clients and pets"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"jonathanwj"},"content":"        assertNotEquals(model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased()), petToAdd);"},{"lineNumber":171,"author":{"gitID":"jonathanwj"},"content":"        assertNotEquals(model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased()), clientToAddPetTo);"},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":173,"author":{"gitID":"jonathanwj"},"content":"        // redo -\u003e add the same pet to client in unfiltered lists"},{"lineNumber":174,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addPetToClient(petToAdd, clientToAddPetTo);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":176,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":178,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"jonathanwj"},"content":"    public void execute_addPetToClient_success() throws Exception {"},{"lineNumber":180,"author":{"gitID":"jonathanwj"},"content":"        Pet petInFilteredList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":181,"author":{"gitID":"jonathanwj"},"content":"        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":182,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":184,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addPetToClient(petInFilteredList, clientInFilteredList);"},{"lineNumber":185,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d String.format(AddPetToClientCommand.MESSAGE_ADD_PET_TO_CLIENT_SUCCESS,"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":"                petInFilteredList, clientInFilteredList);"},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(aptcCommand, model, expectedMessage, expectedModel);"},{"lineNumber":191,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"jonathanwj"},"content":"    public void execute_clientAlreadyOwnsPet_throwsCommandException() throws Exception {"},{"lineNumber":195,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":196,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand.execute();"},{"lineNumber":197,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":198,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(aptcCommand, model, AddPetToClientCommand.MESSAGE_CLIENT_HAS_PET);"},{"lineNumber":199,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"jonathanwj"},"content":"    public void execute_petAlreadyHasOwner_throwsCommandException() throws Exception {"},{"lineNumber":203,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":204,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand.execute();"},{"lineNumber":205,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_SECOND_PERSON);"},{"lineNumber":206,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":207,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(aptcCommand, model, AddPetToClientCommand.MESSAGE_PET_HAS_OWNER);"},{"lineNumber":208,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":210,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"jonathanwj"},"content":"    public void equals() throws Exception {"},{"lineNumber":212,"author":{"gitID":"jonathanwj"},"content":"        final AddPetToClientCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":213,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":214,"author":{"gitID":"jonathanwj"},"content":"        // same values -\u003e returns true"},{"lineNumber":215,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":232,"author":{"gitID":"jonathanwj"},"content":"        assertFalse(standardCommand.equals(new AddPetToClientCommand(INDEX_SECOND_PET, INDEX_SECOND_PERSON)));"},{"lineNumber":233,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":234,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":236,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":237,"author":{"gitID":"jonathanwj"},"content":"     * Returns an {@code AddPetToClientCommand} with parameters pet {@code index} and client {@code index}"},{"lineNumber":238,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"jonathanwj"},"content":"    private AddPetToClientCommand prepareCommand(Index petIndex, Index clientIndex) {"},{"lineNumber":240,"author":{"gitID":"jonathanwj"},"content":"        AddPetToClientCommand aptcCommand \u003d new AddPetToClientCommand(petIndex, clientIndex);"},{"lineNumber":241,"author":{"gitID":"jonathanwj"},"content":"        aptcCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":242,"author":{"gitID":"jonathanwj"},"content":"        return aptcCommand;"},{"lineNumber":243,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":146,"null":1,"-":97}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"VetterAppointments was developed by Team F09-B4 in CS2103T."},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Weng Wen Jie Jonathan"},{"lineNumber":13,"author":{"gitID":"-"},"content":"image::jonathanwj.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"Studies computer science and passionate about Networks. Loves working on the backend +"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"{empty}[https://jonathanwj.github.io/portfolio/[Home Page]] [https://github.com/jonathanwj[GitHub]] [\u003c\u003cJonathanWeng#, Portfolio\u003e\u003e] +"},{"lineNumber":16,"author":{"gitID":"-"},"content":"Role: Team Lead, Scheduling \u0026 Tracking +"},{"lineNumber":17,"author":{"gitID":"-"},"content":"Responsibilities: Logic component"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Muhammad Azhar bin Abdul Hamid"},{"lineNumber":22,"author":{"gitID":"-"},"content":"image::md-azsa.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"-"},"content":"Studies computer science and highly interested in Information Security. +"},{"lineNumber":24,"author":{"gitID":"-"},"content":"{empty}[http://www.comp.nus.edu.sg/~azharham[Home Page]]  [http://github.com/md-azsa[GitHub]]"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"[\u003c\u003cmd-azhar-ppp#, Portfolio\u003e\u003e] +"},{"lineNumber":26,"author":{"gitID":"-"},"content":"Role: Documentation, Deliverables \u0026 Deadlines, Integration  +"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Responsibilities: Model component"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Choo Wen Xin"},{"lineNumber":32,"author":{"gitID":"-"},"content":"image::purplepers0n.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"Studies computer science and obsessed with UI/UX, Multimedia, Information Retrieval and anything graphics related. +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"{empty}[http://github.com/purplepers0n[GitHub]]"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"[\u003c\u003cChooWenXin#, Portfolio\u003e\u003e] +"},{"lineNumber":36,"author":{"gitID":"-"},"content":"Role: Code Quality, Integration, Documentation +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"Responsibilities: UI component"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"Godxin"},"content":"\u003d\u003d\u003d Zhong Zheng Xin"},{"lineNumber":42,"author":{"gitID":"-"},"content":"image::Godxin.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":43,"author":{"gitID":"-"},"content":"Studies computer science and has strong interest in cyber security in general. +"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"{empty}[http://github.com/Godxin[GitHub]][\u003c\u003cZhongZhengXin-ppp#, Portfolio\u003e\u003e] +"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"Role: Testing, Integration, Deliverables \u0026 Deadlines +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"Responsibilities: Storage component"},{"lineNumber":48,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"jonathanwj":4,"-":43,"Godxin":1}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"\u003d Vetter Appointments"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"https://travis-ci.org/CS2103JAN2018-F09-B4/main[image:https://travis-ci.org/CS2103JAN2018-F09-B4/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"https://ci.appveyor.com/project/jonwjbot/main/branch/master[image:https://ci.appveyor.com/api/projects/status/p65gkm3qtxv3bf3x/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-F09-B4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F09-B4/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":"image::docs/images/landing_logo.png[width\u003d\"1000\"]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"1000\"]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"image::images/landing_logo.png[width\u003d\"1000\"]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"1000\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"{nbsp} +"},{"lineNumber":19,"author":{"gitID":"-"},"content":"VetterAppointments is a desktop address book application developed for veterinarians. VetterAppointments"},{"lineNumber":20,"author":{"gitID":"-"},"content":"allows you manage your veterinary technicians, clients, pets and appointments in a simple"},{"lineNumber":21,"author":{"gitID":"-"},"content":"to use and beautifully designed desktop application."},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"The application is designed for veterinarians who prefer to type. The well crafted UI will assist you to quickly view details about an appointment or client."},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"With VetterAppointments, you will be able to focus on what\u0027s important and be assured that your appointments, contacts, details are managed properly."},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"Head on over to the https://github.com/CS2103JAN2018-F09-B4/main/blob/master/docs/UserGuide.adoc#2-quick-start[User Guide] and get started with VetterAppointments."},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":35,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":40,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"* AddressBook-Level4 project created by https://github.com/se-edu/[SE-EDU]  initiative"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"jonathanwj":14,"-":32}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        Person[] expectedList \u003d SampleDataUtil.getSampleClientsInSamplePersons();"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        assertListMatching(getClientListPanel(), expectedList);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"purplepers0n":3,"-":49}},{"path":"unused/RemovePetFromClientCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPetAtIndex;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PETS;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PET;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"content":"//@@author jonathanwj-unused"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"// Entire command was merged into AddPetCommand that"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"// currently creates a pet and adds that pet to the client in one command."},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":" * and unit tests for RemovePetFromClient."},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"public class RemovePetFromClientCommandTest {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    @Before"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"    public void setup() throws ClientAlreadyOwnsPetException, PetAlreadyHasOwnerException {"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        model.addPetToClient(model.getAddressBook().getPetList().get(0),"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"                model.getAddressBook().getClientList().get(0));"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    public void execute_removePetToClient_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"        Pet petInFilteredList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        RemovePetFromClientCommand rpfcCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d String.format(RemovePetFromClientCommand.MESSAGE_ADD_PET_TO_CLIENT_SUCCESS,"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"                petInFilteredList, clientInFilteredList);"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.removePetFromClient(model.getFilteredPetList().get(0), model.getFilteredClientList().get(0));"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(rpfcCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"    public void execute_removePetFromClient_throwsCommandExeception() throws Exception {"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"        thrown.expectMessage(RemovePetFromClientCommand.MESSAGE_CLIENT_PET_NOT_ASSOCIATED);"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        prepareCommand(INDEX_FIRST_PET, INDEX_SECOND_PERSON).execute();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"    public void execute_invalidIndex_failure() {"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        showClientAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexClient \u003d INDEX_SECOND_PERSON;"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(outOfBoundIndexClient.getZeroBased() \u003c model.getAddressBook().getClientList().size());"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"        RemovePetFromClientCommand rpfcCommand \u003d prepareCommand(INDEX_FIRST_PET, outOfBoundIndexClient);"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(rpfcCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"        showPetAtIndex(model, INDEX_FIRST_PET);"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexPet \u003d INDEX_SECOND_PET;"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(outOfBoundIndexPet.getZeroBased() \u003c model.getAddressBook().getClientList().size());"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        rpfcCommand \u003d prepareCommand(outOfBoundIndexPet, INDEX_FIRST_PERSON);"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(rpfcCommand, model, Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"    public void equals() throws Exception {"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"        final RemovePetFromClientCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"        // same values -\u003e returns true"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"        RemovePetFromClientCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PET, INDEX_FIRST_PERSON);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"        assertFalse(standardCommand.equals(new RemovePetFromClientCommand(INDEX_SECOND_PET, INDEX_SECOND_PERSON)));"},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":135,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"jonathanwj"},"content":"     * Returns an {@code RemovePetFromClientCommand} with parameters pet {@code index} and client {@code index}"},{"lineNumber":137,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"    private RemovePetFromClientCommand prepareCommand(Index petIndex, Index clientIndex) {"},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":"        RemovePetFromClientCommand rpfcCommand \u003d new RemovePetFromClientCommand(petIndex, clientIndex);"},{"lineNumber":140,"author":{"gitID":"jonathanwj"},"content":"        rpfcCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":141,"author":{"gitID":"jonathanwj"},"content":"        return rpfcCommand;"},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":90,"null":1,"purplepers0n":1,"-":51}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class DeleteCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    public void delete() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: delete the last person in the list -\u003e deleted */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(lastPersonIndex);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        /* Case: undo deleting the last person in the list -\u003e last person restored */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        removePerson(modelBeforeDeletingLast, lastPersonIndex);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: delete the middle person in the list -\u003e deleted */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index middlePersonIndex \u003d getMidIndex(getModel());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(middlePersonIndex);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredClientList().size());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":71,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"        /* --------------------- Performing delete operation ------------------------ */"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                getModel().getAddressBook().getPersonList().size() + 1);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * @return the removed person"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    private Person removePerson(Model model, Index index) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Person targetPerson \u003d getPerson(model, index);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            model.deletePerson(targetPerson);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"targetPerson is retrieved from model.\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return targetPerson;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":139,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"purplepers0n":1,"-":189}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"        getClientListPanel().click();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":1,"-":80}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"    public void clear() throws CommandException {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        /* Case: undo clearing address book -\u003e original address book restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        /* Case: redo clearing address book -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before clearing -\u003e entire address book cleared */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: clear empty address book -\u003e cleared */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":2,"purplepers0n":1,"-":92}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_CLIENT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + ROLE_DESC_CLIENT + \"  \""},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":77,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT"},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"        /* ------------------------ Perform add operation --------------------------- */"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"jonathanwj"},"content":"        /* Case: missing role -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"jonathanwj"},"content":"        /* Case: invalid role -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_ROLE_DESC + NAME_DESC_AMY"},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(command, PersonRole.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + INVALID_NAME_DESC"},{"lineNumber":191,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":195,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":196,"author":{"gitID":"jonathanwj"},"content":"                + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":200,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":205,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":206,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":210,"author":{"gitID":"jonathanwj"},"content":"        command \u003d AddCommand.COMMAND_WORD + ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":211,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":212,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":243,"author":{"gitID":"purplepers0n"},"content":"            expectedModel.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":245,"author":{"gitID":"purplepers0n"},"content":"            expectedModel.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":41,"purplepers0n":6,"-":243}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"import guitests.guihandles.ClientListPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.testutil.TypicalAddressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":44,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":46,"author":{"gitID":"-"},"content":" */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"        return TypicalAddressBook.getTypicalAddressBook();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"purplepers0n"},"content":"    public ClientListPanelHandle getClientListPanel() {"},{"lineNumber":102,"author":{"gitID":"purplepers0n"},"content":"        return mainWindowHandle.getClientListPanel();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":125,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":134,"author":{"gitID":"purplepers0n"},"content":"        executeCommand(ListCommand.COMMAND_WORD + \" client\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":143,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(getModel().getFilteredClientList().size()"},{"lineNumber":144,"author":{"gitID":"purplepers0n"},"content":"                \u003c\u003d getModel().getAddressBook().getPersonList().stream()"},{"lineNumber":145,"author":{"gitID":"purplepers0n"},"content":"                .filter(Person::isClient).collect(Collectors.toList()).size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                                                     Model expectedModel) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":167,"author":{"gitID":"purplepers0n"},"content":"        assertListMatching(getClientListPanel(), expectedModel.getFilteredClientList());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":178,"author":{"gitID":"purplepers0n"},"content":"        getClientListPanel().rememberSelectedClientCard();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":184,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":188,"author":{"gitID":"purplepers0n"},"content":"        assertFalse(getClientListPanel().isAnyCardSelected());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":194,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":199,"author":{"gitID":"purplepers0n"},"content":"        String selectedCardName \u003d getClientListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getClientListPanel().getSelectedCardIndex());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":212,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":217,"author":{"gitID":"purplepers0n"},"content":"        assertFalse(getClientListPanel().isSelectedClientCardChanged());"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":246,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":262,"author":{"gitID":"purplepers0n"},"content":"            assertListMatching(getClientListPanel(), getModel().getFilteredClientList());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":272,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":2,"purplepers0n":19,"-":255}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"purplepers0n"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"    private static final Predicate\u003cClient\u003e PREDICATE_MATCHING_NO_CLIENTS \u003d unused -\u003e false;"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"    private static final Predicate\u003cVetTechnician\u003e PREDICATE_MATCHING_NO_TECHNICIANS \u003d unused -\u003e false;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    public static void setFilteredList(Model model,"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"                                       List\u003cClient\u003e toDisplayClient, List\u003cVetTechnician\u003e toDisplayVetTechnician) {"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"        Optional\u003cPredicate\u003cClient\u003e\u003e predicateClient \u003d toDisplayClient.stream()"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"                .map(ModelHelper::getPredicateMatchingClient).reduce(Predicate::or);"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(predicateClient.orElse(PREDICATE_MATCHING_NO_CLIENTS));"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"        if (!toDisplayVetTechnician.isEmpty()) {"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"            Optional\u003cPredicate\u003cVetTechnician\u003e\u003e predicateTechnician \u003d toDisplayVetTechnician.stream()"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"                    .map(ModelHelper::getPredicateMatchingTechnician).reduce(Predicate::or);"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredVetTechnicianList(predicateTechnician.orElse(PREDICATE_MATCHING_NO_TECHNICIANS));"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static void setFilteredList(Model model, Person... toDisplay) {"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"        List\u003cPerson\u003e persons \u003d Arrays.asList(toDisplay);"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClient\u003e clients \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"        List\u003cVetTechnician\u003e technicians \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        for (int i \u003d 0; i \u003c persons.size(); i++) {"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"            if (persons.get(i).isClient()) {"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"                clients.add((Client) persons.get(i));"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"                technicians.add((VetTechnician) persons.get(i));"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        setFilteredList(model, clients, technicians);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"    private static Predicate\u003cClient\u003e getPredicateMatchingClient(Person other) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns a predicate that evaluates to true if this {@code Person} equals to {@code other}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"    private static Predicate\u003cVetTechnician\u003e getPredicateMatchingTechnician(Person other) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return person -\u003e person.equals(other);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"purplepers0n":30,"-":38}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import org.junit.Ignore;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"     * Command not used"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    @Ignore"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"        Index personCount \u003d Index.fromOneBased(getModel().getFilteredClientList().size());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":88,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":92,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":120,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":121,"author":{"gitID":"purplepers0n"},"content":"        int preExecutionSelectedCardIndex \u003d getClientListPanel().getSelectedCardIndex();"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":6,"purplepers0n":2,"-":148}},{"path":"src/test/java/seedu/address/ui/PersonListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class PersonListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FXCollections.observableList(getTypicalPersons());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"            new JumpToListRequestEvent(INDEX_SECOND_PERSON, 0);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private PersonListPanelHandle personListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personListPanel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(expectedPerson, actualCard);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":2,"-":57}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class FindCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"    public void find() throws CommandException {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"jonathanwj"},"content":"        /* Case: find person */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":166,"author":{"gitID":"purplepers0n"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredClientList().size());"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"purplepers0n":1,"-":188}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).buildWithRoleClient();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"        Person personWithTags \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"        Person person \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").buildWithRoleClient();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":4,"-":68}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import guitests.guihandles.ClientCardHandle;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"import guitests.guihandles.ClientListPanelHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"    public static void assertCardDisplaysClient(Person expectedPerson, ClientCardHandle actualCard) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"     * Asserts that the list in {@code clientListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    public static void assertListMatching(ClientListPanelHandle clientListPanelHandle, Person... persons) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"            assertCardDisplaysClient(persons[i], clientListPanelHandle.getClientCardHandle(i));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"    public static void assertListMatching(ClientListPanelHandle clientListPanelHandle, List\u003cClient\u003e clients) {"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"        assertListMatching(clientListPanelHandle, clients.toArray(new Person[0]));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":9,"-":79}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD + \" client\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    private static final String ADD_APPT_TO_PET_COMMAND_PREFIX \u003d \"adda\";"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    private static final String ADD_COMMAND_PREFIX \u003d \"ad\";"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    private static final String INVALID_COMMAND_PREFIX \u003d \"invalid\";"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    private static final String ADD_APPT_TO_PET_COMMAND \u003d \"addappttopet\";"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"    private static final String ADD_COMMAND_WITH_SPACE \u003d \"add \";"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"    private static final String ADD_COMMAND_FIRST_PARAMETER_PREFIX \u003d \"r/\";"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"    public void commandBox_handleEscKeyPress() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(EMPTY_STRING, commandBoxHandle.getInput());"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"    public void handleKeyPress_tab() {"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"        // autocomplete add command"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"        commandBoxHandle.setInput(ADD_APPT_TO_PET_COMMAND_PREFIX);"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(ADD_APPT_TO_PET_COMMAND, commandBoxHandle.getInput());"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.push(KeyCode.SHIFT, KeyCode.TAB);"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"        // autocomplete multiple"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"        commandBoxHandle.setInput(ADD_COMMAND_PREFIX);"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(ADD_COMMAND_PREFIX, commandBoxHandle.getInput());"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        // autocomplete invalid command"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"        commandBoxHandle.setInput(INVALID_COMMAND_PREFIX);"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.push(KeyCode.CONTROL, KeyCode.TAB);"},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"        // autocomplete first add command parameter prefix"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"        commandBoxHandle.setInput(ADD_COMMAND_WITH_SPACE);"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.push(KeyCode.TAB);"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(ADD_COMMAND_WITH_SPACE + ADD_COMMAND_FIRST_PARAMETER_PREFIX, commandBoxHandle.getInput());"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":139,"author":{"gitID":"purplepers0n"},"content":"        String thirdCommand \u003d \"list client\";"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":177,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":186,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":46,"purplepers0n":2,"-":154}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import org.junit.Ignore;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"     * Browser panel not used"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    @Ignore"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // associated web page of a person"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":5,"-":46}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the AddressBook format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"purplepers0n"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredClientList(), model.getFilteredVetTechnicianList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":1,"-":122}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d VetterAppointments - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":":toc-title: Table of Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":":repoURL: https://github.com/CS2103JAN2018-F09-B4/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"By: `F09-B4`      Since: `March 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"Welcome to VetterAppointments Developer Guide! VetterAppointments is a Java based application that helps manage the clients, employees and appointments of a vet. The application consists of many different components and feature implementations that work together to make VetterAppointments. +"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"This guide will serve to aid a you to understand the architecture and underlying interface of the application. +"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"If you are a new developer, you can follow the instructions in this guide to set up the program and start building upon it. +"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d Setting Up"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"This section will guide you through the setting up of the development environment that you will require to start developing VetterAppointments."},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"The following is what you need in order to begin working on the codebase for VetterAppointments:"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"* *JDK `1.8.0_60`* or later"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"* *IntelliJ* IDE"},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"IntelliJ has Gradle and JavaFx plugins installed by default. +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d Setting up the project on your computer"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"Follow the steps below to set up the VetterAppointments project in your computer:"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":". Fork this repository, and clone the fork to your computer"},{"lineNumber":52,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":53,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":54,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":".. Click `New...` and find the directory of the correct JDK version"},{"lineNumber":56,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":". Locate the `build.gradle` file and select it and click `OK`"},{"lineNumber":58,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":59,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`) +"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"It should finish with the `BUILD SUCCESSFUL` message and generate all resources required by the application and tests."},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"To verify that the project has been set up properly:"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"There are certain configurations that you need to set up before you are able to start writing code. You can follow the guide in this section to set up the configurations."},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. +"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"Follow these steps to rectify the issue:"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":81,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":82,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":85,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"After forking the repository, links in the documentation will still point to the `CS2103JAN2018-F09-B4/main` repository."},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"If you plan to develop this as a separate product (i.e. instead of contributing to `CS2103JAN2018-F09-B4/main`), you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":101,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)."},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"This section will walk you through the design aspect of VetterAppointments. It will explain the application architecture and the different components that make up the application."},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":114,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"The software architecture of VetterAppointments consists of several key components that make VetterAppointments. It shows the overall organization of the system and how the underlying components interact with each other."},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":118,"author":{"gitID":"purplepers0n"},"content":"The *_Architecture Diagram_* given below in figure 3-1 explains the high-level design of the application."},{"lineNumber":119,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"image::Architecture.png[width\u003d\"600\", caption\u003d\"Figure 3-1. \"]"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":124,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"purplepers0n"},"content":"Given below is a quick overview of each component."},{"lineNumber":127,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"purplepers0n"},"content":"* At application launch: Initializing the components in the correct sequence, and connecting them up with each other"},{"lineNumber":131,"author":{"gitID":"purplepers0n"},"content":"* At application shut down: Shutting down the components and invoking cleanup methods where necessary"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"purplepers0n"},"content":"`Commons` represents a collection of classes used by multiple other components. These classes can be found in the seedu.addressbook.commons package."},{"lineNumber":134,"author":{"gitID":"purplepers0n"},"content":"Two of those classes play important roles at the architecture level:"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"* `EventsCenter`: This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":137,"author":{"gitID":"purplepers0n"},"content":"* `LogsCenter`: This class is used by many other classes to write log messages to the application\u0027s log file"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"purplepers0n"},"content":"The rest of the application consists of the following four components:"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"purplepers0n"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: Handles the user interface of the application"},{"lineNumber":142,"author":{"gitID":"purplepers0n"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Executes commands"},{"lineNumber":143,"author":{"gitID":"purplepers0n"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the application in-memory"},{"lineNumber":144,"author":{"gitID":"purplepers0n"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to the hard disk"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"Note that each of the four components:"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"purplepers0n"},"content":"* Define its _API_ in an `interface` with the same name as the component"},{"lineNumber":149,"author":{"gitID":"purplepers0n"},"content":"* Expose its functionality using a `{Component Name}Manager` class"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"purplepers0n"},"content":"For example, the `Logic` component (see Figure 3-2 given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"jonathanwj"},"content":".Logic Component Class Diagram"},{"lineNumber":154,"author":{"gitID":"jonathanwj"},"content":"image::LogicClassDiagram.png[width\u003d\"800\", caption\u003d\"Figure 3-2. \"]"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"jonathanwj"},"content":"The architecture design of VetterAppointments is based on an event-driven architectural style. The events-driven nature of the design allows for the communication of several components of the application."},{"lineNumber":160,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":161,"author":{"gitID":"jonathanwj"},"content":"Figure 3-3 shows a _Sequence Diagram_ of how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"purplepers0n"},"content":".Sequence Diagram of Component Interactions for `delete 1` Command (part 1)"},{"lineNumber":164,"author":{"gitID":"jonathanwj"},"content":"image::SDforDeletePerson.png[width\u003d\"800\", caption\u003d\"Figure 3-3. \"]"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":167,"author":{"gitID":"purplepers0n"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the application\u0027s data is changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"purplepers0n"},"content":"The diagram below (Figure 3-4) shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"purplepers0n"},"content":".Sequence Diagram of Component Interactions for `delete 1` Command (part 2)"},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\", caption\u003d\"Figure 3-4. \"]"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":175,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":"The following four sections in this guide will give more details of each component."},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":180,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":181,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":182,"author":{"gitID":"jonathanwj"},"content":"The UI component controls the interactions that the user have with the VetterAppointments. It consists of several underlying components that make up the what the user sees on the UI."},{"lineNumber":183,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":184,"author":{"gitID":"jonathanwj"},"content":"The diagram below (Figure 3-5) represents the structure of the `UI` component in VetterAppointments."},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"image::UiClassDiagram.png[width\u003d\"800\", caption\u003d\"Figure 3-5. \"]"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"purplepers0n"},"content":"As seen in figure 3-5, `UI` consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ClientListPanel`,"},{"lineNumber":192,"author":{"gitID":"purplepers0n"},"content":"`PetListPanel`, `VetTechnicianListPanel`, `ApptListPanel`, `StatusBarFooter` etc."},{"lineNumber":193,"author":{"gitID":"purplepers0n"},"content":"All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"purplepers0n"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that can be found in the `src/main/resources/view` folder."},{"lineNumber":196,"author":{"gitID":"purplepers0n"},"content":"For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]."},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"jonathanwj"},"content":"The `UI` component:"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"purplepers0n"},"content":"* Executes user commands using the `Logic` component"},{"lineNumber":201,"author":{"gitID":"purplepers0n"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` changes"},{"lineNumber":202,"author":{"gitID":"purplepers0n"},"content":"* Responds to events raised from various parts of the application and updates the UI accordingly"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":205,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":206,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":207,"author":{"gitID":"jonathanwj"},"content":"The logic component makes up the main logic of the VetterAppointments. It consists of the main bulk of logic code that allows the application to function as its intended purpose."},{"lineNumber":208,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":209,"author":{"gitID":"jonathanwj"},"content":"The diagram below (Figure 3-6) represents the structure of the `Logic` component in VetterAppointments."},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":212,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":213,"author":{"gitID":"jonathanwj"},"content":"image::LogicClassDiagram.png[width\u003d\"800\", caption\u003d\"Figure 3-6. \"]"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"jonathanwj"},"content":"Figure 3-7 shows finer details concerning `XYZCommand` and `Command` in Figure 3-6."},{"lineNumber":216,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":217,"author":{"gitID":"jonathanwj"},"content":".Structure of Commands in the Logic Component."},{"lineNumber":218,"author":{"gitID":"jonathanwj"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\", caption\u003d\"Figure 3-7. \"]"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":221,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"purplepers0n"},"content":"`Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":224,"author":{"gitID":"purplepers0n"},"content":"This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":225,"author":{"gitID":"purplepers0n"},"content":"The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":226,"author":{"gitID":"purplepers0n"},"content":"The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"jonathanwj"},"content":"Figure 3-8 shows the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"purplepers0n"},"content":".Sequence Diagram of Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":231,"author":{"gitID":"jonathanwj"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\", caption\u003d\"Figure 3-8. \"]"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":234,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":235,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":236,"author":{"gitID":"jonathanwj"},"content":"The model component allows for the management of data in VetterAppointments. It controls the flow of the data and how the data is contained within the application."},{"lineNumber":237,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":238,"author":{"gitID":"jonathanwj"},"content":"The diagram below (Figure 3-9) represents the structure of the `Model` component in VetterAppointments."},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":241,"author":{"gitID":"jonathanwj"},"content":"image::ModelClassDiagram.png[width\u003d\"800\", caption\u003d\"Figure 3-9. \"]"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"jonathanwj"},"content":"`Model` represents the in-memory model of VetterAppointments data. All the data is managed by the `ModelManager` which can modify the data in the `AddressBook`. All the data are stored in `ObservableList\u003c...\u003e` within the `AddressBook`, any data modification will update the respective objects `ObservableList\u003c...\u003e`."},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"jonathanwj"},"content":"The `Model` component:"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"purplepers0n"},"content":"* Stores a `UserPref` object that represents the user\u0027s preferences"},{"lineNumber":250,"author":{"gitID":"purplepers0n"},"content":"* Stores the application\u0027s data"},{"lineNumber":251,"author":{"gitID":"jonathanwj"},"content":"* Exposes several unmodifiable `ObservableList\u003c...\u003e` for each object that can be \u0027observed\u0027 so that the UI can bound to this list and automatically update the UI when the data in the list changes"},{"lineNumber":252,"author":{"gitID":"purplepers0n"},"content":"* Does not depend on any of the other three components"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":255,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":256,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":257,"author":{"gitID":"jonathanwj"},"content":"The storage component controls the storage of data in VetterAppointments. It enable the application to safely read and write data on the user\u0027s computer."},{"lineNumber":258,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":259,"author":{"gitID":"jonathanwj"},"content":"The diagram below (Figure 3-10) represents the structure of the `Storage` component in VetterAppointments."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":262,"author":{"gitID":"jonathanwj"},"content":"image::StorageClassDiagram.png[width\u003d\"800\", caption\u003d\"Figure 3-10. \"]"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"jonathanwj"},"content":"`Storage` reads and write data from and to the computer local storage. The `StorageManager` handles the storage of the data in local storage. On application start, the `Storage` component will load the data from local storage into the application. Whenever the data is modified, `StorageManager` will then write the changes to the local storage."},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"jonathanwj"},"content":"The `Storage` component:"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"jonathanwj"},"content":"* Saves `UserPref` objects in json format and read it back"},{"lineNumber":271,"author":{"gitID":"jonathanwj"},"content":"* Saves the application\u0027s data in xml format and read it back"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":278,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":279,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"purplepers0n"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of VetterAppointments (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"jonathanwj"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. Figure 4-1 shows the inheritance diagram for commands."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"jonathanwj"},"content":".Logic Command Class Diagram"},{"lineNumber":286,"author":{"gitID":"jonathanwj"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\", caption\u003d\"Figure 4-1. \"]"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"purplepers0n"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of VetterAppointments before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":291,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":292,"author":{"gitID":"-"},"content":"----"},{"lineNumber":293,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":"}"},{"lineNumber":299,"author":{"gitID":"-"},"content":"----"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":302,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":303,"author":{"gitID":"-"},"content":"----"},{"lineNumber":304,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"-"},"content":"}"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":314,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":317,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":318,"author":{"gitID":"-"},"content":"}"},{"lineNumber":319,"author":{"gitID":"-"},"content":"----"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"purplepers0n"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th client in VetterAppointments. The current state of VetterAppointments is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` as shown below in figure 4-2 (the current state is saved together with the command)."},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"jonathanwj"},"content":".Undo/Redo Initial Stack Diagram"},{"lineNumber":326,"author":{"gitID":"jonathanwj"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\", caption\u003d\"Figure 4-2. \"]"},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"purplepers0n"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person and the command will be pushed onto the `undoStack` as shown below in figure 4-3."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"jonathanwj"},"content":".Undo/Redo New Command Stack Diagram"},{"lineNumber":331,"author":{"gitID":"jonathanwj"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\", caption\u003d\"Figure 4-3. \"]"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":334,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"purplepers0n"},"content":"The program will pop the most recent command out of the `undoStack` and push it back to the `redoStack` as shown below in figure 4-4. Next the program will restore the VetterAppointments to the state before the `add` command was executed."},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"jonathanwj"},"content":".Undo/Redo Executed Undo Command Stack Diagram"},{"lineNumber":341,"author":{"gitID":"jonathanwj"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\", caption\u003d\"Figure 4-4. \"]"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":344,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"jonathanwj"},"content":"Figure 4-5 shows a sequence diagram of how the undo operation works:"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"purplepers0n"},"content":".Sequence Diagram of Undo/Redo operation"},{"lineNumber":349,"author":{"gitID":"jonathanwj"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\", caption\u003d\"Figure 4-5. \"]"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"purplepers0n"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores VetterAppointments to the state after the command is executed)."},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":354,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"purplepers0n"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command, as shown below in figure 4-6 (this is the behavior that most modern desktop applications follow)."},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"jonathanwj"},"content":".Undo/Redo New Command Stack Diagram (Clear)"},{"lineNumber":359,"author":{"gitID":"jonathanwj"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\", caption\u003d\"Figure 4-6. \"]"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"purplepers0n"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution, as shown below in figure 4-7."},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"jonathanwj"},"content":".Undo/Redo New Command Stack Diagram (List)"},{"lineNumber":364,"author":{"gitID":"jonathanwj"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\", caption\u003d\"Figure 4-7. \"]"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"purplepers0n"},"content":"Figure 4-8 below shows the activity diagram that summarize what happens inside the `UndoRedoStack` when a user executes a new command."},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"jonathanwj"},"content":".Undo/Redo Activity Digram"},{"lineNumber":369,"author":{"gitID":"jonathanwj"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\", caption\u003d\"Figure 4-8. \"]"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":376,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":377,"author":{"gitID":"purplepers0n"},"content":"** Cons: It is hard for new developers to understand the template pattern."},{"lineNumber":378,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":379,"author":{"gitID":"purplepers0n"},"content":"** Pros: It does not involve the template pattern, so it is easier for new developers to understand."},{"lineNumber":380,"author":{"gitID":"purplepers0n"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()` or they will lose the ability to undo/redo."},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"purplepers0n"},"content":"* **Alternative 1 (current choice):** Save a copy of the entire data of VetterAppointments"},{"lineNumber":385,"author":{"gitID":"purplepers0n"},"content":"** Pros: It is easy to implement."},{"lineNumber":386,"author":{"gitID":"purplepers0n"},"content":"** Cons: There may be performance issues in terms of memory usage."},{"lineNumber":387,"author":{"gitID":"jonathanwj"},"content":"* **Alternative 2:** Modify each individual command to undo/redo by itself."},{"lineNumber":388,"author":{"gitID":"purplepers0n"},"content":"** Pros: Less memory will be used (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":389,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"purplepers0n"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies VetterAppointments (`add`, `clear`, `edit`)."},{"lineNumber":395,"author":{"gitID":"jonathanwj"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are lost)."},{"lineNumber":396,"author":{"gitID":"purplepers0n"},"content":"** Cons: The user might think that undo also applies when the list is modified (undoing filtering for example), only to realize that it does not do that, after executing `undo`."},{"lineNumber":397,"author":{"gitID":"jonathanwj"},"content":"* **Alternative 2:** Include all commands"},{"lineNumber":398,"author":{"gitID":"purplepers0n"},"content":"** Pros: It might be more intuitive for the user."},{"lineNumber":399,"author":{"gitID":"purplepers0n"},"content":"** Cons: The user has no way of skipping such commands if he or she just want to reset the state of VetterAppointments and not the view."},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":405,"author":{"gitID":"purplepers0n"},"content":"** Pros: It is easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":406,"author":{"gitID":"purplepers0n"},"content":"** Cons: The logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":407,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":408,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":409,"author":{"gitID":"purplepers0n"},"content":"** Cons: We are required to deal with commands that have already been undone: We must remember to skip these commands. This violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."},{"lineNumber":410,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"// tag::mdazharPet[]"},{"lineNumber":413,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Pet component feature"},{"lineNumber":414,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":415,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reasons for implementation"},{"lineNumber":416,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":417,"author":{"gitID":"purplepers0n"},"content":"VetterAppointments is designed for vets to manage his team of vet technicians, clients and most importantly, the pets."},{"lineNumber":418,"author":{"gitID":"purplepers0n"},"content":"The Pet component feature stores the necessary Pet details like name, gender, age, tags as well as appointments."},{"lineNumber":419,"author":{"gitID":"purplepers0n"},"content":"Such details are essential to facilitate other functions such as viewing the client\u0027s appointments and the pet\u0027s appointments on the GUI."},{"lineNumber":420,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":422,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":423,"author":{"gitID":"-"},"content":"*Model component* +"},{"lineNumber":424,"author":{"gitID":"-"},"content":"Currently the `Pet` object is initialized by calling it\u0027s constructor. The constructor"},{"lineNumber":425,"author":{"gitID":"-"},"content":"initializes the four fields of `Pet` to respective arguments supplied by the user. +"},{"lineNumber":426,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":427,"author":{"gitID":"-"},"content":"*Constructing a `Pet` object*"},{"lineNumber":428,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":429,"author":{"gitID":"-"},"content":"----"},{"lineNumber":430,"author":{"gitID":"-"},"content":"public Pet(PetName petName, PetAge petAge, PetGender petGender, Set\u003cTag\u003e tags) {"},{"lineNumber":431,"author":{"gitID":"-"},"content":"    requireAllNonNull(petName, petAge, petGender, tags);"},{"lineNumber":432,"author":{"gitID":"-"},"content":"    this.petName \u003d petName;"},{"lineNumber":433,"author":{"gitID":"-"},"content":"    this.petAge \u003d petAge;"},{"lineNumber":434,"author":{"gitID":"-"},"content":"    this.petGender \u003d petGender;"},{"lineNumber":435,"author":{"gitID":"-"},"content":"    this.tags \u003d tags;"},{"lineNumber":436,"author":{"gitID":"-"},"content":"}"},{"lineNumber":437,"author":{"gitID":"-"},"content":"----"},{"lineNumber":438,"author":{"gitID":"-"},"content":"Explanation for arguments: +"},{"lineNumber":439,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":440,"author":{"gitID":"-"},"content":"`PetName`: A class that takes in a String supplied by the user with the prefix `pn/`. It stores the details of the pet name"},{"lineNumber":441,"author":{"gitID":"-"},"content":"and creates an object for the `Pet` constructor to consume."},{"lineNumber":442,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":443,"author":{"gitID":"-"},"content":"The `PetName` validates the name of the pet supplied. Only alphanumeric characters are allowed. +"},{"lineNumber":444,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"The constraints for a valid pet name is implemented this way:"},{"lineNumber":446,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":447,"author":{"gitID":"-"},"content":"----"},{"lineNumber":448,"author":{"gitID":"-"},"content":"public static final String PETNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":449,"author":{"gitID":"-"},"content":"----"},{"lineNumber":450,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":451,"author":{"gitID":"-"},"content":"`PetAge`: A class that takes in a String supplied by the user with the prefix `pa/`. It then stores the details of the pet age"},{"lineNumber":452,"author":{"gitID":"-"},"content":"and creates an object for the `Pet` constructor to consume."},{"lineNumber":453,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":454,"author":{"gitID":"-"},"content":"The `PetAge` validates the age supplied by the user. Only 1-2 digit numbers are allowed. +"},{"lineNumber":455,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"The constraints for a valid pet age is implemented this way:"},{"lineNumber":457,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":458,"author":{"gitID":"-"},"content":"----"},{"lineNumber":459,"author":{"gitID":"-"},"content":"public static final String PET_VALIDATIONS_REGEX \u003d \"\\\\d{1,2}\";"},{"lineNumber":460,"author":{"gitID":"-"},"content":"----"},{"lineNumber":461,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":462,"author":{"gitID":"purplepers0n"},"content":"`Petgender`: A class that takes in a String supplied by the user with the prefix `pg/`. It stores the pet gender details"},{"lineNumber":463,"author":{"gitID":"-"},"content":"and creates an object for the `Pet` constructor to consume."},{"lineNumber":464,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":465,"author":{"gitID":"-"},"content":"The `PetGender` validates for supplied gender. Only M or F is allowed, representing Male or Female."},{"lineNumber":466,"author":{"gitID":"-"},"content":"It is case insensitive. +"},{"lineNumber":467,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":468,"author":{"gitID":"-"},"content":"The constraints for a valid pet gender is implemented this way:"},{"lineNumber":469,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":470,"author":{"gitID":"-"},"content":"----"},{"lineNumber":471,"author":{"gitID":"-"},"content":"public static final String GENDER_VALIDATION_REGEX \u003d \"[m,f,M,F]\";"},{"lineNumber":472,"author":{"gitID":"-"},"content":"----"},{"lineNumber":473,"author":{"gitID":"-"},"content":""},{"lineNumber":474,"author":{"gitID":"-"},"content":"`Set\u003cTag\u003e`: In addition to the PetName, PetAge and PetGender, a `Set\u003cTag\u003e` is also needed for the construction of a `Pet` object. +"},{"lineNumber":475,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":476,"author":{"gitID":"-"},"content":"The tags for a pet is used to represent the species and breed for that particular pet. +"},{"lineNumber":477,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":"All the `Pet` objects that were created in the program will be stored in a class called `UniquePetList`."},{"lineNumber":479,"author":{"gitID":"-"},"content":"The `UniquePetList` class ensures that no duplicates of the same pet are stored inside the program."},{"lineNumber":480,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"The figure below shows a simple overview of the `Pet` class. +"},{"lineNumber":482,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":483,"author":{"gitID":"-"},"content":".Pet class diagram snippet"},{"lineNumber":484,"author":{"gitID":"purplepers0n"},"content":"image::pet_diagram_snippet.png[width\u003d\"780\", caption\u003d\"Figure 4-9. \"]"},{"lineNumber":485,"author":{"gitID":"-"},"content":""},{"lineNumber":486,"author":{"gitID":"purplepers0n"},"content":"*Logic component* +"},{"lineNumber":487,"author":{"gitID":"-"},"content":"The `Pet` object interacts with several commands in the program. +"},{"lineNumber":488,"author":{"gitID":"-"},"content":""},{"lineNumber":489,"author":{"gitID":"-"},"content":". `addp`: Adds a `Pet` into a `Client` through a wrapper class called `ClientOwnPetAssociation` and into `UniquePetList`."},{"lineNumber":490,"author":{"gitID":"-"},"content":". `deletep`: Removes the `Pet` object from both the wrapper class and `UniquePetList`."},{"lineNumber":491,"author":{"gitID":"-"},"content":". `addappttopet`: Adds the `ClientOwnPetAssociation` wrapper into the `Appointment` class. +"},{"lineNumber":492,"author":{"gitID":"-"},"content":"To adhere to defensive programming practices, the `addappttopet` does the following:"},{"lineNumber":493,"author":{"gitID":"-"},"content":".. Creates a copy of the specified `Appointment`."},{"lineNumber":494,"author":{"gitID":"-"},"content":".. Adds the `ClientOwnPet` to the copy"},{"lineNumber":495,"author":{"gitID":"-"},"content":".. Replaces the original `Appointment` with the copy."},{"lineNumber":496,"author":{"gitID":"-"},"content":". `removeapptfrompet`: Removes the `ClientOwnPetAssociation` from the `Appointment`. +"},{"lineNumber":497,"author":{"gitID":"-"},"content":"To adhere to defensive programming practices the `removeapptfrom` does the following:"},{"lineNumber":498,"author":{"gitID":"-"},"content":".. Creates a copy of the specified `Appointment`."},{"lineNumber":499,"author":{"gitID":"-"},"content":".. Removes the `ClientOwnPetAssociation` from the copy."},{"lineNumber":500,"author":{"gitID":"-"},"content":".. Replaces the original with the cop."},{"lineNumber":501,"author":{"gitID":"-"},"content":". `sortp`: Sorts the pet list."},{"lineNumber":502,"author":{"gitID":"-"},"content":""},{"lineNumber":503,"author":{"gitID":"-"},"content":"The `addappttopet` command copies the `Appointment` object this way:"},{"lineNumber":504,"author":{"gitID":"-"},"content":""},{"lineNumber":505,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":506,"author":{"gitID":"-"},"content":"----"},{"lineNumber":507,"author":{"gitID":"-"},"content":"for (ClientOwnPet a : clientPetAssociations) {"},{"lineNumber":508,"author":{"gitID":"-"},"content":"            if (a.getPet().equals(pet)) {"},{"lineNumber":509,"author":{"gitID":"-"},"content":"                isPresent \u003d true;"},{"lineNumber":510,"author":{"gitID":"-"},"content":"                if (appointment.getClientOwnPet() \u003d\u003d null) {"},{"lineNumber":511,"author":{"gitID":"-"},"content":"                    Appointment appointmentCopy \u003d new Appointment(appointment);"},{"lineNumber":512,"author":{"gitID":"-"},"content":"                    appointmentCopy.setClientOwnPet(a);"},{"lineNumber":513,"author":{"gitID":"-"},"content":"                    appointments.setAppointment(appointment, appointmentCopy);"},{"lineNumber":514,"author":{"gitID":"-"},"content":"                    isAdded \u003d true;"},{"lineNumber":515,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":516,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":517,"author":{"gitID":"-"},"content":"}"},{"lineNumber":518,"author":{"gitID":"-"},"content":"----"},{"lineNumber":519,"author":{"gitID":"-"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"The `removeapptfrompet` command copies the `Appointment` object in a similar way:"},{"lineNumber":521,"author":{"gitID":"-"},"content":""},{"lineNumber":522,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":523,"author":{"gitID":"-"},"content":"----"},{"lineNumber":524,"author":{"gitID":"-"},"content":" public void removeAppointmentFromPet(Appointment appointment) throws"},{"lineNumber":525,"author":{"gitID":"-"},"content":"            AppointmentNotFoundException, DuplicateAppointmentException, AppointmentDoesNotHavePetException {"},{"lineNumber":526,"author":{"gitID":"-"},"content":"        if (!appointments.contains(appointment)) {"},{"lineNumber":527,"author":{"gitID":"-"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":528,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":529,"author":{"gitID":"-"},"content":"            Appointment appointmentCopy \u003d new Appointment(appointment);"},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"            if (appointmentCopy.getClientOwnPet() \u003d\u003d null) {"},{"lineNumber":532,"author":{"gitID":"-"},"content":"                throw new AppointmentDoesNotHavePetException();"},{"lineNumber":533,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":534,"author":{"gitID":"-"},"content":"                appointmentCopy.setClientOwnPetToNull();"},{"lineNumber":535,"author":{"gitID":"-"},"content":"                appointments.setAppointment(appointment, appointmentCopy);"},{"lineNumber":536,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":537,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":538,"author":{"gitID":"-"},"content":" }"},{"lineNumber":539,"author":{"gitID":"-"},"content":"----"},{"lineNumber":540,"author":{"gitID":"-"},"content":""},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of Appointment class,  Pet class \u0026 Client class"},{"lineNumber":545,"author":{"gitID":"-"},"content":"* *Alternative 1 (current choice):* Make a wrapper class that associates"},{"lineNumber":546,"author":{"gitID":"-"},"content":"a pet and a client together. With that association class, insert the object into"},{"lineNumber":547,"author":{"gitID":"-"},"content":"an appointment object. Have the appointment class that sets and gets the client"},{"lineNumber":548,"author":{"gitID":"-"},"content":"and pet association class."},{"lineNumber":549,"author":{"gitID":"-"},"content":"** Pros: Reduces coupling and increases cohesion. The appointment class will now be"},{"lineNumber":550,"author":{"gitID":"-"},"content":"the overheading class that takes in the pet and client."},{"lineNumber":551,"author":{"gitID":"-"},"content":"** Cons: Increases the code and program complexity. To amend the details of a client/pet"},{"lineNumber":552,"author":{"gitID":"-"},"content":"after insertion into an appointment will be inefficient."},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"* *Alternative 2:* Make the Pet class take in Appointment and Client object."},{"lineNumber":555,"author":{"gitID":"-"},"content":"** Pros: Querying each component will be simplified and fast. Code will be easier to"},{"lineNumber":556,"author":{"gitID":"-"},"content":"understand while still respecting the OOP principle."},{"lineNumber":557,"author":{"gitID":"-"},"content":"** Cons: Hugely increases coupling. There will be too many null objects or dependencies"},{"lineNumber":558,"author":{"gitID":"-"},"content":"on other class components."},{"lineNumber":559,"author":{"gitID":"-"},"content":"// end::mdazharPet[]"},{"lineNumber":560,"author":{"gitID":"-"},"content":""},{"lineNumber":561,"author":{"gitID":"purplepers0n"},"content":"// tag::listperson[]"},{"lineNumber":562,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d List and display clients, pets and vet technicians"},{"lineNumber":563,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":564,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":565,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":566,"author":{"gitID":"purplepers0n"},"content":"The side bar of the user interface implements a `TabPane` with three tabs,"},{"lineNumber":567,"author":{"gitID":"purplepers0n"},"content":"\u0027Client\u0027, \u0027Pet\u0027 and \u0027Vet Tech\u0027 where clicking on each tab will show the"},{"lineNumber":568,"author":{"gitID":"purplepers0n"},"content":"corresponding list. We will use the pet list to demonstrate the implementation."},{"lineNumber":569,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":570,"author":{"gitID":"purplepers0n"},"content":"The \u0027Pet\u0027 `Tab` consists of a `StackPane` called `petListPanelPlaceholder` in the `MainWindow.fxml` file."},{"lineNumber":571,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":572,"author":{"gitID":"purplepers0n"},"content":"In the `MainWindow.java` file, the `petListPanel`"},{"lineNumber":573,"author":{"gitID":"purplepers0n"},"content":"retrieves the updated list of pets from `logic`, and the `petListPanel` is added to `petListPanelPlaceholder` to be displayed this way:"},{"lineNumber":574,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":575,"author":{"gitID":"purplepers0n"},"content":"[source, java]"},{"lineNumber":576,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":577,"author":{"gitID":"purplepers0n"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":578,"author":{"gitID":"purplepers0n"},"content":"    void fillInnerParts() {"},{"lineNumber":579,"author":{"gitID":"purplepers0n"},"content":"        petListPanel \u003d new PetListPanel(logic.getFilteredPetList());"},{"lineNumber":580,"author":{"gitID":"purplepers0n"},"content":"        petListPanelPlaceholder.getChildren().add(petListPanel.getRoot());"},{"lineNumber":581,"author":{"gitID":"purplepers0n"},"content":"        // ...other placeholders..."},{"lineNumber":582,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":583,"author":{"gitID":"purplepers0n"},"content":"}"},{"lineNumber":584,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":585,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":586,"author":{"gitID":"purplepers0n"},"content":"The `PetListPanel` is a `ListView` which contains a list of `PetCard` which is implemented this way:"},{"lineNumber":587,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":588,"author":{"gitID":"jonathanwj"},"content":"[source, java]"},{"lineNumber":589,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":590,"author":{"gitID":"purplepers0n"},"content":"public class PetListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":591,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":592,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":593,"author":{"gitID":"purplepers0n"},"content":"    private ListView\u003cPetCard\u003e petListView;"},{"lineNumber":594,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":595,"author":{"gitID":"purplepers0n"},"content":"    private void setConnections(ObservableList\u003cPet\u003e petList) {"},{"lineNumber":596,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cPetCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":597,"author":{"gitID":"purplepers0n"},"content":"                petList, (pet) -\u003e new PetCard(pet, petList.indexOf(pet) + 1));"},{"lineNumber":598,"author":{"gitID":"purplepers0n"},"content":"        petListView.setItems(mappedList);"},{"lineNumber":599,"author":{"gitID":"purplepers0n"},"content":"        petListView.setCellFactory(listView -\u003e new PetListViewCell());"},{"lineNumber":600,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":601,"author":{"gitID":"purplepers0n"},"content":"}"},{"lineNumber":602,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":603,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":604,"author":{"gitID":"purplepers0n"},"content":"The `PetCard` contains a single pet and sets the pet\u0027s details and the layout of the display of details."},{"lineNumber":605,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":606,"author":{"gitID":"jonathanwj"},"content":"Figure 4-10 below is a screenshot of the final displayed pet list, where each pet, for example \u0027Garfield\u0027,"},{"lineNumber":607,"author":{"gitID":"purplepers0n"},"content":"is contained in a `PetCard`, and the cards of all pets are presented in a list form by using `PetListPanel`."},{"lineNumber":608,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":609,"author":{"gitID":"purplepers0n"},"content":".Screenshot of a List of Pets"},{"lineNumber":610,"author":{"gitID":"jonathanwj"},"content":"image::list_pet.PNG[width\u003d\"350\" caption\u003d\"Figure 4-10. \"]"},{"lineNumber":611,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":612,"author":{"gitID":"purplepers0n"},"content":"Aside from toggling the lists by clicking on the tabs, the `list` command is implemented to take in a parameter"},{"lineNumber":613,"author":{"gitID":"purplepers0n"},"content":"of either \u0027client\u0027, \u0027pet\u0027 or \u0027vettech\u0027 so that the list view updates appropriately when the `list` command is used."},{"lineNumber":614,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":615,"author":{"gitID":"purplepers0n"},"content":"Depending on the parameter, the `ListCommand` creates and adds `ChangeListTabEvent`"},{"lineNumber":616,"author":{"gitID":"purplepers0n"},"content":"to `EventCenter`, which is implemented this way:"},{"lineNumber":617,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":618,"author":{"gitID":"-"},"content":"----"},{"lineNumber":619,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":620,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":621,"author":{"gitID":"purplepers0n"},"content":"        public CommandResult execute() throws CommandException {"},{"lineNumber":622,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":623,"author":{"gitID":"purplepers0n"},"content":"            switch (targetType) {"},{"lineNumber":624,"author":{"gitID":"purplepers0n"},"content":"            case \"pet\":"},{"lineNumber":625,"author":{"gitID":"purplepers0n"},"content":"                model.updateFilteredPetList(PREDICATE_SHOW_ALL_PET);"},{"lineNumber":626,"author":{"gitID":"purplepers0n"},"content":"                EventsCenter.getInstance().post(new ChangeListTabEvent(1));"},{"lineNumber":627,"author":{"gitID":"purplepers0n"},"content":"                break;"},{"lineNumber":628,"author":{"gitID":"purplepers0n"},"content":"                // ...other cases..."},{"lineNumber":629,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":630,"author":{"gitID":"purplepers0n"},"content":"            // ...return..."},{"lineNumber":631,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":632,"author":{"gitID":"purplepers0n"},"content":"}"},{"lineNumber":633,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":634,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":635,"author":{"gitID":"purplepers0n"},"content":"The `MainWindow` then handles the `ChangeListTabEvent` by changing to the corresponding list on the UI display,"},{"lineNumber":636,"author":{"gitID":"purplepers0n"},"content":"and updates `logic` with the index of the current list so that other commands like `edit` and `delete`"},{"lineNumber":637,"author":{"gitID":"purplepers0n"},"content":"can perform the command on the correct list, which is implemented this way:"},{"lineNumber":638,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":639,"author":{"gitID":"purplepers0n"},"content":"[source, java]"},{"lineNumber":640,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":641,"author":{"gitID":"purplepers0n"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":642,"author":{"gitID":"purplepers0n"},"content":"    @Subscribe"},{"lineNumber":643,"author":{"gitID":"purplepers0n"},"content":"    private void handleChangeListTabEvent(ChangeListTabEvent event) {"},{"lineNumber":644,"author":{"gitID":"purplepers0n"},"content":"        changeTo(event.targetList);"},{"lineNumber":645,"author":{"gitID":"purplepers0n"},"content":"        logic.setCurrentList(event.targetList);"},{"lineNumber":646,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":647,"author":{"gitID":"purplepers0n"},"content":"    private void changeTo(int list) {"},{"lineNumber":648,"author":{"gitID":"purplepers0n"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":649,"author":{"gitID":"purplepers0n"},"content":"            listPanel.getSelectionModel().select(list);"},{"lineNumber":650,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":651,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":652,"author":{"gitID":"purplepers0n"},"content":"}"},{"lineNumber":653,"author":{"gitID":"purplepers0n"},"content":"----"},{"lineNumber":654,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":655,"author":{"gitID":"purplepers0n"},"content":"With this implementation, whether changing list by mouse-click or by command,"},{"lineNumber":656,"author":{"gitID":"purplepers0n"},"content":"the application always contains the index of the current list being viewed,"},{"lineNumber":657,"author":{"gitID":"purplepers0n"},"content":"so that the correct list will be displayed, and so that all other commands will"},{"lineNumber":658,"author":{"gitID":"purplepers0n"},"content":"be executed on the correct list."},{"lineNumber":659,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":660,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":661,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of toggling between lists"},{"lineNumber":662,"author":{"gitID":"purplepers0n"},"content":"* **Alternative 1 (current choice):** Client, Pet and Vet Tech lists are stored in three separate tabs,"},{"lineNumber":663,"author":{"gitID":"purplepers0n"},"content":"and an event is handled to toggle between the tabs to display the corresponding list"},{"lineNumber":664,"author":{"gitID":"purplepers0n"},"content":"** Pros: There are clickable tabs on the UI for easy toggling with both typing and mouse-click."},{"lineNumber":665,"author":{"gitID":"purplepers0n"},"content":"** Cons: The `MainWindow` needs to handle the event to switch to the correct tab."},{"lineNumber":666,"author":{"gitID":"purplepers0n"},"content":"* **Alternative 2:** Have a single display without tabs, and update it with either Client, Pet or Vet Tech list when the `list`"},{"lineNumber":667,"author":{"gitID":"purplepers0n"},"content":"command is executed"},{"lineNumber":668,"author":{"gitID":"purplepers0n"},"content":"** Pros: There is no need to create a new event and handle it."},{"lineNumber":669,"author":{"gitID":"purplepers0n"},"content":"** Cons: The displayed list needs to be updated every time `list` command is executed, reducing efficiency."},{"lineNumber":670,"author":{"gitID":"purplepers0n"},"content":"// end::listperson[]"},{"lineNumber":671,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":672,"author":{"gitID":"-"},"content":"// tag::scheduleappt[]"},{"lineNumber":673,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Schedule, unschedule and reschedule appointments feature"},{"lineNumber":674,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reasons for implementation"},{"lineNumber":675,"author":{"gitID":"-"},"content":"These features support the main functionality of *VetterAppointments* which is to facilitate the process of scheduling and organizing appointments."},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":678,"author":{"gitID":"-"},"content":"*Model component* +"},{"lineNumber":679,"author":{"gitID":"Godxin"},"content":"To schedule an appointment, the Vet must create a meeting by specifying the date, time, duration and a brief description."},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"The diagram figure 4-11 below illustrates the overview of the appointment class. +"},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"purplepers0n"},"content":".Overview the Appointment Class in VetterAppointments"},{"lineNumber":684,"author":{"gitID":"jonathanwj"},"content":"image::ModelAppointmentClassDiagram.png[width\u003d\"780\", caption\u003d\"Figure 4-11. \"]"},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"Godxin"},"content":"As you can see from the class diagram figure 4-11, there are four attributes of an appointment, and an individual class implements each of them."},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"Godxin"},"content":"We are not using the java date and time class but implementing our self-defined data types. The reason is to check the invalidity more efficiently."},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"The diagrams figure 4-12 below shows the class diagram for date and time. +"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"purplepers0n"},"content":".Date and Time Class Diagram Snippets"},{"lineNumber":693,"author":{"gitID":"jonathanwj"},"content":"image::AppointmentClassDemo.png[width\u003d\"500\", caption\u003d\"Figure 4-12. \"]"},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"Godxin"},"content":"The methods to check for a valid date are implemented these ways:"},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"* check for format"},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":700,"author":{"gitID":"-"},"content":"----"},{"lineNumber":701,"author":{"gitID":"-"},"content":" public static final String DATE_VALIDATION_REGEX \u003d"},{"lineNumber":702,"author":{"gitID":"-"},"content":"            \"([2-9][0-9][1-9][89])-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])\";"},{"lineNumber":703,"author":{"gitID":"-"},"content":"----"},{"lineNumber":704,"author":{"gitID":"Godxin"},"content":"By checking the date regex, the only the date entered in the format of YYYY-MM-DD will be accepted."},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"* check for valid years"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":709,"author":{"gitID":"-"},"content":"----"},{"lineNumber":710,"author":{"gitID":"-"},"content":"private static final int YEAR_LOWER_BOUND \u003d 2018;"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"public static boolean isValidYear(int test) {"},{"lineNumber":713,"author":{"gitID":"-"},"content":"        return test \u003e\u003d YEAR_LOWER_BOUND;"},{"lineNumber":714,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":715,"author":{"gitID":"-"},"content":"----"},{"lineNumber":716,"author":{"gitID":"-"},"content":""},{"lineNumber":717,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":718,"author":{"gitID":"purplepers0n"},"content":"The year should be later than 2018."},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"* check for valid days"},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"The code below shows all static values used to check for the validity of a given date."},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":725,"author":{"gitID":"-"},"content":"----"},{"lineNumber":726,"author":{"gitID":"-"},"content":"private static final int BIG_MONTH_DAY \u003d 31;"},{"lineNumber":727,"author":{"gitID":"-"},"content":"private static final int SMALL_MONTH_DAY \u003d 30;"},{"lineNumber":728,"author":{"gitID":"-"},"content":"private static final int FEB_LEAP_YEAR_DAY \u003d 29;"},{"lineNumber":729,"author":{"gitID":"-"},"content":"private static final int FEB_NONLEAP_YEAR_DAY \u003d 28;"},{"lineNumber":730,"author":{"gitID":"-"},"content":"private  static final String[] BIG_MONTH \u003d {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};"},{"lineNumber":731,"author":{"gitID":"-"},"content":"private  static final String[] SMALL_MONTH \u003d {\"04\", \"06\", \"09\", \"11\"};"},{"lineNumber":732,"author":{"gitID":"-"},"content":"----"},{"lineNumber":733,"author":{"gitID":"-"},"content":""},{"lineNumber":734,"author":{"gitID":"Godxin"},"content":"The code below shows the actual implementation of validating values for a given date."},{"lineNumber":735,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":736,"author":{"gitID":"-"},"content":"----"},{"lineNumber":737,"author":{"gitID":"-"},"content":"public static Boolean isValidDaysInMonth(String test) {"},{"lineNumber":738,"author":{"gitID":"-"},"content":"        int testYear \u003d getYear(test);"},{"lineNumber":739,"author":{"gitID":"-"},"content":"        String testMonth \u003d getMonth(test);"},{"lineNumber":740,"author":{"gitID":"-"},"content":"        int testDay \u003d getDay(test);"},{"lineNumber":741,"author":{"gitID":"-"},"content":"        int daysInMonth;"},{"lineNumber":742,"author":{"gitID":"-"},"content":""},{"lineNumber":743,"author":{"gitID":"-"},"content":"        if (Arrays.asList(BIG_MONTH).contains(testMonth)) {"},{"lineNumber":744,"author":{"gitID":"-"},"content":"            daysInMonth \u003d BIG_MONTH_DAY;"},{"lineNumber":745,"author":{"gitID":"-"},"content":"        } else if (Arrays.asList(SMALL_MONTH).contains(testMonth)) {"},{"lineNumber":746,"author":{"gitID":"-"},"content":"            daysInMonth \u003d SMALL_MONTH_DAY;"},{"lineNumber":747,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":748,"author":{"gitID":"-"},"content":"            if (isLeapYear(testYear)) {"},{"lineNumber":749,"author":{"gitID":"-"},"content":"                daysInMonth \u003d FEB_LEAP_YEAR_DAY;"},{"lineNumber":750,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":751,"author":{"gitID":"-"},"content":"                daysInMonth \u003d FEB_NONLEAP_YEAR_DAY;"},{"lineNumber":752,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":753,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":754,"author":{"gitID":"-"},"content":"        return testDay \u003c\u003d daysInMonth;"},{"lineNumber":755,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":756,"author":{"gitID":"-"},"content":"----"},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"Godxin"},"content":"By checking whether the given month is big, small or February, we can compare the day entered with the last day of the month. If the day provided is less than or equal to the last day in the month then the date entered by the user can be considered valid."},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"The code below shows how to determine a leap year:"},{"lineNumber":761,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":762,"author":{"gitID":"-"},"content":"----"},{"lineNumber":763,"author":{"gitID":"-"},"content":"private static final int LEAP_YEAR_DIVIDER \u003d 4;"},{"lineNumber":764,"author":{"gitID":"-"},"content":"private static final int CENTURY_YEAR_DIVIDER \u003d 100;"},{"lineNumber":765,"author":{"gitID":"-"},"content":"private static final int CENTURY_LEAP_YEAR_DIVIDER \u003d 400;"},{"lineNumber":766,"author":{"gitID":"-"},"content":"private static final int LEAP_YEAR_REMAINDER \u003d 0;"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":" public static boolean isLeapYear(int test) {"},{"lineNumber":769,"author":{"gitID":"-"},"content":"    if ((test % CENTURY_LEAP_YEAR_DIVIDER \u003d\u003d LEAP_YEAR_REMAINDER)"},{"lineNumber":770,"author":{"gitID":"-"},"content":"        || ((test % LEAP_YEAR_DIVIDER \u003d\u003d LEAP_YEAR_REMAINDER)"},{"lineNumber":771,"author":{"gitID":"-"},"content":"        \u0026\u0026 (test % CENTURY_YEAR_DIVIDER !\u003d LEAP_YEAR_REMAINDER))) {"},{"lineNumber":772,"author":{"gitID":"-"},"content":"        return true;"},{"lineNumber":773,"author":{"gitID":"-"},"content":"    } else {"},{"lineNumber":774,"author":{"gitID":"-"},"content":"        return false;"},{"lineNumber":775,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":776,"author":{"gitID":"-"},"content":" }"},{"lineNumber":777,"author":{"gitID":"-"},"content":"----"},{"lineNumber":778,"author":{"gitID":"-"},"content":""},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"The method to check for a valid time is implemented this way:"},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":783,"author":{"gitID":"-"},"content":"----"},{"lineNumber":784,"author":{"gitID":"-"},"content":" public static final String TIME_VALIDATION_REGEX \u003d \"([01]?[0-9]|2[0-3]):([0-5][0-9])\";"},{"lineNumber":785,"author":{"gitID":"-"},"content":"----"},{"lineNumber":786,"author":{"gitID":"-"},"content":"By checking the time regex, only time entered in the format of HH:MM will be accepted."},{"lineNumber":787,"author":{"gitID":"-"},"content":""},{"lineNumber":788,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":789,"author":{"gitID":"-"},"content":"Time is expressed in 24 hour format hence hour ranges from 00 to 23 and minute from 01 to 60. +"},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"Godxin"},"content":"The diagram figure 4-13 below shows the class diagram of duration. +"},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"purplepers0n"},"content":".Duration Class Diagram Snippet"},{"lineNumber":794,"author":{"gitID":"jonathanwj"},"content":"image::AppointmentClassDemo2.png[width\u003d\"500\", caption\u003d\"Figure 4-13. \"]"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"The method to check for a valid duration is implemented this way:"},{"lineNumber":797,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":798,"author":{"gitID":"-"},"content":"----"},{"lineNumber":799,"author":{"gitID":"-"},"content":" public static final String DURATION_VALIDATION_REGEX \u003d \"(1[5-9]|[2-9][0-9]|1[01][0-9]|120)\";"},{"lineNumber":800,"author":{"gitID":"-"},"content":"----"},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":803,"author":{"gitID":"-"},"content":"Duration can be either two or three digit number and the value is in minute."},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"The diagram figure 4-14 below shows the class diagram of appointment. +"},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"purplepers0n"},"content":".Appointment Class Diagram Snippet"},{"lineNumber":808,"author":{"gitID":"jonathanwj"},"content":"image::AppointmentClassDemo3.png[width\u003d\"500\", caption\u003d\"Figure 4-14. \"]"},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"Godxin"},"content":"To differentiate appointments, I implement the equals method this way:"},{"lineNumber":811,"author":{"gitID":"-"},"content":""},{"lineNumber":812,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":813,"author":{"gitID":"-"},"content":"----"},{"lineNumber":814,"author":{"gitID":"-"},"content":"public boolean equals(Object other) {"},{"lineNumber":815,"author":{"gitID":"-"},"content":"    ......"},{"lineNumber":816,"author":{"gitID":"-"},"content":"    ......"},{"lineNumber":817,"author":{"gitID":"-"},"content":"    Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":818,"author":{"gitID":"-"},"content":"    return otherAppointment.getDate().equals(this.getDate())"},{"lineNumber":819,"author":{"gitID":"-"},"content":"           \u0026\u0026 otherAppointment.getTime().equals(this.getTime());"},{"lineNumber":820,"author":{"gitID":"-"},"content":"}"},{"lineNumber":821,"author":{"gitID":"-"},"content":"----"},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"Godxin"},"content":"To avoid overlapping between any two appointments, I implement the following two checks:"},{"lineNumber":824,"author":{"gitID":"Godxin"},"content":"* check for previous"},{"lineNumber":825,"author":{"gitID":"Godxin"},"content":"* check for next"},{"lineNumber":826,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":827,"author":{"gitID":"Godxin"},"content":"The code snippet below shows the check for previous."},{"lineNumber":828,"author":{"gitID":"Godxin"},"content":"[source,java]"},{"lineNumber":829,"author":{"gitID":"Godxin"},"content":"----"},{"lineNumber":830,"author":{"gitID":"Godxin"},"content":"public boolean hasPrevious(Appointment currentAppointment) {"},{"lineNumber":831,"author":{"gitID":"Godxin"},"content":"    ......"},{"lineNumber":832,"author":{"gitID":"Godxin"},"content":"    ......"},{"lineNumber":833,"author":{"gitID":"Godxin"},"content":"    for (Appointment earlierAppointment : internalList) {"},{"lineNumber":834,"author":{"gitID":"Godxin"},"content":"        ......"},{"lineNumber":835,"author":{"gitID":"Godxin"},"content":"        if (newAppointmentDate.equals(earlierAppointmentDate)) {"},{"lineNumber":836,"author":{"gitID":"Godxin"},"content":"                if (earlierAppointmentTime.getHour() \u003c currentHour"},{"lineNumber":837,"author":{"gitID":"Godxin"},"content":"                        || (earlierAppointmentTime.getHour() \u003d\u003d currentHour"},{"lineNumber":838,"author":{"gitID":"Godxin"},"content":"                        \u0026\u0026 earlierAppointmentTime.getMinute() \u003c currentMin)) {"},{"lineNumber":839,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":840,"author":{"gitID":"Godxin"},"content":"                    interval \u003d currentAppointment.calDurationDifferencePositive(earlierAppointment);"},{"lineNumber":841,"author":{"gitID":"Godxin"},"content":"                    if (interval \u003c minInterval) {"},{"lineNumber":842,"author":{"gitID":"Godxin"},"content":"                        minInterval \u003d interval;"},{"lineNumber":843,"author":{"gitID":"Godxin"},"content":"                        previous \u003d earlierAppointment;"},{"lineNumber":844,"author":{"gitID":"Godxin"},"content":"                        hasPreviousAppointment \u003d true;"},{"lineNumber":845,"author":{"gitID":"Godxin"},"content":"                    }"},{"lineNumber":846,"author":{"gitID":"Godxin"},"content":"                    ...."},{"lineNumber":847,"author":{"gitID":"Godxin"},"content":"----"},{"lineNumber":848,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":849,"author":{"gitID":"Godxin"},"content":"check for next is similar and the code snippet below only shows different."},{"lineNumber":850,"author":{"gitID":"Godxin"},"content":"[source,java]"},{"lineNumber":851,"author":{"gitID":"Godxin"},"content":"----"},{"lineNumber":852,"author":{"gitID":"Godxin"},"content":"public boolean hasNext(Appointment currentAppointment) {"},{"lineNumber":853,"author":{"gitID":"Godxin"},"content":"    ......"},{"lineNumber":854,"author":{"gitID":"Godxin"},"content":"    ......"},{"lineNumber":855,"author":{"gitID":"Godxin"},"content":"    if (laterAppointmentTime.getHour() \u003e currentHour"},{"lineNumber":856,"author":{"gitID":"Godxin"},"content":"                        || (laterAppointmentTime.getHour() \u003d\u003d currentHour"},{"lineNumber":857,"author":{"gitID":"Godxin"},"content":"                        \u0026\u0026 currentMin \u003c laterAppointmentTime.getMinute())) {"},{"lineNumber":858,"author":{"gitID":"Godxin"},"content":"                    interval \u003d currentAppointment.calDurationDifferenceNegative(laterAppointment);"},{"lineNumber":859,"author":{"gitID":"Godxin"},"content":"                    if (interval \u003c minInterval) {"},{"lineNumber":860,"author":{"gitID":"Godxin"},"content":"                        minInterval \u003d interval;"},{"lineNumber":861,"author":{"gitID":"Godxin"},"content":"                        next \u003d laterAppointment;"},{"lineNumber":862,"author":{"gitID":"Godxin"},"content":"                        hasNextAppointment \u003d true;"},{"lineNumber":863,"author":{"gitID":"Godxin"},"content":"                    }"},{"lineNumber":864,"author":{"gitID":"Godxin"},"content":"                    ......"},{"lineNumber":865,"author":{"gitID":"Godxin"},"content":"----"},{"lineNumber":866,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":867,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":868,"author":{"gitID":"-"},"content":"Only date and time are responsible for duplicate appointments."},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"purplepers0n"},"content":"*Logic component* +"},{"lineNumber":871,"author":{"gitID":"-"},"content":"The following sequence diagram figure 4-15 shows how the schedule command works. +"},{"lineNumber":872,"author":{"gitID":"-"},"content":""},{"lineNumber":873,"author":{"gitID":"purplepers0n"},"content":".Sequence Diagram of Interactions inside the Logic Component for `schedule date time duration` Command"},{"lineNumber":874,"author":{"gitID":"jonathanwj"},"content":"image::ScheduleLogicSequenceDiagram.png[width\u003d\"800\", caption\u003d\"Figure 4-15. \"]"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"purplepers0n"},"content":"As you can see from the above diagram, the schedule command first goes to the `logicManager` and then gets parsed by the `ScheduleCommandParser`."},{"lineNumber":877,"author":{"gitID":"purplepers0n"},"content":"After getting the appointment object from `Model`, the command result is returned to `LogicManager`."},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"purplepers0n"},"content":"*Storage component* +"},{"lineNumber":880,"author":{"gitID":"-"},"content":"The following diagram figure 4-16 shows how the appointment is being stored in VetterAppointments. +"},{"lineNumber":881,"author":{"gitID":"-"},"content":""},{"lineNumber":882,"author":{"gitID":"purplepers0n"},"content":".Appointment Storage Class Diagram"},{"lineNumber":883,"author":{"gitID":"jonathanwj"},"content":"image::AppointmentStorageClassDiagram.png[width\u003d\"800\", caption\u003d\"Figure 4-16. \"]"},{"lineNumber":884,"author":{"gitID":"-"},"content":""},{"lineNumber":885,"author":{"gitID":"Godxin"},"content":"As shown in the above diagram figure 4-16, appointments are saved and read back in XML format."},{"lineNumber":886,"author":{"gitID":"-"},"content":""},{"lineNumber":887,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":888,"author":{"gitID":"-"},"content":""},{"lineNumber":889,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of appointment class"},{"lineNumber":890,"author":{"gitID":"-"},"content":"* ** Alternative 1 (current choice): ** Use aggregation association"},{"lineNumber":891,"author":{"gitID":"Godxin"},"content":"** Pros:All objects such as date, time, duration and description can survive after deleting an appointment associate them. In other words, ending one entity will not affect the other. Aggregation also helps to reduce class coupling."},{"lineNumber":892,"author":{"gitID":"-"},"content":"Aggregation also helps to reduce class coupling."},{"lineNumber":893,"author":{"gitID":"-"},"content":"** Cons: The association is weak."},{"lineNumber":894,"author":{"gitID":"-"},"content":"* ** Alternative 2: **Use composition association"},{"lineNumber":895,"author":{"gitID":"Godxin"},"content":"** Pros:It ensures a strong one to one association between all parts."},{"lineNumber":896,"author":{"gitID":"-"},"content":"** Cons: The composed objects cannot exist without the other entity."},{"lineNumber":897,"author":{"gitID":"-"},"content":""},{"lineNumber":898,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Aspect: Implementation of date and time classes"},{"lineNumber":899,"author":{"gitID":"-"},"content":"* ** Alternative 1: **(current choice) Use self defined classes"},{"lineNumber":900,"author":{"gitID":"jonathanwj"},"content":"** Pros: You have the full knowledge of the implementation of the methods and characteristic of attributes. As a result, you can customize the class to make it answer queries more efficiently."},{"lineNumber":901,"author":{"gitID":"Godxin"},"content":"** Cons: It is easier to make mistakes when implementing the methods."},{"lineNumber":902,"author":{"gitID":"-"},"content":"* ** Alternative 2: ** Use java class library"},{"lineNumber":903,"author":{"gitID":"Godxin"},"content":"** Pros: It is straightforward and easy to use. You only care about the functions rather than the implementation."},{"lineNumber":904,"author":{"gitID":"Godxin"},"content":"** Cons: The lack of the knowledge about implementation makes the debugging harder. Also, you may need to create extra methods to perform specific functions that are not defined in the class."},{"lineNumber":905,"author":{"gitID":"-"},"content":"// end::scheduleappt[]"},{"lineNumber":906,"author":{"gitID":"-"},"content":""},{"lineNumber":907,"author":{"gitID":"-"},"content":"// tag::entitymodel[]"},{"lineNumber":908,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Client, vet technician, pet, appointment entity"},{"lineNumber":909,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reasons for implementation"},{"lineNumber":911,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":912,"author":{"gitID":"jonathanwj"},"content":"VetterAppointments requires to manage clients, vet technicians, pets and appointments in the application. An implementation of these objects is required for the application to be able to process the data."},{"lineNumber":913,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":914,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":915,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":916,"author":{"gitID":"-"},"content":"The entities of VetterAppointments are contained within the `AddressBook` class. `AddressBook` maintains the collections of `Person`, `Appointment`, `ClientOwnPet` and `Pet`."},{"lineNumber":917,"author":{"gitID":"-"},"content":""},{"lineNumber":918,"author":{"gitID":"-"},"content":"Figure 4-17 below shows the class diagram of how the entities are connected in VetterAppointments."},{"lineNumber":919,"author":{"gitID":"-"},"content":""},{"lineNumber":920,"author":{"gitID":"-"},"content":".Entity Relationship Class Diagram"},{"lineNumber":921,"author":{"gitID":"-"},"content":"image::DataObjectClassDiagram.png[width\u003d\"800\", caption\u003d\"Figure 4-17. \"]"},{"lineNumber":922,"author":{"gitID":"-"},"content":""},{"lineNumber":923,"author":{"gitID":"-"},"content":"As seen from figure 4-17 VetTechnician` and `Client` are sub classes of the `Person` class. `ClientOwnPet` is an association class that associates the ownership of the `Pet` to the `Client`. `Appointment` will contain the `VetTechnician` and `ClientOwnPet` that will have the associated `Client` and `Pet`."},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of entity data model"},{"lineNumber":928,"author":{"gitID":"-"},"content":""},{"lineNumber":929,"author":{"gitID":"jonathanwj"},"content":"* **Alternative 1 (current choice):** Only couple entities if necessary"},{"lineNumber":930,"author":{"gitID":"-"},"content":"** Pros: Low coupling. Classes will have lesser dependency between entities."},{"lineNumber":931,"author":{"gitID":"-"},"content":"** Cons: New developers will need to thoroughly understand the class interactions."},{"lineNumber":932,"author":{"gitID":"jonathanwj"},"content":"* **Alternative 2:** Couple all entities"},{"lineNumber":933,"author":{"gitID":"-"},"content":"** Pros: Classes can easily access highly coupled classes."},{"lineNumber":934,"author":{"gitID":"-"},"content":"** Cons: High coupling. Integration and testing will be harder."},{"lineNumber":935,"author":{"gitID":"-"},"content":"// end::entitymodel[]"},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"jonathanwj"},"content":"// tag::autocomplete[]"},{"lineNumber":938,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d Autocomplete feature"},{"lineNumber":939,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Reasons for implementation"},{"lineNumber":941,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":942,"author":{"gitID":"jonathanwj"},"content":"The autocomplete feature will allow vets to type their commands quicker as some of the commands require several inputs from the vet. With the autocomplete feature, vets will be able to execute commands faster to save time."},{"lineNumber":943,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current implementation"},{"lineNumber":945,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":946,"author":{"gitID":"jonathanwj"},"content":"The autocomplete mechanism is facilitated by `AutoCompleteManager`, which resides inside `LogicManager`. It supports the auto completion of incomplete commands by providing a list of auto completed command from a given incomplete command."},{"lineNumber":947,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":948,"author":{"gitID":"jonathanwj"},"content":"An underlying `Trie` data structure is used to facilitate the `AutoCompleteManager` functionality."},{"lineNumber":949,"author":{"gitID":"jonathanwj"},"content":"The `Trie` only supports the auto completion of commands provided by `AutoCompleteManager`. The `CommandParameterSyntaxHandler` which resides in `AutocompleteManager` supports the auto completion of parameters for commands."},{"lineNumber":950,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"Figure 4-18 shows the class diagram of the autocomplete implementation."},{"lineNumber":952,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":953,"author":{"gitID":"jonathanwj"},"content":".Autocomplete Implementation Class Diagram"},{"lineNumber":954,"author":{"gitID":"-"},"content":"image::LogicAutoCompleteClassDiagram.png[width\u003d\"800\", caption\u003d\"Figure 4-18. \"]"},{"lineNumber":955,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":956,"author":{"gitID":"jonathanwj"},"content":"The `CommandBox` will interact with the AutoCompleteManager from using the `LogicManager`."},{"lineNumber":957,"author":{"gitID":"jonathanwj"},"content":"When the user presses tab in the command box area, the `CommandBox` will handle the tab key press and executes the `autoCompleteUserInput()` method."},{"lineNumber":958,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":959,"author":{"gitID":"jonathanwj"},"content":"[source,java]"},{"lineNumber":960,"author":{"gitID":"jonathanwj"},"content":"----"},{"lineNumber":961,"author":{"gitID":"jonathanwj"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":962,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":963,"author":{"gitID":"jonathanwj"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":964,"author":{"gitID":"jonathanwj"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":965,"author":{"gitID":"jonathanwj"},"content":"        // ... other cases ..."},{"lineNumber":966,"author":{"gitID":"jonathanwj"},"content":"        case TAB:"},{"lineNumber":967,"author":{"gitID":"jonathanwj"},"content":"            keyEvent.consume();"},{"lineNumber":968,"author":{"gitID":"jonathanwj"},"content":"            autoCompleteUserInput();"},{"lineNumber":969,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":970,"author":{"gitID":"jonathanwj"},"content":"        default:"},{"lineNumber":971,"author":{"gitID":"jonathanwj"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":972,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":973,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":974,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":975,"author":{"gitID":"jonathanwj"},"content":"    /* Shows auto completed text or suggestions on the UI */"},{"lineNumber":976,"author":{"gitID":"jonathanwj"},"content":"    private void autoCompleteUserInput() {"},{"lineNumber":977,"author":{"gitID":"jonathanwj"},"content":"        // ... auto complete logic ..."},{"lineNumber":978,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":979,"author":{"gitID":"jonathanwj"},"content":"        if (isTabDoubleTap()) {"},{"lineNumber":980,"author":{"gitID":"jonathanwj"},"content":"            // ... show suggestion on UI logic ..."},{"lineNumber":981,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":982,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":983,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":984,"author":{"gitID":"jonathanwj"},"content":"}"},{"lineNumber":985,"author":{"gitID":"jonathanwj"},"content":"----"},{"lineNumber":986,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":987,"author":{"gitID":"jonathanwj"},"content":"The `isTabDoubleTap()` method will check if the user presses tab twice in quick succession. If true, the `CommandBox` will show a list of command suggestions for the current user input."},{"lineNumber":988,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":"Figure 4-19 shows the sequence diagram of how the autocomplete operation works."},{"lineNumber":990,"author":{"gitID":"-"},"content":""},{"lineNumber":991,"author":{"gitID":"jonathanwj"},"content":".Autocomplete Sequence Diagram"},{"lineNumber":992,"author":{"gitID":"-"},"content":"image::AutoCompleteSequenceDiagram.png[width\u003d\"800\", caption\u003d\"Figure 4-19. \"]"},{"lineNumber":993,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":994,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":995,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":996,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of autocomplete capability"},{"lineNumber":997,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":998,"author":{"gitID":"jonathanwj"},"content":"* **Alternative 1 (current choice):** Add a manager class to handle all autocomplete behaviour"},{"lineNumber":999,"author":{"gitID":"jonathanwj"},"content":"** Pros: The class will allow for more code abstraction and can also be implemented elsewhere."},{"lineNumber":1000,"author":{"gitID":"-"},"content":"** Cons: New developers will need to thoroughly understand the class interactions."},{"lineNumber":1001,"author":{"gitID":"jonathanwj"},"content":"* **Alternative 2:** Add the autocomplete logic simply in the `Commandbox`"},{"lineNumber":1002,"author":{"gitID":"purplepers0n"},"content":"** Pros: Other classes are not involved, making it easier for new developers to understand."},{"lineNumber":1003,"author":{"gitID":"purplepers0n"},"content":"** Cons: It breaks the Single Responsibility Principle."},{"lineNumber":1004,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":1005,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of algorithm"},{"lineNumber":1006,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":1007,"author":{"gitID":"jonathanwj"},"content":"* **Alternative 1 (current choice):** Use a Trie data structure"},{"lineNumber":1008,"author":{"gitID":"purplepers0n"},"content":"** Pros: Software performance will be better."},{"lineNumber":1009,"author":{"gitID":"purplepers0n"},"content":"** Cons: It is difficult to implement."},{"lineNumber":1010,"author":{"gitID":"jonathanwj"},"content":"* **Alternative 2:** Iterate through all possible commands to find match prefix"},{"lineNumber":1011,"author":{"gitID":"purplepers0n"},"content":"** Pros: It is easier to implement."},{"lineNumber":1012,"author":{"gitID":"purplepers0n"},"content":"** Cons: It may result in performance loss if there are too many commands."},{"lineNumber":1013,"author":{"gitID":"jonathanwj"},"content":"// end::autocomplete[]"},{"lineNumber":1014,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":1015,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":1016,"author":{"gitID":"-"},"content":""},{"lineNumber":1017,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":1018,"author":{"gitID":"-"},"content":""},{"lineNumber":1019,"author":{"gitID":"purplepers0n"},"content":"The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)."},{"lineNumber":1020,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1021,"author":{"gitID":"purplepers0n"},"content":"The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level."},{"lineNumber":1022,"author":{"gitID":"jonathanwj"},"content":"Currently log messages are output through the `Console` and to a `.log` file."},{"lineNumber":1023,"author":{"gitID":"-"},"content":""},{"lineNumber":1024,"author":{"gitID":"purplepers0n"},"content":"These are the four logging levels:"},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"purplepers0n"},"content":"* `SEVERE` : A critical problem has been detected which may possibly cause the termination of the application"},{"lineNumber":1027,"author":{"gitID":"purplepers0n"},"content":"* `WARNING` : The user can continue, but with caution"},{"lineNumber":1028,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":1029,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":1030,"author":{"gitID":"-"},"content":""},{"lineNumber":1031,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":1032,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":""},{"lineNumber":1037,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1038,"author":{"gitID":"-"},"content":""},{"lineNumber":1039,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1042,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Editing documentation"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1047,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1048,"author":{"gitID":"-"},"content":""},{"lineNumber":1049,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Publishing documentation"},{"lineNumber":1050,"author":{"gitID":"-"},"content":""},{"lineNumber":1051,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1052,"author":{"gitID":"-"},"content":""},{"lineNumber":1053,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Converting documentation to PDF format"},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"jonathanwj"},"content":"Here are the steps to convert the project documentation files to PDF format:"},{"lineNumber":1058,"author":{"gitID":"-"},"content":""},{"lineNumber":1059,"author":{"gitID":"purplepers0n"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format"},{"lineNumber":1060,"author":{"gitID":"purplepers0n"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`"},{"lineNumber":1061,"author":{"gitID":"purplepers0n"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu"},{"lineNumber":1062,"author":{"gitID":"purplepers0n"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below"},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"jonathanwj"},"content":".Saving Documentation as PDF Files in Chrome"},{"lineNumber":1065,"author":{"gitID":"jonathanwj"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\" caption\u003d\"Figure 5-1. \"]"},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1068,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Running tests"},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"purplepers0n"},"content":"To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`."},{"lineNumber":1080,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1081,"author":{"gitID":"purplepers0n"},"content":"To run a subset of tests, right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`."},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"purplepers0n"},"content":"To run all tests, open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)."},{"lineNumber":1086,"author":{"gitID":"-"},"content":""},{"lineNumber":1087,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1088,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1093,"author":{"gitID":"-"},"content":""},{"lineNumber":1094,"author":{"gitID":"jonathanwj"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)."},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d Types of Tests"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"purplepers0n"},"content":".  *GUI Tests* - These are tests involving the GUI. They include:"},{"lineNumber":1101,"author":{"gitID":"purplepers0n"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package"},{"lineNumber":1102,"author":{"gitID":"purplepers0n"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package"},{"lineNumber":1103,"author":{"gitID":"purplepers0n"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include:"},{"lineNumber":1104,"author":{"gitID":"purplepers0n"},"content":"..  _Unit tests_ that target the lowest level methods/classes. +"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":1106,"author":{"gitID":"purplepers0n"},"content":"..  _Integration tests_ that check the integration of multiple code units (those code units are assumed to be working) +"},{"lineNumber":1107,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":1108,"author":{"gitID":"purplepers0n"},"content":"..  Hybrids of unit and integration tests that check multiple code units as well as how they are connected together +"},{"lineNumber":1109,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Troubleshooting testing"},{"lineNumber":1113,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1116,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1117,"author":{"gitID":"-"},"content":""},{"lineNumber":1118,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1119,"author":{"gitID":"-"},"content":""},{"lineNumber":1120,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Build automation"},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Continuous integration"},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Coverage reporting"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Documentation previews"},{"lineNumber":1133,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Making a release"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1138,"author":{"gitID":"-"},"content":""},{"lineNumber":1139,"author":{"gitID":"jonathanwj"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]"},{"lineNumber":1140,"author":{"gitID":"jonathanwj"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e"},{"lineNumber":1141,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1142,"author":{"gitID":"jonathanwj"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created"},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Managing dependencies"},{"lineNumber":1145,"author":{"gitID":"-"},"content":""},{"lineNumber":1146,"author":{"gitID":"purplepers0n"},"content":"A project often depends on third-party libraries. For example, VetterAppointments depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1147,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1148,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1149,"author":{"gitID":"-"},"content":""},{"lineNumber":1150,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1152,"author":{"gitID":"-"},"content":""},{"lineNumber":1153,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1154,"author":{"gitID":"-"},"content":""},{"lineNumber":1155,"author":{"gitID":"jonathanwj"},"content":"* Occupation as a vet"},{"lineNumber":1156,"author":{"gitID":"jonathanwj"},"content":"* Has a need to manage a significant number of clients, pets and appointments"},{"lineNumber":1157,"author":{"gitID":"jonathanwj"},"content":"* Prefer desktop apps over other types"},{"lineNumber":1158,"author":{"gitID":"jonathanwj"},"content":"* Can type fast"},{"lineNumber":1159,"author":{"gitID":"jonathanwj"},"content":"* Prefers typing over mouse input"},{"lineNumber":1160,"author":{"gitID":"jonathanwj"},"content":"* Is reasonably comfortable using CLI apps"},{"lineNumber":1161,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":1162,"author":{"gitID":"purplepers0n"},"content":"*Value proposition*:"},{"lineNumber":1163,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1164,"author":{"gitID":"purplepers0n"},"content":"Allow vets to easily manage their clients and schedule appointments"},{"lineNumber":1165,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1166,"author":{"gitID":"purplepers0n"},"content":"*Feature Contributions*:"},{"lineNumber":1167,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1168,"author":{"gitID":"purplepers0n"},"content":"*Jonathan Weng*"},{"lineNumber":1169,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1170,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1171,"author":{"gitID":"purplepers0n"},"content":"* *Major Enhancement*: Support auto-complete for all commands"},{"lineNumber":1172,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1173,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1174,"author":{"gitID":"purplepers0n"},"content":"** When the vet presses the \u0027Tab\u0027 button on the keyboard once while in the command box, the application"},{"lineNumber":1175,"author":{"gitID":"purplepers0n"},"content":"will auto-complete the text. Auto-complete support not only works on command words, but also when"},{"lineNumber":1176,"author":{"gitID":"purplepers0n"},"content":"searching for the names of existing clients, pets and vet technicians in the application. This will allow the vet"},{"lineNumber":1177,"author":{"gitID":"purplepers0n"},"content":"to partially type a command and quickly complete it to improve typing efficiency."},{"lineNumber":1178,"author":{"gitID":"purplepers0n"},"content":"** When the vet presses the \u0027Tab\u0027 button on the keyboard twice in quick succession while in the command box,"},{"lineNumber":1179,"author":{"gitID":"purplepers0n"},"content":"the application will list down all possible text to be auto-completed to."},{"lineNumber":1180,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1181,"author":{"gitID":"purplepers0n"},"content":"* *Minor Enhancement*: Support for adding clients and vet technicians to the application"},{"lineNumber":1182,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1183,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1184,"author":{"gitID":"purplepers0n"},"content":"** The `add` command now takes in a ROLE parameter (either \u0027Client\u0027 or \u0027VetTechnician\u0027)"},{"lineNumber":1185,"author":{"gitID":"purplepers0n"},"content":"so that the vet can add the new person to the correct list."},{"lineNumber":1186,"author":{"gitID":"purplepers0n"},"content":"** The `delete` and `edit` command will also allow the vet to remove and edit clients and vet technicians."},{"lineNumber":1187,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1188,"author":{"gitID":"-"},"content":"// tag::mdazharEnhancements[]"},{"lineNumber":1189,"author":{"gitID":"purplepers0n"},"content":"*Md Azhar*"},{"lineNumber":1190,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1191,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1192,"author":{"gitID":"-"},"content":"* *Major Enhancement*: A collection of commands that supports the Pet component and Appointment component."},{"lineNumber":1193,"author":{"gitID":"-"},"content":""},{"lineNumber":1194,"author":{"gitID":"-"},"content":". Pet class containing: PetName, PetAge, PetGender and Tag classes."},{"lineNumber":1195,"author":{"gitID":"-"},"content":". AddPetCommand"},{"lineNumber":1196,"author":{"gitID":"-"},"content":". DeletePetCommand"},{"lineNumber":1197,"author":{"gitID":"-"},"content":". AddAppointmentToPetCommand"},{"lineNumber":1198,"author":{"gitID":"-"},"content":". RemoveAppointmentFromPetCommand"},{"lineNumber":1199,"author":{"gitID":"-"},"content":". SortAppointmentCommand"},{"lineNumber":1200,"author":{"gitID":"-"},"content":". SortClientCommand"},{"lineNumber":1201,"author":{"gitID":"-"},"content":". SortPetCommand"},{"lineNumber":1202,"author":{"gitID":"-"},"content":". UnscheduleCommand"},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"-"},"content":""},{"lineNumber":1205,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"** The Pet class component is the backbone of `addp`, `deletep`, `addappttopet`,"},{"lineNumber":1207,"author":{"gitID":"-"},"content":"`removeapptfrompet`, `sortp` commands."},{"lineNumber":1208,"author":{"gitID":"-"},"content":"** The `addp` command adds a pet to a specified client based on the index provided by"},{"lineNumber":1209,"author":{"gitID":"-"},"content":"the user. The `deletep` command is the converse of `addp`. It removes the pet from a"},{"lineNumber":1210,"author":{"gitID":"-"},"content":"specified client."},{"lineNumber":1211,"author":{"gitID":"-"},"content":"** The `addapptopet` adds a specified appointment to a specified pet based on the index"},{"lineNumber":1212,"author":{"gitID":"-"},"content":"provided. Likewise, `removeapptfrompet` is the converse of `addappttopet` command,"},{"lineNumber":1213,"author":{"gitID":"-"},"content":"removing the specified appointment based on the appointment index from a pet."},{"lineNumber":1214,"author":{"gitID":"-"},"content":"** The `sortp` command sorts the existing pet objects in the XML file lexicographically."},{"lineNumber":1215,"author":{"gitID":"-"},"content":"** The `sortc` command sorts the existing client objects in the XML file lexicographically."},{"lineNumber":1216,"author":{"gitID":"-"},"content":"** The `sortappt` sorts the appointment objects in date then time. It automatically"},{"lineNumber":1217,"author":{"gitID":"-"},"content":"sorts when scheduling a new appointment."},{"lineNumber":1218,"author":{"gitID":"-"},"content":"** The `unschedule` command removes a specified appointment object based on index."},{"lineNumber":1219,"author":{"gitID":"-"},"content":""},{"lineNumber":1220,"author":{"gitID":"-"},"content":"All of the commands listed are Undoable and saved into the XML data file."},{"lineNumber":1221,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1222,"author":{"gitID":"-"},"content":"* *Minor Enhancement*: Implement aliases for command words +"},{"lineNumber":1223,"author":{"gitID":"-"},"content":""},{"lineNumber":1224,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1225,"author":{"gitID":"purplepers0n"},"content":"** The aliases of command words will allow the vet to reduce the amount of typing"},{"lineNumber":1226,"author":{"gitID":"purplepers0n"},"content":"required for command words, to increase efficiency in using the application."},{"lineNumber":1227,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1228,"author":{"gitID":"-"},"content":"// end::mdazharEnhancements[]"},{"lineNumber":1229,"author":{"gitID":"-"},"content":""},{"lineNumber":1230,"author":{"gitID":"-"},"content":"// tag::wxEnhancements[]"},{"lineNumber":1231,"author":{"gitID":"purplepers0n"},"content":"*Choo Wen Xin*"},{"lineNumber":1232,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1233,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1234,"author":{"gitID":"purplepers0n"},"content":"* *Major Enhancement*: Support `listall` command and listing all appointments"},{"lineNumber":1235,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1236,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1237,"author":{"gitID":"purplepers0n"},"content":"** The UI will update and display all appointments in the main section of the application"},{"lineNumber":1238,"author":{"gitID":"purplepers0n"},"content":"listed in date order, and in time order within each (date) section. This is for the vet to"},{"lineNumber":1239,"author":{"gitID":"purplepers0n"},"content":"easily keep track of his/her appointments in chronological order."},{"lineNumber":1240,"author":{"gitID":"purplepers0n"},"content":"** The `listall` command will take in an index parameter specifying a client, and will then display all the pets and appointments of"},{"lineNumber":1241,"author":{"gitID":"purplepers0n"},"content":"that particular client in a sidebar of the application. This is to easily see the relevant details when wanting to check a particular client."},{"lineNumber":1242,"author":{"gitID":"purplepers0n"},"content":"The appropriate display on the UI will also be created."},{"lineNumber":1243,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1244,"author":{"gitID":"purplepers0n"},"content":"* *Minor Enhancement*: Update `list`, `edit`, `delete` command and have display tabs for the lists"},{"lineNumber":1245,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1246,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1247,"author":{"gitID":"purplepers0n"},"content":"** The `list` command now takes in a parameter (either \u0027client\u0027, \u0027pet\u0027 or \u0027vettech\u0027)"},{"lineNumber":1248,"author":{"gitID":"purplepers0n"},"content":"and the `MainWindow` will handle the event created by the `list` command and toggle the tabs in the sidebar of the application and display the appropriate list"},{"lineNumber":1249,"author":{"gitID":"purplepers0n"},"content":"for easy viewing and keeping track. The tabs can be toggled by mouse-click as well."},{"lineNumber":1250,"author":{"gitID":"purplepers0n"},"content":"** The `edit` and `delete` commands will be updated so that it only affect the index of the currently viewed list."},{"lineNumber":1251,"author":{"gitID":"-"},"content":"// end::wxEnhancements[]"},{"lineNumber":1252,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":"//  tag::zzxEnhancements[]"},{"lineNumber":1254,"author":{"gitID":"purplepers0n"},"content":"*Zhong Zheng Xin*"},{"lineNumber":1255,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1256,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1257,"author":{"gitID":"purplepers0n"},"content":"* *Major Enhancement*: Support for all appointment related commands"},{"lineNumber":1258,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1259,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1260,"author":{"gitID":"Godxin"},"content":"** The `schedule` command allows the vet to schedule an appointment of a specific date, time and duration attached with a brief description."},{"lineNumber":1261,"author":{"gitID":"Godxin"},"content":"** The `reschedule` command to reschedule the appointment to another date, time or duration. This command is also able to edit the length and description."},{"lineNumber":1262,"author":{"gitID":"purplepers0n"},"content":"** The `editappt` command allows the vet to update the details of an appointment,"},{"lineNumber":1263,"author":{"gitID":"purplepers0n"},"content":"such as the assigned vet technician and the data and time. Client and Pet can be"},{"lineNumber":1264,"author":{"gitID":"purplepers0n"},"content":"changed as well if necessary. The affected clients, pets and vet technicians should"},{"lineNumber":1265,"author":{"gitID":"Godxin"},"content":"be updated accordingly as well. (in the future version v2.0)"},{"lineNumber":1266,"author":{"gitID":"Godxin"},"content":"** The `deleteappt` command allows the vet to delete an appointment he/she no longer wants. (in the future version v2.0)"},{"lineNumber":1267,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1268,"author":{"gitID":"Godxin"},"content":"* *Minor Enhancement*: Detect appointment clashes, invalid appointments and giving suggestions for a valid appointment"},{"lineNumber":1269,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1270,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1271,"author":{"gitID":"Godxin"},"content":"** The application will prompt the vet if he/she has scheduled an appointment that clashes with or is too close to another appointment. Only appointments with reasonable date and time can be scheduled so that the vet can maintain appropriate appointment schedules."},{"lineNumber":1272,"author":{"gitID":"Godxin"},"content":"** These features also work for `reschedule` a existing appointment. (in the future version v2.0)"},{"lineNumber":1273,"author":{"gitID":"-"},"content":"// end::zzxEnhancements[]"},{"lineNumber":1274,"author":{"gitID":"-"},"content":""},{"lineNumber":1275,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1276,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1277,"author":{"gitID":"-"},"content":""},{"lineNumber":1278,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"jonathanwj"},"content":"[width\u003d\"100%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1281,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1282,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1283,"author":{"gitID":"-"},"content":"|`* * *` |new vet |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1284,"author":{"gitID":"-"},"content":""},{"lineNumber":1285,"author":{"gitID":"-"},"content":"|`* * *` |vet |add a client |add client\u0027s detail to the database"},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"-"},"content":"|`* * *` |vet |delete a client |remove entries that I no longer need"},{"lineNumber":1288,"author":{"gitID":"-"},"content":""},{"lineNumber":1289,"author":{"gitID":"-"},"content":"|`* * *` |vet |find a client by name |locate details of client without having to go through the entire list"},{"lineNumber":1290,"author":{"gitID":"-"},"content":""},{"lineNumber":1291,"author":{"gitID":"purplepers0n"},"content":"|`*` |vet with many clients stored in the application |sort clients by name |locate a client easily"},{"lineNumber":1292,"author":{"gitID":"-"},"content":""},{"lineNumber":1293,"author":{"gitID":"-"},"content":"|`* * *` |vet |add a vet tech |keep track of the vet techs I work with"},{"lineNumber":1294,"author":{"gitID":"-"},"content":""},{"lineNumber":1295,"author":{"gitID":"-"},"content":"|`* *` |vet |list all vet techs |view all vet techs\u0027 details at a glance"},{"lineNumber":1296,"author":{"gitID":"-"},"content":""},{"lineNumber":1297,"author":{"gitID":"-"},"content":"|`* * *` |vet |add a pet to a client |make respective updates to client\u0027s pet database"},{"lineNumber":1298,"author":{"gitID":"-"},"content":""},{"lineNumber":1299,"author":{"gitID":"-"},"content":"|`* * *` |vet |remove a pet from the client |update the databases"},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"-"},"content":"|`* * *` |vet |list all pets |view information about the pets at a glance"},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":"|`* *` |vet |sort pets by species type |locate a pet easily"},{"lineNumber":1304,"author":{"gitID":"-"},"content":""},{"lineNumber":1305,"author":{"gitID":"-"},"content":"|`*` |vet |specify kind of pet |make more accurate diagnosis and treatment"},{"lineNumber":1306,"author":{"gitID":"-"},"content":""},{"lineNumber":1307,"author":{"gitID":"-"},"content":"|`* *` |vet |find pet by client name |view all pets owned by a client"},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":"|`*` |vet |specify the type of appointment |identify the appointment type"},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":"|`* * *` |vet |add vet techs to an appointment |identify the technician for the appointment"},{"lineNumber":1312,"author":{"gitID":"-"},"content":""},{"lineNumber":1313,"author":{"gitID":"-"},"content":"|`* * *` |vet |schedule an appointment for a client |add an appointment to my calendar"},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":"|`* * *` |vet |reschedule an appointment |accommodate to clients schedule"},{"lineNumber":1316,"author":{"gitID":"-"},"content":""},{"lineNumber":1317,"author":{"gitID":"-"},"content":"|`* * *` |vet |remove an appointment |make way for other appointments"},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":"|`* * *` |vet |list appointments |see all the appointments that I have"},{"lineNumber":1320,"author":{"gitID":"-"},"content":""},{"lineNumber":1321,"author":{"gitID":"-"},"content":"|`*` |vet |schedule follow up appointment |keep track of pet\u0027s health"},{"lineNumber":1322,"author":{"gitID":"-"},"content":""},{"lineNumber":1323,"author":{"gitID":"-"},"content":"|`* * *` |vet |find appointment by date |locate a specific appointment"},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":"|`* * *` |vet |find appointments by client\u0027s name |view all of the appointments under particular client"},{"lineNumber":1326,"author":{"gitID":"-"},"content":""},{"lineNumber":1327,"author":{"gitID":"-"},"content":"|`*` |vet |view appointments on calendar that have specific queries or tags |view specific upcoming appointment"},{"lineNumber":1328,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"-"},"content":""},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1333,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"purplepers0n"},"content":"(For all use cases below, the *System* is `VetterAppointments` and the *Actor* is the `vet`, unless specified otherwise)"},{"lineNumber":1336,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1337,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1338,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1339,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Add Vet Technician"},{"lineNumber":1340,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1341,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1342,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1343,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to add Vet Technician"},{"lineNumber":1344,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments adds the Vet Technician to the system"},{"lineNumber":1345,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1346,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1347,"author":{"gitID":"-"},"content":""},{"lineNumber":1348,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1349,"author":{"gitID":"-"},"content":""},{"lineNumber":1350,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1351,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1352,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1353,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1354,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1355,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1356,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1357,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1358,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1359,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Add client"},{"lineNumber":1360,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1361,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1362,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1363,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to add client (owner)"},{"lineNumber":1364,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments adds client to the system"},{"lineNumber":1365,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1366,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1367,"author":{"gitID":"-"},"content":""},{"lineNumber":1368,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1369,"author":{"gitID":"-"},"content":""},{"lineNumber":1370,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1371,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1372,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1373,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1374,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1375,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1376,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1377,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1378,"author":{"gitID":"-"},"content":""},{"lineNumber":1379,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1380,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Delete client"},{"lineNumber":1381,"author":{"gitID":"-"},"content":""},{"lineNumber":1382,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1383,"author":{"gitID":"-"},"content":""},{"lineNumber":1384,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to list clients"},{"lineNumber":1385,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments shows a list of clients"},{"lineNumber":1386,"author":{"gitID":"purplepers0n"},"content":"3.  Vet requests to delete a specific client in the list"},{"lineNumber":1387,"author":{"gitID":"purplepers0n"},"content":"4.  VetterAppointments deletes the client"},{"lineNumber":1388,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1389,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1394,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1395,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1396,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1397,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1398,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1399,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1400,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1401,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1402,"author":{"gitID":"purplepers0n"},"content":"* 2a. The list is empty"},{"lineNumber":1403,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1404,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1405,"author":{"gitID":"-"},"content":""},{"lineNumber":1406,"author":{"gitID":"purplepers0n"},"content":"* 3a. The given index is invalid"},{"lineNumber":1407,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1408,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1409,"author":{"gitID":"purplepers0n"},"content":"** 3a1. VetterAppointments shows an error message"},{"lineNumber":1410,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1411,"author":{"gitID":"purplepers0n"},"content":"Use case resumes at step 2."},{"lineNumber":1412,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1413,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1414,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Add pet"},{"lineNumber":1415,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1416,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1417,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1418,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to add pet"},{"lineNumber":1419,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments provides a list of clients to add the pet to"},{"lineNumber":1420,"author":{"gitID":"purplepers0n"},"content":"3.  Vet enters the index of the associated client"},{"lineNumber":1421,"author":{"gitID":"purplepers0n"},"content":"4.  VetterAppointments adds a pet associated with a client in the system"},{"lineNumber":1422,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1423,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1424,"author":{"gitID":"-"},"content":""},{"lineNumber":1425,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1426,"author":{"gitID":"-"},"content":""},{"lineNumber":1427,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1428,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1429,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1430,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1431,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1432,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1433,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1434,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1435,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1436,"author":{"gitID":"purplepers0n"},"content":"* 2a. The list is empty"},{"lineNumber":1437,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1438,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1439,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1440,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1441,"author":{"gitID":"purplepers0n"},"content":"* 3a. The client index is invalid"},{"lineNumber":1442,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1443,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1444,"author":{"gitID":"purplepers0n"},"content":"** 3a1. VetterAppointments shows an error message"},{"lineNumber":1445,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1446,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1447,"author":{"gitID":"-"},"content":""},{"lineNumber":1448,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1449,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Delete pet"},{"lineNumber":1450,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1451,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1452,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1453,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to list pets"},{"lineNumber":1454,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments shows a list of pets"},{"lineNumber":1455,"author":{"gitID":"purplepers0n"},"content":"3.  Vet requests to delete a specific pet in the list"},{"lineNumber":1456,"author":{"gitID":"purplepers0n"},"content":"4.  VetterAppointments deletes the pet"},{"lineNumber":1457,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1458,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1459,"author":{"gitID":"-"},"content":""},{"lineNumber":1460,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1461,"author":{"gitID":"-"},"content":""},{"lineNumber":1462,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1463,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1464,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1465,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1466,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1467,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1468,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1469,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1470,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1471,"author":{"gitID":"purplepers0n"},"content":"* 2a. The list is empty"},{"lineNumber":1472,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1473,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1474,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1475,"author":{"gitID":"purplepers0n"},"content":"* 3a. The given index is invalid"},{"lineNumber":1476,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1477,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1478,"author":{"gitID":"purplepers0n"},"content":"** 3a1. VetterAppointments shows an error message"},{"lineNumber":1479,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1480,"author":{"gitID":"purplepers0n"},"content":"Use case resumes at step 2."},{"lineNumber":1481,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1482,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1483,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Add appointment"},{"lineNumber":1484,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1485,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1486,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1487,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to add an appointment"},{"lineNumber":1488,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments adds an appointment to the system"},{"lineNumber":1489,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1490,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1491,"author":{"gitID":"-"},"content":""},{"lineNumber":1492,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1493,"author":{"gitID":"-"},"content":""},{"lineNumber":1494,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1495,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1496,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1497,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1498,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1499,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1500,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1501,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1502,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1503,"author":{"gitID":"purplepers0n"},"content":"* 1b. The assigned timeslot already has an existing appointment"},{"lineNumber":1504,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1505,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1506,"author":{"gitID":"purplepers0n"},"content":"** 1b1. VetterAppointments shows an error message"},{"lineNumber":1507,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1508,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1509,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1510,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1511,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Assign pet to appointment"},{"lineNumber":1512,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1513,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1514,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1515,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to assign a pet index to a specific appointment index"},{"lineNumber":1516,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments assigns the pet to the appointment"},{"lineNumber":1517,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1518,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1519,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1520,"author":{"gitID":"purplepers0n"},"content":"*Extensions*"},{"lineNumber":1521,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1522,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1523,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1524,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1525,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1526,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1527,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1528,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1529,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1530,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1531,"author":{"gitID":"purplepers0n"},"content":"* 1b. The pet index is invalid"},{"lineNumber":1532,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1533,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1534,"author":{"gitID":"purplepers0n"},"content":"** 1b1. VetterAppointments shows an error message"},{"lineNumber":1535,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1536,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1537,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1538,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1539,"author":{"gitID":"purplepers0n"},"content":"* 1c. The appointment index is invalid"},{"lineNumber":1540,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1541,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1542,"author":{"gitID":"purplepers0n"},"content":"** 1c1. VetterAppointments shows an error message"},{"lineNumber":1543,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1544,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1545,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1546,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1547,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Assign Vet Technician to appointment"},{"lineNumber":1548,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1549,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1550,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1551,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to assign a Vet Technician to a specific appointment"},{"lineNumber":1552,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments assigns the Vet Technician to the appointment"},{"lineNumber":1553,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1554,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1555,"author":{"gitID":"-"},"content":""},{"lineNumber":1556,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1557,"author":{"gitID":"-"},"content":""},{"lineNumber":1558,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1559,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1560,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1561,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1562,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1563,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1564,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1565,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1566,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1567,"author":{"gitID":"purplepers0n"},"content":"* 1b. The Vet Technician index is invalid"},{"lineNumber":1568,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1569,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1570,"author":{"gitID":"purplepers0n"},"content":"** 1b1. VetterAppointments shows an error message"},{"lineNumber":1571,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1572,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1573,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1574,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1575,"author":{"gitID":"purplepers0n"},"content":"* 1c. The appointment index is invalid"},{"lineNumber":1576,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1577,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1578,"author":{"gitID":"purplepers0n"},"content":"** 1c1. VetterAppointments shows an error message"},{"lineNumber":1579,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1580,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1581,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1582,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1583,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Reschedule appointment"},{"lineNumber":1584,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1585,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1586,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1587,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to reschedule a specific appointment"},{"lineNumber":1588,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments updates the date/time of the appointment"},{"lineNumber":1589,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1590,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1591,"author":{"gitID":"-"},"content":""},{"lineNumber":1592,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1593,"author":{"gitID":"-"},"content":""},{"lineNumber":1594,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1595,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1596,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1597,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1598,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1599,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1600,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1601,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1602,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1603,"author":{"gitID":"purplepers0n"},"content":"* 1b. The newly assigned timeslot already has an existing appointment"},{"lineNumber":1604,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1605,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1606,"author":{"gitID":"purplepers0n"},"content":"** 1b1. VetterAppointments shows an error message"},{"lineNumber":1607,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1608,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1609,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1610,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1611,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: Delete appointment"},{"lineNumber":1612,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1613,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1614,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1615,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to list appointments"},{"lineNumber":1616,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments shows a list of appointments"},{"lineNumber":1617,"author":{"gitID":"purplepers0n"},"content":"3.  Vet requests to delete a specific appointment in the list"},{"lineNumber":1618,"author":{"gitID":"purplepers0n"},"content":"4.  VetterAppointments deletes the appointment"},{"lineNumber":1619,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1620,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1621,"author":{"gitID":"-"},"content":""},{"lineNumber":1622,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1623,"author":{"gitID":"-"},"content":""},{"lineNumber":1624,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1625,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1626,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1627,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1628,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1629,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1630,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1631,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1632,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1633,"author":{"gitID":"purplepers0n"},"content":"* 2a. The list is empty"},{"lineNumber":1634,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1635,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1636,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1637,"author":{"gitID":"purplepers0n"},"content":"* 3a. The given index is invalid"},{"lineNumber":1638,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1639,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1640,"author":{"gitID":"purplepers0n"},"content":"** 3a1. VetterAppointments shows an error message"},{"lineNumber":1641,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1642,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1643,"author":{"gitID":"-"},"content":""},{"lineNumber":1644,"author":{"gitID":"purplepers0n"},"content":"[discrete]"},{"lineNumber":1645,"author":{"gitID":"purplepers0n"},"content":"\u003d\u003d\u003d Use case: List all details of client"},{"lineNumber":1646,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1647,"author":{"gitID":"purplepers0n"},"content":"*MSS*"},{"lineNumber":1648,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1649,"author":{"gitID":"purplepers0n"},"content":"1.  Vet requests to list clients"},{"lineNumber":1650,"author":{"gitID":"purplepers0n"},"content":"2.  VetterAppointments shows a list of clients"},{"lineNumber":1651,"author":{"gitID":"purplepers0n"},"content":"3.  Vet requests to list all details for a specific client index"},{"lineNumber":1652,"author":{"gitID":"purplepers0n"},"content":"4.  VetterAppointments shows a list of pets and appointments for that client"},{"lineNumber":1653,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1654,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1655,"author":{"gitID":"-"},"content":""},{"lineNumber":1656,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1657,"author":{"gitID":"-"},"content":""},{"lineNumber":1658,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1659,"author":{"gitID":"purplepers0n"},"content":"* 1a. The format of command is invalid"},{"lineNumber":1660,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1661,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1662,"author":{"gitID":"purplepers0n"},"content":"** 1a1. VetterAppointments shows an error message"},{"lineNumber":1663,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1664,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1665,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1666,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1667,"author":{"gitID":"purplepers0n"},"content":"* 2a. The list is empty"},{"lineNumber":1668,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1669,"author":{"gitID":"purplepers0n"},"content":"Use case ends."},{"lineNumber":1670,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":1671,"author":{"gitID":"purplepers0n"},"content":"* 3a. The given index is invalid"},{"lineNumber":1672,"author":{"gitID":"purplepers0n"},"content":"+"},{"lineNumber":1673,"author":{"gitID":"purplepers0n"},"content":"[none]"},{"lineNumber":1674,"author":{"gitID":"purplepers0n"},"content":"** 3a1. VetterAppointments shows an error message."},{"lineNumber":1675,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1676,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1677,"author":{"gitID":"-"},"content":""},{"lineNumber":1678,"author":{"gitID":"-"},"content":""},{"lineNumber":1679,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1680,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1681,"author":{"gitID":"-"},"content":""},{"lineNumber":1682,"author":{"gitID":"purplepers0n"},"content":"*  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1683,"author":{"gitID":"purplepers0n"},"content":"*  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1684,"author":{"gitID":"purplepers0n"},"content":"*  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1685,"author":{"gitID":"purplepers0n"},"content":"*  System should respond under a second."},{"lineNumber":1686,"author":{"gitID":"purplepers0n"},"content":"*  Should be resizable for any screen resolution without any user-application interaction problems."},{"lineNumber":1687,"author":{"gitID":"purplepers0n"},"content":"*  Should be able to be used by a novice keyboard user."},{"lineNumber":1688,"author":{"gitID":"purplepers0n"},"content":"*  Should be able to be used by a person with hearing loss."},{"lineNumber":1689,"author":{"gitID":"purplepers0n"},"content":"*  UI colors should be able to be identifiable by a color blind user."},{"lineNumber":1690,"author":{"gitID":"purplepers0n"},"content":"*  Data should be backwards compatible with older application versions."},{"lineNumber":1691,"author":{"gitID":"purplepers0n"},"content":"*  Data should be encrypted for security."},{"lineNumber":1692,"author":{"gitID":"purplepers0n"},"content":"*  Should be able to be installed and uninstalled automatically with a single user interaction."},{"lineNumber":1693,"author":{"gitID":"purplepers0n"},"content":"*  Application should run indefinitely until closed."},{"lineNumber":1694,"author":{"gitID":"purplepers0n"},"content":"*  Should have hidden text for certain sensitive data (e.g. NRIC, passwords)."},{"lineNumber":1695,"author":{"gitID":"purplepers0n"},"content":"*  Data should be stored online."},{"lineNumber":1696,"author":{"gitID":"purplepers0n"},"content":"*  Should recover immediately from a system failure without any data loss or corruption."},{"lineNumber":1697,"author":{"gitID":"purplepers0n"},"content":"*  Should be able to detect and handle corruption in software data and stored data."},{"lineNumber":1698,"author":{"gitID":"purplepers0n"},"content":"*  Should have a software size of less than 500MB."},{"lineNumber":1699,"author":{"gitID":"-"},"content":""},{"lineNumber":1700,"author":{"gitID":"-"},"content":""},{"lineNumber":1701,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1702,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1703,"author":{"gitID":"-"},"content":""},{"lineNumber":1704,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1705,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1706,"author":{"gitID":"-"},"content":""},{"lineNumber":1707,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1708,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1709,"author":{"gitID":"-"},"content":""},{"lineNumber":1710,"author":{"gitID":"-"},"content":"[[Java]] Java::"},{"lineNumber":1711,"author":{"gitID":"-"},"content":"Java is a general purpose, high-level programming language developed by Sun Microsystems"},{"lineNumber":1712,"author":{"gitID":"-"},"content":""},{"lineNumber":1713,"author":{"gitID":"-"},"content":"[[JDK]] JDK::"},{"lineNumber":1714,"author":{"gitID":"-"},"content":"JDK stands for Java Development Kit. A software development environment for writing applets and applications in the Java programming language"},{"lineNumber":1715,"author":{"gitID":"-"},"content":""},{"lineNumber":1716,"author":{"gitID":"-"},"content":"[[IDE]] IDE::"},{"lineNumber":1717,"author":{"gitID":"-"},"content":"Integrated Development Environments that supports all development-related work within the same tool"},{"lineNumber":1718,"author":{"gitID":"-"},"content":""},{"lineNumber":1719,"author":{"gitID":"-"},"content":"[[IntelliJ]] IntelliJ::"},{"lineNumber":1720,"author":{"gitID":"-"},"content":"An IDE developed by JetBrains"},{"lineNumber":1721,"author":{"gitID":"-"},"content":""},{"lineNumber":1722,"author":{"gitID":"-"},"content":"[[OSS]] OSS::"},{"lineNumber":1723,"author":{"gitID":"-"},"content":"Open-source software (OSS) is computer software distributed with its source code available for modification"},{"lineNumber":1724,"author":{"gitID":"-"},"content":""},{"lineNumber":1725,"author":{"gitID":"-"},"content":"[[Repo]] Repo::"},{"lineNumber":1726,"author":{"gitID":"-"},"content":"Short form of repository which is a directory or storage for projects"},{"lineNumber":1727,"author":{"gitID":"-"},"content":""},{"lineNumber":1728,"author":{"gitID":"-"},"content":"[[Fork]] Fork::"},{"lineNumber":1729,"author":{"gitID":"-"},"content":"A fork is a copy of a repository. Changes in a forked repository will not affect the original project"},{"lineNumber":1730,"author":{"gitID":"-"},"content":""},{"lineNumber":1731,"author":{"gitID":"-"},"content":"[[CI]] CI::"},{"lineNumber":1732,"author":{"gitID":"-"},"content":"Continuous Integration (CI) is the practice of merging all developer working copies to a shared mainline"},{"lineNumber":1733,"author":{"gitID":"-"},"content":""},{"lineNumber":1734,"author":{"gitID":"-"},"content":"[[Travis]] Travis::"},{"lineNumber":1735,"author":{"gitID":"-"},"content":"Travis CI is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub"},{"lineNumber":1736,"author":{"gitID":"-"},"content":""},{"lineNumber":1737,"author":{"gitID":"-"},"content":"[[AppVeyor]] AppVeyor::"},{"lineNumber":1738,"author":{"gitID":"-"},"content":"AppVeyor is a continuous integration service"},{"lineNumber":1739,"author":{"gitID":"-"},"content":""},{"lineNumber":1740,"author":{"gitID":"-"},"content":"[[JUnit]] JUnit::"},{"lineNumber":1741,"author":{"gitID":"-"},"content":"JUnit is a unit testing framework for the Java programming language"},{"lineNumber":1742,"author":{"gitID":"-"},"content":""},{"lineNumber":1743,"author":{"gitID":"-"},"content":"[[Gradle]] Gradle::"},{"lineNumber":1744,"author":{"gitID":"-"},"content":"Gradle is an advanced general purpose build management system based on Groovy and Kotlin. Gradle supports the automatic download and configuration of dependencies or other libraries"},{"lineNumber":1745,"author":{"gitID":"-"},"content":""},{"lineNumber":1746,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1747,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1748,"author":{"gitID":"-"},"content":""},{"lineNumber":1749,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1750,"author":{"gitID":"-"},"content":""},{"lineNumber":1751,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1752,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1753,"author":{"gitID":"-"},"content":""},{"lineNumber":1754,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1755,"author":{"gitID":"-"},"content":""},{"lineNumber":1756,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1757,"author":{"gitID":"-"},"content":""},{"lineNumber":1758,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1759,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1760,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1761,"author":{"gitID":"-"},"content":""},{"lineNumber":1762,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1763,"author":{"gitID":"-"},"content":""},{"lineNumber":1764,"author":{"gitID":"purplepers0n"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window"},{"lineNumber":1765,"author":{"gitID":"purplepers0n"},"content":".. Re-launch the app by double-clicking the jar file +"},{"lineNumber":1766,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1767,"author":{"gitID":"-"},"content":""},{"lineNumber":1768,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1769,"author":{"gitID":"-"},"content":""},{"lineNumber":1770,"author":{"gitID":"jonathanwj"},"content":"\u003d\u003d\u003d Deleting a Person"},{"lineNumber":1771,"author":{"gitID":"-"},"content":""},{"lineNumber":1772,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1773,"author":{"gitID":"-"},"content":""},{"lineNumber":1774,"author":{"gitID":"purplepers0n"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list"},{"lineNumber":1775,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1776,"author":{"gitID":"purplepers0n"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated"},{"lineNumber":1777,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1778,"author":{"gitID":"purplepers0n"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same"},{"lineNumber":1779,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1780,"author":{"gitID":"purplepers0n"},"content":"   Expected: Similar to previous"},{"lineNumber":1781,"author":{"gitID":"-"},"content":""},{"lineNumber":1782,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"},{"lineNumber":1783,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"jonathanwj":198,"purplepers0n":608,"-":911,"Godxin":66}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    private static final String VALID_ROLE \u003d \"CLIENT\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"                null, VALID_ROLE, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":91,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"                VALID_NAME, VALID_ROLE, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":100,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"                VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":"                builder.withPerson(new PersonBuilder().buildWithRoleClient()).withTag(\"Friends\").build());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":5,"-":142}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    private static final String LIST_EXPECTED_MESSAGE_SUCCESS \u003d \"Listed all clients\";"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD + \" client\";"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        assertCommandSuccess(listCommand, LIST_EXPECTED_MESSAGE_SUCCESS, model);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"        logic.getFilteredClientList().remove(0);"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"    public void getFilteredVetTechnicianList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        logic.getFilteredVetTechnicianList().remove(0);"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"        logic.getFilteredAppointmentList().remove(0);"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"    public void getAutoCompleteCommands_nullKeyWord_throwsNullPointerException() {"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        logic.getAutoCompleteCommands(null);"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"    public void getAutoCompleteNextParameter_nullKeyWord_throwsNullPointerException() {"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        logic.getAutoCompleteCommands(null);"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"    public void getCurrentList() {"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(logic.getCurrentList(), 0);"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                                       String expectedMessage, Model expectedModel) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":160,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":36,"purplepers0n":5,"-":125}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_CLIENT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientHasExistingAppointmentException;"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientHasExistingPetException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.TechnicianHasExistingAppointmentException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + ROLE_DESC_CLIENT + \"  \""},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_BOB + \"  \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \""},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"                + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"                .withTags(VALID_TAG_HUSBAND).buildWithRoleClient();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":87,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().buildWithRoleClient();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":113,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredClientList().size());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":115,"author":{"gitID":"purplepers0n"},"content":"        personToEdit \u003d getModel().getFilteredClientList().get(index.getZeroBased());"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).buildWithRoleClient();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"jonathanwj"},"content":"        /* --------------------- Performing edit operation-------------------------- */"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"},{"lineNumber":176,"author":{"gitID":"-"},"content":"                Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddCommand(BOB));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":183,"author":{"gitID":"jonathanwj"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":184,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + ROLE_DESC_CLIENT  + NAME_DESC_BOB"},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"jonathanwj"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson)"},{"lineNumber":200,"author":{"gitID":"jonathanwj"},"content":"            throws TechnicianHasExistingAppointmentException,"},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"            ClientHasExistingAppointmentException, ClientHasExistingPetException {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"jonathanwj"},"content":"    private void assertCommandSuccess(String command, Index toEdit,"},{"lineNumber":214,"author":{"gitID":"jonathanwj"},"content":"            Person editedPerson, Index expectedSelectedCardIndex)"},{"lineNumber":215,"author":{"gitID":"jonathanwj"},"content":"            throws TechnicianHasExistingAppointmentException,"},{"lineNumber":216,"author":{"gitID":"jonathanwj"},"content":"            ClientHasExistingAppointmentException, ClientHasExistingPetException {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":220,"author":{"gitID":"purplepers0n"},"content":"                    expectedModel.getFilteredClientList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":221,"author":{"gitID":"purplepers0n"},"content":"            expectedModel.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":223,"author":{"gitID":"purplepers0n"},"content":"            expectedModel.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":226,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":257,"author":{"gitID":"-"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":259,"author":{"gitID":"purplepers0n"},"content":"        expectedModel.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":261,"author":{"gitID":"purplepers0n"},"content":"        expectedModel.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":269,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":271,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":25,"purplepers0n":9,"-":253}},{"path":"src/test/java/seedu/address/logic/autocomplete/TrieTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.logic.autocomplete;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"//@@author jonathanwj"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"public class TrieTest {"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"    public void insert_duplicateWord_sameSize() {"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"        Trie trie \u003d new Trie();"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(trie.size(), 0);"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"        trie.insertWord(\"word1\");"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(trie.size(), 1);"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"        trie.insertWord(\"word1\");"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(trie.size(), 1);"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"    public void insert_nullWord_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"        Trie trie \u003d new Trie();"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"        trie.insertWord(null);"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":27,"-":4}},{"path":"src/test/java/seedu/address/logic/autocomplete/AutoCompleteManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.logic.autocomplete;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"//@@author jonathanwj"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"public class AutoCompleteManagerTest {"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    public static final String NOT_FOUND_KEYWORD \u003d \"NotFoundKeyword\";"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    public static final String ADD_COMMAND_SAMPLE \u003d AddCommand.COMMAND_WORD + \" \""},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_PERSON_ROLE + \"client \""},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_TAG + \"friends \";"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"    private AutoCompleteManager autoCompleteManger \u003d new AutoCompleteManager();"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    public void getAutoCompleteCommands_preFixKeyWordInCommandTrie_notEmptyList() {"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"        List\u003cString\u003e listOfWords \u003d autoCompleteManger.getAutoCompleteCommands(\"add\");"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(!listOfWords.isEmpty());"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"    public void getAutoCompleteCommands_emptyKeyWord_notEmptyList() {"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        List\u003cString\u003e listOfWords \u003d autoCompleteManger.getAutoCompleteCommands(\"\");"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(!listOfWords.isEmpty());"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"    public void getAutoCompleteCommands_preFixKeyWordNotInCommandTrie_emptyList() {"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        List\u003cString\u003e listOfWords \u003d autoCompleteManger.getAutoCompleteCommands(NOT_FOUND_KEYWORD);"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(listOfWords.isEmpty());"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"    public void getAutoCompleteCommands_nullKeyWord_throwsNullPointerException() {"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        autoCompleteManger.getAutoCompleteCommands(null);"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"    public void getAutoCompleteCommands_emptyInput_emptyString() {"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        String result \u003d autoCompleteManger.getAutoCompleteNextMissingParameter(\"\");"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(result.isEmpty());"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"    public void getAutoCompleteNextMissingParameter_noMorePrefix_emptyString() {"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        String result \u003d autoCompleteManger.getAutoCompleteNextMissingParameter(ADD_COMMAND_SAMPLE);"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(result.isEmpty());"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":69,"-":3}},{"path":"src/test/java/seedu/address/logic/autocomplete/CommandParameterSyntaxHandlerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.logic.autocomplete;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAppointmentToPetCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddPetCommand;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddVetTechToAppointmentCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemoveAppointmentFromPetCommand;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.RescheduleCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ScheduleCommand;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":22,"content":"//@@author jonathanwj-reused"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"public class CommandParameterSyntaxHandlerTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"    private CommandParameterSyntaxHandler handler;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    public void setup() {"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"        handler \u003d new CommandParameterSyntaxHandler();"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    public void getMissingPrefix_addCommand_allPrefixMissing() {"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"        ArrayList\u003cPrefix\u003e result \u003d handler.getMissingPrefixes(AddCommand.COMMAND_WORD, AddCommand.COMMAND_WORD);"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(result, handler.ADD_COMMAND_PREFIXES);"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    public void getMissingPrefix_editCommand_allPrefixMissing() {"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        ArrayList\u003cPrefix\u003e result \u003d handler.getMissingPrefixes(EditCommand.COMMAND_WORD,"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"                EditCommand.COMMAND_WORD);"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(result, handler.EDIT_COMMAND_PREFIXES);"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"    public void getMissingPrefix_scheduleCommand_allPrefixMissing() {"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        ArrayList\u003cPrefix\u003e result \u003d handler.getMissingPrefixes(ScheduleCommand.COMMAND_WORD,"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"                ScheduleCommand.COMMAND_WORD);"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(result, handler.SCHEDULE_COMMAND_PREFIXES);"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"    public void getMissingPrefix_addPetCommand_allPrefixMissing() {"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        ArrayList\u003cPrefix\u003e result \u003d handler.getMissingPrefixes(AddPetCommand.COMMAND_WORD,"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"                AddPetCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(result, handler.ADD_PET_COMMAND_PREFIXES);"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"    public void getMissingPrefix_addApptToPetCommand_allPrefixMissing() {"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        ArrayList\u003cPrefix\u003e result \u003d handler.getMissingPrefixes(AddAppointmentToPetCommand.COMMAND_WORD,"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"                AddAppointmentToPetCommand.COMMAND_WORD);"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(result, handler.ADD_APPT_TO_PET_COMMAND_PREFIXES);"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"    public void getMissingPrefix_removeApptFromPetCommand_allPrefixMissing() {"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        ArrayList\u003cPrefix\u003e result \u003d handler.getMissingPrefixes(RemoveAppointmentFromPetCommand.COMMAND_WORD,"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"                RemoveAppointmentFromPetCommand.COMMAND_WORD);"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(result, handler.REMOVE_APPT_FROM_PET_COMMAND_PREFIXES);"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"    public void getMissingPrefix_addVetTechToAppointmentCommand_allPrefixMissing() {"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"        ArrayList\u003cPrefix\u003e result \u003d handler.getMissingPrefixes(AddVetTechToAppointmentCommand.COMMAND_WORD,"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"                AddVetTechToAppointmentCommand.COMMAND_WORD);"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(result, handler.ADD_VET_TECH_TO_APPT_COMMAND_PREFIXES);"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"    public void getMissingPrefix_rescheduleAppointmentCommand_allPrefixMissing() {"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        ArrayList\u003cPrefix\u003e result \u003d handler.getMissingPrefixes(RescheduleCommand.COMMAND_WORD,"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"                RescheduleCommand.COMMAND_WORD);"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(result, handler.RESCHEDULE_COMMAND_PREFIXES);"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":75,"null":1,"-":14}},{"path":"src/test/java/seedu/address/logic/parser/UnscheduleCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnscheduleCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":" * Testing for UnschedulCommandParser"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"public class UnscheduleCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"    private UnscheduleCommandParser parser \u003d new UnscheduleCommandParser();"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"    public void parse_validArgs_returnsUnscheduleCommand() {"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"        assertParseSuccess(parser, \"1\", new UnscheduleCommand(INDEX_FIRST_APPT));"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnscheduleCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":11,"md-azsa":20}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_INDEX;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VETTECH_INDEX;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddVetTechToAppointmentCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.RemoveVetTechFromAppointmentCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RescheduleCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RescheduleCommand.RescheduleAppointmentDescriptor;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ScheduleCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentUtil;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.RescheduleAppointmentDescriptorBuilder;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"        Person person \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"content":"    //@@author Godxin-test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void parseCommand_schedule() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Appointment appointment \u003d new AppointmentBuilder().build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        ScheduleCommand command \u003d (ScheduleCommand) parser.parseCommand("},{"lineNumber":69,"author":{"gitID":"-"},"content":"                                    AppointmentUtil.getScheduleCommand(appointment));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(new ScheduleCommand(appointment), command);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"content":"    //@@author Godxin-test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void parseCommand_reschedule() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Appointment appointment \u003d new AppointmentBuilder().build();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        RescheduleAppointmentDescriptor descriptor \u003d new RescheduleAppointmentDescriptorBuilder(appointment).build();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        RescheduleCommand command \u003d (RescheduleCommand) parser.parseCommand(RescheduleCommand.COMMAND_WORD + \" \""},{"lineNumber":79,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_APPT.getOneBased() + \" \""},{"lineNumber":80,"author":{"gitID":"-"},"content":"                + AppointmentUtil.getAppointmentDetails(appointment));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertEquals(new RescheduleCommand(INDEX_FIRST_APPT, descriptor), command);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parseCommand_clearAlias() throws Exception {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":99,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parseCommand_deleteAlias() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":106,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"        Person person \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \""},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"                + PersonUtil.getPersonDetails(person));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"    public void parseCommand_addVetTechToAppointment() throws Exception {"},{"lineNumber":122,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand command \u003d (AddVetTechToAppointmentCommand) parser"},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"                .parseCommand(AddVetTechToAppointmentCommand.COMMAND_WORD + \" \" + PREFIX_VETTECH_INDEX"},{"lineNumber":124,"author":{"gitID":"jonathanwj"},"content":"                + INDEX_FIRST.getOneBased() + \" \" + PREFIX_APPOINTMENT_INDEX"},{"lineNumber":125,"author":{"gitID":"jonathanwj"},"content":"                + INDEX_FIRST.getOneBased());"},{"lineNumber":126,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(new AddVetTechToAppointmentCommand(INDEX_FIRST, INDEX_FIRST), command);"},{"lineNumber":127,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"    public void parseCommand_removeVetTechFromAppointment() throws Exception {"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"        RemoveVetTechFromAppointmentCommand command \u003d (RemoveVetTechFromAppointmentCommand) parser.parseCommand("},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":"                RemoveVetTechFromAppointmentCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(new RemoveVetTechFromAppointmentCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":146,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void parseCommand_historyAlias() throws Exception {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":177,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" client\") instanceof ListCommand);"},{"lineNumber":178,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(parser.parseCommand(\"list client\") instanceof ListCommand);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void parseCommand_listAlias() throws Exception {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" client\") instanceof ListCommand);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"ls client\") instanceof ListCommand);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"rd 1\") instanceof RedoCommand);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"ud 3\") instanceof UndoCommand);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":25,"null":2,"purplepers0n":2,"-":194,"Godxin":1}},{"path":"src/test/java/seedu/address/logic/parser/AddAppointmentToPetCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPT;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAppointmentToPetCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"public class AddAppointmentToPetCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"                    AddAppointmentToPetCommand.MESSAGE_USAGE);"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"    private AddAppointmentToPetCommandParser parser \u003d new AddAppointmentToPetCommandParser();"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"        // no index specified"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \" \", MESSAGE_INVALID_FORMAT);"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \"adsdsf\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        // one index specified"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \" appt/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \" p/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"        // wrong prefixes"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \" appt/1 sss/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"    public void parse_invalidIndex_failure() {"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"        // negative index"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \" appt/-11 p/-1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \" appt/1 p/-1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \" appt/-1 p/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        // zero index"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \" appt/0 p/0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \" appt/0 p/1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \" appt/1 p/0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"        // characters used"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \" appt/2 p/#$@$\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"        assertParseFailure(parser, \" appt/fe!@#$ p/;;;\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"    public void parse_validCommand() {"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"        Index apptIndex \u003d INDEX_FIRST_APPT;"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"        Index petIndex \u003d INDEX_FIRST_PET;"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"        String userInput \u003d \" appt/\" + apptIndex.getZeroBased() + \" p/\" + petIndex.getZeroBased()"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"                + \" appt/\" + apptIndex.getOneBased() + \" p/\" + petIndex.getOneBased();"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        AddAppointmentToPetCommand expected \u003d new AddAppointmentToPetCommand(apptIndex, petIndex);"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"        // all arguments fulfilled and supplied"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"        assertParseSuccess(parser, userInput, expected);"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"-":12,"md-azsa":52}},{"path":"src/test/java/seedu/address/logic/parser/AddVetTechToAppointmentCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_INDEX;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VETTECH_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddVetTechToAppointmentCommand;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"public class AddVetTechToAppointmentCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVetTechToAppointmentCommand.MESSAGE_USAGE);"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"    private AddVetTechToAppointmentCommandParser parser \u003d new AddVetTechToAppointmentCommandParser();"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"        //no index specified"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \" \", MESSAGE_INVALID_FORMAT);"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"        //only one index specified"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, PREFIX_VETTECH_INDEX + \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \"\" + PREFIX_APPOINTMENT_INDEX + \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"        // no field specified"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \" 1 2\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    public void parse_invalidIndex_failure() {"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"        // negative index"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, PREFIX_VETTECH_INDEX"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"                + \"-1\" + PREFIX_APPOINTMENT_INDEX + \"-1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, PREFIX_VETTECH_INDEX"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"                + \"-1\" + PREFIX_APPOINTMENT_INDEX + \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, PREFIX_VETTECH_INDEX"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"                + \"1\" + PREFIX_APPOINTMENT_INDEX + \"-1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        // zero index"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, PREFIX_VETTECH_INDEX"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"                + \"0\" + PREFIX_APPOINTMENT_INDEX + \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, PREFIX_VETTECH_INDEX"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"                + \"1\" + PREFIX_APPOINTMENT_INDEX + \"0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, PREFIX_VETTECH_INDEX"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"                + \"0\" + PREFIX_APPOINTMENT_INDEX + \"0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        // invalid arguments being parsed"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, PREFIX_VETTECH_INDEX"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"                + \"1 wePREFIX_APPOINTMENT_INDEX\" + PREFIX_APPOINTMENT_INDEX + \"0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"        Index petIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        Index clientIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        String userInput \u003d \" \" + PREFIX_VETTECH_INDEX + \"\""},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"                + petIndex.getOneBased() + \" \" + PREFIX_APPOINTMENT_INDEX + \"\" + clientIndex.getOneBased();"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand expectedCommand \u003d new AddVetTechToAppointmentCommand(petIndex, clientIndex);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":55,"-":19}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Description;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Duration;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Time;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Godxin"},"content":"//@@Godxin-test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"Godxin"},"content":"    private static final String INVALID_DATE \u003d \"2018/01/02\";"},{"lineNumber":48,"author":{"gitID":"Godxin"},"content":"    private static final String INVALID_DATE_YEAR \u003d \"2016-01-02\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String INVALID_DATE_DAY \u003d \"2018-02-31\";"},{"lineNumber":50,"author":{"gitID":"Godxin"},"content":"    private static final String INVALID_TIME \u003d \"15-15\";"},{"lineNumber":51,"author":{"gitID":"Godxin"},"content":"    private static final String INVALID_DURATION \u003d \"130\";"},{"lineNumber":52,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":53,"author":{"gitID":"Godxin"},"content":"    private static final String VALID_DATE \u003d \"2018-01-02\";"},{"lineNumber":54,"author":{"gitID":"Godxin"},"content":"    private static final String VALID_TIME \u003d \"15:15\";"},{"lineNumber":55,"author":{"gitID":"Godxin"},"content":"    private static final String VALID_DURATION \u003d \"30\";"},{"lineNumber":56,"author":{"gitID":"Godxin"},"content":"    private static final String VALID_DESCRIPTION \u003d \"Clean\";"},{"lineNumber":57,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":58,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":264,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":265,"author":{"gitID":"Godxin"},"content":"    public void parseDate_null_throwsNullPointerException() {"},{"lineNumber":266,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"},{"lineNumber":267,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((Optional\u003cString\u003e) null));"},{"lineNumber":268,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":270,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":271,"author":{"gitID":"Godxin"},"content":"    public void parseDate_invalidValue_throwsIllegalValueException() {"},{"lineNumber":272,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"},{"lineNumber":273,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDate(Optional.of(INVALID_DATE)));"},{"lineNumber":274,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":276,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":277,"author":{"gitID":"Godxin"},"content":"    public void parseDate_invalidValueOfYear_throwsIllegalValueException() {"},{"lineNumber":278,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE_YEAR));"},{"lineNumber":279,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDate(Optional.of(INVALID_DATE_YEAR)));"},{"lineNumber":280,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    public void parseDate_invalidValueOfDays_throwsIllegalValueException() {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE_DAY));"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDate(Optional.of(INVALID_DATE_DAY)));"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":289,"author":{"gitID":"Godxin"},"content":"    public void parseDate_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":290,"author":{"gitID":"Godxin"},"content":"        assertFalse(ParserUtil.parseDate(Optional.empty()).isPresent());"},{"lineNumber":291,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":293,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":294,"author":{"gitID":"Godxin"},"content":"    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"},{"lineNumber":295,"author":{"gitID":"Godxin"},"content":"        Date expectedDate \u003d new Date(VALID_DATE);"},{"lineNumber":296,"author":{"gitID":"Godxin"},"content":"        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"},{"lineNumber":297,"author":{"gitID":"Godxin"},"content":"        assertEquals(Optional.of(expectedDate), ParserUtil.parseDate(Optional.of(VALID_DATE)));"},{"lineNumber":298,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":300,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":301,"author":{"gitID":"Godxin"},"content":"    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"},{"lineNumber":302,"author":{"gitID":"Godxin"},"content":"        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"},{"lineNumber":303,"author":{"gitID":"Godxin"},"content":"        Date expectedDate \u003d new Date(VALID_DATE);"},{"lineNumber":304,"author":{"gitID":"Godxin"},"content":"        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhitespace));"},{"lineNumber":305,"author":{"gitID":"Godxin"},"content":"        assertEquals(Optional.of(expectedDate), ParserUtil.parseDate(Optional.of(dateWithWhitespace)));"},{"lineNumber":306,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":308,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":309,"author":{"gitID":"Godxin"},"content":"    public void parseTime_null_throwsNullPointerException() {"},{"lineNumber":310,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime((String) null));"},{"lineNumber":311,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTime((Optional\u003cString\u003e) null));"},{"lineNumber":312,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":314,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":315,"author":{"gitID":"Godxin"},"content":"    public void parseTime_invalidValue_throwsIllegalValueException() {"},{"lineNumber":316,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDate(INVALID_TIME));"},{"lineNumber":317,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDate(Optional.of(INVALID_TIME)));"},{"lineNumber":318,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":320,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":321,"author":{"gitID":"Godxin"},"content":"    public void parseTime_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":322,"author":{"gitID":"Godxin"},"content":"        assertFalse(ParserUtil.parseTime(Optional.empty()).isPresent());"},{"lineNumber":323,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":324,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":325,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":326,"author":{"gitID":"Godxin"},"content":"    public void parseTime_validValueWithoutWhitespace_returnsTime() throws Exception {"},{"lineNumber":327,"author":{"gitID":"Godxin"},"content":"        Time expectedTime \u003d new Time(VALID_TIME);"},{"lineNumber":328,"author":{"gitID":"Godxin"},"content":"        assertEquals(expectedTime, ParserUtil.parseTime(VALID_TIME));"},{"lineNumber":329,"author":{"gitID":"Godxin"},"content":"        assertEquals(Optional.of(expectedTime), ParserUtil.parseTime(Optional.of(VALID_TIME)));"},{"lineNumber":330,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":331,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":332,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":333,"author":{"gitID":"Godxin"},"content":"    public void parseTime_validValueWithWhitespace_returnsTrimmedTime() throws Exception {"},{"lineNumber":334,"author":{"gitID":"Godxin"},"content":"        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"},{"lineNumber":335,"author":{"gitID":"Godxin"},"content":"        Time expectedTime \u003d new Time(VALID_TIME);"},{"lineNumber":336,"author":{"gitID":"Godxin"},"content":"        assertEquals(expectedTime, ParserUtil.parseTime(timeWithWhitespace));"},{"lineNumber":337,"author":{"gitID":"Godxin"},"content":"        assertEquals(Optional.of(expectedTime), ParserUtil.parseTime(Optional.of(timeWithWhitespace)));"},{"lineNumber":338,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":340,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":341,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":342,"author":{"gitID":"Godxin"},"content":"    public void parseDuration_null_throwsNullPointerException() {"},{"lineNumber":343,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDuration((String) null));"},{"lineNumber":344,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDuration((Optional\u003cString\u003e) null));"},{"lineNumber":345,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":347,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":348,"author":{"gitID":"Godxin"},"content":"    public void parseDuration_invalidValue_throwsIllegalValueException() {"},{"lineNumber":349,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDuration(INVALID_DURATION));"},{"lineNumber":350,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseDuration(Optional.of(INVALID_DURATION)));"},{"lineNumber":351,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":352,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":353,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":354,"author":{"gitID":"Godxin"},"content":"    public void parseDuration_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":355,"author":{"gitID":"Godxin"},"content":"        assertFalse(ParserUtil.parseDuration(Optional.empty()).isPresent());"},{"lineNumber":356,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":357,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":358,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":359,"author":{"gitID":"Godxin"},"content":"    public void parseDuration_validValueWithoutWhitespace_returnsDuration() throws Exception {"},{"lineNumber":360,"author":{"gitID":"Godxin"},"content":"        Duration expectedDuration \u003d new Duration(VALID_DURATION);"},{"lineNumber":361,"author":{"gitID":"Godxin"},"content":"        assertEquals(expectedDuration, ParserUtil.parseDuration(VALID_DURATION));"},{"lineNumber":362,"author":{"gitID":"Godxin"},"content":"        assertEquals(Optional.of(expectedDuration), ParserUtil.parseDuration(Optional.of(VALID_DURATION)));"},{"lineNumber":363,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":364,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":365,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":366,"author":{"gitID":"Godxin"},"content":"    public void parseDuration_validValueWithWhitespace_returnsTrimmedDuration() throws Exception {"},{"lineNumber":367,"author":{"gitID":"Godxin"},"content":"        String durationWithWhitespace \u003d WHITESPACE + VALID_DURATION + WHITESPACE;"},{"lineNumber":368,"author":{"gitID":"Godxin"},"content":"        Duration expectedDuration \u003d new Duration(VALID_DURATION);"},{"lineNumber":369,"author":{"gitID":"Godxin"},"content":"        assertEquals(expectedDuration, ParserUtil.parseDuration(durationWithWhitespace));"},{"lineNumber":370,"author":{"gitID":"Godxin"},"content":"        assertEquals(Optional.of(expectedDuration), ParserUtil.parseDuration(Optional.of(durationWithWhitespace)));"},{"lineNumber":371,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":372,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":373,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":374,"author":{"gitID":"Godxin"},"content":"    public void parseDescription_null_throwsNullPointerException() {"},{"lineNumber":375,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"},{"lineNumber":376,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((Optional\u003cString\u003e) null));"},{"lineNumber":377,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":378,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":379,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":380,"author":{"gitID":"Godxin"},"content":"    public void parseDescription_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":381,"author":{"gitID":"Godxin"},"content":"        assertFalse(ParserUtil.parseDescription(Optional.empty()).isPresent());"},{"lineNumber":382,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":383,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":384,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":385,"author":{"gitID":"Godxin"},"content":"    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"},{"lineNumber":386,"author":{"gitID":"Godxin"},"content":"        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"},{"lineNumber":387,"author":{"gitID":"Godxin"},"content":"        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"},{"lineNumber":388,"author":{"gitID":"Godxin"},"content":"        assertEquals(Optional.of(expectedDescription), ParserUtil.parseDescription(Optional.of(VALID_DESCRIPTION)));"},{"lineNumber":389,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":390,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":391,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":392,"author":{"gitID":"Godxin"},"content":"    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"},{"lineNumber":393,"author":{"gitID":"Godxin"},"content":"        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"},{"lineNumber":394,"author":{"gitID":"Godxin"},"content":"        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"},{"lineNumber":395,"author":{"gitID":"Godxin"},"content":"        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"},{"lineNumber":396,"author":{"gitID":"Godxin"},"content":"        assertEquals(Optional.of(expectedDescription), ParserUtil.parseDescription("},{"lineNumber":397,"author":{"gitID":"Godxin"},"content":"                Optional.of(descriptionWithWhitespace)));"},{"lineNumber":398,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":399,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":257,"Godxin":143}},{"path":"src/test/java/seedu/address/logic/parser/RemoveVetTechFromAppointmentParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.RemoveVetTechFromAppointmentCommand;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"public class RemoveVetTechFromAppointmentParserTest {"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"    private RemoveVetTechFromAppointmentCommandParser parser \u003d new RemoveVetTechFromAppointmentCommandParser();"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"    public void parse_validArgs_returnsRemoveCommand() {"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, \"1\", new RemoveVetTechFromAppointmentCommand(INDEX_FIRST));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, \"a\", String"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"                .format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveVetTechFromAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":17,"-":9}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_CLIENT;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_VETTECHNICIAN;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_CLIENT;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"                .withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROLE_DESC_CLIENT"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        // multiple roles - last role accepted"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_VETTECHNICIAN + ROLE_DESC_CLIENT"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_CLIENT + NAME_DESC_AMY"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).buildWithRoleClient();"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().buildWithRoleClient();"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"        assertParseSuccess(parser, ROLE_DESC_CLIENT"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"                + ADDRESS_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"        // missing role prefix"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_ROLE_CLIENT"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"                expectedMessage);"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_CLIENT"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_CLIENT"},{"lineNumber":124,"author":{"gitID":"jonathanwj"},"content":"                        + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_CLIENT"},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":"                        + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_CLIENT"},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_CLIENT"},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":"                        + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"        // invalid role"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, INVALID_ROLE_DESC + NAME_DESC_BOB"},{"lineNumber":148,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":149,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, PersonRole.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":150,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":152,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, ROLE_DESC_CLIENT + INVALID_NAME_DESC"},{"lineNumber":153,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":157,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":158,"author":{"gitID":"jonathanwj"},"content":"                + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":162,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":163,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":167,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":168,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, ROLE_DESC_CLIENT + NAME_DESC_BOB"},{"lineNumber":173,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, ROLE_DESC_CLIENT + INVALID_NAME_DESC"},{"lineNumber":178,"author":{"gitID":"jonathanwj"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":179,"author":{"gitID":"jonathanwj"},"content":"                + INVALID_ADDRESS_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":182,"author":{"gitID":"jonathanwj"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + ROLE_DESC_CLIENT"},{"lineNumber":183,"author":{"gitID":"jonathanwj"},"content":"                + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":184,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_HUSBAND"},{"lineNumber":185,"author":{"gitID":"jonathanwj"},"content":"                + TAG_DESC_FRIEND, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":67,"-":120}},{"path":"src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentListIsEmptyException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasAppointmentException;"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"content":"//@@author Godxin-test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"public class ScheduleCommandTest {"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        new ScheduleCommand(null);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_appointmentAcceptedByModel_scheduleSuccessful() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        ModelStubAcceptingAppointmentScheduled modelStub \u003d new ModelStubAcceptingAppointmentScheduled();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getScheduleCommandForAppointment(validAppointment, modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(String.format(ScheduleCommand.MESSAGE_SUCCESS, validAppointment), commandResult.feedbackToUser);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentScheduled);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void execute_duplicateAppointment_throwsCommandException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateAppointmentException();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        thrown.expectMessage(ScheduleCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        getScheduleCommandForAppointment(validAppointment, modelStub).execute();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Appointment appointment1 \u003d new AppointmentBuilder().withDate(\"2018-12-12\").build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Appointment appointment2 \u003d new AppointmentBuilder().withTime(\"00:00\").build();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Appointment appointment3 \u003d new AppointmentBuilder().withDuration(\"30\").build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Appointment appointment4 \u003d new AppointmentBuilder().withDescription(\"Sterilize Garfield\").build();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        ScheduleCommand scheduleAppointment1 \u003d new ScheduleCommand(appointment1);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ScheduleCommand scheduleAppointment2 \u003d new ScheduleCommand(appointment2);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        ScheduleCommand scheduleAppointment3 \u003d new ScheduleCommand(appointment3);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ScheduleCommand scheduleAppointment4 \u003d new ScheduleCommand(appointment4);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertTrue(scheduleAppointment1.equals(scheduleAppointment1));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(scheduleAppointment2.equals(scheduleAppointment2));"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(scheduleAppointment3.equals(scheduleAppointment3));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertTrue(scheduleAppointment4.equals(scheduleAppointment4));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ScheduleCommand scheduleAppointment1Copy \u003d new ScheduleCommand(appointment1);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertTrue(scheduleAppointment1.equals(scheduleAppointment1Copy));"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertFalse(scheduleAppointment1.equals(2));"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertFalse(scheduleAppointment1.equals(null));"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // different appointment -\u003e returns false"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertFalse(scheduleAppointment1.equals(scheduleAppointment2));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Generates a new ScheduleCommand with the details of the given appointment."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private ScheduleCommand getScheduleCommandForAppointment(Appointment appointment, Model model) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        ScheduleCommand command \u003d new ScheduleCommand(appointment);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":159,"author":{"gitID":"purplepers0n"},"content":"        public ObservableList\u003cPet\u003e getFilteredPetList() {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":170,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":171,"author":{"gitID":"jonathanwj"},"content":"            return null;"},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":174,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":175,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":180,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredVetTechnicianList(Predicate\u003cVetTechnician\u003e predicate) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":190,"author":{"gitID":"purplepers0n"},"content":"        public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":195,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredClientOwnPetAssocation(Predicate\u003cClientOwnPet\u003e predicate) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClientOwnPet\u003e getFilteredClientPetAssociationList() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":206,"author":{"gitID":"jonathanwj"},"content":"        public void addPetToClient(Pet pet, Client client) throws ClientAlreadyOwnsPetException {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":211,"author":{"gitID":"jonathanwj"},"content":"        public void removePetFromClient(Pet pet, Client client) throws ClientPetAssociationNotFoundException {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":213,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        public void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        public void updateAppointment(Appointment target, Appointment rescheduledAppointment)"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                throws DuplicateAppointmentException {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            return model.getFilteredAppointmentList();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public void addPet(Pet pet) throws DuplicatePetException {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        public void deletePet(Pet pet) throws PetNotFoundException {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":241,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":242,"author":{"gitID":"purplepers0n"},"content":"        public void setCurrentList(int currentList) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":246,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":247,"author":{"gitID":"purplepers0n"},"content":"        public int getCurrentList() {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":249,"author":{"gitID":"purplepers0n"},"content":"            return -1;"},{"lineNumber":250,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":253,"author":{"gitID":"jonathanwj"},"content":"        public void addVetTechToAppointment(VetTechnician technician, Appointment appointment) {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":258,"author":{"gitID":"jonathanwj"},"content":"        public void removeVetTechFromAppointent(Appointment apptToRemoveVetFrom)"},{"lineNumber":259,"author":{"gitID":"jonathanwj"},"content":"                throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        public void sortClientList() {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        public void sortPetList() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        public void addAppointmentToPet(Appointment appointment, Pet pet) throws PetAlreadyHasAppointmentException {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        public void removeAppointmentFromPet(Appointment appointment) throws AppointmentNotFoundException {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        public void sortAppointmentList() throws AppointmentListIsEmptyException {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":292,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":293,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        public void unscheduleAppointment(Appointment appointment) {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":296,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":297,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":298,"author":{"gitID":"purplepers0n"},"content":"        public void updateDetailsList(Client client, ObservableList\u003cPet\u003e pets,"},{"lineNumber":299,"author":{"gitID":"purplepers0n"},"content":"                                      ObservableList\u003cAppointment\u003e appointments) {"},{"lineNumber":300,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":304,"author":{"gitID":"purplepers0n"},"content":"        public Client getClientDetails() {"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":306,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":310,"author":{"gitID":"purplepers0n"},"content":"        public ObservableList\u003cPet\u003e getClientPetList() {"},{"lineNumber":311,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":312,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":316,"author":{"gitID":"purplepers0n"},"content":"        public ObservableList\u003cAppointment\u003e getClientApptList() {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":318,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":323,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicateAppointmentException when trying to schedule an appointment."},{"lineNumber":324,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":325,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicateAppointmentException extends ModelStub {"},{"lineNumber":326,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":327,"author":{"gitID":"-"},"content":"        public void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":328,"author":{"gitID":"-"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":329,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":332,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":333,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":334,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":338,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the appointment being scheduled."},{"lineNumber":339,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingAppointmentScheduled extends ModelStub {"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        final ArrayList\u003cAppointment\u003e appointmentScheduled \u003d new ArrayList\u003c\u003e();"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        public void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":345,"author":{"gitID":"-"},"content":"            requireNonNull(appointment);"},{"lineNumber":346,"author":{"gitID":"-"},"content":"            appointmentScheduled.add(appointment);"},{"lineNumber":347,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":348,"author":{"gitID":"-"},"content":""},{"lineNumber":349,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":350,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":351,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":352,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":353,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":30,"null":1,"purplepers0n":18,"-":306}},{"path":"src/test/java/seedu/address/logic/commands/SortAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookEmpty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":" * Contains integration tests for sorting the appointment list."},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"public class SortAppointmentCommandTest {"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    public ExpectedException error \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"    private Model modelWithNoAppointments \u003d new ModelManager(getTypicalAddressBookEmpty(),"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"            new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"    public void sortEmptyAppointments() throws Exception {"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"        error.expect(CommandException.class);"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"        prepareCommand(modelWithNoAppointments).execute();"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    public void sortAppointment_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"        Model modelSorted \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        modelSorted.sortAppointmentList();"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"        SortAppointmentCommand command \u003d prepareCommand(model);"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"        String expectedMessage \u003d SortAppointmentCommand.MESSAGE_SUCCESS;"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"        assertCommandSuccess(command, model, expectedMessage, modelSorted);"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"    public void sortEmptyAppointment_fail() throws Exception {"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"        SortAppointmentCommand command \u003d prepareCommand(modelWithNoAppointments);"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(command, modelWithNoAppointments, Messages.MESSAGE_APPOINTMENT_LIST_EMPTY);"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"    public void equals() throws Exception {"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"        SortAppointmentCommand command \u003d prepareCommand(model);"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"        command.execute();"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        // Same objects -\u003e return true"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"        assertEquals(command, command);"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"        // Different types -\u003e return false"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"        assertFalse(command.equals(new ClearCommand()));"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"    private SortAppointmentCommand prepareCommand(Model model) {"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":"        SortAppointmentCommand command \u003d new SortAppointmentCommand();"},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"        return command;"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"-":20,"md-azsa":52}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"        Person personToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":137,"author":{"gitID":"purplepers0n"},"content":"        Person personToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":146,"author":{"gitID":"purplepers0n"},"content":"        assertNotEquals(personToDelete, model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(p -\u003efalse);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":194,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(model.getFilteredClientList().isEmpty());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":5,"-":191}},{"path":"src/test/java/seedu/address/logic/commands/AddPetCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetBuilder;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPetCommand}"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"public class AddPetCommandIntegrationTest {"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"    private Model model;"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    public void setup() {"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(),"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"                new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"    public void execute_newPet_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"        Pet validPet \u003d new PetBuilder().build();"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"        Client validClient \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(),"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"                new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"        expectedModel.addPet(validPet);"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"        expectedModel.addPetToClient(validPet, validClient);"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        assertCommandSuccess(prepareCommand(validPet, model), model,"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"                String.format(AddPetCommand.MESSAGE_SUCCESS, validPet), expectedModel);"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"    public void execute_duplicatePet_throwsCommandException() {"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"        Pet petInList \u003d model.getAddressBook().getPetList().get(0);"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(prepareCommand(petInList, model), model, AddPetCommand.MESSAGE_DUPLICATE_PET);"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"     * Generates a new {@code AddPetCommand} which upon execution,"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"     * adds {@code Pet} into {@code model}"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"    private AddPetCommand prepareCommand(Pet pet, Model model) {"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"        AddPetCommand command \u003d new AddPetCommand(pet, INDEX_FIRST_PERSON);"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        return command;"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"-":16,"md-azsa":44}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_CLIENT;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_TECHNICIAN;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        Person editedPerson \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredClientList().size());"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        Person lastPerson \u003d model.getFilteredClientList().get(indexLastPerson.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"                .withTags(VALID_TAG_HUSBAND).buildWithRoleClient();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"content":"    //@@author jonathanwj-reused"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"purplepers0n"},"content":"        Person clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"purplepers0n"},"content":"        Person editedClient \u003d new PersonBuilder(clientInFilteredList).withName(VALID_NAME_BOB).buildWithRoleClient();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"purplepers0n"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedClient);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":104,"author":{"gitID":"purplepers0n"},"content":"        expectedModel.updatePerson(model.getFilteredClientList().get(0), editedClient);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"        // edit client to vet technician"},{"lineNumber":109,"author":{"gitID":"purplepers0n"},"content":"        clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":110,"author":{"gitID":"purplepers0n"},"content":"        Person editedPerson \u003d new PersonBuilder(clientInFilteredList)"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"                .withName(VALID_NAME_BOB).buildWithRoleVetTechnician();"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"        editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withRole(VALID_ROLE_TECHNICIAN).build());"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"        expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":118,"author":{"gitID":"purplepers0n"},"content":"        expectedModel.updatePerson(model.getFilteredClientList().get(0), editedPerson);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":122,"author":{"gitID":"jonathanwj"},"content":"        // edit vet technician to client"},{"lineNumber":123,"author":{"gitID":"purplepers0n"},"content":"        model.setCurrentList(2);"},{"lineNumber":124,"author":{"gitID":"purplepers0n"},"content":"        Person technicianInFilteredList \u003d model.getFilteredVetTechnicianList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":125,"author":{"gitID":"purplepers0n"},"content":"        editedPerson \u003d new PersonBuilder(technicianInFilteredList)"},{"lineNumber":126,"author":{"gitID":"jonathanwj"},"content":"                .withName(VALID_NAME_BOB).buildWithRoleClient();"},{"lineNumber":127,"author":{"gitID":"jonathanwj"},"content":"        editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withRole(VALID_ROLE_CLIENT).build());"},{"lineNumber":129,"author":{"gitID":"purplepers0n"},"content":"        editCommand.setCurrentList();"},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"        expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":134,"author":{"gitID":"purplepers0n"},"content":"        expectedModel.updatePerson(model.getFilteredVetTechnicianList().get(0), editedPerson);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"content":"    //@@author"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":"        Person editedPerson \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":239,"author":{"gitID":"jonathanwj"},"content":"        Person editedPerson \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":289,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":290,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":24,"null":2,"purplepers0n":14,"-":256}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    private static final String LIST_EXPECTED_CLIENT_MESSAGE_SUCCESS \u003d \"Listed all clients\";"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    private static final String LIST_EXPECTED_PET_MESSAGE_SUCCESS \u003d \"Listed all pets\";"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    private static final String LIST_EXPECTED_TECH_MESSAGE_SUCCESS \u003d \"Listed all vettechs\";"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    private ListCommand listCommandClient;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    private ListCommand listCommandPet;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    private ListCommand listCommandVetTech;"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        listCommandClient \u003d new ListCommand(\"client\");"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        listCommandPet \u003d new ListCommand(\"pet\");"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        listCommandVetTech \u003d new ListCommand(\"vettech\");"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        listCommandClient.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        listCommandPet.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        listCommandVetTech.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(listCommandClient, model, LIST_EXPECTED_CLIENT_MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(listCommandPet, model, LIST_EXPECTED_PET_MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(listCommandVetTech, model, LIST_EXPECTED_TECH_MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(listCommandClient, model, LIST_EXPECTED_CLIENT_MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":21,"purplepers0n":3,"-":37}},{"path":"src/test/java/seedu/address/logic/commands/AddAppointmentToPetCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PETS;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_OOB_PET;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPT;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PET;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPT;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":" * Contains tests for AddAppointmentToPetCommand"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"public class AddAppointmentToPetCommandTest {"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    @Before"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"    public void setup() throws ClientAlreadyOwnsPetException, PetAlreadyHasOwnerException {"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        model.addPetToClient(model.getAddressBook().getPetList().get(0),"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"                model.getAddressBook().getClientList().get(0));"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"        Index outOfBoundIndexPet \u003d Index.fromOneBased(model.getFilteredPetList().size() + 1);"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"        Index outOfBoundIndexAppt \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"        AddAppointmentToPetCommand aptcCommand \u003d prepareCommand(outOfBoundIndexPet, outOfBoundIndexAppt);"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(aptcCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"    public void equals() throws Exception {"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"        final AddAppointmentToPetCommand command \u003d prepareCommand(INDEX_FIRST_APPT, INDEX_FIRST_PET);"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"        // Same values -\u003e true"},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":"        AddAppointmentToPetCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_APPT, INDEX_FIRST_PET);"},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":"        assertTrue(command.equals(commandWithSameValues));"},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":"        // Same objects -\u003e true"},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"        assertTrue(command.equals(command));"},{"lineNumber":79,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":80,"author":{"gitID":"md-azsa"},"content":"        // One command being preprocessed -\u003e false"},{"lineNumber":81,"author":{"gitID":"md-azsa"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":82,"author":{"gitID":"md-azsa"},"content":"        assertFalse(command.equals(commandWithSameValues));"},{"lineNumber":83,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":84,"author":{"gitID":"md-azsa"},"content":"        // null -\u003e false"},{"lineNumber":85,"author":{"gitID":"md-azsa"},"content":"        assertFalse(command.equals(null));"},{"lineNumber":86,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":87,"author":{"gitID":"md-azsa"},"content":"        // different commands -\u003e false"},{"lineNumber":88,"author":{"gitID":"md-azsa"},"content":"        assertFalse(command.equals(new ClearCommand()));"},{"lineNumber":89,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":90,"author":{"gitID":"md-azsa"},"content":"        // different index -\u003e false"},{"lineNumber":91,"author":{"gitID":"md-azsa"},"content":"        AddAppointmentToPetCommand differentIndexCommand \u003d prepareCommand(INDEX_SECOND_APPT, INDEX_SECOND_PET);"},{"lineNumber":92,"author":{"gitID":"md-azsa"},"content":"        assertFalse(command.equals(differentIndexCommand));"},{"lineNumber":93,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":95,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"md-azsa"},"content":"    public void execute_appointmentHasBeenBooked_throwsCommandException() throws Exception {"},{"lineNumber":97,"author":{"gitID":"md-azsa"},"content":"        AddAppointmentToPetCommand command \u003d prepareCommand(INDEX_FIRST_APPT, INDEX_FIRST_PET);"},{"lineNumber":98,"author":{"gitID":"md-azsa"},"content":"        command.execute();"},{"lineNumber":99,"author":{"gitID":"md-azsa"},"content":"        command \u003d prepareCommand(INDEX_FIRST_APPT, INDEX_SECOND_PET);"},{"lineNumber":100,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":101,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":102,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":103,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":104,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":105,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(command, model, Messages.MESSAGE_APPOINTMENT_TAKEN);"},{"lineNumber":106,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":107,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":109,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"md-azsa"},"content":"    public void execute_clientPetAssociationNotFound_throwsCommandException() throws Exception {"},{"lineNumber":111,"author":{"gitID":"md-azsa"},"content":"        AddAppointmentToPetCommand command \u003d prepareCommand(INDEX_FIRST_APPT, INDEX_SECOND_PET);"},{"lineNumber":112,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(command, model, AddAppointmentToPetCommand.MESSAGE_PET_DOES_NOT_HAVE_OWNER);"},{"lineNumber":113,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":115,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"md-azsa"},"content":"    public void execute_appointmentNotFound_throwsCommandException() throws Exception {"},{"lineNumber":117,"author":{"gitID":"md-azsa"},"content":"        AddAppointmentToPetCommand command \u003d prepareCommand(INDEX_THIRD_APPT, INDEX_FIRST_PET);"},{"lineNumber":118,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":119,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":121,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"md-azsa"},"content":"    public void execute_petNotFound_throwsCommandException() throws Exception {"},{"lineNumber":123,"author":{"gitID":"md-azsa"},"content":"        AddAppointmentToPetCommand command \u003d prepareCommand(INDEX_FIRST_APPT, INDEX_OOB_PET);"},{"lineNumber":124,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"},{"lineNumber":125,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":127,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"md-azsa"},"content":"    public void execute_addAppointmentToPet_success() throws Exception {"},{"lineNumber":129,"author":{"gitID":"md-azsa"},"content":"        Appointment appointmentInList \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());"},{"lineNumber":130,"author":{"gitID":"md-azsa"},"content":"        Pet petInList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":131,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":132,"author":{"gitID":"md-azsa"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":133,"author":{"gitID":"md-azsa"},"content":"        expectedModel.addAppointmentToPet(appointmentInList, petInList);"},{"lineNumber":134,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":135,"author":{"gitID":"md-azsa"},"content":"        AddAppointmentToPetCommand command \u003d prepareCommand(INDEX_FIRST_APPT, INDEX_FIRST_PET);"},{"lineNumber":136,"author":{"gitID":"md-azsa"},"content":"        String expectedMessage \u003d String.format(AddAppointmentToPetCommand.MESSAGE_ADD_APPOINTMENT_TO_PET_SUCCESS,"},{"lineNumber":137,"author":{"gitID":"md-azsa"},"content":"                appointmentInList, petInList);"},{"lineNumber":138,"author":{"gitID":"md-azsa"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":139,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":141,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":142,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"md-azsa"},"content":"     * Returns an {@code AddAppointmentToPetCommand} wth parameters"},{"lineNumber":144,"author":{"gitID":"md-azsa"},"content":"     * of appointment {@code index} and of pet {@code index}"},{"lineNumber":145,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"md-azsa"},"content":"    private AddAppointmentToPetCommand prepareCommand(Index appointmentIndex, Index petIndex) {"},{"lineNumber":147,"author":{"gitID":"md-azsa"},"content":"        AddAppointmentToPetCommand addappt \u003d new AddAppointmentToPetCommand(appointmentIndex, petIndex);"},{"lineNumber":148,"author":{"gitID":"md-azsa"},"content":"        addappt.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":149,"author":{"gitID":"md-azsa"},"content":"        return addappt;"},{"lineNumber":150,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"-":32,"md-azsa":118}},{"path":"src/test/java/seedu/address/logic/commands/AddPetCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentListIsEmptyException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasAppointmentException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.UniqueClientList;"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.DuplicateClientException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PetBuilder;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"public class AddPetCommandTest {"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"    @Rule"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"    public void constructor_nullPet_throwsNullPointerException() {"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"        new AddPetCommand(null, null);"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"    public void execute_petAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        ModelStubAcceptingPetAdded modelStub \u003d new ModelStubAcceptingPetAdded();"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"        Pet validPet \u003d new PetBuilder().build();"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"        CommandResult commandResult \u003d getAddPetCommandForPet(validPet, modelStub).execute();"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"        assertEquals(String.format(AddPetCommand.MESSAGE_SUCCESS, validPet), commandResult.feedbackToUser);"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"        assertEquals(Arrays.asList(validPet), modelStub.petsAdded);"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"    public void execute_duplicatePet_throwsCommandException() throws Exception {"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePetException();"},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"        Pet validPet \u003d new PetBuilder().build();"},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":"        thrown.expectMessage(AddPetCommand.MESSAGE_DUPLICATE_PET);"},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"        getAddPetCommandForPet(validPet, modelStub).execute();"},{"lineNumber":79,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":81,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"md-azsa"},"content":"    public void equals() {"},{"lineNumber":83,"author":{"gitID":"md-azsa"},"content":"        Pet garfield \u003d new PetBuilder().withPetName(\"Garfield\").build();"},{"lineNumber":84,"author":{"gitID":"md-azsa"},"content":"        Pet ginger \u003d new PetBuilder().withPetName(\"Ginger\").build();"},{"lineNumber":85,"author":{"gitID":"md-azsa"},"content":"        AddPetCommand addGarfieldCommand \u003d new AddPetCommand(garfield, INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"md-azsa"},"content":"        AddPetCommand addGinger \u003d new AddPetCommand(ginger, INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":88,"author":{"gitID":"md-azsa"},"content":"        // same object -\u003e returns true"},{"lineNumber":89,"author":{"gitID":"md-azsa"},"content":"        assertTrue(addGarfieldCommand.equals(addGarfieldCommand));"},{"lineNumber":90,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":91,"author":{"gitID":"md-azsa"},"content":"        // same values -\u003e return true"},{"lineNumber":92,"author":{"gitID":"md-azsa"},"content":"        AddPetCommand addGarfieldCommandCpy \u003d new AddPetCommand(garfield, INDEX_FIRST_PERSON);"},{"lineNumber":93,"author":{"gitID":"md-azsa"},"content":"        assertTrue(addGarfieldCommand.equals(addGarfieldCommandCpy));"},{"lineNumber":94,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":95,"author":{"gitID":"md-azsa"},"content":"        // different types -\u003e return false"},{"lineNumber":96,"author":{"gitID":"md-azsa"},"content":"        assertFalse(addGarfieldCommand.equals(1));"},{"lineNumber":97,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":98,"author":{"gitID":"md-azsa"},"content":"        // null -\u003e returns false"},{"lineNumber":99,"author":{"gitID":"md-azsa"},"content":"        assertFalse(addGarfieldCommand.equals(null));"},{"lineNumber":100,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":101,"author":{"gitID":"md-azsa"},"content":"        // different pets -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"md-azsa"},"content":"        assertFalse(addGarfieldCommand.equals(addGinger));"},{"lineNumber":103,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":105,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"md-azsa"},"content":"     * Generates a new AddPetCommand with the details of the given pet"},{"lineNumber":107,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"md-azsa"},"content":"    private AddPetCommand getAddPetCommandForPet(Pet pet, Model model) {"},{"lineNumber":109,"author":{"gitID":"md-azsa"},"content":"        AddPetCommand command \u003d new AddPetCommand(pet, INDEX_FIRST_PERSON);"},{"lineNumber":110,"author":{"gitID":"md-azsa"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":111,"author":{"gitID":"md-azsa"},"content":"        return command;"},{"lineNumber":112,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":114,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"md-azsa"},"content":"     * Default model stub that has all the methods failing"},{"lineNumber":116,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"md-azsa"},"content":"    private class ModelStub implements Model {"},{"lineNumber":118,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"md-azsa"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":120,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":123,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"md-azsa"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":125,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":128,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":129,"author":{"gitID":"md-azsa"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":130,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitID":"md-azsa"},"content":"            return null;"},{"lineNumber":132,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":134,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"md-azsa"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":136,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":137,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":139,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":140,"author":{"gitID":"md-azsa"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":141,"author":{"gitID":"md-azsa"},"content":"                throws DuplicatePersonException {"},{"lineNumber":142,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":145,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"md-azsa"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":147,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"md-azsa"},"content":"            return null;"},{"lineNumber":149,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":151,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"md-azsa"},"content":"        public ObservableList\u003cPet\u003e getFilteredPetList() {"},{"lineNumber":153,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"md-azsa"},"content":"            return null;"},{"lineNumber":155,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":157,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":158,"author":{"gitID":"md-azsa"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":159,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":162,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":163,"author":{"gitID":"md-azsa"},"content":"        public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":164,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitID":"md-azsa"},"content":"            return null;"},{"lineNumber":166,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":168,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":169,"author":{"gitID":"md-azsa"},"content":"        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":170,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":173,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":174,"author":{"gitID":"md-azsa"},"content":"        public ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList() {"},{"lineNumber":175,"author":{"gitID":"md-azsa"},"content":"            return null;"},{"lineNumber":176,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":178,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"md-azsa"},"content":"        public void updateFilteredVetTechnicianList(Predicate\u003cVetTechnician\u003e predicate) {"},{"lineNumber":180,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":183,"author":{"gitID":"md-azsa"},"content":"        public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"},{"lineNumber":184,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":187,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"md-azsa"},"content":"        public void updateFilteredClientOwnPetAssocation(Predicate\u003cClientOwnPet\u003e predicate) {"},{"lineNumber":189,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":190,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":192,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"md-azsa"},"content":"        public ObservableList\u003cClientOwnPet\u003e getFilteredClientPetAssociationList() {"},{"lineNumber":194,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":195,"author":{"gitID":"md-azsa"},"content":"            return null;"},{"lineNumber":196,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":198,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"md-azsa"},"content":"        public void addPetToClient(Pet pet, Client client) throws ClientAlreadyOwnsPetException {"},{"lineNumber":200,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":203,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"md-azsa"},"content":"        public void removePetFromClient(Pet pet, Client client) throws ClientPetAssociationNotFoundException {"},{"lineNumber":205,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":206,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":208,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":209,"author":{"gitID":"md-azsa"},"content":"        public void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":210,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":211,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":213,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":214,"author":{"gitID":"md-azsa"},"content":"        public void updateAppointment(Appointment target, Appointment rescheduledAppointment)"},{"lineNumber":215,"author":{"gitID":"md-azsa"},"content":"                throws DuplicateAppointmentException {"},{"lineNumber":216,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":217,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":219,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"md-azsa"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":221,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":222,"author":{"gitID":"md-azsa"},"content":"            return null;"},{"lineNumber":223,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":224,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":225,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":226,"author":{"gitID":"md-azsa"},"content":"        public void addPet(Pet pet) throws DuplicatePetException {"},{"lineNumber":227,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":228,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":230,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":231,"author":{"gitID":"md-azsa"},"content":"        public void deletePet(Pet pet) throws PetNotFoundException {"},{"lineNumber":232,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":233,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":235,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":236,"author":{"gitID":"md-azsa"},"content":"        public void setCurrentList(int currentList) {"},{"lineNumber":237,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":238,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":240,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":241,"author":{"gitID":"md-azsa"},"content":"        public int getCurrentList() {"},{"lineNumber":242,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":243,"author":{"gitID":"md-azsa"},"content":"            return -1;"},{"lineNumber":244,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":246,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":247,"author":{"gitID":"md-azsa"},"content":"        public void addVetTechToAppointment(VetTechnician technician, Appointment appointment) {"},{"lineNumber":248,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":249,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":251,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":252,"author":{"gitID":"md-azsa"},"content":"        public void removeVetTechFromAppointent(Appointment apptToRemoveVetFrom)"},{"lineNumber":253,"author":{"gitID":"md-azsa"},"content":"                throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":254,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":255,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":257,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":258,"author":{"gitID":"md-azsa"},"content":"        public void sortClientList() {"},{"lineNumber":259,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":260,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":261,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":262,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":263,"author":{"gitID":"md-azsa"},"content":"        public void sortPetList() {"},{"lineNumber":264,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":265,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":266,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":267,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":268,"author":{"gitID":"md-azsa"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":269,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":270,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":271,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":272,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":273,"author":{"gitID":"md-azsa"},"content":"        public void addAppointmentToPet(Appointment appointment, Pet pet) throws PetAlreadyHasAppointmentException {"},{"lineNumber":274,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":275,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":277,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":278,"author":{"gitID":"md-azsa"},"content":"        public void removeAppointmentFromPet(Appointment appointment) throws AppointmentNotFoundException {"},{"lineNumber":279,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":280,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":282,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":283,"author":{"gitID":"md-azsa"},"content":"        public void sortAppointmentList() throws AppointmentListIsEmptyException {"},{"lineNumber":284,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":285,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":287,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":288,"author":{"gitID":"md-azsa"},"content":"        public void unscheduleAppointment(Appointment appointment) {"},{"lineNumber":289,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":290,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":292,"author":{"gitID":"md-azsa"},"content":"        public void updateDetailsList(Client client, ObservableList\u003cPet\u003e pets,"},{"lineNumber":293,"author":{"gitID":"md-azsa"},"content":"                                      ObservableList\u003cAppointment\u003e appointments) {"},{"lineNumber":294,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":295,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":297,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":298,"author":{"gitID":"md-azsa"},"content":"        public Client getClientDetails() {"},{"lineNumber":299,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":300,"author":{"gitID":"md-azsa"},"content":"            return null;"},{"lineNumber":301,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":302,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":303,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":304,"author":{"gitID":"md-azsa"},"content":"        public ObservableList\u003cPet\u003e getClientPetList() {"},{"lineNumber":305,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":306,"author":{"gitID":"md-azsa"},"content":"            return null;"},{"lineNumber":307,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":309,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":310,"author":{"gitID":"md-azsa"},"content":"        public ObservableList\u003cAppointment\u003e getClientApptList() {"},{"lineNumber":311,"author":{"gitID":"md-azsa"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":312,"author":{"gitID":"md-azsa"},"content":"            return null;"},{"lineNumber":313,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":316,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":317,"author":{"gitID":"md-azsa"},"content":"     * Model stub that always throws DuplicatePetException"},{"lineNumber":318,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":319,"author":{"gitID":"md-azsa"},"content":"    private class ModelStubThrowingDuplicatePetException extends ModelStub {"},{"lineNumber":320,"author":{"gitID":"md-azsa"},"content":"        final UniqueClientList clientSample;"},{"lineNumber":321,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":322,"author":{"gitID":"md-azsa"},"content":"        private ModelStubThrowingDuplicatePetException() throws DuplicateClientException {"},{"lineNumber":323,"author":{"gitID":"md-azsa"},"content":"            clientSample \u003d new UniqueClientList();"},{"lineNumber":324,"author":{"gitID":"md-azsa"},"content":"            clientSample.add((Client) ALICE);"},{"lineNumber":325,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":326,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":327,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":328,"author":{"gitID":"md-azsa"},"content":"        public void addPet(Pet pet) throws DuplicatePetException {"},{"lineNumber":329,"author":{"gitID":"md-azsa"},"content":"            throw new DuplicatePetException();"},{"lineNumber":330,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":331,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":332,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":333,"author":{"gitID":"md-azsa"},"content":"        public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":334,"author":{"gitID":"md-azsa"},"content":"            return FXCollections.unmodifiableObservableList(clientSample.asObservableList());"},{"lineNumber":335,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":336,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":337,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":338,"author":{"gitID":"md-azsa"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":339,"author":{"gitID":"md-azsa"},"content":"            return new AddressBook();"},{"lineNumber":340,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":341,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":342,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":343,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":344,"author":{"gitID":"md-azsa"},"content":"     * A Model stub that always accept the pet being added."},{"lineNumber":345,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":346,"author":{"gitID":"md-azsa"},"content":"    private class ModelStubAcceptingPetAdded extends ModelStub {"},{"lineNumber":347,"author":{"gitID":"md-azsa"},"content":"        final ArrayList\u003cPet\u003e petsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":348,"author":{"gitID":"md-azsa"},"content":"        final UniqueClientList clientSample;"},{"lineNumber":349,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":350,"author":{"gitID":"md-azsa"},"content":"        private ModelStubAcceptingPetAdded() throws DuplicateClientException {"},{"lineNumber":351,"author":{"gitID":"md-azsa"},"content":"            clientSample \u003d new UniqueClientList();"},{"lineNumber":352,"author":{"gitID":"md-azsa"},"content":"            clientSample.add((Client) ALICE);"},{"lineNumber":353,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":354,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":355,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":356,"author":{"gitID":"md-azsa"},"content":"        public void addPet(Pet pet) throws DuplicatePetException {"},{"lineNumber":357,"author":{"gitID":"md-azsa"},"content":"            requireNonNull(pet);"},{"lineNumber":358,"author":{"gitID":"md-azsa"},"content":"            petsAdded.add(pet);"},{"lineNumber":359,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":360,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":361,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":362,"author":{"gitID":"md-azsa"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":363,"author":{"gitID":"md-azsa"},"content":"            return new AddressBook();"},{"lineNumber":364,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":365,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":366,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":367,"author":{"gitID":"md-azsa"},"content":"        public void addPetToClient(Pet pet, Client client) throws ClientAlreadyOwnsPetException {"},{"lineNumber":368,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":369,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":370,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":371,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":372,"author":{"gitID":"md-azsa"},"content":"        public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":373,"author":{"gitID":"md-azsa"},"content":"            return FXCollections.unmodifiableObservableList(clientSample.asObservableList());"},{"lineNumber":374,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":375,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":376,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":377,"author":{"gitID":"md-azsa"},"content":"        public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"},{"lineNumber":378,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":379,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":380,"author":{"gitID":"md-azsa"},"content":"        @Override"},{"lineNumber":381,"author":{"gitID":"md-azsa"},"content":"        public void updateFilteredClientOwnPetAssocation(Predicate\u003cClientOwnPet\u003e predicate) {"},{"lineNumber":382,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":383,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":384,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":385,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":9,"-":37,"md-azsa":339}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"import java.util.function.Predicate;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.RescheduleAppointmentDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    public static final String VALID_ROLE_CLIENT \u003d \"CLIENT\";"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    public static final String VALID_ROLE_TECHNICIAN \u003d \"TECHNICIAN\";"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_DATE1 \u003d \"2018-01-01\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_DATE2 \u003d \"2018-04-04\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_TIME1 \u003d \"00:00\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_TIME2 \u003d \"14:00\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_DURATION1 \u003d \"30\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_DURATION2 \u003d \"60\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_DESCRIPTION1 \u003d \"Sterilize garfield\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String VALID_APPOINTMENT_DESCRIPTION2 \u003d \"Sterilise golf\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"    public static final String ROLE_DESC_CLIENT \u003d \" \" + PREFIX_PERSON_ROLE + VALID_ROLE_CLIENT;"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"    public static final String ROLE_DESC_VETTECHNICIAN \u003d \" \" + PREFIX_PERSON_ROLE + VALID_ROLE_TECHNICIAN;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_PERSON_ROLE + \"baker\"; // \u0027baker\u0027 not allowed in names"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final RescheduleCommand.RescheduleAppointmentDescriptor DESC_APPT1;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static final RescheduleCommand.RescheduleAppointmentDescriptor DESC_APPT2;"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        DESC_APPT1 \u003d new RescheduleAppointmentDescriptorBuilder().withDate(VALID_APPOINTMENT_DATE1)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .withTime(VALID_APPOINTMENT_TIME1).withDuration(VALID_APPOINTMENT_DURATION1)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .withDescription(VALID_APPOINTMENT_DESCRIPTION1).build();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        DESC_APPT2 \u003d new RescheduleAppointmentDescriptorBuilder().withDate(VALID_APPOINTMENT_DATE2)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .withTime(VALID_APPOINTMENT_TIME2).withDuration(VALID_APPOINTMENT_DURATION2)"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                .withDescription(VALID_APPOINTMENT_DESCRIPTION2).build();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":146,"author":{"gitID":"purplepers0n"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredClientList().size());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":154,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":155,"author":{"gitID":"purplepers0n"},"content":"        Person clientToBeShownAtIndex \u003d model.getFilteredClientList().get(targetIndex.getZeroBased());"},{"lineNumber":156,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(new Predicate\u003cClient\u003e() {"},{"lineNumber":157,"author":{"gitID":"purplepers0n"},"content":"            @Override"},{"lineNumber":158,"author":{"gitID":"purplepers0n"},"content":"            public boolean test(Client client) {"},{"lineNumber":159,"author":{"gitID":"purplepers0n"},"content":"                return clientToBeShownAtIndex.equals(client);"},{"lineNumber":160,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":161,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(1, model.getFilteredClientList().size());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"jonathanwj"},"content":"     * Updates {@code model}\u0027s filtered list to show only the pet at the given {@code targetIndex} in the"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"jonathanwj"},"content":"    public static void showPetAtIndex(Model model, Index targetIndex) {"},{"lineNumber":171,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPetList().size());"},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":173,"author":{"gitID":"jonathanwj"},"content":"        Pet petToShow \u003d model.getFilteredPetList().get(targetIndex.getZeroBased());"},{"lineNumber":174,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredPetList(pet -\u003e petToShow.equals(pet));"},{"lineNumber":175,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":176,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(1, model.getFilteredPetList().size());"},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the appointment at the given {@code targetIndex} in the"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public static void showAppointmentAtIndex(Model model, Index targetIndex) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAppointmentList().size());"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        Appointment apptToShow \u003d model.getFilteredAppointmentList().get(targetIndex.getZeroBased());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        model.updateFilteredAppointmentList(appointment -\u003e apptToShow.equals(appointment));"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredAppointmentList().size());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * - the address book and the filtered appointment list in the {@code actualModel} remain unchanged"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public static void assertRescheduleCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":201,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        List\u003cAppointment\u003e expectedAppointmentList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAppointmentList());"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            assertEquals(expectedAppointmentList, actualModel.getFilteredAppointmentList());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"jonathanwj"},"content":"     * Upates {@code model}\u0027s filtered list to show only the VetTechnician at the given {@code targetIndex} in the"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"jonathanwj"},"content":"    public static void showVetTechnicianAtIndex(Model model, Index targetIndex) {"},{"lineNumber":218,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredVetTechnicianList().size());"},{"lineNumber":219,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":220,"author":{"gitID":"jonathanwj"},"content":"        VetTechnician techToShow \u003d model.getFilteredVetTechnicianList().get(targetIndex.getZeroBased());"},{"lineNumber":221,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredVetTechnicianList(tech -\u003e techToShow.equals(tech));"},{"lineNumber":222,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":223,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(1, model.getFilteredVetTechnicianList().size());"},{"lineNumber":224,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":226,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"jonathanwj"},"content":"     * Updates {@code model}\u0027s filtered list to show only the pet at the given {@code targetIndex} in the"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"jonathanwj"},"content":"    public static void showClientAtIndex(Model model, Index targetIndex) {"},{"lineNumber":231,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredClientList().size());"},{"lineNumber":232,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":233,"author":{"gitID":"jonathanwj"},"content":"        Client clientToShow \u003d model.getFilteredClientList().get(targetIndex.getZeroBased());"},{"lineNumber":234,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredClientList(pet -\u003e clientToShow.equals(pet));"},{"lineNumber":235,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":236,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(1, model.getFilteredClientList().size());"},{"lineNumber":237,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":241,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":262,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":43,"purplepers0n":11,"-":214}},{"path":"src/test/java/seedu/address/logic/commands/SortClientCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookEmpty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":" * Adds integrations test methods for {@code SortClientCommand}"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"public class SortClientCommandTest {"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    public ExpectedException error \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"    private Model modelWithNoPersonsList \u003d"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"            new ModelManager(getTypicalAddressBookEmpty(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"    public void sortEmptyList() throws Exception {"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"        error.expect(CommandException.class);"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"        prepareCommand(modelWithNoPersonsList).execute();"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    public void sortPersonsList_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"        Model modelSorted \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        modelSorted.sortClientList();"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"        SortClientCommand command \u003d prepareCommand(model);"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"        String expectedMessage \u003d SortClientCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"        assertCommandSuccess(command, model, expectedMessage, modelSorted);"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"    public void sortEmptyList_fail() throws Exception {"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"        SortClientCommand command \u003d prepareCommand(modelWithNoPersonsList);"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(command, modelWithNoPersonsList, Messages.MESSAGE_PERSONSLIST_EMPTY);"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"    public void equal() throws Exception {"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"        SortClientCommand command \u003d prepareCommand(model);"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        command.execute();"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"        // Same objects -\u003e return true"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"        assertEquals(command, command);"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"        // Different types -\u003e return false"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"        assertFalse(command.equals(new ClearCommand()));"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"        // Different references -\u003e return false"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"        SortClientCommand commandDiff \u003d prepareCommand(model);"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"        commandDiff.execute();"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":"        assertFalse(command.equals(commandDiff));"},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":"    private SortClientCommand prepareCommand(Model model) {"},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":"        SortClientCommand command \u003d new SortClientCommand();"},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"        return command;"},{"lineNumber":79,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"-":18,"md-azsa":59}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    public void execute_newPersonOrClient_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"        Person validPerson \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    public void execute_newVetTechnician_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        Person validVetTechnician \u003d new PersonBuilder().buildWithRoleVetTechnician();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addPerson(validVetTechnician);"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(prepareCommand(validVetTechnician, model), model,"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validVetTechnician), expectedModel);"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"    public void execute_duplicatePersonOrClient_throwsCommandException() {"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(1);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"    public void execute_duplicateVetTechnician_throwsCommandException() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandFailure(prepareCommand(personInList, model), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private AddCommand prepareCommand(Person person, Model model) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":16,"-":57}},{"path":"src/test/java/seedu/address/logic/commands/RemoveVetTechFromAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalPersons.BOON;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.testutil.TypicalAddressBook;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":22,"content":"//@@author jonathanwj-reused"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":" * Contains integration tests unit tests for"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":" * {@code RemoveVetTechFromAppointmentCommand}."},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"public class RemoveVetTechFromAppointmentCommandTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    private Model model \u003d new ModelManager(TypicalAddressBook.getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    public void removeVetTech_invalidAppt_throwAppointmentNotFoundException() throws Exception {"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(AppointmentNotFoundException.class);"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"        model.removeVetTechFromAppointent(new AppointmentBuilder().withDate(\"2019-02-01\")"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"                .withTime(\"14:40\")"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"                .withDuration(\"80\")"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"                .withDescription(\"Dummy\")"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"                .build());"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        Appointment appointmentToRemoveVetTech \u003d model.getFilteredAppointmentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        model.addVetTechToAppointment((VetTechnician) BOON, appointmentToRemoveVetTech);"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"        appointmentToRemoveVetTech \u003d model.getFilteredAppointmentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        RemoveVetTechFromAppointmentCommand command \u003d new RemoveVetTechFromAppointmentCommand(INDEX_FIRST);"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d String.format(RemoveVetTechFromAppointmentCommand"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"                .MESSAGE_REMOVE_VET_FROM_APPT_SUCCESS, appointmentToRemoveVetTech);"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.removeVetTechFromAppointent(appointmentToRemoveVetTech);"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":48,"null":1,"-":13}},{"path":"src/test/java/seedu/address/logic/commands/DeletePetCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_1;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalPets.GARFIELD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.testutil.TypicalAddressBook;"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":" * Contains integration tests unit tests for"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":" * {@code DeletePetCommand}."},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"public class DeletePetCommandTest {"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"    private Model model \u003d new ModelManager(TypicalAddressBook.getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"    public void removePet_invalidAssociation_throwClientPetAssociationNotFoundException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"        thrown.expect(ClientPetAssociationNotFoundException.class);"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"        model.deletePet(GARFIELD);"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"    public void removePet_petHasAppointment_success() throws Exception {"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        model.addPetToClient(GARFIELD, (Client) FIONA);"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"        model.addAppointmentToPet(APPOINTMENT_1, GARFIELD);"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"        Pet petToDelete \u003d model.getFilteredPetList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"        DeletePetCommand deletePetCommand \u003d new DeletePetCommand(INDEX_FIRST);"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"        String expectedMessage \u003d String.format(DeletePetCommand.MESSAGE_DELETE_PET_SUCCESS, petToDelete);"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"        expectedModel.deletePet(petToDelete);"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"        deletePetCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"        assertCommandSuccess(deletePetCommand, model, expectedMessage, expectedModel);"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":15,"-":7,"md-azsa":37}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredClientList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":1,"-":140}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PETS_LISTED_OVERVIEW;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"    public void execute_zeroKeywords_noClientFound() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        FindCommand command \u003d prepareCommand(\" \", 0);"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList(), 0);"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"    public void execute_zeroKeywords_noPetFound() {"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PETS_LISTED_OVERVIEW, 0);"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        FindCommand command \u003d prepareCommand(\" \", 1);"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList(), 1);"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"    public void execute_zeroKeywords_noTechFound() {"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"        FindCommand command \u003d prepareCommand(\" \", 2);"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList(), 2);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\", 0);"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA), 0);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"    private FindCommand prepareCommand(String userInput, int list) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"        model.setCurrentList(list);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage,"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"                                      List\u003cPerson\u003e expectedList, int list) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"        switch (list) {"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"        case 0:"},{"lineNumber":114,"author":{"gitID":"purplepers0n"},"content":"            assertEquals(expectedList, model.getFilteredClientList());"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"        case 1:"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"            assertEquals(expectedList, model.getFilteredClientPetAssociationList());"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"        case 2:"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":"            assertEquals(expectedList, model.getFilteredVetTechnicianList());"},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":122,"author":{"gitID":"jonathanwj"},"content":"        default:"},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":124,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":36,"purplepers0n":1,"-":90}},{"path":"src/test/java/seedu/address/logic/commands/RescheduleCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_APPT1;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_APPT2;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DATE1;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_DURATION1;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_APPOINTMENT_TIME1;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showAppointmentAtIndex;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAppointments.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPT;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPT;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RescheduleCommand.RescheduleAppointmentDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.RescheduleAppointmentDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"content":"//@@author Godxin-test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class RescheduleCommandTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        Appointment rescheduledAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        RescheduleAppointmentDescriptor descriptor \u003d new RescheduleAppointmentDescriptorBuilder(rescheduledAppointment)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        RescheduleCommand rescheduleCommand \u003d prepareCommand(INDEX_FIRST_APPT, descriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(RescheduleCommand.MESSAGE_RESCHEDULE_APPOINTMENT_SUCCESS,"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                rescheduledAppointment);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedModel.updateAppointment(model.getFilteredAppointmentList().get(0), rescheduledAppointment);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(rescheduleCommand, model, expectedMessage, expectedModel);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Index indexLastAppointment \u003d Index.fromOneBased(model.getFilteredAppointmentList().size());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Appointment lastAppointment \u003d model.getFilteredAppointmentList().get(indexLastAppointment.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AppointmentBuilder appointmentInList \u003d new AppointmentBuilder(lastAppointment);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Appointment rescheduledAppointment \u003d appointmentInList.withDate(VALID_APPOINTMENT_DATE1)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                .withTime(VALID_APPOINTMENT_TIME1).withDuration(VALID_APPOINTMENT_DURATION1).build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        RescheduleAppointmentDescriptor descriptor \u003d new RescheduleAppointmentDescriptorBuilder()"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .withDate(VALID_APPOINTMENT_DATE1).withTime(VALID_APPOINTMENT_TIME1)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .withDuration(VALID_APPOINTMENT_DURATION1).build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        RescheduleCommand rescheduleCommand \u003d prepareCommand(indexLastAppointment, descriptor);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(RescheduleCommand.MESSAGE_RESCHEDULE_APPOINTMENT_SUCCESS,"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                rescheduledAppointment);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedModel.updateAppointment(lastAppointment, rescheduledAppointment);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(rescheduleCommand, model, expectedMessage, expectedModel);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        RescheduleCommand rescheduleCommand \u003d prepareCommand(INDEX_FIRST_APPT, new RescheduleAppointmentDescriptor());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Appointment rescheduledAppointment \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(RescheduleCommand.MESSAGE_RESCHEDULE_APPOINTMENT_SUCCESS,"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                rescheduledAppointment);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(rescheduleCommand, model, expectedMessage, expectedModel);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Appointment appointmentInFilteredList \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Appointment rescheduledAppointment \u003d new AppointmentBuilder(appointmentInFilteredList)"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                .withDate(VALID_APPOINTMENT_DATE1).build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        RescheduleCommand rescheduleCommand \u003d prepareCommand(INDEX_FIRST_APPT,"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                new RescheduleAppointmentDescriptorBuilder().withDate(VALID_APPOINTMENT_DATE1).build());"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(RescheduleCommand.MESSAGE_RESCHEDULE_APPOINTMENT_SUCCESS,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                rescheduledAppointment);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        expectedModel.updateAppointment(model.getFilteredAppointmentList().get(0), rescheduledAppointment);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(rescheduleCommand, model, expectedMessage, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // reschedule date of an appointment"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        appointmentInFilteredList \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Appointment rescheduledAnotherAppointment \u003d new AppointmentBuilder(appointmentInFilteredList)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .withDate(VALID_APPOINTMENT_DATE1).build();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        rescheduleCommand \u003d prepareCommand(INDEX_FIRST_APPT,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                new RescheduleAppointmentDescriptorBuilder().withDate(VALID_APPOINTMENT_DATE1).build());"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        expectedMessage \u003d String.format(RescheduleCommand.MESSAGE_RESCHEDULE_APPOINTMENT_SUCCESS,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                rescheduledAnotherAppointment);"},{"lineNumber":122,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"        expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        expectedModel.updateAppointment(model.getFilteredAppointmentList().get(0), rescheduledAnotherAppointment);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(rescheduleCommand, model, expectedMessage, expectedModel);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void execute_invalidAppointmentIndexUnfilteredList_failure() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RescheduleAppointmentDescriptor descriptor \u003d new RescheduleAppointmentDescriptorBuilder()"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                .withDate(VALID_APPOINTMENT_DATE1).build();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        RescheduleCommand rescheduleCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandFailure(rescheduleCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public void execute_invalidAppointmentIndexFilteredList_failure() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST_APPT);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_APPT;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getAppointmentList().size());"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        RescheduleCommand rescheduleCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                new RescheduleAppointmentDescriptorBuilder().withDate(VALID_APPOINTMENT_DATE1).build());"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertCommandFailure(rescheduleCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Appointment rescheduledAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        Appointment appointmentToReschedule \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        RescheduleAppointmentDescriptor descriptor \u003d new RescheduleAppointmentDescriptorBuilder(rescheduledAppointment)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        RescheduleCommand rescheduleCommand \u003d prepareCommand(INDEX_FIRST_APPT, descriptor);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // edit -\u003e first appointment rescheduled"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        rescheduleCommand.execute();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        undoRedoStack.push(rescheduleCommand);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered appointment list to show all appointments"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        // redo -\u003e same first appointment rescheduled again"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        expectedModel.updateAppointment(appointmentToReschedule, rescheduledAppointment);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        RescheduleAppointmentDescriptor descriptor \u003d new RescheduleAppointmentDescriptorBuilder()"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                .withDate(VALID_APPOINTMENT_DATE1).build();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        RescheduleCommand rescheduleCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        // execution failed -\u003e rescheduleCommand not pushed into undoRedoStack"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(rescheduleCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 1. Reschedules an {@code Appointment} from a filtered list."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * 2. Undo the reschedule."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously rescheduled appointment"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * in the unfiltered list is different from the index at the filtered list."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 4. Redo the reschedule. This ensures {@code RedoCommand} reschedules the appointment object"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * regardless of indexing."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameAppointmentEdited() throws Exception {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Appointment rescheduledAppointment \u003d new AppointmentBuilder().build();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        RescheduleAppointmentDescriptor descriptor \u003d new RescheduleAppointmentDescriptorBuilder(rescheduledAppointment)"},{"lineNumber":214,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        RescheduleCommand rescheduleCommand \u003d prepareCommand(INDEX_FIRST_APPT, descriptor);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        showAppointmentAtIndex(model, INDEX_SECOND_APPT);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        Appointment appointmentToReschedule \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        // reschedule -\u003e reschedules the second appointment in unfiltered appointment list /"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        // first appointment in filtered appointment list"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        rescheduleCommand.execute();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        undoRedoStack.push(rescheduleCommand);"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered appointment list to show all appointments"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        expectedModel.updateAppointment(appointmentToReschedule, rescheduledAppointment);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased()),"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                appointmentToReschedule);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        // redo -\u003e reschedules the same second appointment in unfiltered appointment list"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        final RescheduleCommand standardCommand \u003d prepareCommand(INDEX_FIRST_APPT, DESC_APPT1);"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        RescheduleAppointmentDescriptor copyDescriptor \u003d new RescheduleAppointmentDescriptor(DESC_APPT1);"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        RescheduleCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_APPT, copyDescriptor);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new RescheduleCommand(INDEX_SECOND_APPT, DESC_APPT1)));"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new RescheduleCommand(INDEX_FIRST_APPT, DESC_APPT2)));"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * Returns an {@code RescheduleCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":267,"author":{"gitID":"-"},"content":"    private RescheduleCommand prepareCommand(Index index, RescheduleAppointmentDescriptor descriptor) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        RescheduleCommand rescheduleCommand \u003d new RescheduleCommand(index, descriptor);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        rescheduleCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        return rescheduleCommand;"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"jonathanwj":2,"-":269}},{"path":"src/test/java/seedu/address/logic/commands/SortPetCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBookEmpty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":" * Contains integration tests for sorting the client association list."},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"public class SortPetCommandTest {"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    public ExpectedException error \u003d ExpectedException.none();"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"    private Model modelWithNoClientPetAssociationList \u003d"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"            new ModelManager(getTypicalAddressBookEmpty(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"    public void sortEmptyList() throws Exception {"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"        error.expect(CommandException.class);"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"        prepareCommand(modelWithNoClientPetAssociationList).execute();"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    public void sortClientPetList_success() throws Exception {"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"        Model modelSorted \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        modelSorted.sortPetList();"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"        SortPetCommand command \u003d prepareCommand(model);"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"        String expectedMessage \u003d SortPetCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"        assertCommandSuccess(command, model, expectedMessage, modelSorted);"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"    public void sortEmptyList_fail() throws Exception {"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"        SortPetCommand command \u003d prepareCommand(modelWithNoClientPetAssociationList);"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(command, modelWithNoClientPetAssociationList, Messages.MESSAGE_CLIENTPETLIST_EMPTY);"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"    public void equal() throws Exception {"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"        SortPetCommand command \u003d prepareCommand(model);"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        command.execute();"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"        // Same objects -\u003e return true"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"        assertEquals(command, command);"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"        // Different types -\u003e return false"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"        assertFalse(command.equals(new ClearCommand()));"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"        // Different references -\u003e return false"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"        SortPetCommand commandDiff \u003d prepareCommand(model);"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"        commandDiff.execute();"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":"        assertFalse(command.equals(commandDiff));"},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":"    private SortPetCommand prepareCommand(Model model) {"},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":"        SortPetCommand command \u003d new SortPetCommand();"},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":79,"author":{"gitID":"md-azsa"},"content":"        return command;"},{"lineNumber":80,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"-":18,"md-azsa":60}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentListIsEmptyException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasAppointmentException;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"    public void execute_personOrClientAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        Person validPerson \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":65,"content":"    //@@author jonathanwj-reused"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"    public void execute_vetTechnicianAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        Person validTechnician \u003d new PersonBuilder().buildWithRoleVetTechnician();"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validTechnician, modelStub).execute();"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTechnician), commandResult.feedbackToUser);"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(Arrays.asList(validTechnician), modelStub.personsAdded);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"    public void execute_duplicatePersonOrClient_throwsCommandException() throws Exception {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        Person validPerson \u003d new PersonBuilder().buildWithRoleClient();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"content":"    //@@author jonathanwj-reused"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"    public void execute_duplicateVetTechnician_throwsCommandException() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        Person validVetTechnician \u003d new PersonBuilder().buildWithRoleVetTechnician();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"        getAddCommandForPerson(validVetTechnician, modelStub).execute();"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":100,"content":"    //@@author"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").buildWithRoleClient();"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").buildWithRoleClient();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"purplepers0n"},"content":"        public ObservableList\u003cPet\u003e getFilteredPetList() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":180,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":182,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":183,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList() {"},{"lineNumber":195,"author":{"gitID":"jonathanwj"},"content":"            return null;"},{"lineNumber":196,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":198,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredVetTechnicianList(Predicate\u003cVetTechnician\u003e predicate) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":203,"author":{"gitID":"purplepers0n"},"content":"        public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredClientOwnPetAssocation(Predicate\u003cClientOwnPet\u003e predicate) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":210,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":212,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClientOwnPet\u003e getFilteredClientPetAssociationList() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":219,"author":{"gitID":"jonathanwj"},"content":"        public void addPetToClient(Pet pet, Client client) throws ClientAlreadyOwnsPetException {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":224,"author":{"gitID":"jonathanwj"},"content":"        public void removePetFromClient(Pet pet, Client client) throws ClientPetAssociationNotFoundException {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":226,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        public void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        public void updateAppointment(Appointment target, Appointment rescheduledAppointment)"},{"lineNumber":235,"author":{"gitID":"-"},"content":"                throws DuplicateAppointmentException {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        public void addPet(Pet pet) throws DuplicatePetException {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        public void deletePet(Pet pet) throws PetNotFoundException {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":255,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":256,"author":{"gitID":"purplepers0n"},"content":"        public void setCurrentList(int currentList) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":261,"author":{"gitID":"purplepers0n"},"content":"        public int getCurrentList() {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":263,"author":{"gitID":"purplepers0n"},"content":"            return -1;"},{"lineNumber":264,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":267,"author":{"gitID":"jonathanwj"},"content":"        public void addVetTechToAppointment(VetTechnician technician, Appointment appointment) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":272,"author":{"gitID":"jonathanwj"},"content":"        public void removeVetTechFromAppointent(Appointment apptToRemoveVetFrom)"},{"lineNumber":273,"author":{"gitID":"jonathanwj"},"content":"                throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        public void sortClientList() {"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called\");"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        public void sortPetList() {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":289,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        public void addAppointmentToPet(Appointment appointment, Pet pet) throws PetAlreadyHasAppointmentException {"},{"lineNumber":294,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":295,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        public void removeAppointmentFromPet(Appointment appointment) throws AppointmentNotFoundException {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":300,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        public void sortAppointmentList() throws AppointmentListIsEmptyException {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":306,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":307,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"        public void unscheduleAppointment(Appointment appointment) {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"purplepers0n"},"content":"        public void updateDetailsList(Client client, ObservableList\u003cPet\u003e pets,"},{"lineNumber":314,"author":{"gitID":"purplepers0n"},"content":"                                      ObservableList\u003cAppointment\u003e appointments) {"},{"lineNumber":315,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":316,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":317,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":318,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":319,"author":{"gitID":"purplepers0n"},"content":"        public Client getClientDetails() {"},{"lineNumber":320,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":321,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":322,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":325,"author":{"gitID":"purplepers0n"},"content":"        public ObservableList\u003cPet\u003e getClientPetList() {"},{"lineNumber":326,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":327,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":331,"author":{"gitID":"purplepers0n"},"content":"        public ObservableList\u003cAppointment\u003e getClientApptList() {"},{"lineNumber":332,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":333,"author":{"gitID":"jonathanwj"},"content":"            return null;"},{"lineNumber":334,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":338,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":339,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":343,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":347,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":348,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":350,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":353,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":354,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":355,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":356,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":359,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":360,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":361,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":362,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":365,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":366,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":367,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":368,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":369,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":370,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":371,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":372,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":373,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":374,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredVetTechnicianList(Predicate\u003cVetTechnician\u003e predicate) {"},{"lineNumber":375,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":376,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":377,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":378,"author":{"gitID":"purplepers0n"},"content":"        public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"},{"lineNumber":379,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":380,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":381,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":382,"author":{"gitID":"jonathanwj"},"content":"        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":383,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":384,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":63,"null":3,"purplepers0n":33,"-":287}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedClientOwnPetTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAssociations.FIONA_LOTSO;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"public class XmlAdaptedClientOwnPetTest {"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"    public void toModelType_validAssociation_returnsAssociation() throws Exception {"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"        XmlAdaptedClientOwnPet association \u003d new XmlAdaptedClientOwnPet(FIONA_LOTSO);"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(FIONA_LOTSO, association.toModelType());"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"        XmlAdaptedClientOwnPet associationOne \u003d new XmlAdaptedClientOwnPet(FIONA_LOTSO);"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(associationOne, associationOne);"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"        assertNotEquals(associationOne, new Object());"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"        XmlAdaptedClientOwnPet associationTwo \u003d new XmlAdaptedClientOwnPet(FIONA_LOTSO);"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(associationOne, associationTwo);"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":22,"-":4}},{"path":"src/test/java/seedu/address/logic/commands/AddVetTechToAppointmentCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showAppointmentAtIndex;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showVetTechnicianAtIndex;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"content":"//@@author jonathanwj-reused"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":" * and unit tests for AddVetTechToAppointmentCommand."},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"public class AddVetTechToAppointmentCommandTest {"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    public void execute_vetTechFilteredList_success() throws Exception {"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        showVetTechnicianAtIndex(model, INDEX_FIRST);"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST);"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        VetTechnician vetTechInFilteredList \u003d model.getFilteredVetTechnicianList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        Appointment appointmentInFilteredList \u003d model.getFilteredAppointmentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand avttcCommand \u003d prepareCommand(INDEX_FIRST, INDEX_FIRST);"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d String.format(AddVetTechToAppointmentCommand.MESSAGE_ADD_TECH_TO_APPOINTMENT_SUCCESS,"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"                vetTechInFilteredList, appointmentInFilteredList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addVetTechToAppointment(model.getFilteredVetTechnicianList().get(0),"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"                model.getFilteredAppointmentList().get(0));"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(avttcCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexVetTechnician \u003d Index.fromOneBased(model.getFilteredVetTechnicianList().size() + 1);"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexAppointment \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand avttcCommand \u003d prepareCommand(outOfBoundIndexVetTechnician, INDEX_FIRST);"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(avttcCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        avttcCommand \u003d prepareCommand(INDEX_FIRST, outOfBoundIndexAppointment);"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(avttcCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST);"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexAppointment \u003d INDEX_SECOND;"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(outOfBoundIndexAppointment.getZeroBased() \u003c model.getAddressBook().getAppointmentList().size());"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand avttcCommand \u003d prepareCommand(INDEX_FIRST, outOfBoundIndexAppointment);"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(avttcCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"        showVetTechnicianAtIndex(model, INDEX_FIRST);"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexVetTechnician \u003d INDEX_SECOND;"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(outOfBoundIndexVetTechnician.getZeroBased() \u003c model.getAddressBook().getAppointmentList().size());"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"        avttcCommand \u003d prepareCommand(outOfBoundIndexVetTechnician, INDEX_FIRST);"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(avttcCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand avttcCommand \u003d prepareCommand(INDEX_FIRST, INDEX_FIRST);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"        // add -\u003e vetTech added to appointment"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"        avttcCommand.execute();"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"        undoRedoStack.push(avttcCommand);"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered lists to show all"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"        // redo -\u003e add vetTech back to appointment"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addVetTechToAppointment(model.getFilteredVetTechnicianList().get(INDEX_FIRST.getZeroBased()),"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"                model.getFilteredAppointmentList().get(INDEX_FIRST.getZeroBased()));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":127,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexVetTechnician \u003d Index.fromOneBased(model.getFilteredVetTechnicianList().size() + 1);"},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":"        Index outOfBoundIndexAppointment \u003d Index.fromOneBased(model.getFilteredAppointmentList().size() + 1);"},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand avttcCommand \u003d prepareCommand(outOfBoundIndexVetTechnician,"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"                outOfBoundIndexAppointment);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(avttcCommand, model, Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"     * 1. Adss a {@code VetTechnician} To a {@code Appointment} from filtered lists."},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"     * 2. Undo the command."},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":"     * 3. The unfiltered lists should be shown now. Verify that the index of the previously edited appointment in the"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"     * 4. Redo the command. This ensures {@code RedoCommand} adds the vetTech to appointment object regardless"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"     * of indexing."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":154,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":155,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand avttcCommand \u003d prepareCommand(INDEX_FIRST, INDEX_FIRST);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":157,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":158,"author":{"gitID":"jonathanwj"},"content":"        showVetTechnicianAtIndex(model, INDEX_SECOND);"},{"lineNumber":159,"author":{"gitID":"jonathanwj"},"content":"        showAppointmentAtIndex(model, INDEX_SECOND);"},{"lineNumber":160,"author":{"gitID":"jonathanwj"},"content":"        VetTechnician vetTechToAdd \u003d model.getFilteredVetTechnicianList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":161,"author":{"gitID":"jonathanwj"},"content":"        Appointment appointmentToAddVetTechnicianTo \u003d model.getFilteredAppointmentList()"},{"lineNumber":162,"author":{"gitID":"jonathanwj"},"content":"                .get(INDEX_FIRST.getZeroBased());"},{"lineNumber":163,"author":{"gitID":"jonathanwj"},"content":"        /* add -\u003e add first appointment in filtered appointment list"},{"lineNumber":164,"author":{"gitID":"jonathanwj"},"content":"           and the first vetTech in filtered vetTech list"},{"lineNumber":165,"author":{"gitID":"jonathanwj"},"content":"        */"},{"lineNumber":166,"author":{"gitID":"jonathanwj"},"content":"        avttcCommand.execute();"},{"lineNumber":167,"author":{"gitID":"jonathanwj"},"content":"        undoRedoStack.push(avttcCommand);"},{"lineNumber":168,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":169,"author":{"gitID":"jonathanwj"},"content":"        /* undo -\u003e reverts addressbook back to previous state and filtered"},{"lineNumber":170,"author":{"gitID":"jonathanwj"},"content":"           person list to show all appointments and vetTechs"},{"lineNumber":171,"author":{"gitID":"jonathanwj"},"content":"        */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"jonathanwj"},"content":"        assertNotEquals(model.getFilteredVetTechnicianList().get(INDEX_FIRST.getZeroBased()), vetTechToAdd);"},{"lineNumber":175,"author":{"gitID":"jonathanwj"},"content":"        assertNotEquals(model.getFilteredAppointmentList().get(INDEX_FIRST.getZeroBased()),"},{"lineNumber":176,"author":{"gitID":"jonathanwj"},"content":"                appointmentToAddVetTechnicianTo);"},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":178,"author":{"gitID":"jonathanwj"},"content":"        // redo -\u003e add the same vetTech to appointment in unfiltered lists"},{"lineNumber":179,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addVetTechToAppointment(vetTechToAdd, appointmentToAddVetTechnicianTo);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"jonathanwj"},"content":"    public void execute_addVetTechToAppointment_success() throws Exception {"},{"lineNumber":185,"author":{"gitID":"jonathanwj"},"content":"        VetTechnician vetTechInFilteredList \u003d model.getFilteredVetTechnicianList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":"        Appointment appointmentInFilteredList \u003d model.getFilteredAppointmentList().get(INDEX_FIRST.getZeroBased());"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":"        expectedModel.addVetTechToAppointment(vetTechInFilteredList, appointmentInFilteredList);"},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":191,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand avttcCommand \u003d prepareCommand(INDEX_FIRST, INDEX_FIRST);"},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d String.format(AddVetTechToAppointmentCommand.MESSAGE_ADD_TECH_TO_APPOINTMENT_SUCCESS,"},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":"                vetTechInFilteredList, appointmentInFilteredList);"},{"lineNumber":194,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":195,"author":{"gitID":"jonathanwj"},"content":"        assertCommandSuccess(avttcCommand, model, expectedMessage, expectedModel);"},{"lineNumber":196,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":198,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":199,"author":{"gitID":"jonathanwj"},"content":"    public void execute_appointmentAlreadyHasVetTechnician_throwsCommandException() throws Exception {"},{"lineNumber":200,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand avttcCommand \u003d prepareCommand(INDEX_FIRST, INDEX_FIRST);"},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"        avttcCommand.execute();"},{"lineNumber":202,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":203,"author":{"gitID":"jonathanwj"},"content":"        assertCommandFailure(avttcCommand, model, AddVetTechToAppointmentCommand.MESSAGE_APPOINTMENT_HAS_TECH);"},{"lineNumber":204,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":206,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"jonathanwj"},"content":"    public void equals() throws Exception {"},{"lineNumber":208,"author":{"gitID":"jonathanwj"},"content":"        final AddVetTechToAppointmentCommand standardCommand \u003d prepareCommand(INDEX_FIRST, INDEX_FIRST);"},{"lineNumber":209,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":210,"author":{"gitID":"jonathanwj"},"content":"        // same values -\u003e returns true"},{"lineNumber":211,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST, INDEX_FIRST);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":228,"author":{"gitID":"jonathanwj"},"content":"        assertFalse(standardCommand.equals(new AddVetTechToAppointmentCommand(INDEX_SECOND, INDEX_SECOND)));"},{"lineNumber":229,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":231,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"jonathanwj"},"content":"     * Returns an {@code AddVetTechToAppointmentCommand} with parameters vetTech {@code index}"},{"lineNumber":233,"author":{"gitID":"jonathanwj"},"content":"     * and appointment {@code index}"},{"lineNumber":234,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"jonathanwj"},"content":"    private AddVetTechToAppointmentCommand prepareCommand(Index vetTechIndex, Index appointmentIndex) {"},{"lineNumber":236,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand avttcCommand \u003d new AddVetTechToAppointmentCommand(vetTechIndex,"},{"lineNumber":237,"author":{"gitID":"jonathanwj"},"content":"                appointmentIndex);"},{"lineNumber":238,"author":{"gitID":"jonathanwj"},"content":"        avttcCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":239,"author":{"gitID":"jonathanwj"},"content":"        return avttcCommand;"},{"lineNumber":240,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":140,"null":1,"-":100}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    private static final String INVALID_ROLE \u003d \"badRole\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    private static final String VALID_ROLE \u003d BENSON.getRole().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_ROLE,"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"                        VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null,"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"                VALID_ROLE, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_ROLE,"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"                        INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME,"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"                VALID_ROLE, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_ROLE, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME,"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"                VALID_ROLE, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME,"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"                VALID_ROLE, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"content":"    //@@author jonathanwj-reused"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"    public void toModelType_invalidRole_throwsIllegalValueException() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_ROLE, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":124,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d PersonRole.MESSAGE_ROLE_CONSTRAINTS;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":"    public void toModelType_nullRole_throwsIllegalValueException() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"                new XmlAdaptedPerson(VALID_NAME, null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PersonRole.class.getSimpleName());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":25,"null":1,"-":110}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        expected \u003d getTypicalUserPrefsNegativeCoord();"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        actual \u003d readUserPrefs(\"TypicalUserPrefNegativeCoord.json\").get();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(\"addressbook.xml\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(\"TypicalAddressBookName\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"    private UserPrefs getTypicalUserPrefsNegativeCoord() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"        userPrefs.setGuiSettings(1000, 500, -100, -100);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(\"addressbook.xml\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(\"TypicalAddressBookName\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        original.setGuiSettings(1200, 200, 0, 2);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        original.setGuiSettings(5, 5, 5, 5);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":5,"-":142}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedAppointmentTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_1;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_2;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"public class XmlAdaptedAppointmentTest {"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"    public void toModelType_validAppointment_returnsModel() throws Exception {"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"        XmlAdaptedAppointment appointment \u003d new XmlAdaptedAppointment(APPOINTMENT_1);"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"        assertEquals(APPOINTMENT_1, appointment.toModelType());"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"        XmlAdaptedAppointment apptOne \u003d new XmlAdaptedAppointment(APPOINTMENT_1);"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"        // Same objects -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"        assertEquals(apptOne, apptOne);"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"        // Different objects -\u003e returns false"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"        assertNotEquals(apptOne, new Object());"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        // Same calls -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        XmlAdaptedAppointment apptTwo \u003d new XmlAdaptedAppointment(APPOINTMENT_1);"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        assertEquals(apptOne, apptTwo);"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"        // Different calls -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"        XmlAdaptedAppointment apptThree \u003d new XmlAdaptedAppointment(APPOINTMENT_2);"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"        assertNotEquals(apptOne, apptThree);"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":9,"md-azsa":28}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPetTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPets;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"public class XmlAdaptedPetTest {"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"    public void toModelType_validPet_returnsModel() throws Exception {"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"        XmlAdaptedPet pet \u003d new XmlAdaptedPet(TypicalPets.GARFIELD);"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"        assertEquals(TypicalPets.GARFIELD, pet.toModelType());"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"        XmlAdaptedPet petOne \u003d new XmlAdaptedPet(TypicalPets.GARFIELD);"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"        // Same objects -\u003e returns true"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"        assertEquals(petOne, petOne);"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"        // Different objects -\u003e returns false"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"        assertNotEquals(petOne, new Object());"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        // Same calls -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        XmlAdaptedPet petTwo \u003d new XmlAdaptedPet(TypicalPets.GARFIELD);"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        assertEquals(petOne, petTwo);"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"        // Different calls -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"        XmlAdaptedPet petThree \u003d new XmlAdaptedPet(TypicalPets.LOTSO);"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"        assertNotEquals(petOne, petThree);"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":2,"-":7,"md-azsa":28}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.testutil.TypicalAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    private static final File TYPICAL_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalAddressBookWithAssociations.xml\");"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"    public void toModelType_typicalFile_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_FILE,"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalAddressBook.getTypicalAddressBook();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":8,"-":55}},{"path":"src/test/java/seedu/address/logic/commands/ListAllCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"//@@author purplepers0n"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":" * Contains integration tests (interaction with the Model) for {@code ListAllCommand}."},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"public class ListAllCommandTest {"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"    private Model model;"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"    @Before"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"    public void setUp() {"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"    public void execute_invalidIndex_failure() {"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"    public void execute_validIndex_success() {"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"    public void execute_clearData_listAllPanelCleared() {"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(null, model.getClientDetails());"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(null, model.getClientPetList());"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(null, model.getClientApptList());"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":"    public void execute_deleteClient_listAllPanelCleared() {"},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"            model.deletePerson(clientToDelete);"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", pnfe);"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(null, model.getClientDetails());"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(null, model.getClientPetList());"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(null, model.getClientApptList());"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"    public void execute_deleteOtherClient_listAllPanelNoChange() {"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":94,"author":{"gitID":"purplepers0n"},"content":"        try {"},{"lineNumber":95,"author":{"gitID":"purplepers0n"},"content":"            model.deletePerson(clientToDelete);"},{"lineNumber":96,"author":{"gitID":"purplepers0n"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":97,"author":{"gitID":"purplepers0n"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", pnfe);"},{"lineNumber":98,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":100,"author":{"gitID":"purplepers0n"},"content":"        assertNotEquals(null, model.getClientDetails());"},{"lineNumber":101,"author":{"gitID":"purplepers0n"},"content":"        assertNotEquals(null, model.getClientPetList());"},{"lineNumber":102,"author":{"gitID":"purplepers0n"},"content":"        assertNotEquals(null, model.getClientApptList());"},{"lineNumber":103,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":105,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"purplepers0n"},"content":"     * Executes a {@code ListAllCommand} with the given {@code index}"},{"lineNumber":107,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"purplepers0n"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":109,"author":{"gitID":"purplepers0n"},"content":"        ListAllCommand listAllCommand \u003d prepareCommand(index);"},{"lineNumber":110,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":111,"author":{"gitID":"purplepers0n"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"purplepers0n"},"content":"            CommandResult commandResult \u003d listAllCommand.execute();"},{"lineNumber":113,"author":{"gitID":"purplepers0n"},"content":"            assertEquals(String.format(ListAllCommand.MESSAGE_SUCCESS,"},{"lineNumber":114,"author":{"gitID":"purplepers0n"},"content":"                    model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased()).getName().fullName),"},{"lineNumber":115,"author":{"gitID":"purplepers0n"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":116,"author":{"gitID":"purplepers0n"},"content":"        } catch (CommandException ce) {"},{"lineNumber":117,"author":{"gitID":"purplepers0n"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":118,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":120,"author":{"gitID":"purplepers0n"},"content":"        Client expectedClient \u003d model.getFilteredClientList().get(index.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":122,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(expectedClient, model.getClientDetails());"},{"lineNumber":123,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":124,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClientOwnPet\u003e allClientOwnPets \u003d model.getFilteredClientPetAssociationList();"},{"lineNumber":125,"author":{"gitID":"purplepers0n"},"content":"        List\u003cPet\u003e expectedPetList \u003d FXCollections.observableArrayList();"},{"lineNumber":126,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":127,"author":{"gitID":"purplepers0n"},"content":"        for (ClientOwnPet clientOwnPet : allClientOwnPets) {"},{"lineNumber":128,"author":{"gitID":"purplepers0n"},"content":"            if (clientOwnPet.getClient().equals(expectedClient)) {"},{"lineNumber":129,"author":{"gitID":"purplepers0n"},"content":"                Pet currPet \u003d clientOwnPet.getPet();"},{"lineNumber":130,"author":{"gitID":"purplepers0n"},"content":"                expectedPetList.add(currPet);"},{"lineNumber":131,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":132,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(expectedPetList, model.getClientPetList());"},{"lineNumber":134,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":135,"author":{"gitID":"purplepers0n"},"content":"        List\u003cAppointment\u003e allApptList \u003d model.getFilteredAppointmentList();"},{"lineNumber":136,"author":{"gitID":"purplepers0n"},"content":"        List\u003cAppointment\u003e expectedApptList \u003d FXCollections.observableArrayList();"},{"lineNumber":137,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":138,"author":{"gitID":"purplepers0n"},"content":"        for (Appointment appt : allApptList) {"},{"lineNumber":139,"author":{"gitID":"purplepers0n"},"content":"            for (Pet pet : expectedPetList) {"},{"lineNumber":140,"author":{"gitID":"purplepers0n"},"content":"                if (appt.getClientOwnPet() !\u003d null \u0026\u0026 appt.getClientOwnPet().getPet().equals(pet)) {"},{"lineNumber":141,"author":{"gitID":"purplepers0n"},"content":"                    expectedApptList.add(appt);"},{"lineNumber":142,"author":{"gitID":"purplepers0n"},"content":"                }"},{"lineNumber":143,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":144,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"purplepers0n"},"content":"        assertEquals(expectedApptList, model.getClientApptList());"},{"lineNumber":146,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":148,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"purplepers0n"},"content":"     * Executes a {@code ListAllCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":150,"author":{"gitID":"purplepers0n"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":151,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"purplepers0n"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":153,"author":{"gitID":"purplepers0n"},"content":"        ListAllCommand listAllCommand \u003d prepareCommand(index);"},{"lineNumber":154,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":155,"author":{"gitID":"purplepers0n"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"purplepers0n"},"content":"            listAllCommand.execute();"},{"lineNumber":157,"author":{"gitID":"purplepers0n"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":158,"author":{"gitID":"purplepers0n"},"content":"        } catch (CommandException ce) {"},{"lineNumber":159,"author":{"gitID":"purplepers0n"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":160,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":163,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"purplepers0n"},"content":"     * Returns a {@code ListAllCommand} with parameters {@code index}."},{"lineNumber":165,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"purplepers0n"},"content":"    private ListAllCommand prepareCommand(Index index) {"},{"lineNumber":167,"author":{"gitID":"purplepers0n"},"content":"        ListAllCommand listAllCommand \u003d new ListAllCommand(index);"},{"lineNumber":168,"author":{"gitID":"purplepers0n"},"content":"        listAllCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":169,"author":{"gitID":"purplepers0n"},"content":"        return listAllCommand;"},{"lineNumber":170,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"purplepers0n":152,"-":16}},{"path":"src/test/java/seedu/address/model/appointment/DateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Godxin"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"content":"//@@author Godxin-test"},{"lineNumber":11,"author":{"gitID":"Godxin"},"content":"public class DateTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"Godxin"},"content":"        String invalidDate \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"},{"lineNumber":22,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":24,"author":{"gitID":"Godxin"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"Godxin"},"content":"    public void isValidDate() {"},{"lineNumber":26,"author":{"gitID":"Godxin"},"content":"        // null date"},{"lineNumber":27,"author":{"gitID":"Godxin"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"},{"lineNumber":28,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":29,"author":{"gitID":"Godxin"},"content":"        // invalid date"},{"lineNumber":30,"author":{"gitID":"Godxin"},"content":"        assertFalse(Date.isValidDate(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"Godxin"},"content":"        assertFalse(Date.isValidDate(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"Godxin"},"content":"        assertFalse(Date.isValidDate(\"2018/01/02\")); //wrong format"},{"lineNumber":33,"author":{"gitID":"Godxin"},"content":"        // -- invalid year --"},{"lineNumber":34,"author":{"gitID":"Godxin"},"content":"        assertFalse(Date.isValidYear(2017)); // year below lower bound"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        //-- invalid days in month --"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertFalse(Date.isValidDaysInMonth(\"2020-04-31\")); //leap year small month days overflow"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertFalse(Date.isValidDaysInMonth(\"2020-05-32\")); //leap year big month days overflow"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(Date.isValidDaysInMonth(\"2020-02-30\")); //leap year Feb days overflow"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(Date.isValidDaysInMonth(\"2019-09-31\")); //non-leap year small month days overflow"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(Date.isValidDaysInMonth(\"2018-11-32\")); //non-leap year big month days overflow"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(Date.isValidDaysInMonth(\"2021-02-29\")); //non-leap year Feb days overflow"},{"lineNumber":43,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":44,"author":{"gitID":"Godxin"},"content":"        // valid date"},{"lineNumber":45,"author":{"gitID":"Godxin"},"content":"        assertTrue(Date.isValidDate(\"2018-01-02\")); //standard format for a valid date"},{"lineNumber":46,"author":{"gitID":"Godxin"},"content":"        assertTrue(Date.isValidDate(\"2019-02-03\")); // date in the next year"},{"lineNumber":47,"author":{"gitID":"Godxin"},"content":"        // -- valid year --"},{"lineNumber":48,"author":{"gitID":"Godxin"},"content":"        assertTrue(Date.isValidYear(2018)); // current year"},{"lineNumber":49,"author":{"gitID":"Godxin"},"content":"        assertTrue(Date.isValidYear(2020)); // later year"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        //-- valid days in month --"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertTrue(Date.isValidDaysInMonth(\"2020-02-29\")); //leap year Feb"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(Date.isValidDaysInMonth(\"2020-01-31\")); //leap year big month"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(Date.isValidDaysInMonth(\"2020-06-30\")); //leap year big month"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(Date.isValidDaysInMonth(\"2018-02-28\")); //non-leap year Feb"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(Date.isValidDaysInMonth(\"2019-12-31\")); //non-leap year big month"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(Date.isValidDaysInMonth(\"2019-11-30\")); //non-leap year small month"},{"lineNumber":58,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Godxin"},"content":"}"}],"authorContributionMap":{"null":1,"-":31,"Godxin":27}},{"path":"src/test/java/seedu/address/logic/commands/RemoveAppointmentFromPetCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showAppointmentAtIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENT;"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PET;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PETS;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPT;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPT;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import org.junit.Before;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentHasBeenTakenException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasAppointmentException;"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":" * Contains integration test and unit tests for RemoveAppointmentFromPetCommand"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"public class RemoveAppointmentFromPetCommandTest {"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"    @Before"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"    public void setup() throws PetAlreadyHasAppointmentException, ClientPetAssociationNotFoundException,"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"            DuplicateAppointmentException, AppointmentHasBeenTakenException,"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"            AppointmentNotFoundException, ClientAlreadyOwnsPetException, PetAlreadyHasOwnerException {"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"        // set up association"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"        model.addPetToClient(model.getAddressBook().getPetList().get(0),"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"                model.getAddressBook().getClientList().get(0));"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"        //adds appointment to association"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"        model.addAppointmentToPet(model.getAddressBook().getAppointmentList().get(0),"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"                model.getAddressBook().getPetList().get(0));"},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENT);"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PET);"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"    public void execute_removeAppointmentFromPet_throwsCommandException() throws Exception {"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"        thrown.expectMessage(Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":"        prepareCommand(INDEX_THIRD_PERSON).execute();"},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"    public void execute_removeAppointmentFromPet_success() throws Exception {"},{"lineNumber":79,"author":{"gitID":"md-azsa"},"content":"        Appointment appointmentInFilteredList \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());"},{"lineNumber":80,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":81,"author":{"gitID":"md-azsa"},"content":"        RemoveAppointmentFromPetCommand command \u003d prepareCommand(INDEX_FIRST_APPT);"},{"lineNumber":82,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":83,"author":{"gitID":"md-azsa"},"content":"        String expectedMessage \u003d String.format(RemoveAppointmentFromPetCommand.MESSAGE_REMOVE_APPOINTMENT_SUCCESS,"},{"lineNumber":84,"author":{"gitID":"md-azsa"},"content":"                appointmentInFilteredList);"},{"lineNumber":85,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":86,"author":{"gitID":"md-azsa"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":87,"author":{"gitID":"md-azsa"},"content":"                new UserPrefs());"},{"lineNumber":88,"author":{"gitID":"md-azsa"},"content":"        expectedModel.removeAppointmentFromPet(model.getFilteredAppointmentList().get(0));"},{"lineNumber":89,"author":{"gitID":"md-azsa"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":92,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"md-azsa"},"content":"    public void execute_invalidIndex_failure() {"},{"lineNumber":94,"author":{"gitID":"md-azsa"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST_APPT);"},{"lineNumber":95,"author":{"gitID":"md-azsa"},"content":"        Index outOfBounds \u003d INDEX_SECOND_APPT;"},{"lineNumber":96,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":97,"author":{"gitID":"md-azsa"},"content":"        assertTrue(outOfBounds.getZeroBased() \u003c model.getAddressBook().getAppointmentList().size());"},{"lineNumber":98,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":99,"author":{"gitID":"md-azsa"},"content":"        RemoveAppointmentFromPetCommand command \u003d prepareCommand(outOfBounds);"},{"lineNumber":100,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":101,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":102,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":104,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"md-azsa"},"content":"    public void equals() throws Exception {"},{"lineNumber":106,"author":{"gitID":"md-azsa"},"content":"        final RemoveAppointmentFromPetCommand standardCommand \u003d prepareCommand(INDEX_FIRST_APPT);"},{"lineNumber":107,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":108,"author":{"gitID":"md-azsa"},"content":"        // same values -\u003e true"},{"lineNumber":109,"author":{"gitID":"md-azsa"},"content":"        RemoveAppointmentFromPetCommand sameValueCommand \u003d prepareCommand(INDEX_FIRST_APPT);"},{"lineNumber":110,"author":{"gitID":"md-azsa"},"content":"        assertTrue(standardCommand.equals(sameValueCommand));"},{"lineNumber":111,"author":{"gitID":"md-azsa"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":112,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":113,"author":{"gitID":"md-azsa"},"content":"        //preprocessed with undoable"},{"lineNumber":114,"author":{"gitID":"md-azsa"},"content":"        sameValueCommand.preprocessUndoableCommand();"},{"lineNumber":115,"author":{"gitID":"md-azsa"},"content":"        assertFalse(standardCommand.equals(sameValueCommand));"},{"lineNumber":116,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":117,"author":{"gitID":"md-azsa"},"content":"        // null"},{"lineNumber":118,"author":{"gitID":"md-azsa"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":119,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":120,"author":{"gitID":"md-azsa"},"content":"        // different types"},{"lineNumber":121,"author":{"gitID":"md-azsa"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":122,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":123,"author":{"gitID":"md-azsa"},"content":"        // different index -\u003e returns false"},{"lineNumber":124,"author":{"gitID":"md-azsa"},"content":"        assertFalse(standardCommand.equals(new RemoveAppointmentFromPetCommand(INDEX_SECOND_APPT)));"},{"lineNumber":125,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":127,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"md-azsa"},"content":"     * Returns an {@code RemoveAppointmentFromPetCommand} object with param"},{"lineNumber":129,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"md-azsa"},"content":"    private RemoveAppointmentFromPetCommand prepareCommand(Index appointmentIndex) {"},{"lineNumber":131,"author":{"gitID":"md-azsa"},"content":"        RemoveAppointmentFromPetCommand command \u003d new RemoveAppointmentFromPetCommand(appointmentIndex);"},{"lineNumber":132,"author":{"gitID":"md-azsa"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":133,"author":{"gitID":"md-azsa"},"content":"        return command;"},{"lineNumber":134,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":9,"purplepers0n":1,"-":30,"md-azsa":95}},{"path":"src/test/java/seedu/address/model/UniqueClientListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.UniqueClientList;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientNotFoundException;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.DuplicateClientException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"//@@ author jonathanwj"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"public class UniqueClientListTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"    private UniqueClientList uniqueClientList \u003d new UniqueClientList();"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"        uniqueClientList.asObservableList().remove(0);"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    public void addClient_clientAlreadyExist_throwsDuplicateClientException() throws DuplicateClientException {"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"        uniqueClientList.add((Client) HOON);"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(DuplicateClientException.class);"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"        uniqueClientList.add((Client) HOON);"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    public void removeClient_clientNotInList_throwsClientNotFoundException() throws ClientNotFoundException {"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(ClientNotFoundException.class);"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        uniqueClientList.remove((Client) HOON);"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    public void setClient_clientNotInList_throwsClientNotFoundException()"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"            throws ClientNotFoundException, DuplicateClientException {"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(ClientNotFoundException.class);"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        uniqueClientList.setClient((Client) HOON, (Client) IDA);"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"    public void setClient_clientIsTheSame_throwsDuplicateClientException()"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"            throws ClientNotFoundException, DuplicateClientException {"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        uniqueClientList.add((Client) HOON);"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"        uniqueClientList.add((Client) IDA);"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(DuplicateClientException.class);"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        uniqueClientList.setClient((Client) IDA, (Client) HOON);"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"    public void setClients_duplicateClientsInList_throwsDuplicateClientException()"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"            throws ClientNotFoundException, DuplicateClientException {"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(DuplicateClientException.class);"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"        uniqueClientList.setClients(Arrays.asList((Client) HOON, (Client) HOON));"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":48,"-":17}},{"path":"src/test/java/seedu/address/model/UniqueAppointmentListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_1;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_1_1;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_2;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalAppointments.APPOINTMENT_2_2;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToNextException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToPreviousException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"content":"//@@author Godxin-test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class UniqueAppointmentListTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UniqueAppointmentList uniqueAppointmentList \u003d new UniqueAppointmentList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        UniqueAppointmentList uniqueAppointmentList \u003d new UniqueAppointmentList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.asObservableList().remove(0);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void addAppointment_appointmentAlreadyExist_throwsDuplicateAppointmentException() throws"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            DuplicateAppointmentException, AppointmentCloseToPreviousException, AppointmentCloseToNextException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.add(APPOINTMENT_1);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(DuplicateAppointmentException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.add(APPOINTMENT_1);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void addAppointment_appointmentCloseToPrevious_throwsAppointmentCloseToPreviousException() throws"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            DuplicateAppointmentException, AppointmentCloseToPreviousException, AppointmentCloseToNextException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.add(APPOINTMENT_1);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        thrown.expect(AppointmentCloseToPreviousException.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.add(APPOINTMENT_1_1);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void addAppointment_noPrevious_addSuccessful() throws"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            DuplicateAppointmentException, AppointmentCloseToPreviousException, AppointmentCloseToNextException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.add(APPOINTMENT_1_1);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void addAppointment_appointmentCloseToNext_throwsAppointmentCloseToNextException() throws"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            DuplicateAppointmentException, AppointmentCloseToPreviousException, AppointmentCloseToNextException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.add(APPOINTMENT_2);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(AppointmentCloseToNextException.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.add(APPOINTMENT_2_2);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void addAppointment_noNext_addSuccessful() throws"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            DuplicateAppointmentException, AppointmentCloseToPreviousException, AppointmentCloseToNextException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.add(APPOINTMENT_2_2);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void removeAppointment_appointmentNotInList_throwsAppointmentNotFoundException()"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            throws AppointmentNotFoundException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(AppointmentNotFoundException.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.remove(APPOINTMENT_1);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void setAppointment_appointmentNotInList_throwsAppointmentNotFoundException()"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throws AppointmentNotFoundException, DuplicateAppointmentException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        thrown.expect(AppointmentNotFoundException.class);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.setAppointment(APPOINTMENT_1, APPOINTMENT_2);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void setAppointment_appointmentIsTheSame_throwsDuplicateAppointmentException()"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throws AppointmentNotFoundException, DuplicateAppointmentException,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            AppointmentCloseToPreviousException, AppointmentCloseToNextException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.add(APPOINTMENT_1);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.add(APPOINTMENT_2);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        thrown.expect(DuplicateAppointmentException.class);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.setAppointment(APPOINTMENT_1, APPOINTMENT_2);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void setAppointments_duplicateAppointmentsInList_throwsDuplicateAppointmentException()"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throws DuplicateAppointmentException,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            AppointmentCloseToPreviousException, AppointmentCloseToNextException {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        thrown.expect(DuplicateAppointmentException.class);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        uniqueAppointmentList.setAppointments(Arrays.asList(APPOINTMENT_1, APPOINTMENT_1));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"null":1,"-":98}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").buildWithRoleClient()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").buildWithRoleClient()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").buildWithRoleClient()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").buildWithRoleClient()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").buildWithRoleClient()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").buildWithRoleClient()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").buildWithRoleClient()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":7,"-":68}},{"path":"src/test/java/seedu/address/model/UniqueVetTechnicianListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalPersons.BOON;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalPersons.SWEE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.UniqueVetTechnicianList;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.DuplicateVetTechnicianException;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.VetTechnicianNotFoundException;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"//@@ author jonathanwj"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"public class UniqueVetTechnicianListTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"    private UniqueVetTechnicianList uniqueVetTechnicianList \u003d new UniqueVetTechnicianList();"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"        uniqueVetTechnicianList.asObservableList().remove(0);"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    public void addVetTechnician_technicianAlreadyExist_throwsDuplicateVetTechnicianException()"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"            throws DuplicateVetTechnicianException {"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"        uniqueVetTechnicianList.add((VetTechnician) BOON);"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(DuplicateVetTechnicianException.class);"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"        uniqueVetTechnicianList.add((VetTechnician) BOON);"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    public void removeVetTechnician_technicianNotInList_throwsVetTechnicianNotFoundException()"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"            throws VetTechnicianNotFoundException {"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(VetTechnicianNotFoundException.class);"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        uniqueVetTechnicianList.remove((VetTechnician) BOON);"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    public void setVetTechnician_technicianNotInList_throwsVetTechnicianNotFoundException()"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"            throws VetTechnicianNotFoundException, DuplicateVetTechnicianException {"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(VetTechnicianNotFoundException.class);"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        uniqueVetTechnicianList.setVetTechnician((VetTechnician) BOON, (VetTechnician) SWEE);"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"    public void setVetTechnician_technicianIsTheSame_throwsDuplicateVetTechnicianException()"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"            throws VetTechnicianNotFoundException, DuplicateVetTechnicianException {"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        uniqueVetTechnicianList.add((VetTechnician) BOON);"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        uniqueVetTechnicianList.add((VetTechnician) SWEE);"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(DuplicateVetTechnicianException.class);"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        uniqueVetTechnicianList.setVetTechnician((VetTechnician) SWEE, (VetTechnician) BOON);"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"    public void setVetTechnicians_duplicateVetTechniciansInList_throwsDuplicateVetTechnicianException()"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"            throws VetTechnicianNotFoundException, DuplicateVetTechnicianException {"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(DuplicateVetTechnicianException.class);"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        uniqueVetTechnicianList.setVetTechnicians(Arrays.asList((VetTechnician) BOON, (VetTechnician) BOON));"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":54,"-":13}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPet\u003e pets \u003d FXCollections.observableArrayList();"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"        private final ObservableList\u003cClientOwnPet\u003e associations \u003d FXCollections.observableArrayList();"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            this.appointments.setAll(appointments);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            this.pets.setAll(pets);"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"            this.associations.setAll(associations);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return appointments;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPet\u003e getPetList() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return pets;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClientOwnPet\u003e getClientPetAssociations() {"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":"            return associations;"},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cClient\u003e getClientList() {"},{"lineNumber":125,"author":{"gitID":"jonathanwj"},"content":"            ObservableList\u003cClient\u003e clientList \u003d EasyBind.map(getPersonList(), (person) -\u003e {"},{"lineNumber":126,"author":{"gitID":"jonathanwj"},"content":"                if (person.isClient()) {"},{"lineNumber":127,"author":{"gitID":"jonathanwj"},"content":"                    return (Client) person;"},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":"                } else {"},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":"                    return null;"},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":"            clientList \u003d FXCollections.unmodifiableObservableList(clientList).filtered(Objects::nonNull);"},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"            return clientList;"},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":136,"author":{"gitID":"jonathanwj"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"jonathanwj"},"content":"        public ObservableList\u003cVetTechnician\u003e getVetTechnicianList() {"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"            ObservableList\u003cVetTechnician\u003e technicianList \u003d EasyBind.map(getPersonList(), (person) -\u003e {"},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":"                if (!person.isClient()) {"},{"lineNumber":140,"author":{"gitID":"jonathanwj"},"content":"                    return (VetTechnician) person;"},{"lineNumber":141,"author":{"gitID":"jonathanwj"},"content":"                } else {"},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"                    return null;"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":"            technicianList \u003d FXCollections.unmodifiableObservableList(technicianList).filtered(Objects::nonNull);"},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"            return technicianList;"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":42,"-":108}},{"path":"src/test/java/seedu/address/model/pet/PetGenderTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.pet;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"public class PetGenderTest {"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new PetGender(null));"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"    public void constructor_invalidPetGender_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"        String invalidGender \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PetGender(invalidGender));"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"    public void isValidGender() {"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"        // null pet gender"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e PetGender.isValidGender(null));"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        // invalid gender"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetGender.isValidGender(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetGender.isValidGender(\" \")); // just spaces"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetGender.isValidGender(\"123\")); // numbers"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetGender.isValidGender(\"asd\")); // alphabets"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetGender.isValidGender(\"12sda12\")); // mix of alphabets"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetGender.isValidGender(\"asd assd\")); // spaces in between"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"        // valid gender"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"        assertTrue(PetGender.isValidGender(\"m\")); // small m"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"        assertTrue(PetGender.isValidGender(\"M\")); // capital"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"        assertTrue(PetGender.isValidGender(\"f\")); // small f"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"        assertTrue(PetGender.isValidGender(\"F\")); // capital f"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":9,"md-azsa":35}},{"path":"src/test/java/seedu/address/model/pet/PetAgeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.pet;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"public class PetAgeTest {"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new PetAge(null));"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"    public void constructor_invalidPetAge_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"        String invalidPetAge \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PetAge(invalidPetAge));"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"    public void isValidPetAge() {"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"        // null pet age"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e PetAge.isValidPetAge(null));"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        // invalid pet age"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetAge.isValidPetAge(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetAge.isValidPetAge(\"123\")); // 3 digits long"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetAge.isValidPetAge(\"asv\")); // alphabets"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetAge.isValidPetAge(\"*(*(123\")); // characters and numbers"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetAge.isValidPetAge(\"321 2132\")); // spaces in between"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"        // valid pet age"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"        assertTrue(PetAge.isValidPetAge(\"2\")); // 1 digit"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"        assertTrue(PetAge.isValidPetAge(\"21\")); // 2 digits"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":9,"md-azsa":32}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"        modelManager.getFilteredClientList().remove(0);"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    public void getFilteredVetTechnicianList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        modelManager.getFilteredVetTechnicianList().remove(0);"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    public void getFilteredPetClientAssociationList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        modelManager.getFilteredClientPetAssociationList().remove(0);"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void getFilteredAppointmentList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        modelManager.getFilteredPersonList().remove(0);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        differentUserPrefs.setAddressBookName(\"differentName\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":15,"-":78}},{"path":"src/test/java/seedu/address/model/pet/PetNameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.pet;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"public class PetNameTest {"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new PetName(null));"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"    public void constructor_invalidPetName_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"        String invalidPetName \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new PetName(invalidPetName));"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"    public void isValidName() {"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"        // null pet name"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e PetName.isValidPetName(null));"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        // invalid name"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetName.isValidPetName(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetName.isValidPetName(\" \")); // spaces string"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetName.isValidPetName(\" *\")); // non-alphanumeric"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"        assertFalse(PetName.isValidPetName(\"garfield* \")); // contains non-alpha char"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"        // valid names"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"        assertTrue(PetName.isValidPetName(\"Garfield Jokes\")); // alphabets only"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"        assertTrue(PetName.isValidPetName(\"Garfield 123\"));"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"        assertTrue(PetName.isValidPetName(\"Garfield II King 3\"));"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"        assertTrue(PetName.isValidPetName(\"Garfield Pop starrr\"));"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":9,"md-azsa":35}},{"path":"src/test/java/seedu/address/logic/commands/UnscheduleCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showAppointmentAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_APPT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_APPT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_APPT;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.testutil.TypicalAddressBook;"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":" * Contains integration tests unit for {@code UnscheduleCommand}."},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"public class UnscheduleCommandTest {"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"    private Model model \u003d new ModelManager(TypicalAddressBook.getTypicalAddressBook(),"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"            new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"    public void execute_unscheduleCommand_throwsCOmmandException() throws Exception {"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"        thrown.expectMessage(Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"        prepareCommand(INDEX_THIRD_APPT).execute();"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"    public void execute_unscheduleCommand_success() throws Exception {"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"        Appointment appointmentInFilteredList \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"        UnscheduleCommand command \u003d prepareCommand(INDEX_FIRST_APPT);"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"        String expectedMessage \u003d String.format(UnscheduleCommand.MESSAGE_UNSCHEDULE_APPOINTMENT_SUCCESS,"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"                appointmentInFilteredList);"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"                new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"        expectedModel.unscheduleAppointment(model.getFilteredAppointmentList().get(0));"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"    public void execute_invalidIndex_failure() {"},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"        showAppointmentAtIndex(model, INDEX_FIRST_APPT);"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"        Index outOfBOunds \u003d INDEX_SECOND_APPT;"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"        assertTrue(outOfBOunds.getZeroBased() \u003c model.getAddressBook().getAppointmentList().size());"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"        UnscheduleCommand command \u003d prepareCommand(outOfBOunds);"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"        assertCommandFailure(command, model, Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":"    public void executeUndoRedo_validIndexUnfileteredList_success() throws Exception {"},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":79,"author":{"gitID":"md-azsa"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":80,"author":{"gitID":"md-azsa"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":81,"author":{"gitID":"md-azsa"},"content":"        Appointment appointmentToDelete \u003d model.getFilteredAppointmentList().get(INDEX_FIRST_APPT.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"md-azsa"},"content":"        UnscheduleCommand command \u003d prepareCommand(INDEX_FIRST_APPT);"},{"lineNumber":83,"author":{"gitID":"md-azsa"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":84,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":85,"author":{"gitID":"md-azsa"},"content":"        // delete -\u003e first appt unschedule"},{"lineNumber":86,"author":{"gitID":"md-azsa"},"content":"        command.execute();"},{"lineNumber":87,"author":{"gitID":"md-azsa"},"content":"        undoRedoStack.push(command);"},{"lineNumber":88,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":89,"author":{"gitID":"md-azsa"},"content":"        // undo -\u003e reverts"},{"lineNumber":90,"author":{"gitID":"md-azsa"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":91,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":92,"author":{"gitID":"md-azsa"},"content":"        // redo"},{"lineNumber":93,"author":{"gitID":"md-azsa"},"content":"        expectedModel.unscheduleAppointment(appointmentToDelete);"},{"lineNumber":94,"author":{"gitID":"md-azsa"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":95,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":97,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":98,"author":{"gitID":"md-azsa"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"md-azsa"},"content":"    public void equals() throws Exception {"},{"lineNumber":100,"author":{"gitID":"md-azsa"},"content":"        final UnscheduleCommand standardCommand \u003d prepareCommand(INDEX_FIRST_APPT);"},{"lineNumber":101,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":102,"author":{"gitID":"md-azsa"},"content":"        // same values -\u003e true"},{"lineNumber":103,"author":{"gitID":"md-azsa"},"content":"        UnscheduleCommand sameValueCommand \u003d prepareCommand(INDEX_FIRST_APPT);"},{"lineNumber":104,"author":{"gitID":"md-azsa"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":105,"author":{"gitID":"md-azsa"},"content":"        assertTrue(standardCommand.equals(sameValueCommand));"},{"lineNumber":106,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":107,"author":{"gitID":"md-azsa"},"content":"        // preprocessed"},{"lineNumber":108,"author":{"gitID":"md-azsa"},"content":"        sameValueCommand.preprocessUndoableCommand();"},{"lineNumber":109,"author":{"gitID":"md-azsa"},"content":"        assertFalse(sameValueCommand.equals(standardCommand));"},{"lineNumber":110,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":111,"author":{"gitID":"md-azsa"},"content":"        // null -\u003e false"},{"lineNumber":112,"author":{"gitID":"md-azsa"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":113,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":114,"author":{"gitID":"md-azsa"},"content":"        // different type -\u003e false"},{"lineNumber":115,"author":{"gitID":"md-azsa"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":116,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":117,"author":{"gitID":"md-azsa"},"content":"        // different index"},{"lineNumber":118,"author":{"gitID":"md-azsa"},"content":"        assertFalse(standardCommand.equals(new UnscheduleCommand(INDEX_SECOND_APPT)));"},{"lineNumber":119,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":121,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"md-azsa"},"content":"     * Returns an {@code UnscheduleCommand} object with param."},{"lineNumber":123,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"md-azsa"},"content":"    private UnscheduleCommand prepareCommand(Index appointmentIndex) {"},{"lineNumber":125,"author":{"gitID":"md-azsa"},"content":"        UnscheduleCommand command \u003d new UnscheduleCommand(appointmentIndex);"},{"lineNumber":126,"author":{"gitID":"md-azsa"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":127,"author":{"gitID":"md-azsa"},"content":"        return command;"},{"lineNumber":128,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":130,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":4,"-":26,"md-azsa":100}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        descriptor.setRole(person.getRole());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"     * Sets the {@code Role} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"    public EditPersonDescriptorBuilder withRole(String role) {"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"        descriptor.setRole(new PersonRole(role));"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":10,"-":87}},{"path":"src/test/java/seedu/address/testutil/TypicalAssociations.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":10,"content":"//@@author jonathanwj-reused"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":" * A utility class containing a list of {@code ClientOwnPet} objects to be used in tests."},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"public class TypicalAssociations {"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"    public static final ClientOwnPet FIONA_LOTSO \u003d new ClientOwnPet((Client) TypicalPersons.FIONA,"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"            TypicalPets.LOTSO);"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"    public static final ClientOwnPet ELLE_PICKLES \u003d new ClientOwnPet((Client) TypicalPersons.ELLE,"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"            TypicalPets.PICKLES);"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    private TypicalAssociations() {} // prevents instantiation"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    public static List\u003cClientOwnPet\u003e getTypicalAssociations() {"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(FIONA_LOTSO, ELLE_PICKLES));"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":21,"null":1,"-":6}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointments.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToNextException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToPreviousException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":" * A utility class containing a list of {@code Appointment} objects"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":" * to be used in tests."},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"public class TypicalAppointments {"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"    public static final Appointment APPOINTMENT_1 \u003d new AppointmentBuilder().withDate(\"2018-02-01\")"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"            .withTime(\"14:30\")"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"            .withDuration(\"60\")"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"            .withDescription(\"Sterilize Garfield\")"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"            .build();"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"    public static final Appointment APPOINTMENT_2 \u003d new AppointmentBuilder().withDate(\"2018-03-02\")"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"            .withTime(\"16:30\")"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"            .withDuration(\"45\")"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"            .withDescription(\"Give Tweety Bird the showering service\")"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"            .build();"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"    public static final Appointment APPOINTMENT_1_1 \u003d new AppointmentBuilder().withDate(\"2018-02-01\")"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"            .withTime(\"15:00\")"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"            .withDuration(\"45\")"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"            .withDescription(\"Give HaHa Bird the showering service\")"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"            .build();"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"    public static final Appointment APPOINTMENT_2_2 \u003d new AppointmentBuilder().withDate(\"2018-03-02\")"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"            .withTime(\"16:00\")"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"            .withDuration(\"60\")"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"            .withDescription(\"Sterilize HaHa\")"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"            .build();"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"    private TypicalAppointments() {}"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"    //@@author Godxin-test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical appointments."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        for (Appointment appointment : getTypicalAppointments()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                ab.scheduleAppointment(appointment);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            } catch (DuplicateAppointmentException e) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            } catch (AppointmentCloseToPreviousException ape) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"close to previous\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            } catch (AppointmentCloseToNextException ape) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"close to next\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(APPOINTMENT_1, APPOINTMENT_2));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":37,"md-azsa":31}},{"path":"src/test/java/seedu/address/testutil/TypicalPets.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":" * A utility class containing a list of {@code Pet} objects to be used in tests."},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"public class TypicalPets {"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"    public static final Pet GARFIELD \u003d new PetBuilder().withPetName(\"Garfield\")"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"            .withPetAge(\"10\")"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"            .withPetGender(\"M\")"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"            .withTags(\"cat\", \"tabby\")"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"            .build();"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"    public static final Pet SCOOBY \u003d new PetBuilder().withPetName(\"Scooby Doo\")"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"            .withPetAge(\"10\")"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"            .withPetGender(\"M\")"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"            .withTags(\"dog\", \"greatDane\")"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"            .build();"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"    public static final Pet PICKLES \u003d new PetBuilder().withPetName(\"Pickles Tickles\")"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"            .withPetAge(\"3\")"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"            .withPetGender(\"F\")"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"            .withTags(\"hamster\", \"obesed\")"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"            .build();"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"    public static final Pet LOTSO \u003d new PetBuilder().withPetName(\"Lotso Fatso\")"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"            .withPetAge(\"4\")"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"            .withPetGender(\"M\")"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"            .withTags(\"bear\", \"purple\")"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"            .build();"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"    private TypicalPets() {} // prevents instantiation"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"    public static List\u003cPet\u003e getTypicalPets() {"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(GARFIELD, SCOOBY, PICKLES, LOTSO));"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"}"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":""}],"authorContributionMap":{"-":8,"md-azsa":35}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":" * {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").buildWithRoleClient();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"-":52}},{"path":"src/test/java/seedu/address/testutil/PetBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetAge;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetGender;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetName;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtilPet;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":" * Util class to help with building Pet objects."},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"public class PetBuilder {"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"    public static final String DEFAULT_PET_NAME \u003d \"Garfield\";"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"    public static final String DEFAULT_PET_AGE \u003d \"5\";"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"    public static final String DEFAULT_PET_GENDER \u003d \"M\";"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"    public static final String DEFAULT_TAGS \u003d \"Cat\";"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"    private PetName petName;"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"    private PetAge petAge;"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    private PetGender petGender;"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"    public PetBuilder() {"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"        petName \u003d new PetName(DEFAULT_PET_NAME);"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        petAge \u003d new PetAge(DEFAULT_PET_AGE);"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        petGender \u003d new PetGender(DEFAULT_PET_GENDER);"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        tags \u003d SampleDataUtilPet.getTagSet(DEFAULT_TAGS);"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"     * Sets the {@code PetName} of the {@code Pet} we are building"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"    public PetBuilder withPetName(String petName) {"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"        this.petName \u003d new PetName(petName);"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"        return this;"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"     * Sets the {@code PetAge} of the {@code Pet} we are building"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"    public PetBuilder withPetAge(String petAge) {"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"        this.petAge \u003d new PetAge(petAge);"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"        return this;"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"     * Sets the {@code PetGender} of {@code Pet} we are building"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"    public PetBuilder withPetGender(String petGender) {"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"        this.petGender \u003d new PetGender(petGender);"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"        return this;"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"     * Sets the tag"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"    public PetBuilder withTags(String ... tags) {"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"        this.tags \u003d SampleDataUtilPet.getTagSet(tags);"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":"     * Builts the pet object"},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"    public Pet build() {"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"        return new Pet(petName, petAge, petGender, tags);"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":11,"md-azsa":62}},{"path":"src/test/java/seedu/address/model/UniquePetListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.UniquePetList;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPets;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"content":"//@@author md-azsa-reused"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UniquePetListTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private UniquePetList uniquePetList \u003d new UniquePetList();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        uniquePetList.asObservableList().remove(0);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void addPet_petAlreadyExists_throwsDuplicatePetException() throws"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            DuplicatePetException {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        uniquePetList.add(TypicalPets.GARFIELD);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        thrown.expect(DuplicatePetException.class);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uniquePetList.add(TypicalPets.GARFIELD);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void removePet_petDoesNotExist_throwsPetNotFoundException() throws"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            PetNotFoundException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(PetNotFoundException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        uniquePetList.remove(TypicalPets.SCOOBY);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"null":1,"-":35}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(model.getAddressBook().getPersonList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        return Index.fromOneBased(model.getFilteredClientList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static Person getPerson(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return model.getAddressBook().getPersonList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":1,"-":53}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"        sb.append(PREFIX_PERSON_ROLE + person.getRole().toString() + \" \");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":36,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":2,"-":38}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"    public static final Index INDEX_FIRST_PET \u003d Index.fromOneBased(1);"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"    public static final Index INDEX_SECOND_PET \u003d Index.fromOneBased(2);"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Index INDEX_OOB_PET \u003d Index.fromOneBased(5);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Index INDEX_FIRST_APPT \u003d Index.fromOneBased(1);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Index INDEX_SECOND_APPT \u003d Index.fromOneBased(2);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Index INDEX_THIRD_APPT \u003d Index.fromOneBased(3);"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":6,"-":16}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"            .withTags(\"friends\").buildWithRoleClient();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"            .withTags(\"owesMoney\", \"friends\").buildWithRoleClient();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").buildWithRoleClient();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").buildWithRoleClient();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").buildWithRoleClient();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").buildWithRoleClient();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").buildWithRoleVetTechnician();"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    public static final Person BOON \u003d new PersonBuilder().withName(\"Boon me\").withPhone(\"9484442\")"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"abra@example.com\").withAddress(\"5th street\").buildWithRoleVetTechnician();"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"    public static final Person SWEE \u003d new PersonBuilder().withName(\"Swee do\").withPhone(\"9482142\")"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"ane@example.com\").withAddress(\"6th street\").buildWithRoleVetTechnician();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").buildWithRoleClient();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").buildWithRoleClient();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).buildWithRoleClient();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"            .buildWithRoleClient();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, BOON, SWEE));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":18,"-":68}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"    public Person buildWithRoleClient() {"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        return new Client(name, phone, email, address, tags);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"    public Person buildWithRoleVetTechnician() {"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"        return new VetTechnician(name, phone, email, address, tags);"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":9,"-":92}},{"path":"src/test/java/seedu/address/testutil/PetUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_AGE;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_GENDER;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddPetCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":" * Util class for pet."},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"public class PetUtil {"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"     * Returns add command string for adding the {@code pet}"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"    public static String getAddPetCommand(Pet pet) {"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"        return AddPetCommand.COMMAND_WORD + \" \" + getPetDetails(pet);"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"     * Returns the details of the pet"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"    public static String getPetDetails(Pet pet) {"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        sb.append(PREFIX_PET_NAME + pet.getPetName().toString());"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        sb.append(PREFIX_PET_AGE + pet.getPetAge().value);"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        sb.append(PREFIX_PET_GENDER + pet.getPetGender().toString());"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"        pet.getTags().stream().forEach("},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"        );"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"        return sb.toString();"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":10,"md-azsa":27}},{"path":"src/test/java/seedu/address/model/association/AssociatePetToClientTest.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.association;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPetAtIndex;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PET;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"//@@author jonathanwj"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":" * and unit tests for associating pet to client."},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"public class AssociatePetToClientTest {"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    public void removePetFromClient_alreadyAssociated_success() throws ClientAlreadyOwnsPetException,"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"            PetAlreadyHasOwnerException,"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"            ClientPetAssociationNotFoundException {"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        showPetAtIndex(model, Index.fromOneBased(4));"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        showClientAtIndex(model, Index.fromOneBased(6));"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        Pet petInFilteredList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        AddressBook expectedAddressBook \u003d getTypicalAddressBook();"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"        expectedAddressBook.removePetFromClient(petInFilteredList, clientInFilteredList);"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"        model.removePetFromClient(petInFilteredList, clientInFilteredList);"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(expectedAddressBook), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredPetList(Model.PREDICATE_SHOW_ALL_PET);"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredClientList(Model.PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"    public void removePetFromClient_noAssociated_throwsClientPetAssociationNotFoundException()"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"            throws ClientAlreadyOwnsPetException, PetAlreadyHasOwnerException, ClientPetAssociationNotFoundException {"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(ClientPetAssociationNotFoundException.class);"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        showPetAtIndex(model, Index.fromOneBased(3));"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        showClientAtIndex(model, Index.fromOneBased(6));"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        Pet petInFilteredList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        model.removePetFromClient(petInFilteredList, clientInFilteredList);"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"    public void addPettoClient_noAssociation_success() throws ClientAlreadyOwnsPetException,"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"            PetAlreadyHasOwnerException,"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"            ClientPetAssociationNotFoundException {"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"        showPetAtIndex(model, Index.fromOneBased(2));"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        showClientAtIndex(model, Index.fromOneBased(6));"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"        Pet petInFilteredList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"        AddressBook expectedAddressBook \u003d getTypicalAddressBook();"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        expectedAddressBook.addPetToClient(petInFilteredList, clientInFilteredList);"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"        model.addPetToClient(petInFilteredList, clientInFilteredList);"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(expectedAddressBook), new UserPrefs());"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredPetList(Model.PREDICATE_SHOW_ALL_PET);"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        model.updateFilteredClientList(Model.PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"    public void addPettoClient_alreadyAssociated_throwsClientAlreadyOwnsPetException()"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"            throws ClientAlreadyOwnsPetException, PetAlreadyHasOwnerException, ClientPetAssociationNotFoundException {"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(ClientAlreadyOwnsPetException.class);"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"        showPetAtIndex(model, Index.fromOneBased(4));"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"        showClientAtIndex(model, Index.fromOneBased(6));"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        Pet petInFilteredList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"        model.addPetToClient(petInFilteredList, clientInFilteredList);"},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"    public void addPettoClient_petAlreadyHasOwner_throwsPetAlreadyHasOwnerException()"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"            throws ClientAlreadyOwnsPetException, PetAlreadyHasOwnerException, ClientPetAssociationNotFoundException {"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"        thrown.expect(PetAlreadyHasOwnerException.class);"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"        showPetAtIndex(model, Index.fromOneBased(4));"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"        showClientAtIndex(model, Index.fromOneBased(4));"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"        Pet petInFilteredList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"        model.addPetToClient(petInFilteredList, clientInFilteredList);"},{"lineNumber":122,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":125,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":117,"-":8}},{"path":"src/test/java/guitests/guihandles/CommandBoxHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * A handle to the {@code CommandBox} in the GUI."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public CommandBoxHandle(TextField commandBoxNode) {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        super(commandBoxNode);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns the text in the command box."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Enters the given command in the Command Box and presses enter."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @return true if the command succeeded, false otherwise."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean run(String command) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        click();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"     * Enters the given string in the Command Box."},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"    public void setInput(String text) {"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(text));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Returns the list of style classes present in the command box."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":7,"-":47}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"    //private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":"    private final ClientListPanelHandle clientListPanel;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"        clientListPanel \u003d new ClientListPanelHandle(getChildNode(ClientListPanelHandle.CLIENT_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    public ClientListPanelHandle getClientListPanel() {"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"        return clientListPanel;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":5,"-":41}},{"path":"src/test/java/guitests/guihandles/ClientCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":" * Provides a handle to a client card in the client list panel."},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"public class ClientCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    public ClientCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":4,"-":67}},{"path":"src/test/java/seedu/address/testutil/TypicalAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToNextException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToPreviousException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":" * A utility class containing a list of objects to be used in tests."},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"public class TypicalAddressBook {"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    private TypicalAddressBook() {"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"    } // prevents instantiation"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons, pets and appointments."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        for (Pet pet : getTypicalPets()) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                ab.addPet(pet);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            } catch (DuplicatePetException e) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        for (Appointment appt : getTypicalAppointments()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                ab.scheduleAppointment(appt);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            } catch (DuplicateAppointmentException e) {"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            } catch (AppointmentCloseToPreviousException ape) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not too close to previous\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            } catch (AppointmentCloseToNextException ape) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not too close to next\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"        for (ClientOwnPet cop : getTypicalAssociations()) {"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"                ab.addPetToClient(cop.getPet(), cop.getClient());"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"            } catch (ClientAlreadyOwnsPetException | PetAlreadyHasOwnerException e) {"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        return ab;"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} without the persons list"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBookEmpty() {"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        return new ArrayList\u003c\u003e(TypicalPersons.getTypicalPersons());"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"    public static List\u003cPet\u003e getTypicalPets() {"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"        return new ArrayList\u003c\u003e(TypicalPets.getTypicalPets());"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"    public static List\u003cClientOwnPet\u003e getTypicalAssociations() {"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        return new ArrayList\u003c\u003e(TypicalAssociations.getTypicalAssociations());"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(TypicalAppointments.getTypicalAppointments());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":40,"-":55}},{"path":"src/main/java/seedu/address/ui/VetTechnicianListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"content":"//@@author purplepers0n-reused"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":" * Panel containing the list of vetTechnicians."},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"public class VetTechnicianListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"VetTechnicianListPanel.fxml\";"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(VetTechnicianListPanel.class);"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    private ListView\u003cVetTechnicianCard\u003e vetTechnicianListView;"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"    public VetTechnicianListPanel(ObservableList\u003cVetTechnician\u003e vetTechnicianList) {"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"        setConnections(vetTechnicianList);"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"    private void setConnections(ObservableList\u003cVetTechnician\u003e vetTechnicianList) {"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cVetTechnicianCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"                vetTechnicianList, (vetTechnician) -\u003e"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"                        new VetTechnicianCard(vetTechnician, vetTechnicianList.indexOf(vetTechnician) + 1));"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"        vetTechnicianListView.setItems(mappedList);"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"        vetTechnicianListView.setCellFactory(listView -\u003e new VetTechnicianListViewCell());"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code VetTechnicianCard}."},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"    class VetTechnicianListViewCell extends ListCell\u003cVetTechnicianCard\u003e {"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"        protected void updateItem(VetTechnicianCard vetTechnician, boolean empty) {"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"            super.updateItem(vetTechnician, empty);"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"            if (empty || vetTechnician \u003d\u003d null) {"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(null);"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"                setText(null);"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(vetTechnician.getRoot());"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"null":1,"purplepers0n":43,"-":13}},{"path":"src/main/java/seedu/address/ui/DateTimeCard.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":3,"author":{"gitID":"purplepers0n"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":"import java.time.Month;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":"import javafx.animation.Animation;"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import javafx.animation.KeyFrame;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import javafx.animation.Timeline;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"import javafx.util.Duration;"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"//@@author purplepers0n"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":" * Card displaying the current date and time"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"public class DateTimeCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"DateTimeCard.fxml\";"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    private HBox cardPane;"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"    private Label date;"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    private int year;"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    private String month;"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    private int day;"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    private int hour;"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"    private String minute;"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    private boolean morning \u003d true;"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    public DateTimeCard() {"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"        setDateTime();"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"     * Sets the current date and time"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"    public void setDateTime() {"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        final Timeline timeline \u003d new Timeline("},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"                new KeyFrame("},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"                    Duration.millis(500),"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"                    event -\u003e {"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"                        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"                        year \u003d now.getYear();"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"                        Month currMonth \u003d now.getMonth();"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"                        month \u003d currMonth.toString();"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"                        day \u003d now.getDayOfMonth();"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"                        if (now.getHour() \u003e\u003d 12) {"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"                            morning \u003d false;"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"                        }"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"                        hour \u003d now.getHour() % 12;"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"                        if (hour \u003d\u003d 0) {"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"                            hour \u003d 12;"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"                        }"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"                        int min \u003d now.getMinute();"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"                        if (min \u003c 10) {"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"                            minute \u003d \"0\" + String.valueOf(min);"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"                        } else {"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"                            minute \u003d String.valueOf(min);"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"                        }"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"                        if (morning) {"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"                            date.setText(hour + \":\" + minute + \" AM, \" + day + \" \" + month + \" \" + year);"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"                        } else {"},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"                            date.setText(hour + \":\" + minute + \" PM, \" + day + \" \" + month + \" \" + year);"},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":"                        }"},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"                    }"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"                )"},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"        );"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"        timeline.setCycleCount(Animation.INDEFINITE);"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"        timeline.play();"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":77,"-":4}},{"path":"src/main/java/seedu/address/ui/ListAllPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":3,"author":{"gitID":"purplepers0n"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":16,"content":"//@@author purplepers0n-reused"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":" * Panel containing the list of client details."},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"public class ListAllPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"ListAllPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    private HBox listAllPane;"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"    private StackPane clientPane;"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    private ListView\u003cPetDisplayCard\u003e petListView;"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    private ListView\u003cApptDisplayCard\u003e apptListView;"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"    public ListAllPanel(Client client, ObservableList\u003cPet\u003e pets, ObservableList\u003cAppointment\u003e appts) {"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"        setClient(client);"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"        setPets(pets);"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"        setAppts(appts);"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"    private void setClient(Client client) {"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"        ClientDisplayCard clientDisplayCard \u003d new ClientDisplayCard(client);"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"        clientPane.getChildren().add(clientDisplayCard.getRoot());"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"    private void setPets(ObservableList\u003cPet\u003e pets) {"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cPetDisplayCard\u003e mappedList \u003d EasyBind.map(pets, (pet) -\u003e new PetDisplayCard(pet,"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"                pets.indexOf(pet) + 1));"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        petListView.setItems(mappedList);"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        petListView.setCellFactory(listView -\u003e new PetListViewCell());"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        petListView.setPrefHeight(pets.size() * 105);"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"    private void setAppts(ObservableList\u003cAppointment\u003e appts) {"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cApptDisplayCard\u003e mappedList \u003d EasyBind.map(appts, (appt) -\u003e new ApptDisplayCard(appt,"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"                appts.indexOf(appt) + 1));"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"        apptListView.setItems(mappedList);"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"        apptListView.setCellFactory(listView -\u003e new ApptListViewCell());"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"        apptListView.setPrefHeight(appts.size() * 105);"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PetDisplayCard}."},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"    class PetListViewCell extends ListCell\u003cPetDisplayCard\u003e {"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        protected void updateItem(PetDisplayCard pet, boolean empty) {"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"            super.updateItem(pet, empty);"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"            if (empty || pet \u003d\u003d null) {"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(null);"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"                setText(null);"},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(pet.getRoot());"},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ApptDisplayCard}."},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"    class ApptListViewCell extends ListCell\u003cApptDisplayCard\u003e {"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"        protected void updateItem(ApptDisplayCard appt, boolean empty) {"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":"            super.updateItem(appt, empty);"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"            if (empty || appt \u003d\u003d null) {"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(null);"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"                setText(null);"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(appt.getRoot());"},{"lineNumber":93,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"null":1,"purplepers0n":89,"-":5}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.events.ui.ChangeListTabEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"    private static final int DOUBLE_PRESS_DELAY \u003d 300;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    private static final String MESSAGE_AVAILABLE_AUTOCOMPLETE \u003d \"Command suggestions: \";"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    private static final String MESSAGE_NO_MORE_AVAILABLE_COMMANDS \u003d \"No more available commands suggestions\";"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    private static final String SPACING \u003d \" \";"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"    private static final int NUMBER_OF_LIST_PANELS \u003d 3;"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    private long previousTabPressTime;"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":49,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"        previousTabPressTime \u003d 0;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"    //@@author jonathanwj"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        if (keyEvent.isControlDown()) {"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"            handleControlDownKeyPress(keyEvent);"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"            return;"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        if (keyEvent.isShiftDown()) {"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"            handleShiftDownKeyPress(keyEvent);"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"            return;"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        case UP:"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"            keyEvent.consume();"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"            navigateToPreviousInput();"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"        case DOWN:"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"            keyEvent.consume();"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"            navigateToNextInput();"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        case TAB:"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"            keyEvent.consume();"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"            autoCompleteUserInput();"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"        case ESCAPE:"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"            keyEvent.consume();"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"            clearCommandBox();"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        default:"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"     * Handles the key press on Control Down event, {@code keyEvent}."},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"    private void handleControlDownKeyPress(KeyEvent keyEvent) {"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"        case TAB:"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"            keyEvent.consume();"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"            changeSelectionPanelForward();"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"        default:"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"     * Handles the key press on Control Down event, {@code keyEvent}."},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"    private void handleShiftDownKeyPress(KeyEvent keyEvent) {"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"        case TAB:"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"            keyEvent.consume();"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"            changeSelectionPanelBackwards();"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"        default:"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"jonathanwj"},"content":"     * Change the selection panel forward on the UI"},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"jonathanwj"},"content":"    private void changeSelectionPanelForward() {"},{"lineNumber":125,"author":{"gitID":"jonathanwj"},"content":"        int listToChange \u003d logic.getCurrentList();"},{"lineNumber":126,"author":{"gitID":"jonathanwj"},"content":"        listToChange \u003d ++listToChange % NUMBER_OF_LIST_PANELS;"},{"lineNumber":127,"author":{"gitID":"jonathanwj"},"content":"        EventsCenter.getInstance().post(new ChangeListTabEvent(listToChange));"},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"     * Change the selection panel forward on the UI"},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"    private void changeSelectionPanelBackwards() {"},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":"        int listToChange \u003d logic.getCurrentList();"},{"lineNumber":135,"author":{"gitID":"jonathanwj"},"content":"        listToChange \u003d (--listToChange + NUMBER_OF_LIST_PANELS) % NUMBER_OF_LIST_PANELS;"},{"lineNumber":136,"author":{"gitID":"jonathanwj"},"content":"        EventsCenter.getInstance().post(new ChangeListTabEvent(listToChange));"},{"lineNumber":137,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"jonathanwj"},"content":"     * Clears the command box"},{"lineNumber":141,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"    private void clearCommandBox() {"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"        replaceText(EMPTY_STRING);"},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"     * Shows auto completed text or suggestions on the UI"},{"lineNumber":148,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"jonathanwj"},"content":"    private void autoCompleteUserInput() {"},{"lineNumber":150,"author":{"gitID":"jonathanwj"},"content":"        if (commandTextField.getText().isEmpty()) {"},{"lineNumber":151,"author":{"gitID":"jonathanwj"},"content":"            return;"},{"lineNumber":152,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":154,"author":{"gitID":"jonathanwj"},"content":"        if (getCurrentText().endsWith(SPACING)) {"},{"lineNumber":155,"author":{"gitID":"jonathanwj"},"content":"            autoCompleteNextCommandParameter();"},{"lineNumber":156,"author":{"gitID":"jonathanwj"},"content":"            return;"},{"lineNumber":157,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":159,"author":{"gitID":"jonathanwj"},"content":"        List\u003cString\u003e listOfAutoComplete \u003d logic.getAutoCompleteCommands(getCurrentText());"},{"lineNumber":160,"author":{"gitID":"jonathanwj"},"content":"        if (listOfAutoComplete.isEmpty()) {"},{"lineNumber":161,"author":{"gitID":"jonathanwj"},"content":"            return;"},{"lineNumber":162,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":164,"author":{"gitID":"jonathanwj"},"content":"        if (listOfAutoComplete.size() \u003d\u003d 1) {"},{"lineNumber":165,"author":{"gitID":"jonathanwj"},"content":"            replaceText(listOfAutoComplete.get(0));"},{"lineNumber":166,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":168,"author":{"gitID":"jonathanwj"},"content":"        if (isTabDoubleTap()) {"},{"lineNumber":169,"author":{"gitID":"jonathanwj"},"content":"            showSuggestionsOnUi(listOfAutoComplete);"},{"lineNumber":170,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":174,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"jonathanwj"},"content":"     * Shows autocomplete suggestions on the UI given the list of string suggestions"},{"lineNumber":176,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":"    private void showSuggestionsOnUi(List\u003cString\u003e listOfAutoComplete) {"},{"lineNumber":178,"author":{"gitID":"jonathanwj"},"content":"        logger.info(MESSAGE_AVAILABLE_AUTOCOMPLETE"},{"lineNumber":179,"author":{"gitID":"jonathanwj"},"content":"                + commandTextField.getText() + \" \u003e\u003e \" + getStringFromList(listOfAutoComplete));"},{"lineNumber":180,"author":{"gitID":"jonathanwj"},"content":"        if (listOfAutoComplete.size() \u003d\u003d 1) {"},{"lineNumber":181,"author":{"gitID":"jonathanwj"},"content":"            raise(new NewResultAvailableEvent(MESSAGE_NO_MORE_AVAILABLE_COMMANDS));"},{"lineNumber":182,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":183,"author":{"gitID":"jonathanwj"},"content":"            raise(new NewResultAvailableEvent(MESSAGE_AVAILABLE_AUTOCOMPLETE + getStringFromList(listOfAutoComplete)));"},{"lineNumber":184,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":"     * Shows auto completed next prefix parameter for completed command on UI"},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":"    private void autoCompleteNextCommandParameter() {"},{"lineNumber":191,"author":{"gitID":"jonathanwj"},"content":"        String textToShow \u003d getCurrentText()"},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":"                + logic.getAutoCompleteNextParameter(getCurrentText());"},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":"        replaceText(textToShow);"},{"lineNumber":194,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":196,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"jonathanwj"},"content":"     * Returns the {@code String} representative of given the list of Strings."},{"lineNumber":198,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"jonathanwj"},"content":"    private String getStringFromList(List\u003cString\u003e listOfAutoComplete) {"},{"lineNumber":200,"author":{"gitID":"jonathanwj"},"content":"        String toString \u003d listOfAutoComplete.toString();"},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"        toString \u003d toString.substring(1, toString.length() - 1).trim();"},{"lineNumber":202,"author":{"gitID":"jonathanwj"},"content":"        return toString;"},{"lineNumber":203,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":205,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"jonathanwj"},"content":"     * Returns true if TAB is pressed in quick succession"},{"lineNumber":207,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"jonathanwj"},"content":"    private boolean isTabDoubleTap() {"},{"lineNumber":209,"author":{"gitID":"jonathanwj"},"content":"        if (System.currentTimeMillis() - previousTabPressTime \u003c DOUBLE_PRESS_DELAY) {"},{"lineNumber":210,"author":{"gitID":"jonathanwj"},"content":"            return true;"},{"lineNumber":211,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"jonathanwj"},"content":"        previousTabPressTime \u003d System.currentTimeMillis();"},{"lineNumber":213,"author":{"gitID":"jonathanwj"},"content":"        return false;"},{"lineNumber":214,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":216,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"jonathanwj"},"content":"     * Returns the current text in the command box"},{"lineNumber":218,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"jonathanwj"},"content":"    private String getCurrentText() {"},{"lineNumber":220,"author":{"gitID":"jonathanwj"},"content":"        return commandTextField.getText();"},{"lineNumber":221,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":223,"author":{"gitID":"jonathanwj"},"content":"    //@@author"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":266,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":269,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":274,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":284,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":289,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitID":"-"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":294,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":300,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":301,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":310,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":183,"-":129}},{"path":"src/test/java/guitests/guihandles/ClientListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.ui.ClientCard;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":" * Provides a handle for {@code ClientListPanel} containing the list of {@code ClientCard}."},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"public class ClientListPanelHandle extends NodeHandle\u003cListView\u003cClientCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"    public static final String CLIENT_LIST_VIEW_ID \u003d \"#clientListView\";"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"    private Optional\u003cClientCard\u003e lastRememberedSelectedClientCard;"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"    public ClientListPanelHandle(ListView\u003cClientCard\u003e clientListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"        super(clientListPanelNode);"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"     * Returns a handle to the selected {@code ClientCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    public ClientCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClientCard\u003e clientList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"        if (clientList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"            throw new AssertionError(\"Client list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"        return new ClientCardHandle(clientList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClientCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"     * Navigates the listview to display and select the client."},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    public void navigateToCard(Client client) {"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClientCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"        Optional\u003cClientCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.client.equals(client)).findFirst();"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"            throw new IllegalArgumentException(\"Client does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"     * Returns the client card handle of a client associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"    public ClientCardHandle getClientCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"        return getClientCardHandle(getRootNode().getItems().get(index).client);"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"     * Returns the {@code ClientCardHandle} of the specified {@code client} in the list."},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"    public ClientCardHandle getClientCardHandle(Client client) {"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":"        Optional\u003cClientCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"                .filter(card -\u003e card.client.equals(client))"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"                .map(card -\u003e new ClientCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Client does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":93,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"purplepers0n"},"content":"     * Selects the {@code ClientCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"purplepers0n"},"content":"     * Remembers the selected {@code ClientCard} in the list."},{"lineNumber":102,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"purplepers0n"},"content":"    public void rememberSelectedClientCard() {"},{"lineNumber":104,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClientCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":106,"author":{"gitID":"purplepers0n"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"purplepers0n"},"content":"            lastRememberedSelectedClientCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"purplepers0n"},"content":"            lastRememberedSelectedClientCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":113,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"purplepers0n"},"content":"     * Returns true if the selected {@code ClientCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"purplepers0n"},"content":"     * {@code rememberSelectedClientCard()} call."},{"lineNumber":116,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"purplepers0n"},"content":"    public boolean isSelectedClientCardChanged() {"},{"lineNumber":118,"author":{"gitID":"purplepers0n"},"content":"        List\u003cClientCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":120,"author":{"gitID":"purplepers0n"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"purplepers0n"},"content":"            return lastRememberedSelectedClientCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"purplepers0n"},"content":"            return !lastRememberedSelectedClientCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"purplepers0n"},"content":"                    || !lastRememberedSelectedClientCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":77,"-":57}},{"path":"src/main/java/seedu/address/ui/PetListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":15,"content":"//@@author purplepers0n-reused"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":" * Panel containing the list of pets."},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"public class PetListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"PetListPanel.fxml\";"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PetListPanel.class);"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    private ListView\u003cPetCard\u003e petListView;"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"    public PetListPanel(ObservableList\u003cClientOwnPet\u003e clientOwnPetList) {"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"        setConnections(clientOwnPetList);"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"    private void setConnections(ObservableList\u003cClientOwnPet\u003e clientOwnPetList) {"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cPetCard\u003e mappedList \u003d EasyBind.map(clientOwnPetList, (clientOwnPet) -\u003e new PetCard(clientOwnPet,"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"                clientOwnPetList.indexOf(clientOwnPet) + 1));"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"        petListView.setItems(mappedList);"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"        petListView.setCellFactory(listView -\u003e new PetListViewCell());"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PetCard}."},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"    class PetListViewCell extends ListCell\u003cPetCard\u003e {"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        protected void updateItem(PetCard pet, boolean empty) {"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"            super.updateItem(pet, empty);"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"            if (empty || pet \u003d\u003d null) {"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(null);"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"                setText(null);"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(pet.getRoot());"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"null":1,"purplepers0n":44,"-":12}},{"path":"src/main/java/seedu/address/ui/ApptDayPanelCard.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":3,"author":{"gitID":"purplepers0n"},"content":"import java.text.DateFormatSymbols;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"//@@author purplepers0n"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":" * Panel containing the list of appointments in a day"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"public class ApptDayPanelCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"    public static final String FXML \u003d \"ApptDayPanelCard.fxml\";"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"    private static final String[] COLORS \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"green\","},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"        \"pink\", \"navy\", \"teal\", \"purple\", \"peach\", \"lightblue\", \"darkpurple\","},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"        \"green2\", \"wine\", \"fuchsia\", \"sea\"};"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    private ListView\u003cApptCard\u003e apptDayListView;"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    private Label dateDisplay;"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    private String year;"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"    private String month;"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    private String day;"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    public ApptDayPanelCard(ObservableList\u003cAppointment\u003e apptDay, String date, int startIndex) {"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"        setConnections(apptDay, date, startIndex);"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"    private void setConnections(ObservableList\u003cAppointment\u003e apptDayList, String date, int startIndex) {"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cApptCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"                apptDayList, (appt) -\u003e new ApptCard(appt, startIndex + apptDayList.indexOf(appt) + 1));"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        apptDayListView.setItems(mappedList);"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        apptDayListView.setCellFactory(listView -\u003e new ApptListViewCell());"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"        year \u003d date.substring(0, 4);"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        day \u003d date.substring(8, 10);"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        int mon \u003d Integer.parseInt(date.substring(5, 7));"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        month \u003d new DateFormatSymbols().getMonths()[mon - 1];"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"        dateDisplay.setText(\"  \" + day + \" \" + month + \" \" + year);"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"        setColorFor(date);"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"     * set the color for {@code date}\u0027s label"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"    private void setColorFor(String date) {"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"        String color \u003d COLORS[Math.abs(date.hashCode()) % COLORS.length];"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"        dateDisplay.setId(color);"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ApptCard}."},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"    class ApptListViewCell extends ListCell\u003cApptCard\u003e {"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"        protected void updateItem(ApptCard appt, boolean empty) {"},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":"            super.updateItem(appt, empty);"},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"            if (empty || appt \u003d\u003d null) {"},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(null);"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"                setText(null);"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(appt.getRoot());"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":77,"-":7}},{"path":"src/main/java/seedu/address/ui/VetTechnicianCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"content":"//@@author purplepers0n-reused"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":" * An UI component that displays information of a {@code VetTechnician}."},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"public class VetTechnicianCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"VetTechnicianListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"    private static final String[] TAG_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"green\","},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"        \"pink\", \"navy\", \"teal\", \"purple\", \"peach\", \"lightblue\", \"darkpurple\","},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"        \"green2\", \"white\", \"wine\", \"fuchsia\", \"sea\"};"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    public final VetTechnician vetTechnician;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"    public VetTechnicianCard(VetTechnician vetTechnician, int displayedIndex) {"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        this.vetTechnician \u003d vetTechnician;"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        name.setText(vetTechnician.getName().fullName);"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        phone.setText(vetTechnician.getPhone().value);"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        address.setText(vetTechnician.getAddress().value);"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        email.setText(vetTechnician.getEmail().value);"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"        initTags(vetTechnician);"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"     * @return the color for {@code tagName}\u0027s label"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        return TAG_COLOR[Math.abs(tagName.hashCode()) % TAG_COLOR.length];"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"     * Creates the tag labels for {@code client}."},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"    private void initTags(VetTechnician vetTechnician) {"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"        vetTechnician.getTags().forEach(tag -\u003e {"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"            tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"        if (!(other instanceof VetTechnicianCard)) {"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"            return false;"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"        // state check"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"        VetTechnicianCard card \u003d (VetTechnicianCard) other;"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 vetTechnician.equals(card.vetTechnician);"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"null":1,"purplepers0n":47,"-":43}},{"path":"src/main/java/seedu/address/ui/ApptListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"//@@author purplepers0n"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":" * Panel containing the list of all appointments"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"public class ApptListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"ApptListPanel.fxml\";"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ApptListPanel.class);"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    private ListView\u003cApptDayPanelCard\u003e apptListView;"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"    public ApptListPanel(ObservableList\u003cAppointment\u003e apptList) {"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"        setConnections(apptList);"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"    private void setConnections(ObservableList\u003cAppointment\u003e apptList) {"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"        if (apptList.size() \u003d\u003d 0) {"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"            return;"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cApptDayPanelCard\u003e mappedList \u003d FXCollections.observableArrayList();"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"        Appointment lastAppt \u003d null;"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"        int startIndex \u003d 0;"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"        int endIndex;"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"        for (Appointment currAppt : apptList) {"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"            if (lastAppt !\u003d null \u0026\u0026 !currAppt.getDate().equals(lastAppt.getDate())) {"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"                endIndex \u003d apptList.indexOf(currAppt);"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"                ObservableList\u003cAppointment\u003e apptDayList \u003d"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"                        FXCollections.observableList(apptList.subList(startIndex, endIndex));"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"                mappedList.add(new ApptDayPanelCard(apptDayList, lastAppt.getDate().toString(), startIndex));"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"                startIndex \u003d endIndex;"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"                lastAppt \u003d currAppt;"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"                lastAppt \u003d currAppt;"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"        endIndex \u003d apptList.size();"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cAppointment\u003e apptDayList \u003d FXCollections.observableList(apptList.subList(startIndex, endIndex));"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"        mappedList.add(new ApptDayPanelCard(apptDayList, apptList.get(endIndex - 1).getDate().toString(), startIndex));"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        apptListView.setItems(mappedList);"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"        apptListView.setCellFactory(listView -\u003e new ApptListViewCell());"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ApptDayPanelCard}."},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"    class ApptListViewCell extends ListCell\u003cApptDayPanelCard\u003e {"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"        protected void updateItem(ApptDayPanelCard appt, boolean empty) {"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"            super.updateItem(appt, empty);"},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":"            if (empty || appt \u003d\u003d null) {"},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(null);"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"                setText(null);"},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(appt.getRoot());"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":70,"-":12}},{"path":"src/main/java/seedu/address/ui/ClientListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":15,"content":"//@@author purplepers0n-reused"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":" * Panel containing the list of clients."},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"public class ClientListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"ClientListPanel.fxml\";"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ClientListPanel.class);"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"    private ListView\u003cClientCard\u003e clientListView;"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"    public ClientListPanel(ObservableList\u003cClient\u003e clientList) {"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"        setConnections(clientList);"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"    private void setConnections(ObservableList\u003cClient\u003e clientList) {"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cClientCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"                clientList, (client) -\u003e new ClientCard(client, clientList.indexOf(client) + 1));"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"        clientListView.setItems(mappedList);"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"        clientListView.setCellFactory(listView -\u003e new ClientListViewCell());"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ClientCard}."},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"    class ClientListViewCell extends ListCell\u003cClientCard\u003e {"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        @Override"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        protected void updateItem(ClientCard client, boolean empty) {"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"            super.updateItem(client, empty);"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"            if (empty || client \u003d\u003d null) {"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(null);"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"                setText(null);"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"            } else {"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"                setGraphic(client.getRoot());"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"null":1,"purplepers0n":44,"-":12}},{"path":"src/main/java/seedu/address/ui/PetDisplayCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":10,"content":"//@@author purplepers0n-reused"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":" * An UI component that displays information of a {@code clientOwnPet}."},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"public class PetDisplayCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"PetDisplayCard.fxml\";"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"    private static final String[] TAG_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"green\","},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"        \"pink\", \"navy\", \"teal\", \"purple\", \"peach\", \"lightblue\", \"darkpurple\","},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"        \"green2\", \"white\", \"wine\", \"fuchsia\", \"sea\"};"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    public final Pet pet;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"    private Label gender;"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"    private Label age;"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"    //species and breed included in tags"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"    private FlowPane tags;"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"    public PetDisplayCard(Pet pet, int displayedIndex) {"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        this.pet \u003d pet;"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        name.setText(pet.getPetName().fullPetName);"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        gender.setText(\"Gender: \" + pet.getPetGender().fullGender);"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        age.setText(pet.getPetAge().value + \" years old\");"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"        initTags(pet);"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"     * @return the color for {@code tagName}\u0027s label"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        return TAG_COLOR[Math.abs(tagName.hashCode()) % TAG_COLOR.length];"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"     * Creates the tag labels for {@code pet}."},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"    private void initTags(Pet pet) {"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"        pet.getTags().forEach(tag -\u003e {"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"            tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"        if (!(other instanceof PetDisplayCard)) {"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"            return false;"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"        // state check"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"        PetDisplayCard card \u003d (PetDisplayCard) other;"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 pet.equals(card.pet);"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"null":1,"purplepers0n":57,"-":34}},{"path":"src/main/java/seedu/address/ui/ClientCard.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":10,"content":"//@@author purplepers0n-reused"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":" * A UI component that displays information of a {@code Client}."},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"public class ClientCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"ClientListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"    private static final String[] TAG_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"green\","},{"lineNumber":18,"author":{"gitID":"-"},"content":"        \"pink\", \"navy\", \"teal\", \"purple\", \"peach\", \"lightblue\","},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"        \"green2\", \"white\", \"wine\", \"fuchsia\", \"sea\"};"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    public final Client client;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"    public ClientCard(Client client, int displayedIndex) {"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        this.client \u003d client;"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        name.setText(client.getName().fullName);"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        phone.setText(client.getPhone().value);"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        address.setText(client.getAddress().value);"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        email.setText(client.getEmail().value);"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"        initTags(client);"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"     * @return the color for {@code tagName}\u0027s label"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        return TAG_COLOR[Math.abs(tagName.hashCode()) % TAG_COLOR.length];"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"     * Creates the tag labels for {@code client}."},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"    private void initTags(Client client) {"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"        client.getTags().forEach(tag -\u003e {"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"            tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"        if (!(other instanceof ClientCard)) {"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"            return false;"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"        // state check"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"        ClientCard card \u003d (ClientCard) other;"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 client.equals(card.client);"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"null":1,"purplepers0n":50,"-":41}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import javafx.beans.value.ChangeListener;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"import javafx.beans.value.ObservableValue;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.ChangeListTabEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.NewApptAvailableEvent;"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.NewListAllDisplayAvailableEvent;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"    private ClientListPanel clientListPanel;"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"    private PetListPanel petListPanel;"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"    private VetTechnicianListPanel vetTechnicianListPanel;"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"    private ApptListPanel apptListPanel;"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"    private ListAllPanel listAllPanel;"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"    private DateTimeCard dateTimeCard;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"    private StackPane dateTimePlaceholder;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"    private StackPane clientListPanelPlaceholder;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"    private StackPane petListPanelPlaceholder;"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"    private StackPane vetTechnicianListPanelPlaceholder;"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"    private TabPane listPanel;"},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"    private StackPane apptListPanelPlaceholder;"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"    private StackPane listAllPanelPlaceholder;"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":96,"author":{"gitID":"purplepers0n"},"content":"        config.setAppTitle(\"VetterAppointments\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":102,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":103,"author":{"gitID":"purplepers0n"},"content":"        updateCurrentList();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":116,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":123,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":124,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":125,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":126,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":127,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":128,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":129,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":131,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":132,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":133,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":134,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":135,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":136,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"purplepers0n"},"content":"        clientListPanel \u003d new ClientListPanel(logic.getFilteredClientList());"},{"lineNumber":151,"author":{"gitID":"purplepers0n"},"content":"        clientListPanelPlaceholder.getChildren().add(clientListPanel.getRoot());"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"purplepers0n"},"content":"        petListPanel \u003d new PetListPanel(logic.getClientPetAssociationList());"},{"lineNumber":154,"author":{"gitID":"purplepers0n"},"content":"        petListPanelPlaceholder.getChildren().add(petListPanel.getRoot());"},{"lineNumber":155,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":156,"author":{"gitID":"purplepers0n"},"content":"        vetTechnicianListPanel \u003d new VetTechnicianListPanel(logic.getFilteredVetTechnicianList());"},{"lineNumber":157,"author":{"gitID":"purplepers0n"},"content":"        vetTechnicianListPanelPlaceholder.getChildren().add(vetTechnicianListPanel.getRoot());"},{"lineNumber":158,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":167,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":168,"author":{"gitID":"purplepers0n"},"content":"        dateTimeCard \u003d new DateTimeCard();"},{"lineNumber":169,"author":{"gitID":"purplepers0n"},"content":"        dateTimePlaceholder.getChildren().add(dateTimeCard.getRoot());"},{"lineNumber":170,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":171,"author":{"gitID":"purplepers0n"},"content":"        fillAppt();"},{"lineNumber":172,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":174,"author":{"gitID":"purplepers0n"},"content":"    //@@author purplepers0n"},{"lineNumber":175,"author":{"gitID":"purplepers0n"},"content":"    void fillAppt() {"},{"lineNumber":176,"author":{"gitID":"purplepers0n"},"content":"        apptListPanel \u003d new ApptListPanel(logic.getFilteredAppointmentList());"},{"lineNumber":177,"author":{"gitID":"purplepers0n"},"content":"        apptListPanelPlaceholder.getChildren().add(apptListPanel.getRoot());"},{"lineNumber":178,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":180,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"purplepers0n"},"content":"     * updates the listallpanel display"},{"lineNumber":182,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"purplepers0n"},"content":"    void fillListAllPanel() {"},{"lineNumber":184,"author":{"gitID":"purplepers0n"},"content":"        if (logic.getClientDetails() !\u003d null) {"},{"lineNumber":185,"author":{"gitID":"purplepers0n"},"content":"            listAllPanel \u003d new ListAllPanel(logic.getClientDetails(),"},{"lineNumber":186,"author":{"gitID":"purplepers0n"},"content":"                    logic.getClientPetList(), logic.getClientApptList());"},{"lineNumber":187,"author":{"gitID":"purplepers0n"},"content":"            listAllPanelPlaceholder.getChildren().add(listAllPanel.getRoot());"},{"lineNumber":188,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":189,"author":{"gitID":"purplepers0n"},"content":"            listAllPanelPlaceholder.getChildren().remove(0, listAllPanelPlaceholder.getChildren().size());"},{"lineNumber":190,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"purplepers0n"},"content":"    //@@author"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":216,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"purplepers0n"},"content":"    public ClientListPanel getClientListPanel() {"},{"lineNumber":244,"author":{"gitID":"purplepers0n"},"content":"        return this.clientListPanel;"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"purplepers0n"},"content":"    public PetListPanel getPetListPanel() {"},{"lineNumber":248,"author":{"gitID":"purplepers0n"},"content":"        return this.petListPanel;"},{"lineNumber":249,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":251,"author":{"gitID":"purplepers0n"},"content":"    public VetTechnicianListPanel getVetTechnicianListPanel() {"},{"lineNumber":252,"author":{"gitID":"purplepers0n"},"content":"        return this.vetTechnicianListPanel;"},{"lineNumber":253,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":255,"author":{"gitID":"purplepers0n"},"content":"    public ApptListPanel getApptListPanel() {"},{"lineNumber":256,"author":{"gitID":"purplepers0n"},"content":"        return this.apptListPanel;"},{"lineNumber":257,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":259,"author":{"gitID":"purplepers0n"},"content":"    //@@author purplepers0n"},{"lineNumber":260,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":261,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"purplepers0n"},"content":"     * Changes to the {@code Tab} of the specific {@code list} requested and selects it."},{"lineNumber":263,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"purplepers0n"},"content":"    private void changeTo(int list) {"},{"lineNumber":265,"author":{"gitID":"purplepers0n"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":266,"author":{"gitID":"purplepers0n"},"content":"            listPanel.getSelectionModel().select(list);"},{"lineNumber":267,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":268,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":270,"author":{"gitID":"purplepers0n"},"content":"    @Subscribe"},{"lineNumber":271,"author":{"gitID":"purplepers0n"},"content":"    private void handleChangeListTabEvent(ChangeListTabEvent event) {"},{"lineNumber":272,"author":{"gitID":"purplepers0n"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":273,"author":{"gitID":"purplepers0n"},"content":"        changeTo(event.targetList);"},{"lineNumber":274,"author":{"gitID":"purplepers0n"},"content":"        logic.setCurrentList(event.targetList);"},{"lineNumber":275,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":276,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":277,"author":{"gitID":"purplepers0n"},"content":"    @Subscribe"},{"lineNumber":278,"author":{"gitID":"purplepers0n"},"content":"    private void handleApptAvailableEvent(NewApptAvailableEvent event) {"},{"lineNumber":279,"author":{"gitID":"purplepers0n"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":280,"author":{"gitID":"purplepers0n"},"content":"        Platform.runLater(() -\u003e fillAppt());"},{"lineNumber":281,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":283,"author":{"gitID":"purplepers0n"},"content":"    @Subscribe"},{"lineNumber":284,"author":{"gitID":"purplepers0n"},"content":"    private void handleListAllDisplayAvailableEvent(NewListAllDisplayAvailableEvent event) {"},{"lineNumber":285,"author":{"gitID":"purplepers0n"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":286,"author":{"gitID":"purplepers0n"},"content":"        Platform.runLater(() -\u003e fillListAllPanel());"},{"lineNumber":287,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":289,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":290,"author":{"gitID":"purplepers0n"},"content":"     * Updates the current index being viewed if tab is changed by mouseclick event"},{"lineNumber":291,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"purplepers0n"},"content":"    private void updateCurrentList() {"},{"lineNumber":293,"author":{"gitID":"purplepers0n"},"content":"        listPanel.getSelectionModel().selectedIndexProperty().addListener(new ChangeListener\u003cNumber\u003e() {"},{"lineNumber":294,"author":{"gitID":"purplepers0n"},"content":"            @Override"},{"lineNumber":295,"author":{"gitID":"purplepers0n"},"content":"            public void changed(ObservableValue\u003c? extends Number\u003e observable, Number oldValue, Number newValue) {"},{"lineNumber":296,"author":{"gitID":"purplepers0n"},"content":"                logic.setCurrentList(newValue.intValue());"},{"lineNumber":297,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":298,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":299,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"purplepers0n"},"content":"    //@@author"},{"lineNumber":301,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":126,"-":181}},{"path":"src/main/java/seedu/address/ui/ApptDisplayCard.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":3,"author":{"gitID":"purplepers0n"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":"import java.util.Calendar;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"content":"//@@author purplepers0n-reused"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":" * An UI component that displays information of an {@code Appointment} for the {@code ListAllPanel} display."},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"public class ApptDisplayCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"ApptDisplayCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"    public final Appointment appointment;"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"    private String startTime;"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    private String endTime;"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"    private HBox cardPane;"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    private Label id;"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    private Label time;"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"    private Label petName;"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"    private Label vetTechName;"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"    private Label desc;"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"    public ApptDisplayCard(Appointment appointment, int startIndex) {"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"        this.appointment \u003d appointment;"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"        id.setText(startIndex + \". \");"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"        startTime \u003d appointment.getTime().toString();"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        getTimeFrame(startTime, appointment.getDuration().toString());"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        time.setText(startTime + \" - \" + endTime);"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"        petName.setText(\"Pet: \" + appointment.getClientOwnPet().getPet().getPetName().fullPetName);"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"        if (appointment.getVetTechnician() \u003d\u003d null) {"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"            vetTechName.setText(\"V.Tech: -\");"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"            vetTechName.setText(\"V.Tech: \" + appointment.getVetTechnician().getName().fullName);"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        desc.setText(\"Description: \" + appointment.getDescription().description);"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        desc.setWrapText(true);"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"    private void getTimeFrame(String time, String duration) {"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"        SimpleDateFormat df \u003d new SimpleDateFormat(\"HH:mm\");"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"        try {"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"            Date date \u003d df.parse(time);"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"            cal.setTime(date);"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"            cal.add(Calendar.MINUTE, Integer.parseInt(duration));"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"            endTime \u003d df.format(cal.getTime());"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"        } catch (Exception e) {"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"            System.out.println(\"time cannot be parsed\");"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"        if (!(other instanceof ApptDisplayCard)) {"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"        // state check"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"        ApptDisplayCard card \u003d (ApptDisplayCard) other;"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"        return startTime.equals(card.startTime)"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 appointment.equals(card.appointment);"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"null":1,"jonathanwj":3,"purplepers0n":70,"-":14}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"    private static final String[] TAG_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"green\","},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"        \"pink\", \"navy\", \"teal\", \"purple\", \"peach\", \"lightblue\", \"darkpurple\","},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"        \"green2\", \"white\", \"wine\", \"fuchsia\", \"sea\"};"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        initTags(person);"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"     * @return the color for {@code tagName}\u0027s label"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"        return TAG_COLOR[Math.abs(tagName.hashCode()) % TAG_COLOR.length];"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"    private void initTags(Person person) {"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"            tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":22,"-":69}},{"path":"src/main/java/seedu/address/ui/PetCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":11,"content":"//@@author purplepers0n-reused"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":" * An UI component that displays information of a {@code clientOwnPet}."},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"public class PetCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"PetListCard.fxml\";"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"    private static final String[] TAG_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"green\","},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"        \"pink\", \"navy\", \"teal\", \"purple\", \"peach\", \"lightblue\", \"darkpurple\","},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"        \"green2\", \"white\", \"wine\", \"fuchsia\", \"sea\"};"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    public final ClientOwnPet clientOwnPet;"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    public final Pet pet;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"    private Label gender;"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"    private Label age;"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"    private Label client;"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"    //species and breed included in tags"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"    private FlowPane tags;"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"    public PetCard(ClientOwnPet clientOwnPet, int displayedIndex) {"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        this.clientOwnPet \u003d clientOwnPet;"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        pet \u003d clientOwnPet.getPet();"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"        name.setText(pet.getPetName().fullPetName);"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"        gender.setText(\"Gender: \" + pet.getPetGender().fullGender);"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"        age.setText(pet.getPetAge().value + \" years old\");"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"        client.setText(\"Owner: \" + clientOwnPet.getClient().getName());"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"        initTags(pet);"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"     * @return the color for {@code tagName}\u0027s label"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"        return TAG_COLOR[Math.abs(tagName.hashCode()) % TAG_COLOR.length];"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"     * Creates the tag labels for {@code pet}."},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"    private void initTags(Pet pet) {"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"        pet.getTags().forEach(tag -\u003e {"},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":"            tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"        if (!(other instanceof PetCard)) {"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"        // state check"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"        PetCard card \u003d (PetCard) other;"},{"lineNumber":93,"author":{"gitID":"purplepers0n"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":94,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 pet.equals(card.pet);"},{"lineNumber":95,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"null":1,"purplepers0n":61,"-":34}},{"path":"src/main/java/seedu/address/commons/core/GuiSettings.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A Serializable class that contains the GUI settings."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class GuiSettings implements Serializable {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Double windowWidth;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Double windowHeight;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private Point windowCoordinates;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public GuiSettings() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"        if (xPosition \u003c 0 || yPosition \u003c 0) {"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"            this.windowCoordinates \u003d new Point(0, 0);"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            this.windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public Double getWindowWidth() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return windowWidth;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Double getWindowHeight() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return windowHeight;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return windowCoordinates;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well."},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return Objects.equals(windowWidth, o.windowWidth)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":4,"-":73}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_INVALID_PET_DISPLAYED_INDEX \u003d \"The pet index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_PETS_LISTED_OVERVIEW \u003d \"%1$d pets listed!\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_APPOINTMENT_INDEX \u003d \"The appointment index provided is invalid\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PET_INDEX \u003d \"The pet index provided is invalid\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_APPOINTMENT_TAKEN \u003d \"The appointment has been booked\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_APPOINTMENT_LIST_EMPTY \u003d \"The appointment list is empty right now.\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_CLIENTPETLIST_EMPTY \u003d \"The pet list is empty right now.\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONSLIST_EMPTY \u003d \"The persons list is empty right now.\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_APPOINTMENT_NO_PET \u003d \"The appointment does not have any pets.\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \" There\u0027s nothing to remove\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"purplepers0n":1,"-":20}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Indicates a request to jump to the list of persons"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class JumpToListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"    public final int targetList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"    public JumpToListRequestEvent(Index targetIndex, int targetList) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"        this.targetList \u003d targetList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":3,"-":21}},{"path":"src/main/java/seedu/address/ui/ClientDisplayCard.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":10,"content":"//@@author purplepers0n-reused"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":" * A UI component that displays information of a {@code Client} for {@code ListAllPanel} display."},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"public class ClientDisplayCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"ClientDisplayCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"    private static final String[] TAG_COLOR \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"green\","},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"        \"pink\", \"navy\", \"teal\", \"purple\", \"peach\", \"lightblue\", \"darkpurple\","},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"        \"green2\", \"white\", \"wine\", \"fuchsia\", \"sea\"};"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    public final Client client;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"    public ClientDisplayCard(Client client) {"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"        this.client \u003d client;"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        name.setText(client.getName().fullName);"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        phone.setText(client.getPhone().value);"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        address.setText(client.getAddress().value);"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"        email.setText(client.getEmail().value);"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        initTags(client);"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"     * @return the color for {@code tagName}\u0027s label"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"    private String getTagColorFor(String tagName) {"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"        return TAG_COLOR[Math.abs(tagName.hashCode()) % TAG_COLOR.length];"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"     * Creates the tag labels for {@code client}."},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"    private void initTags(Client client) {"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"        client.getTags().forEach(tag -\u003e {"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"            tagLabel.getStyleClass().add(getTagColorFor(tag.tagName));"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"        });"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"        if (!(other instanceof ClientDisplayCard)) {"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"            return false;"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"        // state check"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":"        ClientDisplayCard card \u003d (ClientDisplayCard) other;"},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"        return client.equals(card.client);"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"null":1,"purplepers0n":50,"-":38}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeListTabEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"content":"//@@author purplepers0n-reused"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":" * Indicates a request to change the tab to show other list"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"public class ChangeListTabEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":"    public final int targetList;"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"    public ChangeListTabEvent(int targetList) {"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"        this.targetList \u003d targetList;"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"purplepers0n":10,"-":11}},{"path":"src/main/java/seedu/address/commons/events/ui/NewApptAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":" * Indicates that a new appointment is available."},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"public class NewApptAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"    public final String message;"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"    public NewApptAvailableEvent(String message) {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":9,"-":12}},{"path":"src/main/java/seedu/address/commons/events/ui/NewListAllDisplayAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":" * Indicates that a new listall display is available."},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"public class NewListAllDisplayAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"    public final String message;"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":"    public NewListAllDisplayAvailableEvent(String message) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":9,"-":10}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    /** Returns an unmodifiable view of the filtered list of clients */"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cClient\u003e getFilteredClientList();"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    /** Returns an unmodifiable view of the filtered list of vet technician */"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList();"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"    /** Returns an unmodifiable view of the filtered list of pets */"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"    ObservableList\u003cPet\u003e getFilteredPetList();"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"    /** Returns an unmodifiable view of the filtered client pet association list */"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"    ObservableList\u003cClientOwnPet\u003e getClientPetAssociationList();"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of appointments */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    /** Returns the sorted list of autocomplete commands with given prefix string,"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"     *  encapsulated in a {@code List\u003cString\u003e} object"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"    List\u003cString\u003e getAutoCompleteCommands(String prefix);"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"     * Returns the the next missing prefix parameter with given input text"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"     * or an empty string if there is no next prefix"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    String getAutoCompleteNextParameter(String inputText);"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"     * Sets the index of the current list that is viewed"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"    void setCurrentList(int currList);"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"    /** Get the index of the current list that is viewed */"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"    int getCurrentList();"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"    /** Returns the queried client */"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"    Client getClientDetails();"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"    /** Returns an unmodifiable view of the pet list of the queried client */"},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"    ObservableList\u003cPet\u003e getClientPetList();"},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"    /** Returns an unmodifiable view of the appointment list of the queried client */"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"    ObservableList\u003cAppointment\u003e getClientApptList();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":21,"purplepers0n":25,"-":31}},{"path":"src/main/java/seedu/address/logic/autocomplete/Trie.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.logic.autocomplete;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"//@@author jonathanwj"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":" * Trie data structure for word auto-complete"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"public class Trie {"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"    private Node root;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"    private int size \u003d 0;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"     * Represents node a Trie"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    private class Node {"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"        private HashMap\u003cCharacter, Node\u003e children \u003d new HashMap\u003c\u003e();"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"        private boolean isCompleteWord \u003d false;"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"     * Creates a Trie"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    public Trie() {"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"        root \u003d new Node();"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"     * Insert a word into Trie"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    public void insertWord(String word) {"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(word);"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"        insert(root, word);"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"     * Recursive insert to insert part of key into Trie"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    private void insert(Node currNode, String key) {"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        if (!key.isEmpty()) {"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"            if (!currNode.children.containsKey(key.charAt(0))) {"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"                currNode.children.put(key.charAt(0), new Node());"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"            insert(currNode.children.get(key.charAt(0)), key.substring(1));"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"            if (currNode.isCompleteWord \u003d\u003d false) {"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"                size++;"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"            currNode.isCompleteWord \u003d true;"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"     * Auto-complete strings"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"     * \u003cp\u003e"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"     * Returns an {@code ArrayList\u003cString\u003e} of auto-completed words with given prefix"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"    public List\u003cString\u003e autoComplete(String prefix) {"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        if (search(root, prefix) \u003d\u003d null) {"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"            return result;"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        for (String s : getAllPostFix(search(root, prefix))) {"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"            result.add(prefix + s);"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"        return result;"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"     * Recursive search for end node"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"    private Node search(Node currNode, String key) {"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        if (!key.isEmpty() \u0026\u0026 currNode !\u003d null) {"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"            return search(currNode.children.get(key.charAt(0)), key.substring(1));"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"            return currNode;"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"     * Returns arraylist of all postfix from node"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"    private List\u003cString\u003e getAllPostFix(Node node) {"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"        ArrayList\u003cString\u003e listOfPostFix \u003d new ArrayList\u003c\u003e();"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        return getAllPostFix(node, \"\", null, listOfPostFix);"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"     * Recursive method to get all postfix string"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"    private List\u003cString\u003e getAllPostFix(Node node, String s, Character next, List\u003cString\u003e listOfPostFix) {"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"        if (next !\u003d null) {"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"            s +\u003d next;"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"        for (Map.Entry\u003cCharacter, Node\u003e entry : node.children.entrySet()) {"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"            listOfPostFix \u003d getAllPostFix(entry.getValue(), s, entry.getKey(), listOfPostFix);"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"        if (node.isCompleteWord) {"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"            listOfPostFix.add(s);"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"        return listOfPostFix;"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"     * @return size of Trie"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"    public int size() {"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"        return size;"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"}"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":""}],"authorContributionMap":{"jonathanwj":117,"-":2}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_ROLE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"                        PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON_ROLE, PREFIX_NAME,"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"                PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"            PersonRole role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_PERSON_ROLE).get());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"            Person person;"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"            if (role.equals(PersonRole.CLIENT_ROLE)) {"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"                person \u003d new Client(name, phone, email, address, tagList);"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"            } else {"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"                person \u003d new VetTechnician(name, phone, email, address, tagList);"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":15,"-":62}},{"path":"src/main/java/seedu/address/ui/ApptCard.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":3,"author":{"gitID":"purplepers0n"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":"import java.util.Calendar;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"//@@author purplepers0n"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":" * An UI component that displays information of an {@code Appointment}."},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"public class ApptCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"    private static final String FXML \u003d \"ApptCard.fxml\";"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"    public final Appointment appointment;"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"    private String startTime;"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    private String endTime;"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"    private HBox apptCardPane;"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    private Label id;"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    private Label time;"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"    private Label clientName;"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"    private Label petName;"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"    private Label vetTechName;"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"    public ApptCard(Appointment appointment, int startIndex) {"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"        super(FXML);"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"        this.appointment \u003d appointment;"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"        id.setText(startIndex + \". \");"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"        startTime \u003d appointment.getTime().toString();"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        getTimeFrame(startTime, appointment.getDuration().toString());"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        time.setText(startTime + \" - \" + endTime);"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"        if (appointment.getClientOwnPet() \u003d\u003d null) {"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"            clientName.setText(\"Client: -\");"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"            petName.setText(\"Pet: -\");"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"            clientName.setText(\"Client: \" + appointment.getClientOwnPet().getClient().getName().fullName);"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"            petName.setText(\"Pet: \" + appointment.getClientOwnPet().getPet().getPetName().fullPetName);"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        if (appointment.getVetTechnician() \u003d\u003d null) {"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"            vetTechName.setText(\"V.Tech: -\");"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"            vetTechName.setText(\"V.Tech: \" + appointment.getVetTechnician().getName().fullName);"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    private void getTimeFrame(String time, String duration) {"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"        SimpleDateFormat df \u003d new SimpleDateFormat(\"HH:mm\");"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"            Date date \u003d df.parse(time);"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"            cal.setTime(date);"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"            cal.add(Calendar.MINUTE, Integer.parseInt(duration));"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"            endTime \u003d df.format(cal.getTime());"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"        } catch (Exception e) {"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"            System.out.println(\"time cannot be parsed\");"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"        // short circuit if same object"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"            return true;"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"        // instanceof handles nulls"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"        if (!(other instanceof ApptCard)) {"},{"lineNumber":84,"author":{"gitID":"purplepers0n"},"content":"            return false;"},{"lineNumber":85,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":87,"author":{"gitID":"purplepers0n"},"content":"        // state check"},{"lineNumber":88,"author":{"gitID":"purplepers0n"},"content":"        ApptCard card \u003d (ApptCard) other;"},{"lineNumber":89,"author":{"gitID":"purplepers0n"},"content":"        return startTime.equals(card.startTime)"},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 appointment.equals(card.appointment);"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":86,"-":6}},{"path":"src/main/java/seedu/address/logic/parser/DeletePetCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeletePetCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":" * Parses input arguments and creates a new DeletePetCommand object"},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"public class DeletePetCommandParser implements Parser\u003cDeletePetCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"     * Parses the given {@code String} of arguments in the context of DeletePetCommand"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"     * returns DeletePetCommand object for execution"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"     * @throws ParseException if user input does not conform to expected format"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"    public DeletePetCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"            return new DeletePetCommand(index);"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePetCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":9,"md-azsa":22}},{"path":"src/main/java/seedu/address/logic/autocomplete/AutoCompleteManager.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.logic.autocomplete;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddAppointmentToPetCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddPetCommand;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddVetTechToAppointmentCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeletePetCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.ListAllCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemoveAppointmentFromPetCommand;"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.RemoveVetTechFromAppointmentCommand;"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.RescheduleCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ScheduleCommand;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.SortAppointmentCommand;"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.SortClientCommand;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.SortPetCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.UnscheduleCommand;"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"//@@author jonathanwj"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":" * the main AutoCompleteManager of the application"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"public class AutoCompleteManager {"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"    private static final String LIST_CLIENT_PREFIX \u003d \" client\";"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    private static final String LIST_VETTECH_PREFIX \u003d \" vettech\";"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    private static final String LIST_PET_PREFIX \u003d \" pet\";"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"    private Trie commandTrie;"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"    private CommandParameterSyntaxHandler commandParameterSyntaxHandler;"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    public AutoCompleteManager() {"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"        commandTrie \u003d new Trie();"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        commandParameterSyntaxHandler \u003d new CommandParameterSyntaxHandler();"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        initCommandKeyWords();"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"     * Initialises command keywords in commandTrie"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    private void initCommandKeyWords() {"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(AddCommand.COMMAND_WORD);"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(AddPetCommand.COMMAND_WORD);"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(ClearCommand.COMMAND_WORD);"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(DeleteCommand.COMMAND_WORD);"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(DeletePetCommand.COMMAND_WORD);"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(EditCommand.COMMAND_WORD);"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(ExitCommand.COMMAND_WORD);"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(FindCommand.COMMAND_WORD);"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(HelpCommand.COMMAND_WORD);"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(HistoryCommand.COMMAND_WORD);"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(RedoCommand.COMMAND_WORD);"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(ScheduleCommand.COMMAND_WORD);"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(RescheduleCommand.COMMAND_WORD);"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(UnscheduleCommand.COMMAND_WORD);"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(UndoCommand.COMMAND_WORD);"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(AddAppointmentToPetCommand.COMMAND_WORD);"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(RemoveAppointmentFromPetCommand.COMMAND_WORD);"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(AddVetTechToAppointmentCommand.COMMAND_WORD);"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(RemoveVetTechFromAppointmentCommand.COMMAND_WORD);"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(SortClientCommand.COMMAND_WORD);"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(SortAppointmentCommand.COMMAND_WORD);"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(SortPetCommand.COMMAND_WORD);"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(ListCommand.COMMAND_WORD);"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(ListAllCommand.COMMAND_WORD);"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(ListCommand.COMMAND_WORD + LIST_CLIENT_PREFIX);"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(ListCommand.COMMAND_WORD + LIST_VETTECH_PREFIX);"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"        commandTrie.insertWord(ListCommand.COMMAND_WORD + LIST_PET_PREFIX);"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"     * Returns a sorted list of auto completed commands with prefix"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"    public List\u003cString\u003e getAutoCompleteCommands(String commandPrefix) {"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(commandPrefix);"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"        return commandTrie.autoComplete(commandPrefix).stream()"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"                .sorted(Comparator.comparingInt(String::length))"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"                .collect(Collectors.toList());"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"     * Returns the the next missing prefix parameter of the {@code inputText}"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"     * or an empty string if there is no next prefix"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"    public String getAutoCompleteNextMissingParameter(String inputText) {"},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(inputText);"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"        if (inputText.isEmpty()) {"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"            return EMPTY_STRING;"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"        String command \u003d inputText.split(\" \")[0];"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"        ArrayList\u003cPrefix\u003e missingPrefixes \u003d commandParameterSyntaxHandler.getMissingPrefixes(command, inputText);"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"        if (!missingPrefixes.isEmpty()) {"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"            return missingPrefixes.get(0).getPrefix();"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"            return EMPTY_STRING;"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":122,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":108,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAppointmentToPetCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddPetCommand;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddVetTechToAppointmentCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeletePetCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.logic.commands.ListAllCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemoveAppointmentFromPetCommand;"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.RemoveVetTechFromAppointmentCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RescheduleCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ScheduleCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortAppointmentCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortClientCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortPetCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UnscheduleCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"            return new ListCommandParser().parse(arguments);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case ScheduleCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return new ScheduleCommandParser().parse(arguments);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case RescheduleCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return new RescheduleCommandParser().parse(arguments);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case UnscheduleCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return new UnscheduleCommandParser().parse(arguments);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        case AddPetCommand.COMMAND_WORD:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return new AddPetCommandParser().parse(arguments);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        case DeletePetCommand.COMMAND_WORD:"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        case DeletePetCommand.COMMAND_ALIAS:"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            return new DeletePetCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        case SortClientCommand.COMMAND_WORD:"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            return new SortClientCommand();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        case SortPetCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            return new SortPetCommand();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        case SortAppointmentCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return new SortAppointmentCommand();"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        case AddAppointmentToPetCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return new AddAppointmentToPetCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        case RemoveAppointmentFromPetCommand.COMMAND_WORD:"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return new RemoveAppointmentFromPetParser().parse(arguments);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"        case AddVetTechToAppointmentCommand.COMMAND_WORD:"},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":"            return new AddVetTechToAppointmentCommandParser().parse(arguments);"},{"lineNumber":135,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":136,"author":{"gitID":"jonathanwj"},"content":"        case RemoveVetTechFromAppointmentCommand.COMMAND_WORD:"},{"lineNumber":137,"author":{"gitID":"jonathanwj"},"content":"            return new RemoveVetTechFromAppointmentCommandParser().parse(arguments);"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":139,"author":{"gitID":"purplepers0n"},"content":"        case ListAllCommand.COMMAND_WORD:"},{"lineNumber":140,"author":{"gitID":"purplepers0n"},"content":"            return new ListAllCommandParser().parse(arguments);"},{"lineNumber":141,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":8,"purplepers0n":5,"-":134}},{"path":"src/main/java/seedu/address/logic/parser/RemoveVetTechFromAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.RemoveVetTechFromAppointmentCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"content":"//@@author jonathanwj-reused"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":" * Parses input arguments and creates a new RemoveVetTechFromAppointmentCommand object"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"public class RemoveVetTechFromAppointmentCommandParser implements Parser\u003cRemoveVetTechFromAppointmentCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"     * Parses the given {@code String} of arguments in the context of RemoveVetTechFromAppointmentCommand"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"     * returns RemoveVetTechFromAppointmentCommand object for execution"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if user input does not conform to expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    public RemoveVetTechFromAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"            return new RemoveVetTechFromAppointmentCommand(index);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveVetTechFromAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":17,"null":1,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentToPetCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_INDEX;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_INDEX;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAppointmentToPetCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":" * Parses the input arguments and creates a new AddAppointmentToPet object."},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"public class AddAppointmentToPetCommandParser implements Parser\u003cAddAppointmentToPetCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"     * Parses the given {@code String} of arguments in the context of the AddAppointmentToPetCommand"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"     * returns the specified object for execution."},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"     * @throws ParseException if the user does not conform to expected format."},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"    public AddAppointmentToPetCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"        ArgumentMultimap argMultiMap \u003d"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_APPOINTMENT_INDEX, PREFIX_PET_INDEX);"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        Index appointmentIndex;"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        Index petIndex;"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"        if (!arePrefixesPresent(argMultiMap, PREFIX_APPOINTMENT_INDEX, PREFIX_PET_INDEX)) {"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"                    AddAppointmentToPetCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"            appointmentIndex \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_APPOINTMENT_INDEX).get());"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"            petIndex \u003d ParserUtil.parseIndex(argMultiMap.getValue(PREFIX_PET_INDEX).get());"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"                    AddAppointmentToPetCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"        return new AddAppointmentToPetCommand(appointmentIndex, petIndex);"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"     * Returns true if the prefixes contain the values"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"-":11,"md-azsa":41}},{"path":"src/main/java/seedu/address/logic/autocomplete/CommandParameterSyntaxHandler.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.logic.autocomplete;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_INDEX;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_AGE;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_GENDER;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_INDEX;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_NAME;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VETTECH_INDEX;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"import java.util.ArrayList;"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"import java.util.Arrays;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddAppointmentToPetCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddPetCommand;"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddVetTechToAppointmentCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemoveAppointmentFromPetCommand;"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.RescheduleCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ScheduleCommand;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.parser.Prefix;"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"//@@author jonathanwj"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":" * Contains Command syntax definitions for multiple commands"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"public class CommandParameterSyntaxHandler {"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"    public static final ArrayList\u003cPrefix\u003e ADD_COMMAND_PREFIXES \u003d getListOfPrefix(PREFIX_PERSON_ROLE,"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"            PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    public static final ArrayList\u003cPrefix\u003e ADD_PET_COMMAND_PREFIXES \u003d getListOfPrefix(PREFIX_CLIENT_INDEX,"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"            PREFIX_PET_NAME, PREFIX_PET_AGE, PREFIX_PET_GENDER, PREFIX_TAG);"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"    public static final ArrayList\u003cPrefix\u003e EDIT_COMMAND_PREFIXES \u003d getListOfPrefix(PREFIX_PERSON_ROLE,"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"            PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    public static final ArrayList\u003cPrefix\u003e ADD_APPT_TO_PET_COMMAND_PREFIXES \u003d getListOfPrefix(PREFIX_APPOINTMENT_INDEX,"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"            PREFIX_PET_INDEX);"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"    public static final ArrayList\u003cPrefix\u003e"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"            REMOVE_APPT_FROM_PET_COMMAND_PREFIXES \u003d getListOfPrefix(PREFIX_APPOINTMENT_INDEX);"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"    public static final ArrayList\u003cPrefix\u003e SCHEDULE_COMMAND_PREFIXES \u003d getListOfPrefix(PREFIX_DATE, PREFIX_TIME,"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"            PREFIX_DURATION, PREFIX_DESCRIPTION);"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    public static final ArrayList\u003cPrefix\u003e ADD_VET_TECH_TO_APPT_COMMAND_PREFIXES \u003d getListOfPrefix(PREFIX_VETTECH_INDEX,"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"            PREFIX_APPOINTMENT_INDEX);"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"    public static final ArrayList\u003cPrefix\u003e RESCHEDULE_COMMAND_PREFIXES \u003d getListOfPrefix(PREFIX_DATE,"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"            PREFIX_TIME, PREFIX_DURATION, PREFIX_DESCRIPTION);"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"     * Returns ArrayList of prefixes from given prefixes"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"    private static ArrayList\u003cPrefix\u003e getListOfPrefix(Prefix... prefixes) {"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(prefixes));"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"     * Returns ArrayList of missing prefixes based on a String command and current user text input"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"    public ArrayList\u003cPrefix\u003e getMissingPrefixes(String command, String input) {"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"        ArrayList\u003cPrefix\u003e missingPrefixes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"        switch (command) {"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"            ADD_COMMAND_PREFIXES.forEach(prefix -\u003e {"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"                if (!input.contains(prefix.getPrefix())) {"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"                    missingPrefixes.add(prefix);"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"            EDIT_COMMAND_PREFIXES.forEach(prefix -\u003e {"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"                if (!input.contains(prefix.getPrefix())) {"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"                    missingPrefixes.add(prefix);"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"        case ScheduleCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"            SCHEDULE_COMMAND_PREFIXES.forEach(prefix -\u003e {"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"                if (!input.contains(prefix.getPrefix())) {"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"                    missingPrefixes.add(prefix);"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        case AddPetCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"            ADD_PET_COMMAND_PREFIXES.forEach(prefix -\u003e {"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"                if (!input.contains(prefix.getPrefix())) {"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"                    missingPrefixes.add(prefix);"},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"        case AddAppointmentToPetCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"            ADD_APPT_TO_PET_COMMAND_PREFIXES.forEach(prefix -\u003e {"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"                if (!input.contains(prefix.getPrefix())) {"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"                    missingPrefixes.add(prefix);"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"        case RemoveAppointmentFromPetCommand.COMMAND_WORD:"},{"lineNumber":122,"author":{"gitID":"jonathanwj"},"content":"            REMOVE_APPT_FROM_PET_COMMAND_PREFIXES.forEach(prefix -\u003e {"},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"                if (!input.contains(prefix.getPrefix())) {"},{"lineNumber":124,"author":{"gitID":"jonathanwj"},"content":"                    missingPrefixes.add(prefix);"},{"lineNumber":125,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":126,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":127,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":"        case AddVetTechToAppointmentCommand.COMMAND_WORD:"},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"            ADD_VET_TECH_TO_APPT_COMMAND_PREFIXES.forEach(prefix -\u003e {"},{"lineNumber":131,"author":{"gitID":"jonathanwj"},"content":"                if (!input.contains(prefix.getPrefix())) {"},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":"                    missingPrefixes.add(prefix);"},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":134,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":135,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":136,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":137,"author":{"gitID":"jonathanwj"},"content":"        case RescheduleCommand.COMMAND_WORD:"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"            RESCHEDULE_COMMAND_PREFIXES.forEach(prefix -\u003e {"},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":"                if (!input.contains(prefix.getPrefix())) {"},{"lineNumber":140,"author":{"gitID":"jonathanwj"},"content":"                    missingPrefixes.add(prefix);"},{"lineNumber":141,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":"        default:"},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"            break;"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":149,"author":{"gitID":"jonathanwj"},"content":"        return missingPrefixes;"},{"lineNumber":150,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":130,"-":21}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"    public static final Prefix PREFIX_PERSON_ROLE \u003d new Prefix(\"r/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"da/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TIME \u003d new Prefix(\"tm/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"du/\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PET_NAME \u003d new Prefix(\"pn/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PET_AGE \u003d new Prefix(\"pa/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PET_GENDER \u003d new Prefix(\"pg/\");"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    public static final Prefix PREFIX_PET_INDEX \u003d new Prefix(\"p/\");"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    public static final Prefix PREFIX_CLIENT_INDEX \u003d new Prefix(\"c/\");"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    public static final Prefix PREFIX_VETTECH_INDEX \u003d new Prefix(\"vt/\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_APPOINTMENT_INDEX \u003d new Prefix(\"appt/\");"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":4,"-":23}},{"path":"src/main/java/seedu/address/logic/parser/AddVetTechToAppointmentCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_INDEX;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VETTECH_INDEX;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.commands.AddVetTechToAppointmentCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"content":"//@@author jonathanwj-reused"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":" * Parses input arguments and creates a new AddVetTechToAppointmentCommand object"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"public class AddVetTechToAppointmentCommandParser implements Parser\u003cAddVetTechToAppointmentCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"     * Parses the given {@code String} of arguments in the context of the AddVetTechToAppointmentCommand"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"     * and returns an AddVetTechToAppointmentCommand object for execution."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"    public AddVetTechToAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_VETTECH_INDEX, PREFIX_APPOINTMENT_INDEX);"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"        Index indexVetTech;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"        Index indexAppointment;"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_VETTECH_INDEX, PREFIX_APPOINTMENT_INDEX)) {"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"                    AddVetTechToAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"            indexVetTech \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_VETTECH_INDEX).get());"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"            indexAppointment \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_APPOINTMENT_INDEX).get());"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"                    AddVetTechToAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        return new AddVetTechToAppointmentCommand(indexVetTech, indexAppointment);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":34,"null":1,"-":23}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Description;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Duration;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Time;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetAge;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetGender;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetName;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_INVALID_TYPE \u003d \"Type is not \u0027client\u0027, \u0027pet\u0027 or \u0027vettech.\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":124,"author":{"gitID":"jonathanwj"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":155,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"jonathanwj"},"content":"     * Parses a {@code String role} into an {@code PersonRole} enum type."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":180,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":181,"author":{"gitID":"jonathanwj"},"content":"     * @throws IllegalValueException if the given {@code role} is invalid."},{"lineNumber":182,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"jonathanwj"},"content":"    public static PersonRole parseRole(String role) throws IllegalValueException {"},{"lineNumber":184,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(role);"},{"lineNumber":185,"author":{"gitID":"jonathanwj"},"content":"        String trimmedRole \u003d role.trim();"},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":"        if (!PersonRole.isValidPersonRole(trimmedRole)) {"},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"            throw new IllegalValueException(PersonRole.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":"        return new PersonRole(trimmedRole);"},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":"     * Parses a {@code Optional\u003cString\u003e role} into an {@code Optional\u003cPersonRole\u003e} if {@code role} is present."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"jonathanwj"},"content":"    public static Optional\u003cPersonRole\u003e parseRole(Optional\u003cString\u003e role) throws IllegalValueException {"},{"lineNumber":197,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(role);"},{"lineNumber":198,"author":{"gitID":"jonathanwj"},"content":"        return role.isPresent()"},{"lineNumber":199,"author":{"gitID":"jonathanwj"},"content":"                ? Optional.of(parseRole(role.get()))"},{"lineNumber":200,"author":{"gitID":"jonathanwj"},"content":"                : Optional.empty();"},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"content":"    //@@author Godxin-functional"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * Parses a {@code String date} into a {@code Date}."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code date} is invalid."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public static Date parseDate(String date) throws IllegalValueException {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        requireNonNull(date);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        if (!Date.isValidDate(trimmedDate)) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"Godxin"},"content":"        if (!Date.isValidYear(Date.getYear(trimmedDate))) {"},{"lineNumber":217,"author":{"gitID":"Godxin"},"content":"            throw new IllegalValueException(Date.MESSAGE_YEAR_CONSTRAINTS);"},{"lineNumber":218,"author":{"gitID":"Godxin"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        if (!Date.isValidDaysInMonth(trimmedDate)) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Date.MESSAGE_DAYINMONTH_CONSTRAINTS);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        return new Date(trimmedDate);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cDate\u003e} if {@code date} is present."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public static Optional\u003cDate\u003e parseDate(Optional\u003cString\u003e date) throws IllegalValueException {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        requireNonNull(date);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Parses a {@code String time} into a {@code Time}."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code time} is invalid."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public static Time parseTime(String time) throws IllegalValueException {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        requireNonNull(time);"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        String trimmedTime \u003d time.trim();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        if (!Time.isValidTime(trimmedTime)) {"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        return new Time(trimmedTime);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e time} into an {@code Optional\u003cTime\u003e} if {@code time} is present."},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":252,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    public static Optional\u003cTime\u003e parseTime(Optional\u003cString\u003e time) throws IllegalValueException {"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        requireNonNull(time);"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        return time.isPresent() ? Optional.of(parseTime(time.get())) : Optional.empty();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * Parses a {@code String duration} into a {@code Duration}."},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":261,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code duration} is invalid."},{"lineNumber":263,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    public static Duration parseDuration(String duration) throws IllegalValueException {"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        requireNonNull(duration);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        String trimmedDuration \u003d duration.trim();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        if (!Duration.isValidDuration(trimmedDuration)) {"},{"lineNumber":268,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Duration.MESSAGE_DURATION_CONSTRAINTS);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        return new Duration(trimmedDuration);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e duration} into an {@code Optional\u003cDuration\u003e} if {@code duration} is present."},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":276,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    public static Optional\u003cDuration\u003e parseDuration(Optional\u003cString\u003e duration) throws IllegalValueException {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        requireNonNull(duration);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        return duration.isPresent() ? Optional.of(parseDuration(duration.get())) : Optional.empty();"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Parses a {@code String description} into a {@code Description}"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * leading and trailing whitespaces will be trimmed."},{"lineNumber":285,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    public static Description parseDescription(String description) throws IllegalValueException {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        requireNonNull(description);"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        return new Description(description.trim());"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":292,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e description} into an {@code Optional\u003cDescription\u003e}"},{"lineNumber":293,"author":{"gitID":"-"},"content":"     * if {@code description} is present."},{"lineNumber":294,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":295,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":296,"author":{"gitID":"-"},"content":"    public static Optional\u003cDescription\u003e parseDescription(Optional\u003cString\u003e description) throws IllegalValueException {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        requireNonNull(description);"},{"lineNumber":298,"author":{"gitID":"-"},"content":"        return description.isPresent() ? Optional.of(parseDescription(description.get())) : Optional.empty();"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":300,"content":"    //@@author"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * Parses a {@code String petName} into {@code PetName}."},{"lineNumber":304,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":305,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code petName} is invalid."},{"lineNumber":307,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    public static PetName parsePetName(String petName) throws IllegalValueException {"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        requireNonNull(petName);"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        String trimmedPetName \u003d petName.trim();"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        if (!PetName.isValidPetName(trimmedPetName)) {"},{"lineNumber":312,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(PetName.MESSAGE_PETNAME_CONSTRAINTS);"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        return new PetName(trimmedPetName);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":""},{"lineNumber":318,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":319,"author":{"gitID":"-"},"content":"     * Parses {@code String petAge} into {@code PetAge}."},{"lineNumber":320,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":321,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    public static PetAge parsePetAge(String petAge) throws IllegalValueException {"},{"lineNumber":323,"author":{"gitID":"-"},"content":"        requireNonNull(petAge);"},{"lineNumber":324,"author":{"gitID":"-"},"content":"        String trimmedPetAge \u003d petAge.trim();"},{"lineNumber":325,"author":{"gitID":"-"},"content":"        if (!PetAge.isValidPetAge(trimmedPetAge)) {"},{"lineNumber":326,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(PetAge.MESSAGE_PETAGE_CONSTRAINTS);"},{"lineNumber":327,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":328,"author":{"gitID":"-"},"content":"        return new PetAge(trimmedPetAge);"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":332,"author":{"gitID":"-"},"content":"     * Parses {@code String petGender} into {@code PetGender}."},{"lineNumber":333,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":334,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":335,"author":{"gitID":"-"},"content":"    public static PetGender parsePetGender(String petGender) throws IllegalValueException {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        requireNonNull(petGender);"},{"lineNumber":337,"author":{"gitID":"-"},"content":"        String trimmedPetGender \u003d petGender.trim();"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        if (!PetGender.isValidGender(trimmedPetGender)) {"},{"lineNumber":339,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(PetGender.MESSAGE_PETGENDER_CONSTRAINTS);"},{"lineNumber":340,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        return new PetGender(trimmedPetGender);"},{"lineNumber":342,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":345,"author":{"gitID":"purplepers0n"},"content":"     * Parses {@code valueType} into a {@code String} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":346,"author":{"gitID":"purplepers0n"},"content":"     * trimmed."},{"lineNumber":347,"author":{"gitID":"purplepers0n"},"content":"     * @throws IllegalValueException if the specified type is invalid (not \u0027client\u0027, \u0027pet\u0027 or \u0027vettech\u0027)."},{"lineNumber":348,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":349,"author":{"gitID":"purplepers0n"},"content":"    public static String parseType(String valueType) throws IllegalValueException {"},{"lineNumber":350,"author":{"gitID":"purplepers0n"},"content":"        String trimmedValue \u003d valueType.trim();"},{"lineNumber":351,"author":{"gitID":"purplepers0n"},"content":"        if (!trimmedValue.matches(\"pet\") \u0026\u0026 !trimmedValue.matches(\"client\") \u0026\u0026 !trimmedValue.matches(\"vettech\")) {"},{"lineNumber":352,"author":{"gitID":"purplepers0n"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_TYPE);"},{"lineNumber":353,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":354,"author":{"gitID":"purplepers0n"},"content":"        return trimmedValue;"},{"lineNumber":355,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":356,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":27,"null":2,"purplepers0n":14,"-":310,"Godxin":3}},{"path":"src/main/java/seedu/address/logic/parser/ListCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":" * Parses input arguments and creates a new ListCommand object"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"public class ListCommandParser implements Parser\u003cListCommand\u003e {"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"     * Parses the given {@code String} of arguments in the context of the ListCommand"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"     * and returns a ListCommand object for execution."},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    public ListCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"            String type \u003d ParserUtil.parseType(args);"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"            return new ListCommand(type);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"purplepers0n":16,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_PERSON_ROLE, PREFIX_NAME,"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"            ParserUtil.parseRole(argMultimap.getValue(PREFIX_PERSON_ROLE)).ifPresent(editPersonDescriptor::setRole);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":4,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/ListAllCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.logic.commands.ListAllCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"content":"//@@author purplepers0n-reused"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":" * Parses the input arguments and creates a new ListAllCommand object."},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":"public class ListAllCommandParser implements Parser\u003cListAllCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"     * Parses the given {@code String} of arguments in the context of the ListAllCommand"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"     * returns the specified object for execution."},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user does not conform to expected format."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"    public ListAllCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"            return new ListAllCommand(index);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListAllCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"null":1,"purplepers0n":17,"-":12}},{"path":"src/main/java/seedu/address/logic/parser/AddPetCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_AGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_GENDER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddPetCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetAge;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetGender;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetName;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":" * Parses the input arguments and create a new AddPetCommand object."},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"public class AddPetCommandParser implements Parser\u003cAddPetCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPetCommand"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"     * and returns an AddPetCommand object for execution."},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"     * @throws ParseException if the user input does not conform to the expected format."},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"    public AddPetCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_CLIENT_INDEX,"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"                        PREFIX_PET_NAME, PREFIX_PET_AGE, PREFIX_PET_GENDER, PREFIX_TAG);"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"        Index indexClient;"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_CLIENT_INDEX, PREFIX_PET_NAME, PREFIX_PET_AGE,"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"                PREFIX_PET_GENDER, PREFIX_TAG)"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPetCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"            indexClient \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CLIENT_INDEX).get());"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"            PetName petName \u003d ParserUtil.parsePetName(argMultimap.getValue(PREFIX_PET_NAME).get());"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"            PetAge petAge \u003d ParserUtil.parsePetAge(argMultimap.getValue(PREFIX_PET_AGE).get());"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"            PetGender petGender \u003d ParserUtil.parsePetGender(argMultimap.getValue(PREFIX_PET_GENDER).get());"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"            Pet pet \u003d new Pet(petName, petAge, petGender, tagList);"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"            return new AddPetCommand(pet, indexClient);"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"     * Returns true if none of the prefixes contains empty values in the argument."},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":2,"-":20,"md-azsa":47}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"del\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \": Deletes the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    private int currList \u003d 0; //default is on client list upon opening app"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"    public void setCurrentList() {"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"        this.currList \u003d model.getCurrentList();"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"        List\u003c? extends Person\u003e lastShownList;"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"        setCurrentList();"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        if (currList \u003d\u003d 0) {"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredClientList();"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"        } else if (currList \u003d\u003d 2) {"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredVetTechnicianList();"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"            throw new CommandException(\"Not currently on a list that \u0027delete\u0027 command can change\");"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":16,"-":67}},{"path":"src/main/java/seedu/address/logic/parser/UnscheduleCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":4,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":5,"author":{"gitID":"md-azsa"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":7,"author":{"gitID":"md-azsa"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"md-azsa"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"md-azsa"},"content":"import seedu.address.logic.commands.UnscheduleCommand;"},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":" * Parses input arguments and creates a new UnscheduleCommand object."},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"public class UnscheduleCommandParser implements Parser\u003cUnscheduleCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"     * Parses the given {@code String} of arguments in the context"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"     * of UnscheduleCOmmand"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"     * returns UnscheduleCommand object for execution"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"     * @throws ParseException if user input does not conform to expected format"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"    public UnscheduleCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"            return new UnscheduleCommand(index);"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"            throw new ParseException("},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnscheduleCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":2,"md-azsa":32}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSOCIATION;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.ChangeListTabEvent;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIAS \u003d \"ls\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"            + \": Lists the specified type\\n\""},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"            + \"Parameters: TYPE (must be either client, pet or vettech)\\n\""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"            + \"Example: \" + COMMAND_WORD + \" pet\";"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all %1$s\" + \"s\";"},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    private final String targetType;"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    public ListCommand(String targetType) {"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"        this.targetType \u003d targetType;"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    //@@author purplepers0n"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"        switch (targetType) {"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"        case \"client\":"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"            EventsCenter.getInstance().post(new ChangeListTabEvent(0));"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"            break;"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"        case \"pet\":"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredClientOwnPetAssocation(PREDICATE_SHOW_ALL_ASSOCIATION);"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"            EventsCenter.getInstance().post(new ChangeListTabEvent(1));"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"            break;"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        case \"vettech\":"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"            EventsCenter.getInstance().post(new ChangeListTabEvent(2));"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"            break;"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        default:"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, targetType));"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"purplepers0n":45,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/RemoveAppointmentFromPetParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemoveAppointmentFromPetCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":" * Parses input arguments and creates a new RemoveAppointmentFromPet object"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"public class RemoveAppointmentFromPetParser implements"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"        Parser\u003cRemoveAppointmentFromPetCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"    public RemoveAppointmentFromPetCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(args);"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_APPOINTMENT_INDEX);"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"        Index appointmentIndex;"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_APPOINTMENT_INDEX)) {"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"                    RemoveAppointmentFromPetCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"            appointmentIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_APPOINTMENT_INDEX).get());"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"        } catch (IllegalValueException ie) {"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"                    RemoveAppointmentFromPetCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"        return new RemoveAppointmentFromPetCommand(appointmentIndex);"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"     * Returns true if none of the prefixes contains empty"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":13,"md-azsa":36}},{"path":"src/main/java/seedu/address/logic/commands/SortClientCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonsListIsEmptyException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":8,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"md-azsa"},"content":" * Sorts the client list"},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"public class SortClientCommand extends UndoableCommand {"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"    public static final String COMMAND_WORD \u003d \"sortc\";"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Client list sorted\";"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"            model.sortClientList();"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"        } catch (PersonsListIsEmptyException e) {"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_PERSONSLIST_EMPTY);"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":6,"md-azsa":21}},{"path":"src/main/java/seedu/address/logic/commands/SortPetCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationListEmptyException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":8,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"md-azsa"},"content":" * Sorts the pet list."},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"public class SortPetCommand extends UndoableCommand {"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"    public static final String COMMAND_WORD \u003d \"sortp\";"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Pet list successfully sorted\";"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"            model.sortPetList();"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"        } catch (ClientPetAssociationListEmptyException e) {"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_CLIENTPETLIST_EMPTY);"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":6,"md-azsa":19}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of pets."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    public static String getMessageForPetListShownSummary(int displaySize) {"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"        return String.format(Messages.MESSAGE_PETS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":6,"-":47}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_PERSON_ROLE + \"ROLE \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_PERSON_ROLE + \"client \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"purplepers0n":4,"-":69}},{"path":"src/main/java/seedu/address/logic/commands/AddPetCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLIENT_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_AGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_GENDER;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ASSOCIATION;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PETS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":" * Adds support for adding a pet into the program."},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"public class AddPetCommand extends UndoableCommand {"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    public static final String COMMAND_WORD \u003d \"addp\";"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a pet to a specified client. \""},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"            + \"Parameters: \""},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_CLIENT_INDEX + \"CLIENT INDEX \""},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_PET_NAME + \"PET NAME \""},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_PET_AGE + \"PET AGE \""},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_PET_GENDER + \"PET GENDER \""},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_TAG + \"TAG...\\n\""},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_CLIENT_INDEX + \"1 \""},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_PET_NAME + \"Garfield \""},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_PET_AGE + \"5 \""},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_PET_GENDER + \"M \""},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_TAG + \"cat \""},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_TAG + \"tabby \";"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New pet added: %1$s\";"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_DUPLICATE_PET \u003d \"This pet already exists in the address book\";"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_CLIENT_HAS_PET \u003d \"Client already has pet\";"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_PET_HAS_OWNER \u003d \"Pet already has an owner\";"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"    private final Pet petToAdd;"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"    private final Index clientIndex;"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"    private Optional\u003cClient\u003e client;"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"     * Creates a AddPetCommand to add the specified {@code pet}"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"    public AddPetCommand(Pet pet, Index clientIndex) {"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(pet);"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        this.clientIndex \u003d clientIndex;"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"        this.petToAdd \u003d pet;"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(model);"},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"            model.addPet(petToAdd);"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":"            model.addPetToClient(petToAdd, client.get());"},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"            model.updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":"            model.updateFilteredClientOwnPetAssocation(PREDICATE_SHOW_ALL_ASSOCIATION);"},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":"        } catch (DuplicatePetException e) {"},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PET);"},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":"        } catch (ClientAlreadyOwnsPetException e) {"},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(MESSAGE_CLIENT_HAS_PET);"},{"lineNumber":79,"author":{"gitID":"md-azsa"},"content":"        } catch (PetAlreadyHasOwnerException e) {"},{"lineNumber":80,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(MESSAGE_PET_HAS_OWNER);"},{"lineNumber":81,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":83,"author":{"gitID":"md-azsa"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, petToAdd));"},{"lineNumber":84,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":86,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"md-azsa"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":88,"author":{"gitID":"md-azsa"},"content":"        List\u003cClient\u003e lastShownListClient \u003d model.getFilteredClientList();"},{"lineNumber":89,"author":{"gitID":"md-azsa"},"content":"        if (clientIndex.getZeroBased() \u003e\u003d lastShownListClient.size()) {"},{"lineNumber":90,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"md-azsa"},"content":"        client \u003d Optional.of(lastShownListClient.get(clientIndex.getZeroBased()));"},{"lineNumber":93,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":95,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"md-azsa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":97,"author":{"gitID":"md-azsa"},"content":"        return other \u003d\u003d this"},{"lineNumber":98,"author":{"gitID":"md-azsa"},"content":"                || (other instanceof AddPetCommand"},{"lineNumber":99,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 petToAdd.equals(((AddPetCommand) other).petToAdd));"},{"lineNumber":100,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":102,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":8,"-":15,"md-azsa":79}},{"path":"src/main/java/seedu/address/logic/commands/ListAllCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":3,"author":{"gitID":"purplepers0n"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitID":"purplepers0n"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.NewListAllDisplayAvailableEvent;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"//@@author purplepers0n"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":" * Lists all details of a client, pet, technician or appointment in the address book."},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"public class ListAllCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"    public static final String COMMAND_WORD \u003d \"listall\";"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"            + \": Lists all associated details of the specified index of the specified type\\n\""},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"            + \"Parameters: INDEX\\n\""},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all details of client %1$s\";"},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"    private final Index targetIndex;"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    private Client displayClient;"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"    private ObservableList\u003cPet\u003e displayPet \u003d FXCollections.observableArrayList();"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    private ObservableList\u003cAppointment\u003e displayAppt \u003d FXCollections.observableArrayList();"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"    public ListAllCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d model.getFilteredClientList().size()) {"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"        displayClient \u003d model.getFilteredClientList().get(targetIndex.getZeroBased());"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"        setPets(displayClient);"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"        setAppts(displayPet);"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        model.updateDetailsList(displayClient, displayPet, displayAppt);"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        EventsCenter.getInstance().post(new NewListAllDisplayAvailableEvent(displayClient.getName().fullName));"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, displayClient.getName().fullName));"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    private void setPets(Client client) {"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cClientOwnPet\u003e clientOwnPets \u003d model.getFilteredClientPetAssociationList();"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"        for (ClientOwnPet clientOwnPet : clientOwnPets) {"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"            if (clientOwnPet.getClient().equals(client)) {"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"                Pet currPet \u003d clientOwnPet.getPet();"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"                displayPet.add(currPet);"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"    private void setAppts(ObservableList\u003cPet\u003e pets) {"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        ObservableList\u003cAppointment\u003e appointmentList \u003d model.getFilteredAppointmentList();"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"        for (Pet clientOwnPet : displayPet) {"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"            for (Appointment currAppt : appointmentList) {"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"                if (currAppt.getClientOwnPet() \u003d\u003d null) {"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"                    continue;"},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"                }"},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":"                if (currAppt.getClientOwnPet().getPet().equals(clientOwnPet)) {"},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"                    displayAppt.add(currAppt);"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"                }"},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"            }"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"jonathanwj":2,"purplepers0n":77,"-":1}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentToPetCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_INDEX;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PET_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PETS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentHasBeenTakenException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasAppointmentException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":" * Adds an appointment to the pet object."},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"public class AddAppointmentToPetCommand extends UndoableCommand {"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    public static final String COMMAND_WORD \u003d \"addappttopet\";"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to a pet \""},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"            + \"by the index number used in the last pet and last appointment listing.\\n\""},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"            + \"Parameters: \""},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_APPOINTMENT_INDEX + \"APPOINTMENT_INDEX \""},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_PET_INDEX + \"PET_INDEX\\n\""},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_APPOINTMENT_INDEX + \"1 \""},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_PET_INDEX + \"2\";"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_ADD_APPOINTMENT_TO_PET_SUCCESS \u003d \"Added Appointment to Pet:\\n%1$s\\n\u003e\u003e %2$s\";"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_PET_HAS_APPOINTMENT \u003d \"Pet already has an appointment.\";"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_PET_DOES_NOT_HAVE_OWNER \u003d \"This pet does not have an owner yet!\";"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"    private final Index appointmentIndex;"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"    private final Index petIndex;"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"    private Optional\u003cAppointment\u003e appointment;"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"    private Optional\u003cPet\u003e pet;"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"     * @parem appointmentIndex of the appointment in the filtered appointment list to add"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"     * @param petIndex of the pet in the filtered pet list to add to."},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"    public AddAppointmentToPetCommand(Index appointmentIndex, Index petIndex) {"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"        requireAllNonNull(appointmentIndex, petIndex);"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"        this.appointmentIndex \u003d appointmentIndex;"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"        this.petIndex \u003d petIndex;"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"        appointment \u003d Optional.empty();"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"        pet \u003d Optional.empty();"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"        requireAllNonNull(model, pet.get(), appointment.get());"},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"            model.addAppointmentToPet(appointment.get(), pet.get());"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":"        } catch (PetAlreadyHasAppointmentException e) {"},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(MESSAGE_PET_HAS_APPOINTMENT);"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"        } catch (ClientPetAssociationNotFoundException e) {"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(MESSAGE_PET_DOES_NOT_HAVE_OWNER);"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(ScheduleCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":"        } catch (AppointmentNotFoundException e) {"},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":"        } catch (AppointmentHasBeenTakenException e) {"},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_APPOINTMENT_TAKEN);"},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"md-azsa"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_APPOINTMENT_TO_PET_SUCCESS, appointment.get(), pet.get()));"},{"lineNumber":80,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":82,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"md-azsa"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"md-azsa"},"content":"        List\u003cAppointment\u003e lastShownAppointmentList \u003d model.getFilteredAppointmentList();"},{"lineNumber":85,"author":{"gitID":"md-azsa"},"content":"        List\u003cPet\u003e lastShownPetList \u003d model.getFilteredPetList();"},{"lineNumber":86,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":87,"author":{"gitID":"md-azsa"},"content":"        if (appointmentIndex.getZeroBased() \u003e\u003d lastShownAppointmentList.size()) {"},{"lineNumber":88,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":89,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"md-azsa"},"content":"        if (petIndex.getZeroBased() \u003e\u003d lastShownPetList.size()) {"},{"lineNumber":91,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PET_INDEX);"},{"lineNumber":92,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":94,"author":{"gitID":"md-azsa"},"content":"        appointment \u003d Optional.of(lastShownAppointmentList.get(appointmentIndex.getZeroBased()));"},{"lineNumber":95,"author":{"gitID":"md-azsa"},"content":"        pet \u003d Optional.of(lastShownPetList.get(petIndex.getZeroBased()));"},{"lineNumber":96,"author":{"gitID":"md-azsa"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENT);"},{"lineNumber":97,"author":{"gitID":"md-azsa"},"content":"        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"},{"lineNumber":98,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":100,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"md-azsa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"md-azsa"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":103,"author":{"gitID":"md-azsa"},"content":"            return true;"},{"lineNumber":104,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"md-azsa"},"content":"        if (!(other instanceof AddAppointmentToPetCommand)) {"},{"lineNumber":106,"author":{"gitID":"md-azsa"},"content":"            return false;"},{"lineNumber":107,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":109,"author":{"gitID":"md-azsa"},"content":"        AddAppointmentToPetCommand aatpc \u003d (AddAppointmentToPetCommand) other;"},{"lineNumber":110,"author":{"gitID":"md-azsa"},"content":"        return appointmentIndex.equals(aatpc.appointmentIndex)"},{"lineNumber":111,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 petIndex.equals(aatpc.petIndex)"},{"lineNumber":112,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 appointment.equals(aatpc.appointment)"},{"lineNumber":113,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 pet.equals(aatpc.pet);"},{"lineNumber":114,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":2,"-":20,"md-azsa":93}},{"path":"src/main/java/seedu/address/logic/commands/UnscheduleCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToNextException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToPreviousException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentListIsEmptyException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":" * Deletes an appointment identifiedusing it\u0027s last displayed index from the program."},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"public class UnscheduleCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"    public static final String COMMAND_WORD \u003d \"unschedule\";"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"            + \": Deletes the appointment identified by the index number used in the appointment listing.\\n\""},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_UNSCHEDULE_APPOINTMENT_SUCCESS \u003d"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"            \"Unscheduled appointment: %1$s\";"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"    private Appointment appointmentToDelete;"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"    public UnscheduleCommand (Index targetIndex) {"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(appointmentToDelete);"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"            model.unscheduleAppointment(appointmentToDelete);"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"        } catch (AppointmentNotFoundException e) {"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"            throw new AssertionError(\"The target cannot be missing.\");"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"        } catch (AppointmentListIsEmptyException e) {"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"            throw new AssertionError(\"Appointment cannot be missing\");"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"        } catch (AppointmentCloseToPreviousException ape) {"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"            throw new AssertionError(\"New appointment is too close to the previous one\");"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"        } catch (AppointmentCloseToNextException ape) {"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"            throw new AssertionError(\"New appointment is too close to the next one\");"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"        return new CommandResult(String.format(MESSAGE_UNSCHEDULE_APPOINTMENT_SUCCESS, appointmentToDelete));"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"        if (lastShownList.isEmpty()) {"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_APPOINTMENT_LIST_EMPTY);"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"        } else if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":"        appointmentToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"        return other \u003d\u003d this"},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":"                || (other instanceof UnscheduleCommand"},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 this.targetIndex.equals(((UnscheduleCommand) other).targetIndex)"},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 Objects.equals(this.appointmentToDelete, ((UnscheduleCommand) other).appointmentToDelete));"},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":16,"md-azsa":62}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENT;"},{"lineNumber":6,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PET;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.events.ui.NewApptAvailableEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        model.resetData(previousAddressBook);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PET);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENT);"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        EventsCenter.getInstance().post(new NewApptAvailableEvent(\"undo addressbook\"));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":65,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PET);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENT);"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"        EventsCenter.getInstance().post(new NewApptAvailableEvent(\"Redo addressbook\"));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":4,"purplepers0n":6,"-":71}},{"path":"src/main/java/seedu/address/logic/commands/ScheduleCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Time;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToNextException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToPreviousException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"content":"//@@author Godxin-functional"},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Schedule the date and time for an appointment as well as the duration of this appointment"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class ScheduleCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"schedule\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Schedule an appointment with \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"date, time, duration and description.  \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_TIME + \"TIME \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_DURATION + \"DURATION \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION\\n\""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_DATE + \"2018-05-01 \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_TIME + \"15:15 \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_DURATION + \"60 \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_DESCRIPTION + \"Sterilize Garfield\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment scheduled\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"The date and time are taken \";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_CLOSE_APPOINTMENT_PREVIOUS \u003d \"The new appointment is within the duration\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \" of the earlier appointment.\\n\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUGGESTION_TIME \u003d \"You may delay the appointment for: \";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_CLOSE_APPOINTMENT_NEXT \u003d \"The later appointment is within the duration \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"of the new appointment.\\n\";"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_CANNOT_SCHEDULE_AT_THIS_TIME \u003d \"The new appointment is within\""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"            + \" the duration of another appointment, you need at least 15 minutes for an appointment\\n\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUGGESTION_DURATION \u003d \"This appointment can last at most: \";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String MINUTE_SUFFIX \u003d \" minutes\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final int MINIMUM_INTERVAL \u003d 1440;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final int CORRECT_DURATION \u003d 120;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private final Appointment toAdd;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Creates an ScheduleCommand to add the specified {@code appointment}"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ScheduleCommand(Appointment appointment) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(appointment);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.toAdd \u003d appointment;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Returns an integer value of duration"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public int getSuggestedDelayDuration(ObservableList\u003cAppointment\u003e existingAppointmentList,"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                                              Appointment appointment) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Date newAppointmentDate \u003d appointment.getDate();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Time newAppointmentTime \u003d appointment.getTime();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        int min \u003d newAppointmentTime.getMinute();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int hour \u003d newAppointmentTime.getHour();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        int interval;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        int minInterval \u003d MINIMUM_INTERVAL;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        int correctDuration \u003d CORRECT_DURATION;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        for (Appointment earlierAppointment : existingAppointmentList) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            Date earlierAppointmentDate \u003d earlierAppointment.getDate();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            Time earlierAppointmentTime \u003d earlierAppointment.getTime();"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"            if (newAppointmentDate.equals(earlierAppointmentDate)) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                if (earlierAppointmentTime.getHour() \u003c hour"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                        || (earlierAppointmentTime.getHour() \u003d\u003d hour \u0026\u0026 earlierAppointmentTime.getMinute() \u003c min)) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                    interval \u003d appointment.calDurationDifferencePositive(earlierAppointment);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"                    if (interval \u003c minInterval) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                        minInterval \u003d interval;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                        correctDuration \u003d calInterval(earlierAppointment.getDuration().getDurationValue(), minInterval);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return correctDuration;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Returns an integer value of duration."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public int getSuggestedMaxDuration(ObservableList\u003cAppointment\u003e existingAppointmentList,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                                            Appointment appointment) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        Date newAppointmentDate \u003d appointment.getDate();"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Time newAppointmentTime \u003d appointment.getTime();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        int min \u003d newAppointmentTime.getMinute();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        int hour \u003d newAppointmentTime.getHour();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        int interval;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        int minInterval \u003d appointment.getDuration().getDurationValue();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        for (Appointment laterAppointment : existingAppointmentList) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            Date laterAppointmentDate \u003d laterAppointment.getDate();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            Time laterAppointmentTime \u003d laterAppointment.getTime();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"            if (newAppointmentDate.equals(laterAppointmentDate)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                if (laterAppointmentTime.getHour() \u003e hour"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                        || (laterAppointmentTime.getHour() \u003d\u003d hour \u0026\u0026 min \u003c laterAppointmentTime.getMinute())) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"                    interval \u003d appointment.calDurationDifferenceNegative(laterAppointment);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                    if (interval \u003c minInterval) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                        minInterval \u003d interval;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        return minInterval;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Return the interval between two given integer values"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public int calInterval(int first, int second) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return first - second;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            model.scheduleAppointment(toAdd);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        } catch (DuplicateAppointmentException e1) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        } catch (AppointmentCloseToPreviousException e2) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            int suggestedDelayDuration \u003d getSuggestedDelayDuration(model.getFilteredAppointmentList(), toAdd);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_CLOSE_APPOINTMENT_PREVIOUS + MESSAGE_SUGGESTION_TIME"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                    + Integer.toString(suggestedDelayDuration) + MINUTE_SUFFIX);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } catch (AppointmentCloseToNextException e3) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            int suggestedMaxDuration \u003d getSuggestedMaxDuration(model.getFilteredAppointmentList(), toAdd);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_CLOSE_APPOINTMENT_NEXT + MESSAGE_SUGGESTION_DURATION"},{"lineNumber":148,"author":{"gitID":"-"},"content":"                        + Integer.toString(suggestedMaxDuration) + MINUTE_SUFFIX);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":155,"author":{"gitID":"-"},"content":"                || (other instanceof ScheduleCommand // instanceof handles nulls"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((ScheduleCommand) other).toAdd));"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"jonathanwj":2,"purplepers0n":1,"-":155}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PERSON_ROLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientHasExistingAppointmentException;"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientHasExistingPetException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.TechnicianHasExistingAppointmentException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"            + \"[\" + PREFIX_PERSON_ROLE + \"ROLE] \""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":57,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":58,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":59,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"    private static final String MESSAGE_TECHNICIAN_HAS_APPOINTMENT \u003d \"Technician has existing appointment,\""},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"            + \" please remove appointment before changing role.\";"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"    private static final String MESSAGE_CLIENT_HAS_APPOINTMENT \u003d \"Client has existing appiontment,\""},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"            + \" please remove appointment before changing role\";"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"    private static final String MESSAGE_CLIENT_HAS_PET \u003d \"Client has existing pet,\""},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"            + \" please remove pet before changing role\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"    private int currList \u003d 0; //default is on client list upon opening app"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * @param index                of the person in the filtered person list to edit"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"purplepers0n"},"content":"    public void setCurrentList() {"},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"        this.currList \u003d model.getCurrentList();"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"        } catch (ClientHasExistingPetException e) {"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"            throw new CommandException(MESSAGE_CLIENT_HAS_PET);"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"        } catch (TechnicianHasExistingAppointmentException e) {"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"            throw new CommandException(MESSAGE_TECHNICIAN_HAS_APPOINTMENT);"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"        } catch (ClientHasExistingAppointmentException e) {"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"            throw new CommandException(MESSAGE_CLIENT_HAS_APPOINTMENT);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":110,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);"},{"lineNumber":111,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":112,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":118,"author":{"gitID":"purplepers0n"},"content":"        List\u003c? extends Person\u003e lastShownList;"},{"lineNumber":119,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":120,"author":{"gitID":"purplepers0n"},"content":"        setCurrentList();"},{"lineNumber":121,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":122,"author":{"gitID":"purplepers0n"},"content":"        if (currList \u003d\u003d 0) {"},{"lineNumber":123,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredClientList();"},{"lineNumber":124,"author":{"gitID":"purplepers0n"},"content":"        } else if (currList \u003d\u003d 2) {"},{"lineNumber":125,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredVetTechnicianList();"},{"lineNumber":126,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":127,"author":{"gitID":"purplepers0n"},"content":"            throw new CommandException(\"Not currently on a list that \u0027edit\u0027 command can change\");"},{"lineNumber":128,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":"        PersonRole updatedRole \u003d editPersonDescriptor.getRole().orElse(personToEdit.getRole());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"jonathanwj"},"content":"        if (updatedRole.equals(PersonRole.CLIENT_ROLE)) {"},{"lineNumber":153,"author":{"gitID":"jonathanwj"},"content":"            return new Client(updatedName, updatedPhone, updatedEmail,"},{"lineNumber":154,"author":{"gitID":"jonathanwj"},"content":"                    updatedAddress, updatedTags);"},{"lineNumber":155,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":156,"author":{"gitID":"jonathanwj"},"content":"            return new VetTechnician(updatedName, updatedPhone, updatedEmail,"},{"lineNumber":157,"author":{"gitID":"jonathanwj"},"content":"                    updatedAddress, updatedTags);"},{"lineNumber":158,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":178,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":"        private PersonRole role;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"purplepers0n"},"content":"        public EditPersonDescriptor() {"},{"lineNumber":194,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":198,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":199,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":201,"author":{"gitID":"jonathanwj"},"content":"            setRole(toCopy.role);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":210,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":211,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":213,"author":{"gitID":"jonathanwj"},"content":"            return CollectionUtil.isAnyNonNull(this.role, this.name, this.phone, this.email, this.address, this.tags);"},{"lineNumber":214,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":216,"author":{"gitID":"jonathanwj"},"content":"        public void setRole(PersonRole role) {"},{"lineNumber":217,"author":{"gitID":"jonathanwj"},"content":"            this.role \u003d role;"},{"lineNumber":218,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":220,"author":{"gitID":"jonathanwj"},"content":"        public Optional\u003cPersonRole\u003e getRole() {"},{"lineNumber":221,"author":{"gitID":"jonathanwj"},"content":"            return Optional.ofNullable(role);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":253,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":258,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":259,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":265,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":266,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":267,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":268,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":281,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":283,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":286,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":287,"author":{"gitID":"-"},"content":""},{"lineNumber":288,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":289,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":290,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":291,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":292,"author":{"gitID":"jonathanwj"},"content":"                    \u0026\u0026 getRole().equals(e.getRole())"},{"lineNumber":293,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":40,"purplepers0n":25,"-":232}},{"path":"src/main/java/seedu/address/logic/commands/SortAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentListIsEmptyException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":8,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"md-azsa"},"content":" * Sorts the appointment list."},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"public class SortAppointmentCommand extends  UndoableCommand {"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"    public static final String COMMAND_WORD \u003d \"sortappt\";"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Appointment list successfully sorted\";"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"            model.sortAppointmentList();"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"        } catch (AppointmentListIsEmptyException e) {"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_APPOINTMENT_LIST_EMPTY);"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":6,"md-azsa":19}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_ALIS \u003d \"sel\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_SELECT_PET_SUCCESS \u003d \"Selected Pet: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"    private int currList \u003d 0; //default is on client list upon opening app"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"    public void setCurrentList() {"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"        this.currList \u003d model.getCurrentList();"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"        List\u003c?\u003e lastShownList;"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"        setCurrentList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        if (currList \u003d\u003d 0) {"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredClientList();"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"        } else if (currList \u003d\u003d 1) {"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredPetList();"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        } else if (currList \u003d\u003d 2) {"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"            lastShownList \u003d model.getFilteredVetTechnicianList();"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"        } else {"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"            throw new CommandException(\"Not currently on a list that \u0027select\u0027 command can work\");"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex, currList));"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"        if (currList \u003d\u003d 1) {"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"            return new CommandResult(String.format(MESSAGE_SELECT_PET_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":22,"-":49}},{"path":"src/main/java/seedu/address/logic/commands/RemoveAppointmentFromPetCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.commons.events.ui.NewApptAvailableEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDoesNotHavePetException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":" * Removes the appointment from a pet"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"public class RemoveAppointmentFromPetCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"    public static final String COMMAND_WORD \u003d \"removeapptfrompet\";"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"            + \": Removes an appointment from a pet \""},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"            + \"by the index number used din the last appointment listing.\\n \""},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"            + \"Parameters: \""},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"            + PREFIX_APPOINTMENT_INDEX + \"APPOINTMENT_INDEX\\n\""},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_APPOINTMENT_INDEX + \"1\";"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_REMOVE_APPOINTMENT_SUCCESS \u003d \"Removed appointment from pet: %1$s\\n\";"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"    private final Index appointmentIndex;"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"    private Optional\u003cAppointment\u003e appointment;"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"     * @param appointmentIndex of the appointment in the filtered appointment list"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"    public RemoveAppointmentFromPetCommand(Index appointmentIndex) {"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(appointmentIndex);"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"        this.appointmentIndex \u003d appointmentIndex;"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"        appointment \u003d Optional.empty();"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"        requireAllNonNull(model, appointment.get());"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"            model.removeAppointmentFromPet(appointment.get());"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"            EventsCenter.getInstance().post(new NewApptAvailableEvent(appointment.toString()));"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"        } catch (AppointmentNotFoundException e) {"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(ScheduleCommand.MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"        } catch (AppointmentDoesNotHavePetException e) {"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_APPOINTMENT_NO_PET);"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"        return new CommandResult(String.format(MESSAGE_REMOVE_APPOINTMENT_SUCCESS, appointment.get()));"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"        List\u003cAppointment\u003e lastShownAppointmentList \u003d model.getFilteredAppointmentList();"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"        if (appointmentIndex.getZeroBased() \u003e\u003d lastShownAppointmentList.size()) {"},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":"        appointment \u003d Optional.of(lastShownAppointmentList.get(appointmentIndex.getZeroBased()));"},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENT);"},{"lineNumber":79,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":81,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"md-azsa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":83,"author":{"gitID":"md-azsa"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitID":"md-azsa"},"content":"            return true;"},{"lineNumber":85,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":87,"author":{"gitID":"md-azsa"},"content":"        if (!(other instanceof RemoveAppointmentFromPetCommand)) {"},{"lineNumber":88,"author":{"gitID":"md-azsa"},"content":"            return false;"},{"lineNumber":89,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":91,"author":{"gitID":"md-azsa"},"content":"        RemoveAppointmentFromPetCommand e \u003d (RemoveAppointmentFromPetCommand) other;"},{"lineNumber":92,"author":{"gitID":"md-azsa"},"content":"        return appointmentIndex.equals(e.appointmentIndex)"},{"lineNumber":93,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 appointment.equals(e.appointment);"},{"lineNumber":94,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":96,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":2,"-":18,"md-azsa":76}},{"path":"src/main/java/seedu/address/logic/commands/DeletePetCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":" * Deletes a pet identified using it\u0027s last displayed index from the program"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"public class DeletePetCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"    public static final String COMMAND_WORD \u003d \"deletep\";"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"    public static final String COMMAND_ALIAS \u003d \"delp\";"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"            + \": Deletes the pet identified by the indexnumber used in the last pet listing\\n\""},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"            + \"Parameters: INDEX (must be a postive integer)\\n\""},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_DELETE_PET_SUCCESS \u003d \"Delete Pet: %1$s\";"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"    private final Index targetIndex;"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"    private Pet petToDelete;"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"    public DeletePetCommand(Index targetIndex) {"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(petToDelete);"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"            model.deletePet(petToDelete);"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        } catch (PetNotFoundException pnfe) {"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"            throw new AssertionError(\"The target pet cannot be missing\");"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"        } catch (ClientPetAssociationNotFoundException e) {"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"            throw new AssertionError(\"Client pet association cannot be missing\");"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PET_SUCCESS, petToDelete));"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"        List\u003cPet\u003e lastShownList \u003d model.getFilteredPetList();"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"        petToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"        return other \u003d\u003d this"},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"                || (other instanceof DeletePetCommand"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeletePetCommand) other).targetIndex)"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 Objects.equals(this.petToDelete, ((DeletePetCommand) other).petToDelete));"},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"-":13,"md-azsa":56}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":25,"author":{"gitID":"purplepers0n"},"content":"    private int currList \u003d 0; //default is on client list upon opening app"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    public void setCurrentList() {"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"        this.currList \u003d model.getCurrentList();"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"        setCurrentList();"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":"        if (currList \u003d\u003d 0) {"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredClientList(new Predicate\u003cClient\u003e() {"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"                @Override"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"                public boolean test(Client client) {"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"                    return predicate.getKeywords().stream().anyMatch(keyword -\u003e"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"                            StringUtil.containsWordIgnoreCase(client.getName().fullName, keyword));"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"                }"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":"            });"},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"            return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredClientList().size()));"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"        } else if (currList \u003d\u003d 1) {"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"            model.updateFilteredClientOwnPetAssocation(new Predicate\u003cClientOwnPet\u003e() {"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"                @Override"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"                public boolean test(ClientOwnPet association) {"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"                    return predicate.getKeywords().stream().anyMatch(keyword -\u003e"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"                            StringUtil.containsWordIgnoreCase(association.getPet().getPetName().fullPetName, keyword));"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"                }"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"            });"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"            return new CommandResult(getMessageForPetListShownSummary(model"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"                    .getFilteredClientPetAssociationList().size()));"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"        } else if (currList \u003d\u003d 2) {"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":"            model.updateFilteredVetTechnicianList(new Predicate\u003cVetTechnician\u003e() {"},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"                @Override"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"                public boolean test(VetTechnician vetTechnician) {"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"                    return predicate.getKeywords().stream().anyMatch(keyword -\u003e"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"                            StringUtil.containsWordIgnoreCase(vetTechnician.getName().fullName, keyword));"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"                }"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"            });"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"            return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredVetTechnicianList().size()));"},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(0));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":6,"purplepers0n":35,"-":37}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.logic.autocomplete.AutoCompleteManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"    private final AutoCompleteManager autoCompleteManager;"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"    private int currList \u003d 0;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        autoCompleteManager \u003d new AutoCompleteManager();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        return model.getFilteredClientList();"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList() {"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"        return model.getFilteredVetTechnicianList();"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":73,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"purplepers0n"},"content":"    public ObservableList\u003cPet\u003e getFilteredPetList() {"},{"lineNumber":75,"author":{"gitID":"purplepers0n"},"content":"        return model.getFilteredPetList();"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":"    public ObservableList\u003cClientOwnPet\u003e getClientPetAssociationList() {"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        return model.getFilteredClientPetAssociationList();"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return model.getFilteredAppointmentList();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":93,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"    public List\u003cString\u003e getAutoCompleteCommands(String commandPrefix) {"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"        return autoCompleteManager.getAutoCompleteCommands(commandPrefix);"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"    public String getAutoCompleteNextParameter(String inputText) {"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"        return autoCompleteManager.getAutoCompleteNextMissingParameter(inputText);"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":103,"author":{"gitID":"purplepers0n"},"content":"    public void setCurrentList(int currList) {"},{"lineNumber":104,"author":{"gitID":"purplepers0n"},"content":"        this.currList \u003d currList;"},{"lineNumber":105,"author":{"gitID":"purplepers0n"},"content":"        model.setCurrentList(currList);"},{"lineNumber":106,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":108,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"purplepers0n"},"content":"    public int getCurrentList() {"},{"lineNumber":110,"author":{"gitID":"purplepers0n"},"content":"        return this.currList;"},{"lineNumber":111,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":113,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"purplepers0n"},"content":"    public Client getClientDetails() {"},{"lineNumber":115,"author":{"gitID":"purplepers0n"},"content":"        return model.getClientDetails();"},{"lineNumber":116,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":118,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"purplepers0n"},"content":"    public ObservableList\u003cPet\u003e getClientPetList() {"},{"lineNumber":120,"author":{"gitID":"purplepers0n"},"content":"        return model.getClientPetList();"},{"lineNumber":121,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":123,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"purplepers0n"},"content":"    public ObservableList\u003cAppointment\u003e getClientApptList() {"},{"lineNumber":125,"author":{"gitID":"purplepers0n"},"content":"        return model.getClientApptList();"},{"lineNumber":126,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":26,"purplepers0n":38,"-":63}},{"path":"src/main/java/seedu/address/logic/commands/AddVetTechToAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_APPOINTMENT_INDEX;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VETTECH_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENT;"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TECHNICIAN;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.appointment.exceptions.AppointmentAlreadyHasVetTechnicianException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"content":"//@@author jonathanwj-reused"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":" * Adds a vet technician to an appointment in the address book."},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"public class AddVetTechToAppointmentCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"    public static final String COMMAND_WORD \u003d \"addvettechtoappointment\";"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Add a vet technician to a appointment \""},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"            + \"by the index number used in the last vet technician and appointment listing.\\n\""},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"            + \"Parameters: \""},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_VETTECH_INDEX + \"VETTECH_INDEX \""},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"            + PREFIX_APPOINTMENT_INDEX + \"APPOINTMENT_INDEX\\n\""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_VETTECH_INDEX + \"1 \" + PREFIX_APPOINTMENT_INDEX + \"2\";"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_ADD_TECH_TO_APPOINTMENT_SUCCESS \u003d \"Added vet technician To\""},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"            + \" appointment:\\n%1$s\\n\u003e\u003e %2$s\";"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_APPOINTMENT_HAS_TECH \u003d \"Appointment already has a vet technician\";"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"    private final Index vetTechIndex;"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    private final Index appointmentIndex;"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    private Optional\u003cVetTechnician\u003e vetTech;"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    private Optional\u003cAppointment\u003e appointment;"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"     * @param vetTechIndex     of the vet tech in the filtered list to add"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"     * @param appointmentIndex of the appointment in the filtered list to add vet tech to"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"    public AddVetTechToAppointmentCommand(Index vetTechIndex, Index appointmentIndex) {"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(vetTechIndex);"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(appointmentIndex);"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        this.vetTechIndex \u003d vetTechIndex;"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        this.appointmentIndex \u003d appointmentIndex;"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        vetTech \u003d Optional.empty();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        appointment \u003d Optional.empty();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(model);"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(vetTech.get());"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(appointment.get());"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"            model.addVetTechToAppointment(vetTech.get(), appointment.get());"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"            throw new AssertionError(\"The target appointment cannot be a duplicate\");"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        } catch (AppointmentNotFoundException e) {"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"            throw new AssertionError(\"The target appointment cannot be missing\");"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"        } catch (AppointmentAlreadyHasVetTechnicianException e) {"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"            throw new CommandException(MESSAGE_APPOINTMENT_HAS_TECH);"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_TECH_TO_APPOINTMENT_SUCCESS,"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"                vetTech.get(), appointment.get()));"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"        List\u003cVetTechnician\u003e lastShownListVetTech \u003d model.getFilteredVetTechnicianList();"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        List\u003cAppointment\u003e lastShownListAppointment \u003d model.getFilteredAppointmentList();"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"        if (appointmentIndex.getZeroBased() \u003e\u003d lastShownListAppointment.size()) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"        if (vetTechIndex.getZeroBased() \u003e\u003d lastShownListVetTech.size()) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"        vetTech \u003d Optional.of(lastShownListVetTech.get(vetTechIndex.getZeroBased()));"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"        appointment \u003d Optional.of(lastShownListAppointment.get(appointmentIndex.getZeroBased()));"},{"lineNumber":96,"author":{"gitID":"purplepers0n"},"content":"        model.updateFilteredVetTechnicianList(PREDICATE_SHOW_ALL_TECHNICIAN);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENT);"},{"lineNumber":98,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"        if (!(other instanceof AddVetTechToAppointmentCommand)) {"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"        // state check"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"        AddVetTechToAppointmentCommand e \u003d (AddVetTechToAppointmentCommand) other;"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"        return vetTechIndex.equals(e.vetTechIndex)"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 appointmentIndex.equals(e.appointmentIndex)"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 vetTech.equals(e.vetTech)"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 appointment.equals(e.appointment);"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":79,"null":1,"purplepers0n":4,"-":36}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedAppointment.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Description;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Duration;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Time;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"content":"//@@author Godxin-functional"},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Appointment."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAdaptedAppointment {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private String date;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private String time;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String duration;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String description;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private XmlAdaptedClientOwnPet association;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    private XmlAdaptedPerson vetTech;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedAppointment."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public XmlAdaptedAppointment() {}"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public XmlAdaptedAppointment(String date, String time, String duration, String description) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.date \u003d date;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.time \u003d time;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.duration \u003d duration;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Converts a given Appointment into this class for JAXB use."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedAppointment"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public XmlAdaptedAppointment(Appointment source) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        date \u003d source.getDate().toString();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        time \u003d source.getTime().toString();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        duration \u003d source.getDuration().toString();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        description \u003d source.getDescription().toString();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (source.getClientOwnPet() !\u003d null) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            association \u003d new XmlAdaptedClientOwnPet(source.getClientOwnPet());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        if (source.getVetTechnician() !\u003d null) {"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"            vetTech \u003d new XmlAdaptedPerson(source.getVetTechnician());"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted appointment object into the model\u0027s Appointment object."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public Appointment toModelType() throws IllegalValueException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Appointment convertedAppointment;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (this.date \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (!Date.isValidDate(this.date)) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        final Date date \u003d new Date(this.date);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (this.time \u003d\u003d null) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Time.class.getSimpleName()));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (!Time.isValidTime(this.time)) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Time.MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        final Time time \u003d new Time(this.time);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        if (this.duration \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                    Duration.class.getSimpleName()));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (!Duration.isValidDuration(this.duration)) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Duration.MESSAGE_DURATION_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        final Duration duration \u003d new Duration(this.duration);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (this.description \u003d\u003d null) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                    Description.class.getSimpleName()));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!Description.isValidDescription(this.description)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        final Description description \u003d new Description(this.description);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        convertedAppointment \u003d new Appointment(date, time, duration, description);"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"        if (this.association !\u003d null) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            ClientOwnPet cop \u003d association.toModelType();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            convertedAppointment.setClientOwnPet(cop);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"        if (this.vetTech !\u003d null) {"},{"lineNumber":122,"author":{"gitID":"jonathanwj"},"content":"            VetTechnician vetTech \u003d (VetTechnician) this.vetTech.toModelType();"},{"lineNumber":123,"author":{"gitID":"jonathanwj"},"content":"            convertedAppointment.setVetTech(vetTech);"},{"lineNumber":124,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return convertedAppointment;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedAppointment)) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        XmlAdaptedAppointment otherAppointment \u003d (XmlAdaptedAppointment) other;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return Objects.equals(date, otherAppointment.date)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(time, otherAppointment.time);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":13,"null":1,"-":130}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    public static final String ROLE_CLIENT \u003d \"CLIENT\";"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    public static final String ROLE_TECHNICIAN \u003d \"TECHNICIAN\";"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"    private String role;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"    public XmlAdaptedPerson(String name, String role, String phone,"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"                            String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        this.role \u003d role;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"        if (source.getRole().equals(PersonRole.CLIENT_ROLE)) {"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"            role \u003d ROLE_CLIENT;"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"            role \u003d ROLE_TECHNICIAN;"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"content":"    //@@author jonathanwj-reused"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"        Person convertedPerson;"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":135,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":136,"author":{"gitID":"jonathanwj"},"content":"        if (this.role \u003d\u003d null) {"},{"lineNumber":137,"author":{"gitID":"jonathanwj"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"                    PersonRole.class.getSimpleName()));"},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"jonathanwj"},"content":"        if (!PersonRole.isValidPersonRole(this.role)) {"},{"lineNumber":141,"author":{"gitID":"jonathanwj"},"content":"            throw new IllegalValueException(PersonRole.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"        final PersonRole role \u003d new PersonRole(this.role);"},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":145,"author":{"gitID":"jonathanwj"},"content":"        if (role.equals(PersonRole.CLIENT_ROLE)) {"},{"lineNumber":146,"author":{"gitID":"jonathanwj"},"content":"            convertedPerson \u003d new Client(name, phone, email, address, tags);"},{"lineNumber":147,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":148,"author":{"gitID":"jonathanwj"},"content":"            convertedPerson \u003d new VetTechnician(name, phone, email, address, tags);"},{"lineNumber":149,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"jonathanwj"},"content":"        return convertedPerson;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":34,"null":1,"-":135}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPet.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetAge;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetGender;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":" * JAXV-friendly version of the Person."},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"public class XmlAdaptedPet {"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Pet\u0027s %s field is missing!\";"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"    private String petName;"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    private String petAge;"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"    private String petGender;"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"     * Construct an XmlAdaptedPet"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"     * Thisis the no-arg constructor."},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"    public XmlAdaptedPet() {}"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"     * Constructs the xml with pet details"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"    public XmlAdaptedPet(String petName, String petAge, String petGender, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"        this.petName \u003d petName;"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"        this.petAge \u003d petAge;"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"        this.petGender \u003d petGender;"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"        this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"     * Convers a given Pet into a class for JAXB"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"     * @param source future changes will not affect the created XmladaptedPet"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"    public XmlAdaptedPet(Pet source) {"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"        petName \u003d source.getPetName().toString();"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"        petAge \u003d source.getPetAge().value;"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"        petGender \u003d source.getPetGender().toString();"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":"     * Convers this to model pet\u0027s object"},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"     * @throws IllegalValueException if any constraints"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":"    public Pet toModelType() throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"        final List\u003cTag\u003e petTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":"        Pet convertedPet;"},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":"            petTags.add(tag.toModelType());"},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":80,"author":{"gitID":"md-azsa"},"content":"        if (this.petName \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitID":"md-azsa"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, PetName.class.getSimpleName()));"},{"lineNumber":82,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":84,"author":{"gitID":"md-azsa"},"content":"        if (!PetName.isValidPetName(this.petName)) {"},{"lineNumber":85,"author":{"gitID":"md-azsa"},"content":"            throw new IllegalValueException(PetName.MESSAGE_PETNAME_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"md-azsa"},"content":"        final PetName petName \u003d new PetName(this.petName);"},{"lineNumber":88,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":89,"author":{"gitID":"md-azsa"},"content":"        if (this.petAge \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitID":"md-azsa"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, PetAge.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":93,"author":{"gitID":"md-azsa"},"content":"        if (!PetAge.isValidPetAge(this.petAge)) {"},{"lineNumber":94,"author":{"gitID":"md-azsa"},"content":"            throw new IllegalValueException(PetAge.MESSAGE_PETAGE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"md-azsa"},"content":"        final PetAge petAge \u003d new PetAge(this.petAge);"},{"lineNumber":97,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":98,"author":{"gitID":"md-azsa"},"content":"        if (this.petGender \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitID":"md-azsa"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":100,"author":{"gitID":"md-azsa"},"content":"                    PetGender.class.getSimpleName()));"},{"lineNumber":101,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":103,"author":{"gitID":"md-azsa"},"content":"        if (!PetGender.isValidGender(this.petGender)) {"},{"lineNumber":104,"author":{"gitID":"md-azsa"},"content":"            throw new IllegalValueException(PetGender.MESSAGE_PETGENDER_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"md-azsa"},"content":"        final PetGender petGender \u003d new PetGender(this.petGender);"},{"lineNumber":107,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":108,"author":{"gitID":"md-azsa"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(petTags);"},{"lineNumber":109,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":110,"author":{"gitID":"md-azsa"},"content":"        convertedPet \u003d new Pet(petName, petAge, petGender, tags);"},{"lineNumber":111,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":112,"author":{"gitID":"md-azsa"},"content":"        return convertedPet;"},{"lineNumber":113,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":115,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"md-azsa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":117,"author":{"gitID":"md-azsa"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":118,"author":{"gitID":"md-azsa"},"content":"            return true;"},{"lineNumber":119,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":121,"author":{"gitID":"md-azsa"},"content":"        if (!(other instanceof  XmlAdaptedPet)) {"},{"lineNumber":122,"author":{"gitID":"md-azsa"},"content":"            return false;"},{"lineNumber":123,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":125,"author":{"gitID":"md-azsa"},"content":"        XmlAdaptedPet otherPet \u003d (XmlAdaptedPet) other;"},{"lineNumber":126,"author":{"gitID":"md-azsa"},"content":"        return Objects.equals(petName, otherPet.petName)"},{"lineNumber":127,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 Objects.equals(petAge, otherPet.petAge)"},{"lineNumber":128,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 Objects.equals(petGender, otherPet.petGender)"},{"lineNumber":129,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 tagged.equals(otherPet.tagged);"},{"lineNumber":130,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":17,"md-azsa":114}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedClientOwnPet.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":10,"content":"//@@author jonathanwj-reused"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":" * JAXV-friendly version of the ClientOwnPet."},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"public class XmlAdaptedClientOwnPet {"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"    private XmlAdaptedPet pet;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"    private XmlAdaptedPerson client;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"     * Constructs an XmlAdaptedClientOwnPet."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    public XmlAdaptedClientOwnPet() {}"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"     * Constructs an {@code XmlAdaptedClientOwnPet} with the given {@code ClientOwnPet}"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    public XmlAdaptedClientOwnPet(ClientOwnPet association) {"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"        this.pet \u003d new XmlAdaptedPet(association.getPet());"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"        this.client \u003d new XmlAdaptedPerson(association.getClient());"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"     * Converts this jaxb-friendly adapted association object into the model\u0027s ClientOwnPet object."},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    public ClientOwnPet toModelType() throws IllegalValueException {"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"        return new ClientOwnPet((Client) client.toModelType(), pet.toModelType());"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    public Pet getPet() throws IllegalValueException {"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        return pet.toModelType();"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    public Client getClient() throws IllegalValueException {"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        return (Client) client.toModelType();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        if (!(other instanceof XmlAdaptedClientOwnPet)) {"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        XmlAdaptedClientOwnPet otherAdapted \u003d (XmlAdaptedClientOwnPet) other;"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"        return pet.equals(otherAdapted.pet) \u0026\u0026 client.equals(otherAdapted.client);"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":49,"null":1,"-":13}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToNextException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToPreviousException;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    private static final String CLIENT_ALREADY_OWNS_PET \u003d \"Client already owns pet\";"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"    private static final String PET_ALREADY_HAS_OWNER \u003d \"Pet already has owner\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String APPOINTMENT_CLOSE_PREVIOUS \u003d \"New appointment is too close to previous one\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String APPOINTMENT_CLOSE_NEXT \u003d \"New appointment is too close to next one\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPet\u003e pets;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedAppointment\u003e appointments;"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    @XmlElement"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    private List\u003cXmlAdaptedClientOwnPet\u003e clientPetAssociations;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        pets \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        appointments \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        clientPetAssociations \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        pets.addAll(src.getPetList().stream().map(XmlAdaptedPet::new).collect(Collectors.toList()));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        appointments.addAll(src.getAppointmentList().stream().map(XmlAdaptedAppointment::new).collect("},{"lineNumber":61,"author":{"gitID":"-"},"content":"                Collectors.toList()));"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        clientPetAssociations.addAll(src.getClientPetAssociations().stream().map(XmlAdaptedClientOwnPet::new).collect("},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"                Collectors.toList()));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPet pet : pets) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            addressBook.addPet(pet.toModelType());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        for (XmlAdaptedAppointment appointment : appointments) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                addressBook.scheduleAppointment(appointment.toModelType());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            } catch (AppointmentCloseToPreviousException ape) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                throw new IllegalValueException(APPOINTMENT_CLOSE_PREVIOUS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            } catch (AppointmentCloseToNextException ape) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                throw new IllegalValueException(APPOINTMENT_CLOSE_NEXT);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"        for (XmlAdaptedClientOwnPet association : clientPetAssociations) {"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"            try {"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"                addressBook.addPetToClient(association.getPet(), association.getClient());"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"            } catch (ClientAlreadyOwnsPetException e) {"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"                throw new IllegalValueException(CLIENT_ALREADY_OWNS_PET);"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"            } catch (PetAlreadyHasOwnerException e) {"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"                throw new IllegalValueException(PET_ALREADY_HAS_OWNER);"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return persons.equals(otherAb.persons)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                \u0026\u0026 pets.equals(otherAb.pets)"},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 appointments.equals(otherAb.appointments)"},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 clientPetAssociations.equals(otherAb.clientPetAssociations);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":23,"-":100}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"-":211}},{"path":"src/main/java/seedu/address/model/vettechnician/exceptions/DuplicateVetTechnicianException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.vettechnician.exceptions;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":5,"content":"//@@author jonathanwj-reused"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":" * Signals that the operation will result in duplicate VetTechnician objects"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"public class DuplicateVetTechnicianException extends DuplicateDataException {"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"    public DuplicateVetTechnicianException() {"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"        super(\"Operation would result in duplicate vet technicians\");"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":11,"null":1,"-":1}},{"path":"src/main/java/seedu/address/model/vettechnician/exceptions/VetTechnicianNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.vettechnician.exceptions;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"content":"//@@author jonathanwj-reused"},{"lineNumber":4,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"-"},"content":" * Signals the operation is unable to find the specified pet."},{"lineNumber":6,"author":{"gitID":"-"},"content":" */"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"public class VetTechnicianNotFoundException extends Exception {"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":4,"null":1,"-":3}},{"path":"src/main/java/seedu/address/model/vettechnician/exceptions/TechnicianHasExistingAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.vettechnician.exceptions;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":" * Signals technician has existing appointment."},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class TechnicianHasExistingAppointmentException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":7}},{"path":"src/main/java/seedu/address/logic/commands/RemoveVetTechFromAppointmentCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.VetTechnicianNotFoundException;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":16,"content":"//@@author jonathanwj-reused"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":" * removes the vet from appointment identified using it\u0027s last displayed index from the program"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"public class RemoveVetTechFromAppointmentCommand extends UndoableCommand {"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"    public static final String COMMAND_WORD \u003d \"removevettechfromappt\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"            + \": removes the vet technician from appointment identified by the index number\""},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"            + \" used in the last appointment listing\\n\""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a postive integer)\\n\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_REMOVE_VET_FROM_APPT_SUCCESS \u003d \"Removed vet technician from: %1$s\";"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_APPOINTMENT_DOES_NOT_HAVE_TECH \u003d \"Appointment \""},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"            + \"does not have a vet technician\";"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"    private final Index targetIndex;"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"    private Appointment apptToRemoveVetFrom;"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    public RemoveVetTechFromAppointmentCommand(Index targetIndex) {"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(apptToRemoveVetFrom);"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"            model.removeVetTechFromAppointent(apptToRemoveVetFrom);"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"            throw new AssertionError(\"The target appointment cannot be a duplicate\");"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"        } catch (AppointmentNotFoundException e) {"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"            throw new AssertionError(\"The target appointment cannot be missing\");"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"        } catch (VetTechnicianNotFoundException e) {"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"            throw new CommandException(MESSAGE_APPOINTMENT_DOES_NOT_HAVE_TECH);"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"        return new CommandResult(String.format(MESSAGE_REMOVE_VET_FROM_APPT_SUCCESS, apptToRemoveVetFrom));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"        List\u003cAppointment\u003e lastShownList \u003d model.getFilteredAppointmentList();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        apptToRemoveVetFrom \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"                || (other instanceof RemoveVetTechFromAppointmentCommand"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 this.targetIndex.equals(((RemoveVetTechFromAppointmentCommand) other).targetIndex)"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 Objects.equals(this.apptToRemoveVetFrom, ((RemoveVetTechFromAppointmentCommand) other)"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"                .apptToRemoveVetFrom));"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":42,"null":1,"-":33}},{"path":"src/main/java/seedu/address/model/vettechnician/VetTechnician.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.vettechnician;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":13,"content":"//@@author jonathanwj-reused"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":" * Represents a Vet Technician in the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"public class VetTechnician extends Person {"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"     * Every field must be present and not null."},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    public VetTechnician(Name name, Phone phone, Email email,"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"                         Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    public PersonRole getRole() {"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"        return PersonRole.TECHNICIAN_ROLE;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        if (!(other instanceof VetTechnician)) {"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        VetTechnician otherTechnician \u003d (VetTechnician) other;"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        return otherTechnician.getName().equals(this.getName())"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherTechnician.getPhone().equals(this.getPhone())"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherTechnician.getEmail().equals(this.getEmail())"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherTechnician.getAddress().equals(this.getAddress());"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":37,"null":1,"-":14}},{"path":"src/main/java/seedu/address/model/appointment/Duration.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToNextException;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":8,"content":"//@@author Godxin-functional"},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Represents an Appointment\u0027s duration in the application."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDuration(String)}"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class Duration {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DURATION_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"-"},"content":"            \"Appointment duration should be all integers in format DD or DDD (in minute), \""},{"lineNumber":17,"author":{"gitID":"-"},"content":"                    + \"ranging from 15-120 minutes and it should not be blank\";"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"    /*"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"     * The first character of the date must not be a whitespace,"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DURATION_VALIDATION_REGEX \u003d \"(1[5-9]|[2-9][0-9]|1[01][0-9]|120)\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final String duration;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Constructs a {@code Duration}."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param duration A valid duration."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public Duration(String duration) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(duration);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        checkArgument(isValidDuration(duration), MESSAGE_DURATION_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.duration \u003d duration;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    public Duration(int duration) throws AppointmentCloseToNextException {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String durationString \u003d \"\" + duration;"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        if (!isValidDuration(durationString)) {"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"            throw new AppointmentCloseToNextException(\"Appointment cannot be scheduled at this duration\");"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.duration \u003d durationString;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Returns the integer value of duration"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int getDurationValue() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return Integer.parseInt(this.duration);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid duration."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static boolean isValidDuration(String test) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return test.matches(DURATION_VALIDATION_REGEX);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return duration;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                || (other instanceof Duration // instanceof handles nulls"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.duration.equals(((Duration) other).duration)); // state check"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return duration.hashCode();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":5,"null":1,"purplepers0n":6,"-":64}},{"path":"src/main/java/seedu/address/model/appointment/Time.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"content":"//@@author Godxin-functional"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"purplepers0n"},"content":" * Represents an Appointment\u0027s time in the application."},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":"public class Time {"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Appointment time should be all integers in format HH:MM, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":"     * The first character of the time must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"purplepers0n"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String TIME_VALIDATION_REGEX \u003d \"([01]?[0-9]|2[0-3]):([0-5][0-9])\";"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final int HOUR_START_INDEX \u003d 0;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final int HOUR_END_INDEX \u003d 2;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final int MINUTE_START_INDEX \u003d 3;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"    public final String time;"},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":29,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"purplepers0n"},"content":"     * Constructs a {@code Time}."},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"     * @param time A valid time."},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"purplepers0n"},"content":"    public Time(String time) {"},{"lineNumber":35,"author":{"gitID":"purplepers0n"},"content":"        requireNonNull(time);"},{"lineNumber":36,"author":{"gitID":"purplepers0n"},"content":"        checkArgument(isValidTime(time), MESSAGE_TIME_CONSTRAINTS);"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"        this.time \u003d time;"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"purplepers0n"},"content":"    public static boolean isValidTime(String test) {"},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"        return test.matches(TIME_VALIDATION_REGEX);"},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *  Returns the integer value of the Minute in time"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public int getMinute() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        String minute \u003d this.toString().substring(MINUTE_START_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return Integer.parseInt(minute);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *  Returns the integer value of Hour in time"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public int getHour() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String hour \u003d this.toString().substring(HOUR_START_INDEX, HOUR_END_INDEX);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return Integer.parseInt(hour);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"        return time;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitID":"purplepers0n"},"content":"                || (other instanceof Time // instanceof handles nulls"},{"lineNumber":77,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 this.time.equals(((Time) other).time)); // state check"},{"lineNumber":78,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":80,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"    public int hashCode() {"},{"lineNumber":82,"author":{"gitID":"purplepers0n"},"content":"        return time.hashCode();"},{"lineNumber":83,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":86,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"md-azsa"},"content":"     * Negative if argument is smaller"},{"lineNumber":88,"author":{"gitID":"md-azsa"},"content":"     * Postiive if argument is larger"},{"lineNumber":89,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"md-azsa"},"content":"    public int compareToTime(Time other) {"},{"lineNumber":91,"author":{"gitID":"md-azsa"},"content":"        if (this.time.equals(other.time)) {"},{"lineNumber":92,"author":{"gitID":"md-azsa"},"content":"            return 0;"},{"lineNumber":93,"author":{"gitID":"md-azsa"},"content":"        } else if (this.time.compareTo(other.time) \u003c 0) {"},{"lineNumber":94,"author":{"gitID":"md-azsa"},"content":"            return -1;"},{"lineNumber":95,"author":{"gitID":"md-azsa"},"content":"        } else {"},{"lineNumber":96,"author":{"gitID":"md-azsa"},"content":"            return 1;"},{"lineNumber":97,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"null":1,"purplepers0n":45,"-":38,"md-azsa":15}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"purplepers0n"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"content":"//@@author Godxin-functional"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":" * Represents an Appointment in the application."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"public class Appointment {"},{"lineNumber":17,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final int CONVERSION_TIME \u003d 60;"},{"lineNumber":19,"author":{"gitID":"purplepers0n"},"content":"    private final Date date;"},{"lineNumber":20,"author":{"gitID":"purplepers0n"},"content":"    private final Time time;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Duration duration;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Description description;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ClientOwnPet clientOwnPet;"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    private Optional\u003cVetTechnician\u003e vetTech;"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":26,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"purplepers0n"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public Appointment(Date date, Time time, Duration duration, Description description) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        requireAllNonNull(date, time, duration, description);"},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"        this.date \u003d date;"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"        this.time \u003d time;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.duration \u003d duration;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.description \u003d description;"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"        clientOwnPet \u003d null;"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"        vetTech \u003d Optional.empty();"},{"lineNumber":37,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Appointment(Appointment toCopy) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        date \u003d toCopy.getDate();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        time \u003d toCopy.getTime();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        duration \u003d toCopy.getDuration();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        description \u003d toCopy.getDescription();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        clientOwnPet \u003d toCopy.getClientOwnPet();"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        vetTech \u003d toCopy.getOptionalVetTechnician();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"    public Date getDate() {"},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"        return date;"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"    public Time getTime() {"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        return time;"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public Duration getDuration() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return duration;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public Description getDescription() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return description;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public ClientOwnPet getClientOwnPet() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return clientOwnPet;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"    public Optional\u003cVetTechnician\u003e getOptionalVetTechnician() {"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        return vetTech;"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"    public VetTechnician getVetTechnician() {"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"        return vetTech.orElse(null);"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void setClientOwnPet(ClientOwnPet clientOwnPet) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.clientOwnPet \u003d clientOwnPet;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void setClientOwnPetToNull() {"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"        clientOwnPet \u003d null;"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"    public void setVetTech(VetTechnician vetTech) {"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"        this.vetTech \u003d Optional.of(vetTech);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void setOptionalVetTech (Optional\u003cVetTechnician\u003e vetTech) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        this.vetTech \u003d vetTech;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"    public void removeVetTech() {"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        vetTech \u003d Optional.empty();"},{"lineNumber":94,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Returns the interval in minutes between two appointments"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public int calDurationDifferencePositive(Appointment previous) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Time previousTime \u003d previous.getTime();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return hourDifference(this.time.getHour(), previousTime.getHour())"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                + minDifference(this.time.getMinute(), previousTime.getMinute());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Returns the interval in minutes between two appointments"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public int calDurationDifferenceNegative(Appointment next) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Time nextTime \u003d next.getTime();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return hourDifference(nextTime.getHour(), this.time.getHour())"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                + minDifference(nextTime.getMinute(), this.time.getMinute());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Returns the difference in Hour of time between two appointments"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public int hourDifference(int hourFirst, int hourSecond) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return Math.abs((hourFirst - hourSecond) * CONVERSION_TIME);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Returns the difference in Minute of time between two appointments"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public int minDifference(int minFirst, int minSecond) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return minFirst - minSecond;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"purplepers0n"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":137,"author":{"gitID":"purplepers0n"},"content":"            return false;"},{"lineNumber":138,"author":{"gitID":"purplepers0n"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":140,"author":{"gitID":"purplepers0n"},"content":"        Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":141,"author":{"gitID":"purplepers0n"},"content":"        return otherAppointment.getDate().equals(this.getDate())"},{"lineNumber":142,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherAppointment.getTime().equals(this.getTime())"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherAppointment.getOptionalVetTechnician().equals(this.getOptionalVetTechnician());"},{"lineNumber":144,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return Objects.hash(date, time, duration, description);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        builder.append(\" Date: \")"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                .append(getDate())"},{"lineNumber":160,"author":{"gitID":"purplepers0n"},"content":"                .append(\" Time: \")"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                .append(getTime())"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                .append(\" Duration: \")"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                .append(getDuration())"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                .append(\" Description: \")"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                .append(getDescription());"},{"lineNumber":166,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":167,"author":{"gitID":"purplepers0n"},"content":"        return builder.toString();"},{"lineNumber":168,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Comparator that compares the date and then time of the appointment"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public int compareTo(Appointment other) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        if (this.getDate().compareToDate(other.getDate()) \u003d\u003d 0) {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return (this.getTime().compareToTime(other.getTime()));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            return this.getDate().compareToDate(other.getDate());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"jonathanwj":25,"null":1,"purplepers0n":38,"-":115,"Godxin":2}},{"path":"src/main/java/seedu/address/logic/commands/RescheduleCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_APPOINTMENT;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Description;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Duration;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Time;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"content":"//@@author Godxin-functional"},{"lineNumber":29,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Edits or reschedules the details of an existing appointment in the address book."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class RescheduleCommand extends UndoableCommand {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"reschedule\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details, reschedules the time or deletes \""},{"lineNumber":37,"author":{"gitID":"-"},"content":"            + \"the appointment identified \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + \"by the index number used in the appointment list. \""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_DATE + \"DATE] \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TIME + \"TIME] \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_DURATION + \"DURATION] \""},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":"            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + PREFIX_DATE + \"2018-04-01 \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + PREFIX_TIME + \"16:00\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_RESCHEDULE_APPOINTMENT_SUCCESS \u003d \"Successful !!!\\n\""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        + \"  Appointment reschedules to : \\n %1$s\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_RESCHEDULED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment already exists in the address book.\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private final RescheduleAppointmentDescriptor rescheduleAppointmentDescriptor;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private Appointment appointmentToReschedule;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private Appointment rescheduledAppointment;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @param index                of the appointment in the filtered appointment list to edit(reschedule)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @param rescheduleAppointmentDescriptor details to reschedule the appointment with"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public RescheduleCommand(Index index, RescheduleAppointmentDescriptor rescheduleAppointmentDescriptor) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(rescheduleAppointmentDescriptor);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.rescheduleAppointmentDescriptor \u003d new RescheduleAppointmentDescriptor(rescheduleAppointmentDescriptor);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            model.updateAppointment(appointmentToReschedule, rescheduledAppointment);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        } catch (DuplicateAppointmentException dpe) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        } catch (AppointmentNotFoundException anfe) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        model.updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENT);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_RESCHEDULE_APPOINTMENT_SUCCESS, rescheduledAppointment));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        List\u003cAppointment\u003e appointmentList \u003d model.getFilteredAppointmentList();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d appointmentList.size()) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_APPOINTMENT_INDEX);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        appointmentToReschedule \u003d appointmentList.get(index.getZeroBased());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        rescheduledAppointment \u003d createRescheduledAppointment(appointmentToReschedule, rescheduleAppointmentDescriptor);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Appointment} with the details of {@code appointmentToReschedule}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * edited with {@code rescheduleAppointmentDescriptor}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private static Appointment createRescheduledAppointment("},{"lineNumber":103,"author":{"gitID":"-"},"content":"            Appointment appointmentToReschedule, RescheduleAppointmentDescriptor rescheduleAppointmentDescriptor) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assert appointmentToReschedule !\u003d null;"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Date updatedDate \u003d rescheduleAppointmentDescriptor.getDate().orElse(appointmentToReschedule.getDate());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Time updatedTime \u003d rescheduleAppointmentDescriptor.getTime().orElse(appointmentToReschedule.getTime());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Duration updatedDuration \u003d rescheduleAppointmentDescriptor.getDuration().orElse("},{"lineNumber":109,"author":{"gitID":"-"},"content":"                appointmentToReschedule.getDuration());"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Description updatedDescription \u003d rescheduleAppointmentDescriptor.getDescription().orElse("},{"lineNumber":111,"author":{"gitID":"-"},"content":"                appointmentToReschedule.getDescription());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        ClientOwnPet updatedClientOwnPet \u003d appointmentToReschedule.getClientOwnPet();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Optional\u003cVetTechnician\u003e updatedVetTech \u003d appointmentToReschedule.getOptionalVetTechnician();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Appointment newAppointment \u003d new Appointment(updatedDate, updatedTime, updatedDuration, updatedDescription);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        newAppointment.setClientOwnPet(updatedClientOwnPet);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        newAppointment.setOptionalVetTech(updatedVetTech);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return new Appointment(newAppointment);"},{"lineNumber":119,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (!(other instanceof RescheduleCommand)) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        RescheduleCommand r \u003d (RescheduleCommand) other;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return index.equals(r.index)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                \u0026\u0026 rescheduleAppointmentDescriptor.equals(r.rescheduleAppointmentDescriptor)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(appointmentToReschedule, r.appointmentToReschedule);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Stores the details to reschedule the appointment with. Each non-empty field value will replace the"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * corresponding field value of the appointment."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public static class RescheduleAppointmentDescriptor {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        private Date date;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        private Time time;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        private Duration duration;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        private Description description;"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        public RescheduleAppointmentDescriptor() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":155,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public RescheduleAppointmentDescriptor(RescheduleAppointmentDescriptor toCopy) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            setDate(toCopy.date);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            setTime(toCopy.time);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            setDuration(toCopy.duration);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            setDescription(toCopy.description);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":165,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.date, this.time, this.duration, this.description);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        public void setDate(Date date) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            this.date \u003d date;"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        public Optional\u003cDate\u003e getDate() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(date);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        public void setTime(Time time) {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            this.time \u003d time;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public Optional\u003cTime\u003e getTime() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(time);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        public void setDuration(Duration duration) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"            this.duration \u003d duration;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        public Optional\u003cDuration\u003e getDuration() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(duration);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public void setDescription(Description description) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            this.description \u003d description;"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        public Optional\u003cDescription\u003e getDescription() {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(description);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            if (!(other instanceof RescheduleAppointmentDescriptor)) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            RescheduleAppointmentDescriptor r \u003d (RescheduleAppointmentDescriptor) other;"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"            return getDate().equals(r.getDate())"},{"lineNumber":218,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTime().equals(r.getTime())"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getDuration().equals(r.getDuration())"},{"lineNumber":220,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getDescription().equals(r.getDescription());"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"purplepers0n":3,"-":220}},{"path":"src/main/java/seedu/address/model/appointment/Description.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":7,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"md-azsa"},"content":" * Represents the description of an Appointment"},{"lineNumber":9,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":"public class Description {"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"            \"Description of the appointment cannot be a blank space.\";"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"    // Should be non-empty input"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"(.*\\\\S.*)\";"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"    public final String description;"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"     * Constructs a {@code Description}"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"    public Description(String description) {"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(description);"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"        checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"        this.description \u003d description;"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        return description;"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"        return other \u003d\u003d this"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"                || (other instanceof Description"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 this.description.equals(((Description) other).description));"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"    public static boolean isValidDescription(String test) {"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"        return test.matches(DESCRIPTION_VALIDATION_REGEX);"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"    public int hashCode() {"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"        return description.hashCode();"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":5,"md-azsa":44}},{"path":"src/main/java/seedu/address/model/vettechnician/UniqueVetTechnicianList.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.vettechnician;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.DuplicateVetTechnicianException;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.VetTechnicianNotFoundException;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":14,"content":"//@@author jonathanwj-reused"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":" * A list of vetTechnicians that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":" *"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":" *"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":" * @see VetTechnician#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"public class UniqueVetTechnicianList implements Iterable\u003cVetTechnician\u003e {"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    private final ObservableList\u003cVetTechnician\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"     * Returns true if the list contains an equivalent vetTechnician as the given argument."},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"    public boolean contains(VetTechnician toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"     * Adds a vetTechnician to the list."},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"     * @throws DuplicateVetTechnicianException if the vetTechnician"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"     * to add is a duplicate of an existing vetTechnician in the list."},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"    public void add(VetTechnician toAdd) throws DuplicateVetTechnicianException {"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"            throw new DuplicateVetTechnicianException();"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"     * Replaces the vetTechnician {@code target} in the list with {@code editedvetTechnician}."},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"     * @throws DuplicateVetTechnicianException if the replacement"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"     * is equivalent to another existing vetTechnician in the list."},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"     * @throws VetTechnicianNotFoundException if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"    public void setVetTechnician(VetTechnician target, VetTechnician editedVetTechnician)"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"            throws DuplicateVetTechnicianException, VetTechnicianNotFoundException {"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(editedVetTechnician);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"            throw new VetTechnicianNotFoundException();"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"        if (!target.equals(editedVetTechnician) \u0026\u0026 internalList.contains(editedVetTechnician)) {"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"            throw new DuplicateVetTechnicianException();"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        internalList.set(index, editedVetTechnician);"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"     * Removes the equivalent vetTechnician from the list."},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"     * @throws VetTechnicianNotFoundException if no such vetTechnician could be found in the list."},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"    public boolean remove(VetTechnician toRemove) throws VetTechnicianNotFoundException {"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(toRemove);"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        final boolean vetTechnicianFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        if (!vetTechnicianFoundAndDeleted) {"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"            throw new VetTechnicianNotFoundException();"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"        return vetTechnicianFoundAndDeleted;"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"    public void setVetTechnicians(UniqueVetTechnicianList replacement) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"    public void setVetTechnicians(List\u003cVetTechnician\u003e vetTechnicians) throws DuplicateVetTechnicianException {"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"        requireAllNonNull(vetTechnicians);"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        final UniqueVetTechnicianList replacement \u003d new UniqueVetTechnicianList();"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        for (final VetTechnician vetTechnician : vetTechnicians) {"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"            replacement.add(vetTechnician);"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"        setVetTechnicians(replacement);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cVetTechnician\u003e asObservableList() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":"    public Iterator\u003cVetTechnician\u003e iterator() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"                || (other instanceof UniqueVetTechnicianList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueVetTechnicianList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":77,"null":1,"-":44}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentAlreadyHasVetTechnicianException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":" * Signals that the appointment already has a vet technician."},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class AppointmentAlreadyHasVetTechnicianException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":5,"-":2}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.SortedList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToNextException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToPreviousException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"content":"//@@author Godxin-functional"},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":22,"author":{"gitID":"-"},"content":" *"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":24,"author":{"gitID":"-"},"content":" *"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * @see Appointment#equals(Object)"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DURATION_PREVIOUS \u003d \" Appointment is too close to previous one.\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DURATION_NEXT \u003d \" Appointment is too close to next one.\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final int MINIMUM_INTERVAL \u003d 1440;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Appointment previous;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Appointment next;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an appointment with the same date and time as the given argument."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public boolean contains(Appointment toCheck) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Adds an appointment to the list."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws DuplicateAppointmentException if the appointment to add is a duplicate(same date and time)"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * of an existing appointment in the list."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void add(Appointment toAdd) throws DuplicateAppointmentException,"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        AppointmentCloseToPreviousException, AppointmentCloseToNextException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (hasDurationClosePrevious(toAdd)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AppointmentCloseToPreviousException(MESSAGE_DURATION_PREVIOUS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (hasDurationCloseNext(toAdd)) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new AppointmentCloseToNextException(MESSAGE_DURATION_NEXT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Reschedule the appointment {@code target} in the list with {@code editedAppointment}."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @throws DuplicateAppointmentException if the reschedule clashes to another existing appointment in the list."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * @throws AppointmentNotFoundException if {@code target} could not be found in the list."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireNonNull(editedAppointment);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        if (!target.equals(editedAppointment) \u0026\u0026 internalList.contains(editedAppointment)) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        internalList.set(index, editedAppointment);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Removes the appointment from the list."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws AppointmentNotFoundException if no such appointment could be found in the list."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public boolean remove(Appointment toRemove) throws AppointmentNotFoundException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final boolean appointmentFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!appointmentFoundAndDeleted) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return appointmentFoundAndDeleted;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void setAppointments(UniqueAppointmentList replacement) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) throws DuplicateAppointmentException,"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            AppointmentCloseToPreviousException, AppointmentCloseToNextException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        requireAllNonNull(appointments);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        final UniqueAppointmentList replacement \u003d new UniqueAppointmentList();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        for (final Appointment appointment : appointments) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            replacement.add(appointment);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        setAppointments(replacement);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":114,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"md-azsa"},"content":"     * Sorts the internal list"},{"lineNumber":116,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"md-azsa"},"content":"    public void sort() {"},{"lineNumber":118,"author":{"gitID":"md-azsa"},"content":"        SortedList\u003cAppointment\u003e sortedList \u003d new SortedList\u003c\u003e(internalList, Appointment::compareTo);"},{"lineNumber":119,"author":{"gitID":"md-azsa"},"content":"        internalList.setAll(sortedList);"},{"lineNumber":120,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"md-azsa"},"content":"    //@@author"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAppointment\u003e asObservableList() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public boolean isEmpty() {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        return internalList.isEmpty();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Check that there is no earlier existing appointment too close"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * too close: the new appointment start time is within the duration"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * of previous appointment"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public boolean hasDurationClosePrevious(Appointment toAdd) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        int minInterval \u003d MINIMUM_INTERVAL;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        int interval \u003d MINIMUM_INTERVAL;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        if (hasPrevious(toAdd)) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            minInterval \u003d previous.getDuration().getDurationValue();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            interval \u003d toAdd.calDurationDifferencePositive(previous);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return interval \u003c minInterval;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Check that there is no later existing appointment too close"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * too close: Later appointment is within the duration of new appointment"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public boolean hasDurationCloseNext(Appointment toAdd) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        int minInterval \u003d MINIMUM_INTERVAL;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        int interval \u003d MINIMUM_INTERVAL;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        if (hasNext(toAdd)) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            minInterval \u003d toAdd.getDuration().getDurationValue();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            interval \u003d toAdd.calDurationDifferenceNegative(next);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        return interval \u003c minInterval;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Return true if there is a previous appointment"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public boolean hasPrevious(Appointment currentAppointment) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        boolean hasPreviousAppointment \u003d false;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        Date newAppointmentDate \u003d currentAppointment.getDate();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        Time newAppointmentTime \u003d currentAppointment.getTime();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        int currentMin \u003d newAppointmentTime.getMinute();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        int currentHour \u003d newAppointmentTime.getHour();"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        int interval;"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        int minInterval \u003d MINIMUM_INTERVAL;"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        for (Appointment earlierAppointment : internalList) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            Date earlierAppointmentDate \u003d earlierAppointment.getDate();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            Time earlierAppointmentTime \u003d earlierAppointment.getTime();"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"            if (newAppointmentDate.equals(earlierAppointmentDate)) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"                if (earlierAppointmentTime.getHour() \u003c currentHour"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                        || (earlierAppointmentTime.getHour() \u003d\u003d currentHour"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                        \u0026\u0026 earlierAppointmentTime.getMinute() \u003c currentMin)) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"                    interval \u003d currentAppointment.calDurationDifferencePositive(earlierAppointment);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"                    if (interval \u003c minInterval) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                        minInterval \u003d interval;"},{"lineNumber":188,"author":{"gitID":"-"},"content":"                        previous \u003d earlierAppointment;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"                        hasPreviousAppointment \u003d true;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return hasPreviousAppointment;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Returns true if there is next appointment"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public boolean hasNext(Appointment currentAppointment) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        boolean hasNextAppointment \u003d false;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        Date newAppointmentDate \u003d currentAppointment.getDate();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        Time newAppointmentTime \u003d currentAppointment.getTime();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        int currentMin \u003d newAppointmentTime.getMinute();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        int currentHour \u003d newAppointmentTime.getHour();"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        int interval;"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        int minInterval \u003d currentAppointment.getDuration().getDurationValue();"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        for (Appointment laterAppointment : internalList) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            Date laterAppointmentDate \u003d laterAppointment.getDate();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            Time laterAppointmentTime \u003d laterAppointment.getTime();"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"            if (newAppointmentDate.equals(laterAppointmentDate)) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                if (laterAppointmentTime.getHour() \u003e currentHour"},{"lineNumber":216,"author":{"gitID":"-"},"content":"                        || (laterAppointmentTime.getHour() \u003d\u003d currentHour"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                        \u0026\u0026 currentMin \u003c laterAppointmentTime.getMinute())) {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"                    interval \u003d currentAppointment.calDurationDifferenceNegative(laterAppointment);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                    if (interval \u003c minInterval) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"                        minInterval \u003d interval;"},{"lineNumber":221,"author":{"gitID":"-"},"content":"                        next \u003d laterAppointment;"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                        hasNextAppointment \u003d true;"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        return  hasNextAppointment;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    public Iterator\u003cAppointment\u003e iterator() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":237,"author":{"gitID":"-"},"content":"                || (other instanceof seedu.address.model.appointment.UniqueAppointmentList // instanceof handles nulls"},{"lineNumber":238,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueAppointmentList) other).internalList));"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":242,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"-":235,"md-azsa":9}},{"path":"src/main/java/seedu/address/model/association/exceptions/ClientAlreadyOwnsPetException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.association.exceptions;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":" * Signals that the client already owns a pet"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class ClientAlreadyOwnsPetException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":7}},{"path":"src/main/java/seedu/address/model/association/exceptions/PetAlreadyHasOwnerException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.association.exceptions;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":" * Signals that the pet already has an owner."},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class PetAlreadyHasOwnerException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":7}},{"path":"src/main/java/seedu/address/model/association/exceptions/PetAlreadyHasAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.association.exceptions;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Signals that the pet already has an appointment tagged to it."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class PetAlreadyHasAppointmentException extends Exception {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"-":4}},{"path":"src/main/java/seedu/address/model/association/exceptions/ClientPetAssociationListEmptyException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.association.exceptions;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Exception when the client list is empty."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class ClientPetAssociationListEmptyException extends Exception {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":3,"-":4}},{"path":"src/main/java/seedu/address/model/association/exceptions/ClientPetAssociationNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.association.exceptions;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":" * Signals that the operation is unable to find the specified client per association."},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class ClientPetAssociationNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":7}},{"path":"src/main/java/seedu/address/model/appointment/Date.java","lines":[{"lineNumber":1,"author":{"gitID":"purplepers0n"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"content":"//@@author Godxin-functional"},{"lineNumber":9,"author":{"gitID":"purplepers0n"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"purplepers0n"},"content":" * Represents an Appointment\u0027s date in the application."},{"lineNumber":11,"author":{"gitID":"purplepers0n"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"},{"lineNumber":12,"author":{"gitID":"purplepers0n"},"content":" */"},{"lineNumber":13,"author":{"gitID":"purplepers0n"},"content":"public class Date {"},{"lineNumber":14,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"-"},"content":"            \"Appointment date should be all integers in format YYYY-MM-DD, and it should not be blank\";"},{"lineNumber":17,"author":{"gitID":"Godxin"},"content":"    public static final String MESSAGE_YEAR_CONSTRAINTS \u003d"},{"lineNumber":18,"author":{"gitID":"Godxin"},"content":"            \"Appointment year should be later than 2018\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DAYINMONTH_CONSTRAINTS \u003d"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            \"Appointment day does not exist in the month\";"},{"lineNumber":21,"author":{"gitID":"purplepers0n"},"content":"    /*"},{"lineNumber":22,"author":{"gitID":"purplepers0n"},"content":"     * The first character of the date must not be a whitespace,"},{"lineNumber":23,"author":{"gitID":"purplepers0n"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":24,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DATE_VALIDATION_REGEX \u003d"},{"lineNumber":26,"author":{"gitID":"Godxin"},"content":"            \"([2-9][0-9][1-9][0-9])-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])\";"},{"lineNumber":27,"author":{"gitID":"Godxin"},"content":"    private static final int YEAR_START_INDEX \u003d 0;"},{"lineNumber":28,"author":{"gitID":"Godxin"},"content":"    private static final int YEAR_END_INDEX \u003d 4;"},{"lineNumber":29,"author":{"gitID":"Godxin"},"content":"    private static final int YEAR_LOWER_BOUND \u003d 2018;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final int LEAP_YEAR_DIVIDER \u003d 4;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final int CENTURY_YEAR_DIVIDER \u003d 100;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final int CENTURY_LEAP_YEAR_DIVIDER \u003d 400;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final int LEAP_YEAR_REMAINDER \u003d 0;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final int MONTH_START_INDEX \u003d 5;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final int MONTH_END_INDEX \u003d 7;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final int DAY_START_INDEX \u003d 8;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final int BIG_MONTH_DAY \u003d 31;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final int SMALL_MONTH_DAY \u003d 30;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final int FEB_LEAP_YEAR_DAY \u003d 29;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final int FEB_NONLEAP_YEAR_DAY \u003d 28;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private  static final String[] BIG_MONTH \u003d {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private  static final String[] SMALL_MONTH \u003d {\"04\", \"06\", \"09\", \"11\"};"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":45,"author":{"gitID":"purplepers0n"},"content":"    public final String date;"},{"lineNumber":46,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":47,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"purplepers0n"},"content":"     * Constructs a {@code Date}."},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"     * @param date A valid date."},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"    public Date(String date) {"},{"lineNumber":53,"author":{"gitID":"purplepers0n"},"content":"        requireNonNull(date);"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":"        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        checkArgument(isValidYear(getYear(date)), MESSAGE_YEAR_CONSTRAINTS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        checkArgument(isValidDaysInMonth(date), MESSAGE_DAYINMONTH_CONSTRAINTS);"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"        this.date \u003d date;"},{"lineNumber":58,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"    public static boolean isValidDate(String test) {"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"        return test.matches(DATE_VALIDATION_REGEX);"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"purplepers0n"},"content":"     * Returns true if a given string is a valid date."},{"lineNumber":69,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"Godxin"},"content":"    public static boolean isValidYear(int test) {"},{"lineNumber":71,"author":{"gitID":"Godxin"},"content":"        return test \u003e\u003d YEAR_LOWER_BOUND;"},{"lineNumber":72,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a leap date."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static boolean isLeapYear(int test) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if ((test % CENTURY_LEAP_YEAR_DIVIDER \u003d\u003d LEAP_YEAR_REMAINDER)"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                || ((test % LEAP_YEAR_DIVIDER \u003d\u003d LEAP_YEAR_REMAINDER)"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                \u0026\u0026 (test % CENTURY_YEAR_DIVIDER !\u003d LEAP_YEAR_REMAINDER))) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid date in month."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Boolean isValidDaysInMonth(String test) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        int testYear \u003d getYear(test);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        String testMonth \u003d getMonth(test);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        int testDay \u003d getDay(test);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        int daysInMonth;"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        if (Arrays.asList(BIG_MONTH).contains(testMonth)) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            daysInMonth \u003d BIG_MONTH_DAY;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        } else if (Arrays.asList(SMALL_MONTH).contains(testMonth)) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            daysInMonth \u003d SMALL_MONTH_DAY;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            if (isLeapYear(testYear)) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                daysInMonth \u003d FEB_LEAP_YEAR_DAY;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                daysInMonth \u003d FEB_NONLEAP_YEAR_DAY;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return testDay \u003c\u003d daysInMonth;"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"Godxin"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"Godxin"},"content":"     *  Returns the integer value of year"},{"lineNumber":112,"author":{"gitID":"Godxin"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"Godxin"},"content":"    public static int getYear(String date) {"},{"lineNumber":114,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":115,"author":{"gitID":"Godxin"},"content":"        String year \u003d date.substring(YEAR_START_INDEX, YEAR_END_INDEX);"},{"lineNumber":116,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":117,"author":{"gitID":"Godxin"},"content":"        return Integer.parseInt(year);"},{"lineNumber":118,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":119,"author":{"gitID":"Godxin"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"Godxin"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *  Returns the integer value of month"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public static String getMonth(String date) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        String month \u003d date.substring(MONTH_START_INDEX, MONTH_END_INDEX);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return month;"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     *  Returns the integer value of day"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public static int getDay(String date) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        String day \u003d date.substring(DAY_START_INDEX);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return Integer.parseInt(day);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"purplepers0n"},"content":"    public String toString() {"},{"lineNumber":145,"author":{"gitID":"purplepers0n"},"content":"        return date;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":151,"author":{"gitID":"purplepers0n"},"content":"                || (other instanceof Date // instanceof handles nulls"},{"lineNumber":152,"author":{"gitID":"purplepers0n"},"content":"                \u0026\u0026 this.date.equals(((Date) other).date)); // state check"},{"lineNumber":153,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":155,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":156,"author":{"gitID":"purplepers0n"},"content":"    public int hashCode() {"},{"lineNumber":157,"author":{"gitID":"purplepers0n"},"content":"        return date.hashCode();"},{"lineNumber":158,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":161,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"md-azsa"},"content":"     * Negative if argument is smaller"},{"lineNumber":163,"author":{"gitID":"md-azsa"},"content":"     * Postiive if argument is larger"},{"lineNumber":164,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"md-azsa"},"content":"    public int compareToDate(Date other) {"},{"lineNumber":166,"author":{"gitID":"md-azsa"},"content":"        if (this.date.equals(other.date)) {"},{"lineNumber":167,"author":{"gitID":"md-azsa"},"content":"            return 0;"},{"lineNumber":168,"author":{"gitID":"md-azsa"},"content":"        } else if (this.date.compareTo(other.date) \u003c 0) {"},{"lineNumber":169,"author":{"gitID":"md-azsa"},"content":"            return -1;"},{"lineNumber":170,"author":{"gitID":"md-azsa"},"content":"        } else {"},{"lineNumber":171,"author":{"gitID":"md-azsa"},"content":"            return 1;"},{"lineNumber":172,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"null":1,"purplepers0n":47,"-":90,"md-azsa":15,"Godxin":21}},{"path":"src/main/java/seedu/address/model/association/ClientOwnPet.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.association;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":" * Represents a pet to client association"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"public class ClientOwnPet {"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"    private final Client client;"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":"    private final Pet pet;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"    public ClientOwnPet(Client client, Pet pet) {"},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"        this.client \u003d client;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"        this.pet \u003d pet;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"        if (!(other instanceof ClientOwnPet)) {"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"        ClientOwnPet otherClientOwnPet \u003d (ClientOwnPet) other;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"        return otherClientOwnPet.getClient().equals(this.getClient())"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherClientOwnPet.getPet().equals(this.getPet());"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"    public Client getClient() {"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"        return client;"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"    public Pet getPet() {"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"        return pet;"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":32,"-":8}},{"path":"src/main/java/seedu/address/model/person/PersonRole.java","lines":[{"lineNumber":1,"author":{"gitID":"jonathanwj"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"//@@author jonathanwj"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"jonathanwj"},"content":" * Represents a Person\u0027s role in the address book."},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPersonRole(Role)}"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":11,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"public class PersonRole {"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":14,"author":{"gitID":"jonathanwj"},"content":"    public static final String CLIENT_STRING \u003d \"client\";"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"    public static final String TECHNICIAN_STRING \u003d \"technician\";"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"     * Person roles that can be used."},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"    private enum Role {"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"        CLIENT,"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"        TECHNICIAN"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"    public static final PersonRole TECHNICIAN_ROLE \u003d new PersonRole(Role.TECHNICIAN);"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"    public static final PersonRole CLIENT_ROLE \u003d new PersonRole(Role.CLIENT);"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"    public static final String MESSAGE_ROLE_CONSTRAINTS \u003d"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"            \"Person role can take only \u0027client\u0027 and \u0027technician\u0027 values, and it should not be blank\";"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"    private final Role role;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"     * Constructs a PersonRole"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"     * @param role a valid role"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"    public PersonRole(Role role) {"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(role);"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        checkArgument(isValidPersonRole(role), MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"        if (role.equals(Role.CLIENT)) {"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"            this.role \u003d Role.CLIENT;"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"            this.role \u003d Role.TECHNICIAN;"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"     * Constructs a PersonRole"},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"     * @param role a valid string representation of {@code PersonRole}"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"    public PersonRole(String role) {"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(role);"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"        checkArgument(isValidPersonRole(role), MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        if (role.equalsIgnoreCase(\"client\")) {"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"            this.role \u003d Role.CLIENT;"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":"            this.role \u003d Role.TECHNICIAN;"},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"     * Returns true if a given Role is a valid person role."},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"    public static boolean isValidPersonRole(Role test) {"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"        if (test \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"        return (test.equals(Role.CLIENT)"},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"                || test.equals(Role.TECHNICIAN));"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"     * Returns true if a given String represents a valid person role."},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"    public static boolean isValidPersonRole(String test) {"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        if (test \u003d\u003d null) {"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"            return false;"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"        return (test.equalsIgnoreCase(CLIENT_STRING)"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"                || test.equalsIgnoreCase(TECHNICIAN_STRING));"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"     * Returns the string representation of PersonRole."},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"    public String toString() {"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(role);"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        if (role.equals(Role.CLIENT)) {"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"            return CLIENT_STRING;"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"            return TECHNICIAN_STRING;"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"                || (other instanceof PersonRole // instanceof handles nulls"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 this.role.equals(((PersonRole) other).role)); // state check"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":105}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Description;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Duration;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Time;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToNextException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToPreviousException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.PetAge;"},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.PetGender;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.PetName;"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                getTagSet(\"premium\")),"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                getTagSet(\"premium\", \"insurance\")),"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                getTagSet(\"temporary\")),"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                getTagSet(\"premium\")),"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"            new VetTechnician(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                getTagSet(\"fulltimer\")),"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"            new VetTechnician(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":56,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"                getTagSet(\"parttimer\")),"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"            new VetTechnician(new Name(\"Frank Boo\"), new Phone(\"63830808\"), new Email(\"frank@example.com\"),"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"                    new Address(\"31 Pandan Road, 609278, Singapore\"),"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                    getTagSet(\"parttimer\"))"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"    public static Person[] getSampleClientsInSamplePersons() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                    getTagSet(\"premium\")),"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                    getTagSet(\"premium\", \"insurance\")),"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                    getTagSet(\"temporary\")),"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"            new Client(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                    getTagSet(\"premium\")),"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"        };"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"    public static Pet[] getSamplePets() {"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"        return new Pet[] {"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"            new Pet(new PetName(\"Tweety\"), new PetAge(\"2\"), new PetGender(\"M\"), getTagSet(\"Bird\")),"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"            new Pet(new PetName(\"Sylvester\"), new PetAge(\"1\"), new PetGender(\"M\"), getTagSet(\"Cat\")),"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"            new Pet(new PetName(\"Mickey\"), new PetAge(\"1\"), new PetGender(\"M\"), getTagSet(\"Mouse\")),"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":"            new Pet(new PetName(\"Goofy\"), new PetAge(\"1\"), new PetGender(\"M\"), getTagSet(\"Dog\")),"},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"            new Pet(new PetName(\"Daisy\"), new PetAge(\"1\"), new PetGender(\"F\"), getTagSet(\"Duck\")),"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"            new Pet(new PetName(\"Minnie\"), new PetAge(\"1\"), new PetGender(\"F\"), getTagSet(\"Mouse\")),"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"        };"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"    public static ClientOwnPet[] getSampleClientOwnpetAssociation() {"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"        return new ClientOwnPet[] {"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":"            new ClientOwnPet((Client) getSamplePersons()[0], getSamplePets()[0]),"},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"            new ClientOwnPet((Client) getSamplePersons()[1], getSamplePets()[1]),"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"            new ClientOwnPet((Client) getSamplePersons()[2], getSamplePets()[2]),"},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"            new ClientOwnPet((Client) getSamplePersons()[0], getSamplePets()[3]),"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"            new ClientOwnPet((Client) getSamplePersons()[1], getSamplePets()[4]),"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"            new ClientOwnPet((Client) getSamplePersons()[2], getSamplePets()[5])"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"        };"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static Appointment[] getSampleAppointment() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new Appointment[] {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            new Appointment(new Date(\"2018-01-02\"), new Time(\"14:30\"),"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                    new Duration(\"60\"), new Description(\"Sterilize Garfield now\")),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            new Appointment(new Date(\"2018-02-01\"), new Time(\"15:30\"),"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"                    new Duration(\"60\"), new Description(\"Give Tweety a shower\")),"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"            new Appointment(new Date(\"2018-01-02\"), new Time(\"10:30\"),"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"                    new Duration(\"60\"), new Description(\"Sick\")),"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"            new Appointment(new Date(\"2018-02-01\"), new Time(\"08:30\"),"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"                    new Duration(\"60\"), new Description(\"Unwell\")),"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":"            new Appointment(new Date(\"2018-01-02\"), new Time(\"13:30\"),"},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"                    new Duration(\"60\"), new Description(\"Injury\")),"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"            new Appointment(new Date(\"2018-02-01\"), new Time(\"11:30\"),"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"                    new Duration(\"60\"), new Description(\"Euthanasia\"))"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":127,"author":{"gitID":"jonathanwj"},"content":"            for (Pet samplePet : getSamplePets()) {"},{"lineNumber":128,"author":{"gitID":"jonathanwj"},"content":"                sampleAb.addPet(samplePet);"},{"lineNumber":129,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"jonathanwj"},"content":"            int cycle \u003d 0;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            for (Appointment sampleAppointment : getSampleAppointment()) {"},{"lineNumber":132,"author":{"gitID":"jonathanwj"},"content":"                sampleAppointment.setClientOwnPet(getSampleClientOwnpetAssociation()[cycle]);"},{"lineNumber":133,"author":{"gitID":"jonathanwj"},"content":"                sampleAppointment.setOptionalVetTech(Optional.of((VetTechnician) getSamplePersons()[4 + cycle]));"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                sampleAb.scheduleAppointment(sampleAppointment);"},{"lineNumber":135,"author":{"gitID":"jonathanwj"},"content":"                cycle++;"},{"lineNumber":136,"author":{"gitID":"jonathanwj"},"content":"                cycle \u003d cycle % 3;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":138,"author":{"gitID":"jonathanwj"},"content":"            sampleAb.setClientPetAssociations(Arrays.asList(getSampleClientOwnpetAssociation()));"},{"lineNumber":139,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":143,"author":{"gitID":"jonathanwj"},"content":"        } catch (DuplicatePetException e) {"},{"lineNumber":144,"author":{"gitID":"jonathanwj"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate pets\", e);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate appointments\", e);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        } catch (AppointmentCloseToPreviousException ape) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot schedule appointments close to previous\", ape);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        } catch (AppointmentCloseToNextException ape) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot schedule appointments close to next\", ape);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":71,"-":95}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":98,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"md-azsa"},"content":"     * Sorts the internal list"},{"lineNumber":100,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"md-azsa"},"content":"    public void sort() {"},{"lineNumber":102,"author":{"gitID":"md-azsa"},"content":"        internalList.sort((Person one, Person two) -\u003e one.getName().toString().toLowerCase()"},{"lineNumber":103,"author":{"gitID":"md-azsa"},"content":"                .compareTo(two.getName().toString().toLowerCase()));"},{"lineNumber":104,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"md-azsa"},"content":"    //@@author"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public boolean isEmpty() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return internalList.isEmpty();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":126,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":125,"md-azsa":9}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"public abstract class Person {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"    public abstract PersonRole getRole();"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"                .append(\" Role: \")"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"                .append(getRole())"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"     * Returns true if person is a client"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"    public boolean isClient() {"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        return this instanceof Client;"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":16,"-":80}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtilPet.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetAge;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetGender;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.PetName;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":" * Contains util for populating {@code AddressBook} with sampledata."},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"public class SampleDataUtilPet {"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"    public static Pet[] getSamplePets() {"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"        return new Pet[] {"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"            new Pet(new PetName(\"Garfield\"), new PetAge(\"5\"), new PetGender(\"M\"),"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"                    getTagSet(\"Cat\", \"tabby\")),"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"            new Pet(new PetName(\"Scooby Doo\"), new PetAge(\"10\"), new PetGender(\"M\"),"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"                    getTagSet(\"Dog\", \"great_dane\"))"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"        };"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"     * Returns a tag set containg list of strings given"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"        for (String s : strings) {"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"            tags.add(new Tag(s));"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"        return tags;"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":11,"md-azsa":27}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the appointments list."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate appointments."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the pets list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    ObservableList\u003cPet\u003e getPetList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the client pet association list."},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cClientOwnPet\u003e getClientPetAssociations();"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the client list."},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cClient\u003e getClientList();"},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the vet technician list."},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cVetTechnician\u003e getVetTechnicianList();"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":20,"-":36}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public boolean test(Person person) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"purplepers0n"},"content":"    public List\u003cString\u003e getKeywords() {"},{"lineNumber":32,"author":{"gitID":"purplepers0n"},"content":"        return keywords;"},{"lineNumber":33,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"purplepers0n":3,"-":31}},{"path":"src/main/java/seedu/address/model/pet/UniquePetList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.pet;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":" * A list of pets that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":" *"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":" *"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":" * @see Pet#equals(Object)"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"public class UniquePetList implements Iterable\u003cPet\u003e {"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    private final ObservableList\u003cPet\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"     * Returns true if the list contains an equivalent pet as the given argument."},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    public boolean contains(Pet toCheck) {"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(toCheck);"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"     * Adds a pet to the list."},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"     * @throws DuplicatePetException if the pet to add is a duplicate of an existing pet in the list."},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"    public void add(Pet toAdd) throws DuplicatePetException {"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(toAdd);"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"        if (contains(toAdd)) {"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"            throw new DuplicatePetException();"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        internalList.add(toAdd);"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"     * Removes the equivalent pet from the list."},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"     * @throws PetNotFoundException if no such pet could be found in the list."},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"    public boolean remove(Pet toRemove) throws PetNotFoundException {"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(toRemove);"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"        final boolean petFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"        if (!petFoundAndDeleted) {"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"            throw new PetNotFoundException();"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"        return petFoundAndDeleted;"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"    public void setPets(UniquePetList replacement) {"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"    public void setPets(List\u003cPet\u003e pets) throws DuplicatePetException {"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"        requireAllNonNull(pets);"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":"        final UniquePetList replacement \u003d new UniquePetList();"},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"        for (final Pet pet : pets) {"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"            replacement.add(pet);"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":"        setPets(replacement);"},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"md-azsa"},"content":"    public ObservableList\u003cPet\u003e asObservableList() {"},{"lineNumber":80,"author":{"gitID":"md-azsa"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":81,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":83,"author":{"gitID":"md-azsa"},"content":"    public ObservableList\u003cPet\u003e getInternalList() {"},{"lineNumber":84,"author":{"gitID":"md-azsa"},"content":"        return internalList;"},{"lineNumber":85,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":87,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"md-azsa"},"content":"    public Iterator\u003cPet\u003e iterator() {"},{"lineNumber":89,"author":{"gitID":"md-azsa"},"content":"        return internalList.iterator();"},{"lineNumber":90,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":92,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"md-azsa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitID":"md-azsa"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":95,"author":{"gitID":"md-azsa"},"content":"                || (other instanceof UniquePetList // instanceof handles nulls"},{"lineNumber":96,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePetList) other).internalList));"},{"lineNumber":97,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":99,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":100,"author":{"gitID":"md-azsa"},"content":"    public int hashCode() {"},{"lineNumber":101,"author":{"gitID":"md-azsa"},"content":"        return internalList.hashCode();"},{"lineNumber":102,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":13,"md-azsa":90}},{"path":"src/main/java/seedu/address/model/pet/PetGender.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.pet;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":7,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"md-azsa"},"content":" * Represents a Pet\u0027s gender in the program."},{"lineNumber":9,"author":{"gitID":"md-azsa"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"public class PetGender {"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_PETGENDER_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"            \"Pet gender can only be m, f, M or F.\";"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"     * The string can only be m,f,M,F"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"    public static final String GENDER_VALIDATION_REGEX \u003d \"[m,f,M,F]\";"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"    public final String fullGender;"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"     * Constructs a {@code PetGender}"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"     * @param petGender A valid pet gender"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"    public PetGender(String petGender) {"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(petGender);"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        checkArgument(isValidGender(petGender), MESSAGE_PETGENDER_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        this.fullGender \u003d petGender.toUpperCase();"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"     * Returns true if a given string is a valid gender"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"    public static boolean isValidGender(String test) {"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"        return test.matches(GENDER_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"        return fullGender;"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"        return other \u003d\u003d this"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"                || (other instanceof PetGender)"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 this.fullGender.equals(((PetGender) other).fullGender);"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"        return fullGender.hashCode();"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":5,"md-azsa":52}},{"path":"src/main/java/seedu/address/model/pet/PetName.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.pet;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":7,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"md-azsa"},"content":" * Represents a pet\u0027s name in the address book."},{"lineNumber":9,"author":{"gitID":"md-azsa"},"content":" * Guarantees: imumutable; is valid as declared in {@link #isValidPetName(String)}"},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"public class PetName {"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_PETNAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"            \"Pet names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"      * The first character must not be whitespace,"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"      * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"      */"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"    public static final String PETNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"    public final String fullPetName;"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"     * Constructs a {@code Name}"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"     * @param petName A valid pet name"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    public PetName(String petName) {"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(petName);"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        checkArgument(isValidPetName(petName), MESSAGE_PETNAME_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"        this.fullPetName \u003d petName;"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"    public static boolean isValidPetName(String test) {"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"        return test.matches(PETNAME_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"        return fullPetName;"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"                || (other instanceof PetName //instanceof handles null"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 this.fullPetName.equals(((PetName) other).fullPetName)); //state check"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"        return fullPetName.hashCode();"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":5,"md-azsa":53}},{"path":"src/main/java/seedu/address/model/pet/PetAge.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.pet;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":7,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"md-azsa"},"content":" * Represents a Pet\u0027s age in the application."},{"lineNumber":9,"author":{"gitID":"md-azsa"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPetAge(String)}"},{"lineNumber":10,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":11,"author":{"gitID":"md-azsa"},"content":"public class PetAge {"},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"    public static final String MESSAGE_PETAGE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":"            \"Pet age can only contain numbers, and should be 1-2 digit long\";"},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":"    public static final String PET_VALIDATIONS_REGEX \u003d \"\\\\d{1,2}\";"},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"     * Constructs a {@code PetAge}."},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"     * @param petAge A valid pet age"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"    public PetAge(String petAge) {"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(petAge);"},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"        checkArgument(isValidPetAge(petAge), MESSAGE_PETAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"        this.value \u003d petAge;"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"     * Returns true if a given is a valid pet age number"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"    public static boolean isValidPetAge(String test) {"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":"        return test.matches(PET_VALIDATIONS_REGEX);"},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"        return other \u003d\u003d this // short circuit if object"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"                || (other instanceof PetAge // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 this.value.equals(((PetAge) other).value)); //state check"},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"-":5,"md-azsa":47}},{"path":"src/main/java/seedu/address/model/pet/Pet.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.pet;"},{"lineNumber":2,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"md-azsa"},"content":"//@@author md-azsa"},{"lineNumber":13,"author":{"gitID":"md-azsa"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"md-azsa"},"content":" * Represents a Pet in the applications."},{"lineNumber":15,"author":{"gitID":"md-azsa"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"md-azsa"},"content":" */"},{"lineNumber":17,"author":{"gitID":"md-azsa"},"content":"public class Pet {"},{"lineNumber":18,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":19,"author":{"gitID":"md-azsa"},"content":"    private final PetName petName;"},{"lineNumber":20,"author":{"gitID":"md-azsa"},"content":"    private final PetAge petAge;"},{"lineNumber":21,"author":{"gitID":"md-azsa"},"content":"    private final PetGender petGender;"},{"lineNumber":22,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":23,"author":{"gitID":"md-azsa"},"content":"    private final UniqueTagList tags;"},{"lineNumber":24,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":25,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"md-azsa"},"content":"     * Every field must be present and not null"},{"lineNumber":27,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"md-azsa"},"content":"    public Pet(PetName petName, PetAge petAge, PetGender petGender, Set\u003cTag\u003e tags) {"},{"lineNumber":29,"author":{"gitID":"md-azsa"},"content":"        requireAllNonNull(petName, petAge, petGender, tags);"},{"lineNumber":30,"author":{"gitID":"md-azsa"},"content":"        this.petName \u003d petName;"},{"lineNumber":31,"author":{"gitID":"md-azsa"},"content":"        this.petAge \u003d petAge;"},{"lineNumber":32,"author":{"gitID":"md-azsa"},"content":"        this.petGender \u003d petGender;"},{"lineNumber":33,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":34,"author":{"gitID":"md-azsa"},"content":"        //protect internal tags from changes in the arg lis"},{"lineNumber":35,"author":{"gitID":"md-azsa"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":36,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":38,"author":{"gitID":"md-azsa"},"content":"    public PetName getPetName() {"},{"lineNumber":39,"author":{"gitID":"md-azsa"},"content":"        return petName;"},{"lineNumber":40,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":42,"author":{"gitID":"md-azsa"},"content":"    public PetAge getPetAge() {"},{"lineNumber":43,"author":{"gitID":"md-azsa"},"content":"        return petAge;"},{"lineNumber":44,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":46,"author":{"gitID":"md-azsa"},"content":"    public PetGender getPetGender() {"},{"lineNumber":47,"author":{"gitID":"md-azsa"},"content":"        return petGender;"},{"lineNumber":48,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":50,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":51,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"md-azsa"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":53,"author":{"gitID":"md-azsa"},"content":"     * if modification is attempted."},{"lineNumber":54,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"md-azsa"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":56,"author":{"gitID":"md-azsa"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":57,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":59,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"md-azsa"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"md-azsa"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitID":"md-azsa"},"content":"            return true;"},{"lineNumber":63,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":65,"author":{"gitID":"md-azsa"},"content":"        if (!(other instanceof Pet)) {"},{"lineNumber":66,"author":{"gitID":"md-azsa"},"content":"            return false;"},{"lineNumber":67,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":69,"author":{"gitID":"md-azsa"},"content":"        Pet otherPet \u003d (Pet) other;"},{"lineNumber":70,"author":{"gitID":"md-azsa"},"content":"        return otherPet.getPetName().equals(this.getPetName())"},{"lineNumber":71,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 otherPet.getPetAge().equals(this.getPetAge())"},{"lineNumber":72,"author":{"gitID":"md-azsa"},"content":"                \u0026\u0026 otherPet.getPetGender().equals(this.getPetGender());"},{"lineNumber":73,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":75,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"md-azsa"},"content":"    public int hashCode() {"},{"lineNumber":77,"author":{"gitID":"md-azsa"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":78,"author":{"gitID":"md-azsa"},"content":"        return Objects.hash(petName, petAge, petGender);"},{"lineNumber":79,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":81,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"md-azsa"},"content":"    public String toString() {"},{"lineNumber":83,"author":{"gitID":"md-azsa"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":84,"author":{"gitID":"md-azsa"},"content":"        builder.append(\" Pet Name: \")"},{"lineNumber":85,"author":{"gitID":"md-azsa"},"content":"                .append(getPetName())"},{"lineNumber":86,"author":{"gitID":"md-azsa"},"content":"                .append(\" Pet Age: \")"},{"lineNumber":87,"author":{"gitID":"md-azsa"},"content":"                .append(getPetAge())"},{"lineNumber":88,"author":{"gitID":"md-azsa"},"content":"                .append(\" Gender: \")"},{"lineNumber":89,"author":{"gitID":"md-azsa"},"content":"                .append(getPetGender())"},{"lineNumber":90,"author":{"gitID":"md-azsa"},"content":"                //.append(\" Pet Owner: \")"},{"lineNumber":91,"author":{"gitID":"md-azsa"},"content":"                .append(\" Species/Breed: \");"},{"lineNumber":92,"author":{"gitID":"md-azsa"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":93,"author":{"gitID":"md-azsa"},"content":"        return builder.toString();"},{"lineNumber":94,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":96,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":97,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":98,"author":{"gitID":"md-azsa"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"-":10,"md-azsa":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.NewApptAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"purplepers0n"},"content":"import seedu.address.commons.events.ui.NewListAllDisplayAvailableEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.appointment.exceptions.AppointmentAlreadyHasVetTechnicianException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToNextException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToPreviousException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDoesNotHavePetException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentHasBeenTakenException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentListIsEmptyException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationListEmptyException;"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasAppointmentException;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientHasExistingAppointmentException;"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientHasExistingPetException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonsListIsEmptyException;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.TechnicianHasExistingAppointmentException;"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.VetTechnicianNotFoundException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":48,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"    private final FilteredList\u003cClient\u003e filteredClients;"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":"    private final FilteredList\u003cVetTechnician\u003e filteredVetTechnicians;"},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"    private final FilteredList\u003cPet\u003e filteredPet;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"    private final FilteredList\u003cClientOwnPet\u003e filteredClientPetAssocation;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointment;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"    private Client displayClient \u003d null;"},{"lineNumber":63,"author":{"gitID":"purplepers0n"},"content":"    private ObservableList\u003cPet\u003e displayPet \u003d null;"},{"lineNumber":64,"author":{"gitID":"purplepers0n"},"content":"    private ObservableList\u003cAppointment\u003e displayAppt \u003d null;"},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"    private int currList \u003d 0;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        filteredClients \u003d new FilteredList\u003c\u003e(this.addressBook.getClientList());"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        filteredVetTechnicians \u003d new FilteredList\u003c\u003e(this.addressBook.getVetTechnicianList());"},{"lineNumber":81,"author":{"gitID":"purplepers0n"},"content":"        filteredPet \u003d new FilteredList\u003c\u003e((this.addressBook.getPetList()));"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":"        filteredClientPetAssocation \u003d new FilteredList\u003c\u003e(this.addressBook.getClientPetAssociations());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        filteredAppointment \u003d new FilteredList\u003c\u003e((this.addressBook.getAppointmentList()));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"        clearListAllPanel();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"     * Raises an event to indicate the model has changed"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":107,"author":{"gitID":"purplepers0n"},"content":"        raise(new NewApptAvailableEvent(addressBook.toString()));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"    //Person"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":116,"author":{"gitID":"purplepers0n"},"content":"        if (displayClient !\u003d null \u0026\u0026 displayClient.equals(target)) {"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"            clearListAllPanel();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"content":"    //@@author Godxin-functional"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public synchronized void scheduleAppointment(Appointment appointment) throws DuplicateAppointmentException,"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            AppointmentCloseToPreviousException, AppointmentCloseToNextException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        addressBook.scheduleAppointment(appointment);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENT);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"content":"    //@@author"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":140,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":141,"author":{"gitID":"md-azsa"},"content":"    public synchronized void unscheduleAppointment(Appointment appointment) throws"},{"lineNumber":142,"author":{"gitID":"md-azsa"},"content":"            AppointmentNotFoundException, AppointmentListIsEmptyException {"},{"lineNumber":143,"author":{"gitID":"md-azsa"},"content":"        addressBook.unscheduleAppointment(appointment);"},{"lineNumber":144,"author":{"gitID":"md-azsa"},"content":"        updateFilteredAppointmentList(PREDICATE_SHOW_ALL_APPOINTMENT);"},{"lineNumber":145,"author":{"gitID":"md-azsa"},"content":"        indicateAddressBookChanged();"},{"lineNumber":146,"author":{"gitID":"md-azsa"},"content":"        if (displayAppt !\u003d null \u0026\u0026 displayAppt.contains(appointment)) {"},{"lineNumber":147,"author":{"gitID":"md-azsa"},"content":"            displayAppt.remove(appointment);"},{"lineNumber":148,"author":{"gitID":"md-azsa"},"content":"            indicateListAllPanelChanged();"},{"lineNumber":149,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":152,"author":{"gitID":"md-azsa"},"content":"    //@@author"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"content":"    //@@author Godxin-functional"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void updateAppointment(Appointment target, Appointment rescheduleAppointment)"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, rescheduleAppointment);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        addressBook.updateAppointment(target, rescheduleAppointment);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":161,"author":{"gitID":"jonathanwj"},"content":"        if (displayAppt !\u003d null \u0026\u0026 displayAppt.contains(target)) {"},{"lineNumber":162,"author":{"gitID":"jonathanwj"},"content":"            displayAppt.set(displayAppt.indexOf(target), rescheduleAppointment);"},{"lineNumber":163,"author":{"gitID":"jonathanwj"},"content":"            indicateListAllPanelChanged();"},{"lineNumber":164,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"content":"    //@@author"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":171,"author":{"gitID":"jonathanwj"},"content":"            throws DuplicatePersonException, PersonNotFoundException, ClientHasExistingAppointmentException,"},{"lineNumber":172,"author":{"gitID":"jonathanwj"},"content":"            ClientHasExistingPetException, TechnicianHasExistingAppointmentException {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":176,"author":{"gitID":"jonathanwj"},"content":"        clearListAllPanel();"},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":179,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":180,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":181,"author":{"gitID":"md-azsa"},"content":"    public void sortClientList() throws PersonsListIsEmptyException {"},{"lineNumber":182,"author":{"gitID":"md-azsa"},"content":"        addressBook.sortClientList();"},{"lineNumber":183,"author":{"gitID":"md-azsa"},"content":"        indicateAddressBookChanged();"},{"lineNumber":184,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":186,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":187,"author":{"gitID":"md-azsa"},"content":"    // Pet"},{"lineNumber":188,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":189,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":190,"author":{"gitID":"md-azsa"},"content":"    public synchronized void addPet(Pet pet) throws DuplicatePetException {"},{"lineNumber":191,"author":{"gitID":"md-azsa"},"content":"        addressBook.addPet(pet);"},{"lineNumber":192,"author":{"gitID":"md-azsa"},"content":"        indicateAddressBookChanged();"},{"lineNumber":193,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":195,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":196,"author":{"gitID":"md-azsa"},"content":"    public synchronized void deletePet(Pet target) throws PetNotFoundException, ClientPetAssociationNotFoundException {"},{"lineNumber":197,"author":{"gitID":"md-azsa"},"content":"        addressBook.removePet(target);"},{"lineNumber":198,"author":{"gitID":"md-azsa"},"content":"        indicateAddressBookChanged();"},{"lineNumber":199,"author":{"gitID":"md-azsa"},"content":"        clearListAllPanel();"},{"lineNumber":200,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"md-azsa"},"content":"    //@@author"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"jonathanwj"},"content":"    // Association"},{"lineNumber":204,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":205,"author":{"gitID":"jonathanwj"},"content":"    //@@author jonathanwj"},{"lineNumber":206,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":207,"author":{"gitID":"jonathanwj"},"content":"    public void addPetToClient(Pet pet, Client client)"},{"lineNumber":208,"author":{"gitID":"jonathanwj"},"content":"            throws ClientAlreadyOwnsPetException, PetAlreadyHasOwnerException {"},{"lineNumber":209,"author":{"gitID":"jonathanwj"},"content":"        requireAllNonNull(pet, client);"},{"lineNumber":210,"author":{"gitID":"jonathanwj"},"content":"        addressBook.addPetToClient(pet, client);"},{"lineNumber":211,"author":{"gitID":"jonathanwj"},"content":"        indicateAddressBookChanged();"},{"lineNumber":212,"author":{"gitID":"jonathanwj"},"content":"        clearListAllPanel();"},{"lineNumber":213,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":215,"author":{"gitID":"jonathanwj"},"content":"    //@@author jonathanwj"},{"lineNumber":216,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":217,"author":{"gitID":"jonathanwj"},"content":"    public void removePetFromClient(Pet pet, Client client) throws ClientPetAssociationNotFoundException {"},{"lineNumber":218,"author":{"gitID":"jonathanwj"},"content":"        requireAllNonNull(pet, client);"},{"lineNumber":219,"author":{"gitID":"jonathanwj"},"content":"        addressBook.removePetFromClient(pet, client);"},{"lineNumber":220,"author":{"gitID":"jonathanwj"},"content":"        indicateAddressBookChanged();"},{"lineNumber":221,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":223,"author":{"gitID":"jonathanwj"},"content":"    //@@author"},{"lineNumber":224,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":225,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":226,"author":{"gitID":"md-azsa"},"content":"    public void sortPetList() throws ClientPetAssociationListEmptyException {"},{"lineNumber":227,"author":{"gitID":"md-azsa"},"content":"        addressBook.sortPetList();"},{"lineNumber":228,"author":{"gitID":"md-azsa"},"content":"        indicateAddressBookChanged();"},{"lineNumber":229,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":231,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":232,"author":{"gitID":"md-azsa"},"content":"    public void addAppointmentToPet(Appointment appointment, Pet pet)"},{"lineNumber":233,"author":{"gitID":"md-azsa"},"content":"            throws PetAlreadyHasAppointmentException, ClientPetAssociationNotFoundException,"},{"lineNumber":234,"author":{"gitID":"md-azsa"},"content":"            AppointmentNotFoundException, DuplicateAppointmentException, AppointmentHasBeenTakenException {"},{"lineNumber":235,"author":{"gitID":"md-azsa"},"content":"        requireAllNonNull(appointment, pet);"},{"lineNumber":236,"author":{"gitID":"md-azsa"},"content":"        addressBook.addAppointmentToPet(appointment, pet);"},{"lineNumber":237,"author":{"gitID":"md-azsa"},"content":"        indicateAddressBookChanged();"},{"lineNumber":238,"author":{"gitID":"md-azsa"},"content":"        clearListAllPanel();"},{"lineNumber":239,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":241,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":242,"author":{"gitID":"md-azsa"},"content":"    public void removeAppointmentFromPet(Appointment appointment)"},{"lineNumber":243,"author":{"gitID":"md-azsa"},"content":"            throws AppointmentNotFoundException, DuplicateAppointmentException, AppointmentDoesNotHavePetException {"},{"lineNumber":244,"author":{"gitID":"md-azsa"},"content":"        requireNonNull(appointment);"},{"lineNumber":245,"author":{"gitID":"md-azsa"},"content":"        addressBook.removeAppointmentFromPet(appointment);"},{"lineNumber":246,"author":{"gitID":"md-azsa"},"content":"        indicateAddressBookChanged();"},{"lineNumber":247,"author":{"gitID":"md-azsa"},"content":"        clearListAllPanel();"},{"lineNumber":248,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"md-azsa"},"content":"    //@@author"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"jonathanwj"},"content":"    //@@author jonathanwj"},{"lineNumber":252,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":253,"author":{"gitID":"jonathanwj"},"content":"    public void addVetTechToAppointment(VetTechnician technician, Appointment appointment)"},{"lineNumber":254,"author":{"gitID":"jonathanwj"},"content":"            throws AppointmentAlreadyHasVetTechnicianException,"},{"lineNumber":255,"author":{"gitID":"jonathanwj"},"content":"            DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":256,"author":{"gitID":"jonathanwj"},"content":"        requireAllNonNull(technician, appointment);"},{"lineNumber":257,"author":{"gitID":"jonathanwj"},"content":"        addressBook.addVetTechToAppointment(technician, appointment);"},{"lineNumber":258,"author":{"gitID":"jonathanwj"},"content":"        indicateAddressBookChanged();"},{"lineNumber":259,"author":{"gitID":"jonathanwj"},"content":"        clearListAllPanel();"},{"lineNumber":260,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":262,"author":{"gitID":"jonathanwj"},"content":"    //@@author jonathanwj"},{"lineNumber":263,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":264,"author":{"gitID":"jonathanwj"},"content":"    public void removeVetTechFromAppointent(Appointment apptToRemoveVetTechFrom)"},{"lineNumber":265,"author":{"gitID":"jonathanwj"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException,"},{"lineNumber":266,"author":{"gitID":"jonathanwj"},"content":"            VetTechnicianNotFoundException {"},{"lineNumber":267,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(apptToRemoveVetTechFrom);"},{"lineNumber":268,"author":{"gitID":"jonathanwj"},"content":"        addressBook.removeVetFromAppointment(apptToRemoveVetTechFrom);"},{"lineNumber":269,"author":{"gitID":"jonathanwj"},"content":"        indicateAddressBookChanged();"},{"lineNumber":270,"author":{"gitID":"jonathanwj"},"content":"        clearListAllPanel();"},{"lineNumber":271,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":273,"author":{"gitID":"jonathanwj"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":274,"author":{"gitID":"jonathanwj"},"content":"    //@@author"},{"lineNumber":275,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"purplepers0n"},"content":"     * Returns an unmodifiable view of the list of {@code Pet} backed by the internal list of"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":290,"author":{"gitID":"purplepers0n"},"content":"    public ObservableList\u003cPet\u003e getFilteredPetList() {"},{"lineNumber":291,"author":{"gitID":"purplepers0n"},"content":"        return FXCollections.unmodifiableObservableList(filteredPet);"},{"lineNumber":292,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":301,"author":{"gitID":"-"},"content":"    public void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate) {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        filteredAppointment.setPredicate(predicate);"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"jonathanwj"},"content":"    //Client"},{"lineNumber":307,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":308,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":309,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":311,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":313,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cClient\u003e getFilteredClientList() {"},{"lineNumber":314,"author":{"gitID":"jonathanwj"},"content":"        return FXCollections.unmodifiableObservableList(filteredClients);"},{"lineNumber":315,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":317,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":318,"author":{"gitID":"jonathanwj"},"content":"    public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":320,"author":{"gitID":"jonathanwj"},"content":"        filteredClients.setPredicate(predicate);"},{"lineNumber":321,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":323,"author":{"gitID":"jonathanwj"},"content":"    //Vet Technician"},{"lineNumber":324,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":325,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":326,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the list of {@code VetTechnician} backed by the internal list of"},{"lineNumber":327,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":328,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":330,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList() {"},{"lineNumber":331,"author":{"gitID":"jonathanwj"},"content":"        return FXCollections.unmodifiableObservableList(filteredVetTechnicians);"},{"lineNumber":332,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":334,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":335,"author":{"gitID":"jonathanwj"},"content":"    public void updateFilteredVetTechnicianList(Predicate\u003cVetTechnician\u003e predicate) {"},{"lineNumber":336,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":337,"author":{"gitID":"jonathanwj"},"content":"        filteredVetTechnicians.setPredicate(predicate);"},{"lineNumber":338,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":339,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":340,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":341,"author":{"gitID":"purplepers0n"},"content":"    public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"},{"lineNumber":342,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":343,"author":{"gitID":"purplepers0n"},"content":"        filteredPet.setPredicate(predicate);"},{"lineNumber":344,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":345,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":346,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":347,"author":{"gitID":"jonathanwj"},"content":"    public void updateFilteredClientOwnPetAssocation(Predicate\u003cClientOwnPet\u003e predicate) {"},{"lineNumber":348,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":349,"author":{"gitID":"jonathanwj"},"content":"        filteredClientPetAssocation.setPredicate(predicate);"},{"lineNumber":350,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":351,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":352,"author":{"gitID":"jonathanwj"},"content":"    //Association"},{"lineNumber":353,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":354,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":355,"author":{"gitID":"jonathanwj"},"content":"     * Returns an unmodifiable view of the list of {@code ClientOwnPet} backed by the internal list of"},{"lineNumber":356,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":357,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":358,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":359,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cClientOwnPet\u003e getFilteredClientPetAssociationList() {"},{"lineNumber":360,"author":{"gitID":"jonathanwj"},"content":"        return FXCollections.unmodifiableObservableList(filteredClientPetAssocation);"},{"lineNumber":361,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":363,"author":{"gitID":"-"},"content":"    // Appointment"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":366,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"},{"lineNumber":367,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":368,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":369,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":370,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":371,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredAppointment);"},{"lineNumber":372,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":373,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":374,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":375,"author":{"gitID":"md-azsa"},"content":"    @Override"},{"lineNumber":376,"author":{"gitID":"md-azsa"},"content":"    public void sortAppointmentList() throws AppointmentListIsEmptyException {"},{"lineNumber":377,"author":{"gitID":"md-azsa"},"content":"        addressBook.sortAppointmentList();"},{"lineNumber":378,"author":{"gitID":"md-azsa"},"content":"        indicateAddressBookChanged();"},{"lineNumber":379,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":380,"author":{"gitID":"md-azsa"},"content":"    //@@author"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":383,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":384,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":385,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":386,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":387,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":388,"author":{"gitID":"-"},"content":""},{"lineNumber":389,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":390,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":391,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":392,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":395,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":396,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":397,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"},{"lineNumber":398,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 filteredClients.equals(other.filteredClients)"},{"lineNumber":399,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 filteredVetTechnicians.equals(other.filteredVetTechnicians)"},{"lineNumber":400,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 filteredClientPetAssocation.equals(other.filteredClientPetAssocation);"},{"lineNumber":401,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":402,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":403,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":404,"author":{"gitID":"purplepers0n"},"content":"    public void setCurrentList(int currList) {"},{"lineNumber":405,"author":{"gitID":"purplepers0n"},"content":"        this.currList \u003d currList;"},{"lineNumber":406,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":407,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":408,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":409,"author":{"gitID":"purplepers0n"},"content":"    public int getCurrentList() {"},{"lineNumber":410,"author":{"gitID":"purplepers0n"},"content":"        return this.currList;"},{"lineNumber":411,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":412,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":413,"author":{"gitID":"purplepers0n"},"content":"    //@@author purplepers0n"},{"lineNumber":414,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":415,"author":{"gitID":"purplepers0n"},"content":"    public void updateDetailsList(Client client, ObservableList\u003cPet\u003e pets,"},{"lineNumber":416,"author":{"gitID":"purplepers0n"},"content":"                                  ObservableList\u003cAppointment\u003e appointments) {"},{"lineNumber":417,"author":{"gitID":"purplepers0n"},"content":"        displayClient \u003d client;"},{"lineNumber":418,"author":{"gitID":"purplepers0n"},"content":"        displayPet \u003d pets;"},{"lineNumber":419,"author":{"gitID":"purplepers0n"},"content":"        displayAppt \u003d appointments;"},{"lineNumber":420,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":421,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":422,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":423,"author":{"gitID":"purplepers0n"},"content":"    public Client getClientDetails() {"},{"lineNumber":424,"author":{"gitID":"purplepers0n"},"content":"        return displayClient;"},{"lineNumber":425,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":426,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":427,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":428,"author":{"gitID":"purplepers0n"},"content":"    public ObservableList\u003cPet\u003e getClientPetList() {"},{"lineNumber":429,"author":{"gitID":"purplepers0n"},"content":"        return displayPet;"},{"lineNumber":430,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":431,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":432,"author":{"gitID":"purplepers0n"},"content":"    @Override"},{"lineNumber":433,"author":{"gitID":"purplepers0n"},"content":"    public ObservableList\u003cAppointment\u003e getClientApptList() {"},{"lineNumber":434,"author":{"gitID":"purplepers0n"},"content":"        return displayAppt;"},{"lineNumber":435,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":436,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":437,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":438,"author":{"gitID":"purplepers0n"},"content":"     * Clears the list all panel"},{"lineNumber":439,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":440,"author":{"gitID":"purplepers0n"},"content":"    private void clearListAllPanel() {"},{"lineNumber":441,"author":{"gitID":"purplepers0n"},"content":"        displayClient \u003d null;"},{"lineNumber":442,"author":{"gitID":"purplepers0n"},"content":"        displayPet \u003d null;"},{"lineNumber":443,"author":{"gitID":"purplepers0n"},"content":"        displayAppt \u003d null;"},{"lineNumber":444,"author":{"gitID":"purplepers0n"},"content":"        indicateListAllPanelChanged();"},{"lineNumber":445,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":446,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":447,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":448,"author":{"gitID":"purplepers0n"},"content":"     * Updates the list all panel for UI"},{"lineNumber":449,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":450,"author":{"gitID":"purplepers0n"},"content":"    private void indicateListAllPanelChanged() {"},{"lineNumber":451,"author":{"gitID":"purplepers0n"},"content":"        raise(new NewListAllDisplayAvailableEvent(null));"},{"lineNumber":452,"author":{"gitID":"purplepers0n"},"content":"    }"},{"lineNumber":453,"author":{"gitID":"purplepers0n"},"content":"}"}],"authorContributionMap":{"jonathanwj":122,"null":4,"purplepers0n":76,"-":181,"md-azsa":70}},{"path":"src/main/java/seedu/address/model/client/UniqueClientList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientNotFoundException;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.DuplicateClientException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":" * A list of clients that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":" *"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":" * @see Client#equals(Object)"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"public class UniqueClientList implements Iterable\u003cClient\u003e {"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    private final ObservableList\u003cClient\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":"     * Returns true if the list contains an equivalent client as the given argument."},{"lineNumber":28,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"jonathanwj"},"content":"    public boolean contains(Client toCheck) {"},{"lineNumber":30,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(toCheck);"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"jonathanwj"},"content":"     * Adds a client to the list."},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"     * @throws DuplicateClientException if the client to add is a duplicate of an existing client in the list."},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"    public void add(Client toAdd) throws DuplicateClientException {"},{"lineNumber":40,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(toAdd);"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"        if (contains(toAdd)) {"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"            throw new DuplicateClientException();"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"        internalList.add(toAdd);"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":47,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"jonathanwj"},"content":"     * Replaces the client {@code target} in the list with {@code editedClient}."},{"lineNumber":49,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"jonathanwj"},"content":"     * @throws DuplicateClientException if the replacement is equivalent to another existing client in the list."},{"lineNumber":51,"author":{"gitID":"jonathanwj"},"content":"     * @throws ClientNotFoundException if {@code target} could not be found in the list."},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"    public void setClient(Client target, Client editedClient)"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"            throws DuplicateClientException, ClientNotFoundException {"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(editedClient);"},{"lineNumber":56,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":57,"author":{"gitID":"jonathanwj"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":58,"author":{"gitID":"jonathanwj"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":59,"author":{"gitID":"jonathanwj"},"content":"            throw new ClientNotFoundException();"},{"lineNumber":60,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":62,"author":{"gitID":"jonathanwj"},"content":"        if (!target.equals(editedClient) \u0026\u0026 internalList.contains(editedClient)) {"},{"lineNumber":63,"author":{"gitID":"jonathanwj"},"content":"            throw new DuplicateClientException();"},{"lineNumber":64,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":66,"author":{"gitID":"jonathanwj"},"content":"        internalList.set(index, editedClient);"},{"lineNumber":67,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"jonathanwj"},"content":"     * Removes the equivalent client from the list."},{"lineNumber":71,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":72,"author":{"gitID":"jonathanwj"},"content":"     * @throws ClientNotFoundException if no such client could be found in the list."},{"lineNumber":73,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"jonathanwj"},"content":"    public boolean remove(Client toRemove) throws ClientNotFoundException {"},{"lineNumber":75,"author":{"gitID":"jonathanwj"},"content":"        requireNonNull(toRemove);"},{"lineNumber":76,"author":{"gitID":"jonathanwj"},"content":"        final boolean clientFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":77,"author":{"gitID":"jonathanwj"},"content":"        if (!clientFoundAndDeleted) {"},{"lineNumber":78,"author":{"gitID":"jonathanwj"},"content":"            throw new ClientNotFoundException();"},{"lineNumber":79,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":"        return clientFoundAndDeleted;"},{"lineNumber":81,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":"    public void setClients(UniqueClientList replacement) {"},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"    public void setClients(List\u003cClient\u003e clients) throws DuplicateClientException {"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"        requireAllNonNull(clients);"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"        final UniqueClientList replacement \u003d new UniqueClientList();"},{"lineNumber":90,"author":{"gitID":"jonathanwj"},"content":"        for (final Client client : clients) {"},{"lineNumber":91,"author":{"gitID":"jonathanwj"},"content":"            replacement.add(client);"},{"lineNumber":92,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"jonathanwj"},"content":"        setClients(replacement);"},{"lineNumber":94,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":96,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"jonathanwj"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":98,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cClient\u003e asObservableList() {"},{"lineNumber":100,"author":{"gitID":"jonathanwj"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":101,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":103,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"jonathanwj"},"content":"    public Iterator\u003cClient\u003e iterator() {"},{"lineNumber":105,"author":{"gitID":"jonathanwj"},"content":"        return internalList.iterator();"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitID":"jonathanwj"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":111,"author":{"gitID":"jonathanwj"},"content":"                || (other instanceof UniqueClientList // instanceof handles nulls"},{"lineNumber":112,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueClientList) other).internalList));"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":115,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":116,"author":{"gitID":"jonathanwj"},"content":"    public int hashCode() {"},{"lineNumber":117,"author":{"gitID":"jonathanwj"},"content":"        return internalList.hashCode();"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":108,"-":11}},{"path":"src/main/java/seedu/address/model/client/Client.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.client;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class Client extends Person {"},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"    public Client(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"        super(name, phone, email, address, tags);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"jonathanwj"},"content":"    public PersonRole getRole() {"},{"lineNumber":25,"author":{"gitID":"jonathanwj"},"content":"        return PersonRole.CLIENT_ROLE;"},{"lineNumber":26,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        if (!(other instanceof Client)) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Client otherClient \u003d (Client) other;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return otherClient.getName().equals(this.getName())"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherClient.getPhone().equals(this.getPhone())"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherClient.getEmail().equals(this.getEmail())"},{"lineNumber":42,"author":{"gitID":"jonathanwj"},"content":"                \u0026\u0026 otherClient.getAddress().equals(this.getAddress());"},{"lineNumber":43,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":10,"-":36}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"import java.util.ListIterator;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitID":"jonathanwj"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"jonathanwj"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":19,"author":{"gitID":"jonathanwj"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.appointment.exceptions.AppointmentAlreadyHasVetTechnicianException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToNextException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToPreviousException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDoesNotHavePetException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentHasBeenTakenException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentListIsEmptyException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationListEmptyException;"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasAppointmentException;"},{"lineNumber":36,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":37,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":38,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientHasExistingAppointmentException;"},{"lineNumber":39,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientHasExistingPetException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":41,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.person.PersonRole;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonsListIsEmptyException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.UniquePetList;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":52,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.TechnicianHasExistingAppointmentException;"},{"lineNumber":54,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.VetTechnicianNotFoundException;"},{"lineNumber":55,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":58,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":59,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":60,"author":{"gitID":"-"},"content":" */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private final UniqueAppointmentList appointments;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private final UniquePetList pets;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"jonathanwj"},"content":"    private final ObservableList\u003cClientOwnPet\u003e clientPetAssociations;"},{"lineNumber":69,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":80,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        appointments \u003d new UniqueAppointmentList();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        pets \u003d new UniquePetList();"},{"lineNumber":83,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":84,"author":{"gitID":"jonathanwj"},"content":"        clientPetAssociations \u003d FXCollections.observableArrayList();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"jonathanwj"},"content":"    public AddressBook() {"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":105,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"md-azsa"},"content":"     * Sorts the persons list lexicographically."},{"lineNumber":107,"author":{"gitID":"md-azsa"},"content":"     * @throws PersonsListIsEmptyException"},{"lineNumber":108,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"md-azsa"},"content":"    public void sortClientList() throws PersonsListIsEmptyException {"},{"lineNumber":110,"author":{"gitID":"md-azsa"},"content":"        if (persons.isEmpty()) {"},{"lineNumber":111,"author":{"gitID":"md-azsa"},"content":"            throw new PersonsListIsEmptyException();"},{"lineNumber":112,"author":{"gitID":"md-azsa"},"content":"        } else {"},{"lineNumber":113,"author":{"gitID":"md-azsa"},"content":"            this.persons.sort();"},{"lineNumber":114,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"md-azsa"},"content":"    //@@author"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) throws DuplicateAppointmentException,"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            AppointmentCloseToPreviousException, AppointmentCloseToNextException {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        this.appointments.setAppointments(appointments);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":128,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"md-azsa"},"content":"     * Sets the list of pets to contain data"},{"lineNumber":130,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"md-azsa"},"content":"    public void setPets(List\u003cPet\u003e pets) throws DuplicatePetException {"},{"lineNumber":132,"author":{"gitID":"md-azsa"},"content":"        this.pets.setPets(pets);"},{"lineNumber":133,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":135,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"md-azsa"},"content":"     * Sorts the pet list lexicographically."},{"lineNumber":137,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"md-azsa"},"content":"    public void sortPetList() throws ClientPetAssociationListEmptyException {"},{"lineNumber":139,"author":{"gitID":"md-azsa"},"content":"        if (clientPetAssociations.isEmpty()) {"},{"lineNumber":140,"author":{"gitID":"md-azsa"},"content":"            throw new ClientPetAssociationListEmptyException();"},{"lineNumber":141,"author":{"gitID":"md-azsa"},"content":"        } else {"},{"lineNumber":142,"author":{"gitID":"md-azsa"},"content":"            this.clientPetAssociations.sort((ClientOwnPet a, ClientOwnPet b) -\u003e"},{"lineNumber":143,"author":{"gitID":"md-azsa"},"content":"                    a.getPet().getPetName().toString().toLowerCase()"},{"lineNumber":144,"author":{"gitID":"md-azsa"},"content":"                    .compareTo(b.getPet().getPetName().toString().toLowerCase()));"},{"lineNumber":145,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":148,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"md-azsa"},"content":"     * Sorts the appointment internal list."},{"lineNumber":150,"author":{"gitID":"md-azsa"},"content":"     *"},{"lineNumber":151,"author":{"gitID":"md-azsa"},"content":"     * @throws AppointmentListIsEmptyException"},{"lineNumber":152,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"md-azsa"},"content":"    public void sortAppointmentList() throws AppointmentListIsEmptyException {"},{"lineNumber":154,"author":{"gitID":"md-azsa"},"content":"        if (appointments.isEmpty()) {"},{"lineNumber":155,"author":{"gitID":"md-azsa"},"content":"            throw new AppointmentListIsEmptyException();"},{"lineNumber":156,"author":{"gitID":"md-azsa"},"content":"        } else {"},{"lineNumber":157,"author":{"gitID":"md-azsa"},"content":"            appointments.sort();"},{"lineNumber":158,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"md-azsa"},"content":"    //@@author"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"jonathanwj"},"content":"    public void setClientPetAssociations(List\u003cClientOwnPet\u003e associations) {"},{"lineNumber":163,"author":{"gitID":"jonathanwj"},"content":"        this.clientPetAssociations.setAll(associations);"},{"lineNumber":164,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":168,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":175,"author":{"gitID":"jonathanwj"},"content":"        try {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":177,"author":{"gitID":"jonathanwj"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        List\u003cAppointment\u003e syncedAppointmentList \u003d newData.getAppointmentList().stream()"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                .map(Appointment::new).collect(Collectors.toList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            setAppointments(syncedAppointmentList);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        } catch (DuplicateAppointmentException e) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Program should not have duplicate appointments\");"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        } catch (AppointmentCloseToPreviousException ape) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Program should not schedule appointments\""},{"lineNumber":189,"author":{"gitID":"-"},"content":"                    + \"when the previous one has not ended yet\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        } catch (AppointmentCloseToNextException ape) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Program should not schedule appointments\""},{"lineNumber":192,"author":{"gitID":"-"},"content":"                    + \"when too close to the next one\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        List\u003cPet\u003e syncedPetList \u003d newData.getPetList().stream()"},{"lineNumber":196,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterPetTagList)"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"            setPets(syncedPetList);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        } catch (DuplicatePetException e) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Program should not have duplicate pets\");"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":204,"author":{"gitID":"jonathanwj"},"content":"        setClientPetAssociations(newData.getClientPetAssociations());"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":219,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":221,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"content":"    //@@author"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":229,"author":{"gitID":"jonathanwj"},"content":"     * @throws DuplicatePersonException if updating the client\u0027s details causes the client to be equivalent to"},{"lineNumber":230,"author":{"gitID":"jonathanwj"},"content":"     *                                  another existing client in the list."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":235,"author":{"gitID":"jonathanwj"},"content":"            throws DuplicatePersonException, PersonNotFoundException, ClientHasExistingPetException,"},{"lineNumber":236,"author":{"gitID":"jonathanwj"},"content":"            ClientHasExistingAppointmentException, TechnicianHasExistingAppointmentException {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"jonathanwj"},"content":"        // check able to update"},{"lineNumber":240,"author":{"gitID":"jonathanwj"},"content":"        if (target instanceof Client \u0026\u0026 editedPerson instanceof VetTechnician) {"},{"lineNumber":241,"author":{"gitID":"jonathanwj"},"content":"            ListIterator\u003cClientOwnPet\u003e copIterator \u003d clientPetAssociations.listIterator();"},{"lineNumber":242,"author":{"gitID":"jonathanwj"},"content":"            while (copIterator.hasNext()) {"},{"lineNumber":243,"author":{"gitID":"jonathanwj"},"content":"                ClientOwnPet association \u003d copIterator.next();"},{"lineNumber":244,"author":{"gitID":"jonathanwj"},"content":"                if (association.getClient().equals(target)) {"},{"lineNumber":245,"author":{"gitID":"jonathanwj"},"content":"                    throw new ClientHasExistingPetException();"},{"lineNumber":246,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":247,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":248,"author":{"gitID":"jonathanwj"},"content":"            Iterator\u003cAppointment\u003e i \u003d appointments.iterator();"},{"lineNumber":249,"author":{"gitID":"jonathanwj"},"content":"            while (i.hasNext()) {"},{"lineNumber":250,"author":{"gitID":"jonathanwj"},"content":"                Appointment app \u003d i.next();"},{"lineNumber":251,"author":{"gitID":"jonathanwj"},"content":"                if (app.getClientOwnPet() !\u003d null \u0026\u0026 app.getClientOwnPet().getClient().equals(target)) {"},{"lineNumber":252,"author":{"gitID":"jonathanwj"},"content":"                    throw new ClientHasExistingAppointmentException();"},{"lineNumber":253,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":254,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":255,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":256,"author":{"gitID":"jonathanwj"},"content":"        if (target instanceof VetTechnician \u0026\u0026 editedPerson instanceof Client) {"},{"lineNumber":257,"author":{"gitID":"jonathanwj"},"content":"            Iterator\u003cAppointment\u003e i \u003d appointments.iterator();"},{"lineNumber":258,"author":{"gitID":"jonathanwj"},"content":"            while (i.hasNext()) {"},{"lineNumber":259,"author":{"gitID":"jonathanwj"},"content":"                Appointment app \u003d i.next();"},{"lineNumber":260,"author":{"gitID":"jonathanwj"},"content":"                if (app.getVetTechnician() !\u003d null \u0026\u0026 app.getVetTechnician().equals(target)) {"},{"lineNumber":261,"author":{"gitID":"jonathanwj"},"content":"                    throw new TechnicianHasExistingAppointmentException();"},{"lineNumber":262,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":263,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":264,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":266,"author":{"gitID":"jonathanwj"},"content":"        // update objects"},{"lineNumber":267,"author":{"gitID":"jonathanwj"},"content":"        if (target instanceof Client \u0026\u0026 editedPerson instanceof Client) {"},{"lineNumber":268,"author":{"gitID":"jonathanwj"},"content":"            ListIterator\u003cClientOwnPet\u003e copIterator \u003d clientPetAssociations.listIterator();"},{"lineNumber":269,"author":{"gitID":"jonathanwj"},"content":"            while (copIterator.hasNext()) {"},{"lineNumber":270,"author":{"gitID":"jonathanwj"},"content":"                ClientOwnPet association \u003d copIterator.next();"},{"lineNumber":271,"author":{"gitID":"jonathanwj"},"content":"                if (association.getClient().equals(target)) {"},{"lineNumber":272,"author":{"gitID":"jonathanwj"},"content":"                    copIterator.remove();"},{"lineNumber":273,"author":{"gitID":"jonathanwj"},"content":"                    copIterator.add(new ClientOwnPet((Client) editedPerson, association.getPet()));"},{"lineNumber":274,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":275,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":276,"author":{"gitID":"jonathanwj"},"content":"            Iterator\u003cAppointment\u003e i \u003d appointments.iterator();"},{"lineNumber":277,"author":{"gitID":"jonathanwj"},"content":"            while (i.hasNext()) {"},{"lineNumber":278,"author":{"gitID":"jonathanwj"},"content":"                Appointment app \u003d i.next();"},{"lineNumber":279,"author":{"gitID":"jonathanwj"},"content":"                if (app.getClientOwnPet() !\u003d null \u0026\u0026 app.getClientOwnPet().getClient().equals(target)) {"},{"lineNumber":280,"author":{"gitID":"jonathanwj"},"content":"                    app.setClientOwnPet(new ClientOwnPet((Client) editedPerson, app.getClientOwnPet().getPet()));"},{"lineNumber":281,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":282,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":283,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":284,"author":{"gitID":"jonathanwj"},"content":"            Iterator\u003cAppointment\u003e i \u003d appointments.iterator();"},{"lineNumber":285,"author":{"gitID":"jonathanwj"},"content":"            while (i.hasNext()) {"},{"lineNumber":286,"author":{"gitID":"jonathanwj"},"content":"                Appointment app \u003d i.next();"},{"lineNumber":287,"author":{"gitID":"jonathanwj"},"content":"                if (app.getVetTechnician() !\u003d null \u0026\u0026 app.getVetTechnician().equals(target)) {"},{"lineNumber":288,"author":{"gitID":"jonathanwj"},"content":"                    app.removeVetTech();"},{"lineNumber":289,"author":{"gitID":"jonathanwj"},"content":"                    app.setOptionalVetTech(Optional.of((VetTechnician) editedPerson));"},{"lineNumber":290,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":291,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":292,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":293,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":295,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":296,"author":{"gitID":"jonathanwj"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any client"},{"lineNumber":297,"author":{"gitID":"jonathanwj"},"content":"        // in the client list."},{"lineNumber":298,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":299,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"content":"    //@@author"},{"lineNumber":302,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":304,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     * list."},{"lineNumber":307,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":309,"author":{"gitID":"jonathanwj"},"content":"        Person syncedPerson;"},{"lineNumber":310,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":320,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":322,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":323,"author":{"gitID":"jonathanwj"},"content":"        if (person.getRole().equals(PersonRole.CLIENT_ROLE)) {"},{"lineNumber":324,"author":{"gitID":"jonathanwj"},"content":"            syncedPerson \u003d new Client(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":325,"author":{"gitID":"jonathanwj"},"content":"                    person.getAddress(), correctTagReferences);"},{"lineNumber":326,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":327,"author":{"gitID":"jonathanwj"},"content":"            syncedPerson \u003d new VetTechnician(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":328,"author":{"gitID":"jonathanwj"},"content":"                    person.getAddress(), correctTagReferences);"},{"lineNumber":329,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":330,"author":{"gitID":"jonathanwj"},"content":"        return syncedPerson;"},{"lineNumber":331,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"content":"    //@@author"},{"lineNumber":334,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":335,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":336,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":337,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":338,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":339,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":340,"author":{"gitID":"-"},"content":"        ArrayList\u003cClientOwnPet\u003e toRemoveClientPetAssociationList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":341,"author":{"gitID":"-"},"content":"        ArrayList\u003cPet\u003e toRemovePetList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"        // Adds the key and its pets to the toRemoveList"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        for (ClientOwnPet cop : clientPetAssociations) {"},{"lineNumber":345,"author":{"gitID":"-"},"content":"            if (cop.getClient().equals(key)) {"},{"lineNumber":346,"author":{"gitID":"-"},"content":"                toRemoveClientPetAssociationList.add(cop);"},{"lineNumber":347,"author":{"gitID":"-"},"content":"                toRemovePetList.add(cop.getPet());"},{"lineNumber":348,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":349,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"        for (Iterator\u003cAppointment\u003e iterator \u003d appointments.iterator(); iterator.hasNext();) {"},{"lineNumber":352,"author":{"gitID":"-"},"content":"            Appointment appt \u003d iterator.next();"},{"lineNumber":353,"author":{"gitID":"-"},"content":"            if (appt.getClientOwnPet() \u003d\u003d null) {"},{"lineNumber":354,"author":{"gitID":"-"},"content":"                continue;"},{"lineNumber":355,"author":{"gitID":"-"},"content":"            } else if (appt.getClientOwnPet().getClient().equals(key)) {"},{"lineNumber":356,"author":{"gitID":"-"},"content":"                appt.setClientOwnPetToNull();"},{"lineNumber":357,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":358,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":"        // Removes the key and its pets."},{"lineNumber":361,"author":{"gitID":"-"},"content":"        clientPetAssociations.removeAll(toRemoveClientPetAssociationList);"},{"lineNumber":362,"author":{"gitID":"-"},"content":"        pets.getInternalList().removeAll(toRemovePetList);"},{"lineNumber":363,"author":{"gitID":"jonathanwj"},"content":"        if (!persons.remove(key)) {"},{"lineNumber":364,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":365,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":366,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":367,"author":{"gitID":"jonathanwj"},"content":"        // Removes vet from any existing appointment"},{"lineNumber":368,"author":{"gitID":"jonathanwj"},"content":"        for (Appointment appointment : appointments) {"},{"lineNumber":369,"author":{"gitID":"jonathanwj"},"content":"            appointment.getOptionalVetTechnician().ifPresent(technician -\u003e {"},{"lineNumber":370,"author":{"gitID":"jonathanwj"},"content":"                try {"},{"lineNumber":371,"author":{"gitID":"jonathanwj"},"content":"                    if (technician.equals(key)) {"},{"lineNumber":372,"author":{"gitID":"jonathanwj"},"content":"                        removeVetFromAppointment(appointment);"},{"lineNumber":373,"author":{"gitID":"jonathanwj"},"content":"                    }"},{"lineNumber":374,"author":{"gitID":"jonathanwj"},"content":"                } catch (AppointmentNotFoundException e) {"},{"lineNumber":375,"author":{"gitID":"jonathanwj"},"content":"                    throw new AssertionError(\"Appointment should be found\");"},{"lineNumber":376,"author":{"gitID":"-"},"content":"                } catch (DuplicateAppointmentException e) {"},{"lineNumber":377,"author":{"gitID":"-"},"content":"                    throw new AssertionError(\"Program should not have duplicate appointments\");"},{"lineNumber":378,"author":{"gitID":"jonathanwj"},"content":"                } catch (VetTechnicianNotFoundException e) {"},{"lineNumber":379,"author":{"gitID":"jonathanwj"},"content":"                    throw new AssertionError(\"VetTechnician should be found\");"},{"lineNumber":380,"author":{"gitID":"jonathanwj"},"content":"                }"},{"lineNumber":381,"author":{"gitID":"jonathanwj"},"content":"            });"},{"lineNumber":382,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":383,"author":{"gitID":"jonathanwj"},"content":"        return true;"},{"lineNumber":384,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":389,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":390,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"    //// appointment-level operations"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":395,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":396,"author":{"gitID":"md-azsa"},"content":"     * Unschedules an appointment"},{"lineNumber":397,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":398,"author":{"gitID":"md-azsa"},"content":"    public void unscheduleAppointment(Appointment key) throws AppointmentListIsEmptyException,"},{"lineNumber":399,"author":{"gitID":"md-azsa"},"content":"            AppointmentNotFoundException {"},{"lineNumber":400,"author":{"gitID":"md-azsa"},"content":"        if (appointments.isEmpty()) {"},{"lineNumber":401,"author":{"gitID":"md-azsa"},"content":"            throw new AppointmentListIsEmptyException();"},{"lineNumber":402,"author":{"gitID":"md-azsa"},"content":"        } else {"},{"lineNumber":403,"author":{"gitID":"md-azsa"},"content":"            appointments.remove(key);"},{"lineNumber":404,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":405,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":406,"author":{"gitID":"md-azsa"},"content":"    //@@author"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"content":"    //@@author Godxin-functional"},{"lineNumber":409,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":410,"author":{"gitID":"-"},"content":"     * Schedule an appointment to the address book."},{"lineNumber":411,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":412,"author":{"gitID":"-"},"content":"     * @throws DuplicateAppointmentException if an equivalent person already exists."},{"lineNumber":413,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":414,"author":{"gitID":"-"},"content":"    public void scheduleAppointment(Appointment a) throws DuplicateAppointmentException,"},{"lineNumber":415,"author":{"gitID":"-"},"content":"            AppointmentCloseToPreviousException, AppointmentCloseToNextException {"},{"lineNumber":416,"author":{"gitID":"-"},"content":"        appointments.add(a);"},{"lineNumber":417,"author":{"gitID":"-"},"content":"        appointments.sort();"},{"lineNumber":418,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":421,"author":{"gitID":"-"},"content":"     * Replaces the given appointment {@code target} in the list with {@code rescheduleAppointment}."},{"lineNumber":422,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":423,"author":{"gitID":"-"},"content":"     * @throws DuplicateAppointmentException if updating the appointment\u0027s details causes this appointment to clash with"},{"lineNumber":424,"author":{"gitID":"-"},"content":"     *      another existing appointment in the list."},{"lineNumber":425,"author":{"gitID":"-"},"content":"     * @throws AppointmentNotFoundException if {@code target} could not be found in the list."},{"lineNumber":426,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":427,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":428,"author":{"gitID":"-"},"content":"    public void updateAppointment(Appointment target, Appointment rescheduleAppointment)"},{"lineNumber":429,"author":{"gitID":"-"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException {"},{"lineNumber":430,"author":{"gitID":"-"},"content":"        requireNonNull(rescheduleAppointment);"},{"lineNumber":431,"author":{"gitID":"-"},"content":""},{"lineNumber":432,"author":{"gitID":"-"},"content":"        appointments.setAppointment(target, rescheduleAppointment);"},{"lineNumber":433,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":434,"content":"    //@@author"},{"lineNumber":435,"author":{"gitID":"-"},"content":"    //// pet-level operations"},{"lineNumber":436,"author":{"gitID":"-"},"content":""},{"lineNumber":437,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":438,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":439,"author":{"gitID":"md-azsa"},"content":"     * Adds a pet to the program."},{"lineNumber":440,"author":{"gitID":"md-azsa"},"content":"     * Also checks the new pet\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":441,"author":{"gitID":"md-azsa"},"content":"     * and updates the Tag objects in the pet to point to those in {@link #tags}."},{"lineNumber":442,"author":{"gitID":"md-azsa"},"content":"     *"},{"lineNumber":443,"author":{"gitID":"md-azsa"},"content":"     * @throws DuplicatePetException if an equivalent pet already exists."},{"lineNumber":444,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":445,"author":{"gitID":"md-azsa"},"content":"    public void addPet(Pet p) throws DuplicatePetException {"},{"lineNumber":446,"author":{"gitID":"md-azsa"},"content":"        Pet pet \u003d syncWithMasterPetTagList(p);"},{"lineNumber":447,"author":{"gitID":"md-azsa"},"content":"        pets.add(pet);"},{"lineNumber":448,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":449,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":450,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":451,"author":{"gitID":"md-azsa"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":452,"author":{"gitID":"md-azsa"},"content":"     *"},{"lineNumber":453,"author":{"gitID":"md-azsa"},"content":"     * @throws PetNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":454,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":455,"author":{"gitID":"md-azsa"},"content":"    public boolean removePet(Pet key) throws PetNotFoundException, ClientPetAssociationNotFoundException {"},{"lineNumber":456,"author":{"gitID":"md-azsa"},"content":"        boolean found \u003d false;"},{"lineNumber":457,"author":{"gitID":"md-azsa"},"content":"        for (Appointment appointment : appointments) {"},{"lineNumber":458,"author":{"gitID":"md-azsa"},"content":"            if (appointment.getClientOwnPet() !\u003d null"},{"lineNumber":459,"author":{"gitID":"md-azsa"},"content":"                    \u0026\u0026 appointment.getClientOwnPet().getPet().equals(key)) {"},{"lineNumber":460,"author":{"gitID":"md-azsa"},"content":"                appointment.setClientOwnPetToNull();"},{"lineNumber":461,"author":{"gitID":"md-azsa"},"content":"            }"},{"lineNumber":462,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":463,"author":{"gitID":"md-azsa"},"content":"        for (ClientOwnPet association : clientPetAssociations) {"},{"lineNumber":464,"author":{"gitID":"md-azsa"},"content":"            if (association.getPet().equals(key)) {"},{"lineNumber":465,"author":{"gitID":"md-azsa"},"content":"                clientPetAssociations.remove(association);"},{"lineNumber":466,"author":{"gitID":"md-azsa"},"content":"                found \u003d true;"},{"lineNumber":467,"author":{"gitID":"md-azsa"},"content":"                break;"},{"lineNumber":468,"author":{"gitID":"md-azsa"},"content":"            }"},{"lineNumber":469,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":470,"author":{"gitID":"md-azsa"},"content":"        if (!found) {"},{"lineNumber":471,"author":{"gitID":"md-azsa"},"content":"            throw new ClientPetAssociationNotFoundException();"},{"lineNumber":472,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":473,"author":{"gitID":"md-azsa"},"content":"        if (pets.remove(key)) {"},{"lineNumber":474,"author":{"gitID":"md-azsa"},"content":"            return true;"},{"lineNumber":475,"author":{"gitID":"md-azsa"},"content":"        } else {"},{"lineNumber":476,"author":{"gitID":"md-azsa"},"content":"            throw new PetNotFoundException();"},{"lineNumber":477,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":478,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":479,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":480,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":481,"author":{"gitID":"md-azsa"},"content":"     * Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":482,"author":{"gitID":"md-azsa"},"content":"     *"},{"lineNumber":483,"author":{"gitID":"md-azsa"},"content":"     * @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":484,"author":{"gitID":"md-azsa"},"content":"     * list."},{"lineNumber":485,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":486,"author":{"gitID":"md-azsa"},"content":"    private Pet syncWithMasterPetTagList(Pet pet) {"},{"lineNumber":487,"author":{"gitID":"md-azsa"},"content":"        Pet syncedPet;"},{"lineNumber":488,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":489,"author":{"gitID":"md-azsa"},"content":"        final UniqueTagList petTags \u003d new UniqueTagList(pet.getTags());"},{"lineNumber":490,"author":{"gitID":"md-azsa"},"content":"        tags.mergeFrom(petTags);"},{"lineNumber":491,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":492,"author":{"gitID":"md-azsa"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":493,"author":{"gitID":"md-azsa"},"content":"        // used for checking person tag references"},{"lineNumber":494,"author":{"gitID":"md-azsa"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":495,"author":{"gitID":"md-azsa"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":496,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":497,"author":{"gitID":"md-azsa"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":498,"author":{"gitID":"md-azsa"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":499,"author":{"gitID":"md-azsa"},"content":"        petTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":500,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":501,"author":{"gitID":"md-azsa"},"content":"        syncedPet \u003d new Pet(pet.getPetName(), pet.getPetAge(), pet.getPetGender(), correctTagReferences);"},{"lineNumber":502,"author":{"gitID":"md-azsa"},"content":"        return syncedPet;"},{"lineNumber":503,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":504,"author":{"gitID":"md-azsa"},"content":"    //@@author"},{"lineNumber":505,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":506,"author":{"gitID":"jonathanwj"},"content":"    //// Association methods"},{"lineNumber":507,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":508,"author":{"gitID":"jonathanwj"},"content":"    //@@author jonathanwj"},{"lineNumber":509,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":510,"author":{"gitID":"jonathanwj"},"content":"     * Associates pet to client"},{"lineNumber":511,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":512,"author":{"gitID":"jonathanwj"},"content":"     * @throws ClientAlreadyOwnsPetException"},{"lineNumber":513,"author":{"gitID":"jonathanwj"},"content":"     * @throws PetAlreadyHasOwnerException"},{"lineNumber":514,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":515,"author":{"gitID":"jonathanwj"},"content":"    public void addPetToClient(Pet pet, Client client)"},{"lineNumber":516,"author":{"gitID":"jonathanwj"},"content":"            throws ClientAlreadyOwnsPetException, PetAlreadyHasOwnerException {"},{"lineNumber":517,"author":{"gitID":"jonathanwj"},"content":"        ClientOwnPet toAdd \u003d new ClientOwnPet(client, pet);"},{"lineNumber":518,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":519,"author":{"gitID":"jonathanwj"},"content":"        if (!clientPetAssociations.contains(toAdd)) {"},{"lineNumber":520,"author":{"gitID":"jonathanwj"},"content":"            if (hasOwner(pet)) {"},{"lineNumber":521,"author":{"gitID":"jonathanwj"},"content":"                throw new PetAlreadyHasOwnerException();"},{"lineNumber":522,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":523,"author":{"gitID":"jonathanwj"},"content":"            clientPetAssociations.add(toAdd);"},{"lineNumber":524,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":525,"author":{"gitID":"jonathanwj"},"content":"            throw new ClientAlreadyOwnsPetException();"},{"lineNumber":526,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":527,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":528,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":529,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":530,"author":{"gitID":"jonathanwj"},"content":"    //@@author"},{"lineNumber":531,"author":{"gitID":"md-azsa"},"content":"    //@@author md-azsa"},{"lineNumber":532,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":533,"author":{"gitID":"md-azsa"},"content":"     * Finds the pet and adds the appointment"},{"lineNumber":534,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":535,"author":{"gitID":"md-azsa"},"content":"    public void addAppointmentToPet(Appointment appointment, Pet pet) throws PetAlreadyHasAppointmentException,"},{"lineNumber":536,"author":{"gitID":"md-azsa"},"content":"            ClientPetAssociationNotFoundException, AppointmentNotFoundException, DuplicateAppointmentException,"},{"lineNumber":537,"author":{"gitID":"md-azsa"},"content":"            AppointmentHasBeenTakenException {"},{"lineNumber":538,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":539,"author":{"gitID":"md-azsa"},"content":"        boolean isAdded \u003d false;"},{"lineNumber":540,"author":{"gitID":"md-azsa"},"content":"        boolean isPresent \u003d false;"},{"lineNumber":541,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":542,"author":{"gitID":"md-azsa"},"content":"        if (clientPetAssociations.isEmpty()) {"},{"lineNumber":543,"author":{"gitID":"md-azsa"},"content":"            throw new ClientPetAssociationNotFoundException();"},{"lineNumber":544,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":545,"author":{"gitID":"md-azsa"},"content":"        if (appointment.getClientOwnPet() !\u003d null) {"},{"lineNumber":546,"author":{"gitID":"md-azsa"},"content":"            throw new AppointmentHasBeenTakenException();"},{"lineNumber":547,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":548,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":549,"author":{"gitID":"md-azsa"},"content":"        for (ClientOwnPet a : clientPetAssociations) {"},{"lineNumber":550,"author":{"gitID":"md-azsa"},"content":"            if (a.getPet().equals(pet)) {"},{"lineNumber":551,"author":{"gitID":"md-azsa"},"content":"                isPresent \u003d true;"},{"lineNumber":552,"author":{"gitID":"md-azsa"},"content":"                if (appointment.getClientOwnPet() \u003d\u003d null) {"},{"lineNumber":553,"author":{"gitID":"md-azsa"},"content":"                    Appointment appointmentCopy \u003d new Appointment(appointment);"},{"lineNumber":554,"author":{"gitID":"md-azsa"},"content":"                    appointmentCopy.setClientOwnPet(a);"},{"lineNumber":555,"author":{"gitID":"md-azsa"},"content":"                    appointments.setAppointment(appointment, appointmentCopy);"},{"lineNumber":556,"author":{"gitID":"md-azsa"},"content":"                    isAdded \u003d true;"},{"lineNumber":557,"author":{"gitID":"md-azsa"},"content":"                }"},{"lineNumber":558,"author":{"gitID":"md-azsa"},"content":"            }"},{"lineNumber":559,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":560,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":561,"author":{"gitID":"md-azsa"},"content":"        if (!isPresent) {"},{"lineNumber":562,"author":{"gitID":"md-azsa"},"content":"            throw new ClientPetAssociationNotFoundException();"},{"lineNumber":563,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":564,"author":{"gitID":"md-azsa"},"content":"        if (isPresent \u0026\u0026 !isAdded) {"},{"lineNumber":565,"author":{"gitID":"md-azsa"},"content":"            throw new PetAlreadyHasAppointmentException();"},{"lineNumber":566,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":567,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":568,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":569,"author":{"gitID":"md-azsa"},"content":"    /**"},{"lineNumber":570,"author":{"gitID":"md-azsa"},"content":"     * Removes the appointment from a pet"},{"lineNumber":571,"author":{"gitID":"md-azsa"},"content":"     */"},{"lineNumber":572,"author":{"gitID":"md-azsa"},"content":"    public void removeAppointmentFromPet(Appointment appointment) throws"},{"lineNumber":573,"author":{"gitID":"md-azsa"},"content":"            AppointmentNotFoundException, DuplicateAppointmentException, AppointmentDoesNotHavePetException {"},{"lineNumber":574,"author":{"gitID":"md-azsa"},"content":"        if (!appointments.contains(appointment)) {"},{"lineNumber":575,"author":{"gitID":"md-azsa"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":576,"author":{"gitID":"md-azsa"},"content":"        } else {"},{"lineNumber":577,"author":{"gitID":"md-azsa"},"content":"            Appointment appointmentCopy \u003d new Appointment(appointment);"},{"lineNumber":578,"author":{"gitID":"md-azsa"},"content":""},{"lineNumber":579,"author":{"gitID":"md-azsa"},"content":"            if (appointmentCopy.getClientOwnPet() \u003d\u003d null) {"},{"lineNumber":580,"author":{"gitID":"md-azsa"},"content":"                throw new AppointmentDoesNotHavePetException();"},{"lineNumber":581,"author":{"gitID":"md-azsa"},"content":"            } else {"},{"lineNumber":582,"author":{"gitID":"md-azsa"},"content":"                appointmentCopy.setClientOwnPetToNull();"},{"lineNumber":583,"author":{"gitID":"md-azsa"},"content":"                appointments.setAppointment(appointment, appointmentCopy);"},{"lineNumber":584,"author":{"gitID":"md-azsa"},"content":"            }"},{"lineNumber":585,"author":{"gitID":"md-azsa"},"content":"        }"},{"lineNumber":586,"author":{"gitID":"md-azsa"},"content":"    }"},{"lineNumber":587,"author":{"gitID":"md-azsa"},"content":"    //@@author"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"jonathanwj"},"content":"    //@@author jonathanwj"},{"lineNumber":590,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":591,"author":{"gitID":"jonathanwj"},"content":"     * Returns true if specified pet has an owner"},{"lineNumber":592,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":593,"author":{"gitID":"jonathanwj"},"content":"    private boolean hasOwner(Pet pet) {"},{"lineNumber":594,"author":{"gitID":"jonathanwj"},"content":"        for (ClientOwnPet a : clientPetAssociations) {"},{"lineNumber":595,"author":{"gitID":"jonathanwj"},"content":"            if (a.getPet().equals(pet)) {"},{"lineNumber":596,"author":{"gitID":"jonathanwj"},"content":"                return true;"},{"lineNumber":597,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":598,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":599,"author":{"gitID":"jonathanwj"},"content":"        return false;"},{"lineNumber":600,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":601,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":602,"author":{"gitID":"jonathanwj"},"content":"    //@@author jonathanwj"},{"lineNumber":603,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":604,"author":{"gitID":"jonathanwj"},"content":"     * Removes association from pet and client"},{"lineNumber":605,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":606,"author":{"gitID":"jonathanwj"},"content":"     * @throws ClientPetAssociationNotFoundException"},{"lineNumber":607,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":608,"author":{"gitID":"jonathanwj"},"content":"    public void removePetFromClient(Pet pet, Client client) throws ClientPetAssociationNotFoundException {"},{"lineNumber":609,"author":{"gitID":"jonathanwj"},"content":"        ClientOwnPet toRemove \u003d new ClientOwnPet(client, pet);"},{"lineNumber":610,"author":{"gitID":"jonathanwj"},"content":"        if (clientPetAssociations.contains(toRemove)) {"},{"lineNumber":611,"author":{"gitID":"jonathanwj"},"content":"            clientPetAssociations.remove(toRemove);"},{"lineNumber":612,"author":{"gitID":"jonathanwj"},"content":"        } else {"},{"lineNumber":613,"author":{"gitID":"jonathanwj"},"content":"            throw new ClientPetAssociationNotFoundException();"},{"lineNumber":614,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":615,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":616,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":617,"author":{"gitID":"jonathanwj"},"content":"    //@@author jonathanwj"},{"lineNumber":618,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":619,"author":{"gitID":"jonathanwj"},"content":"     * Adds vet technician to appointment"},{"lineNumber":620,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":621,"author":{"gitID":"jonathanwj"},"content":"    public void addVetTechToAppointment(VetTechnician technician, Appointment appointment)"},{"lineNumber":622,"author":{"gitID":"jonathanwj"},"content":"            throws AppointmentNotFoundException, AppointmentAlreadyHasVetTechnicianException,"},{"lineNumber":623,"author":{"gitID":"jonathanwj"},"content":"            DuplicateAppointmentException {"},{"lineNumber":624,"author":{"gitID":"jonathanwj"},"content":"        if (!appointments.contains(appointment)) {"},{"lineNumber":625,"author":{"gitID":"jonathanwj"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":626,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":627,"author":{"gitID":"jonathanwj"},"content":"        if (appointment.getOptionalVetTechnician().isPresent()) {"},{"lineNumber":628,"author":{"gitID":"jonathanwj"},"content":"            throw new AppointmentAlreadyHasVetTechnicianException();"},{"lineNumber":629,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":630,"author":{"gitID":"jonathanwj"},"content":"        Appointment appointmentCopy \u003d new Appointment(appointment);"},{"lineNumber":631,"author":{"gitID":"jonathanwj"},"content":"        appointmentCopy.setVetTech(technician);"},{"lineNumber":632,"author":{"gitID":"jonathanwj"},"content":"        appointments.setAppointment(appointment, appointmentCopy);"},{"lineNumber":633,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":634,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":635,"author":{"gitID":"jonathanwj"},"content":"    //@@author jonathanwj"},{"lineNumber":636,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":637,"author":{"gitID":"jonathanwj"},"content":"     * Removes a vet technician from the given appointment"},{"lineNumber":638,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":639,"author":{"gitID":"jonathanwj"},"content":"    public void removeVetFromAppointment(Appointment apptToRemoveVetFrom)"},{"lineNumber":640,"author":{"gitID":"jonathanwj"},"content":"            throws AppointmentNotFoundException, DuplicateAppointmentException,"},{"lineNumber":641,"author":{"gitID":"jonathanwj"},"content":"            VetTechnicianNotFoundException {"},{"lineNumber":642,"author":{"gitID":"jonathanwj"},"content":"        if (!appointments.contains(apptToRemoveVetFrom)) {"},{"lineNumber":643,"author":{"gitID":"jonathanwj"},"content":"            throw new AppointmentNotFoundException();"},{"lineNumber":644,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":645,"author":{"gitID":"jonathanwj"},"content":"        if (!apptToRemoveVetFrom.getOptionalVetTechnician().isPresent()) {"},{"lineNumber":646,"author":{"gitID":"jonathanwj"},"content":"            throw new VetTechnicianNotFoundException();"},{"lineNumber":647,"author":{"gitID":"jonathanwj"},"content":"        }"},{"lineNumber":648,"author":{"gitID":"jonathanwj"},"content":"        Appointment appointmentCopy \u003d new Appointment(apptToRemoveVetFrom);"},{"lineNumber":649,"author":{"gitID":"jonathanwj"},"content":"        appointmentCopy.removeVetTech();"},{"lineNumber":650,"author":{"gitID":"jonathanwj"},"content":"        appointments.setAppointment(apptToRemoveVetFrom, appointmentCopy);"},{"lineNumber":651,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":652,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":653,"author":{"gitID":"jonathanwj"},"content":"    //// util methods"},{"lineNumber":654,"author":{"gitID":"jonathanwj"},"content":"    //@@author"},{"lineNumber":655,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":656,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":657,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() + \" tags \""},{"lineNumber":658,"author":{"gitID":"-"},"content":"                + pets.asObservableList().size() + \" pets, \""},{"lineNumber":659,"author":{"gitID":"-"},"content":"                + appointments.asObservableList().size() + \" appointments, \""},{"lineNumber":660,"author":{"gitID":"-"},"content":"                + clientPetAssociations.size() + \" clientpetassoc \";"},{"lineNumber":661,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":664,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":665,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":666,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":667,"author":{"gitID":"-"},"content":""},{"lineNumber":668,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":669,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":670,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":671,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":674,"author":{"gitID":"-"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":675,"author":{"gitID":"-"},"content":"        return appointments.asObservableList();"},{"lineNumber":676,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":677,"author":{"gitID":"-"},"content":""},{"lineNumber":678,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":679,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPet\u003e getPetList() {"},{"lineNumber":680,"author":{"gitID":"-"},"content":"        return pets.asObservableList();"},{"lineNumber":681,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":684,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cClientOwnPet\u003e getClientPetAssociations() {"},{"lineNumber":685,"author":{"gitID":"jonathanwj"},"content":"        return clientPetAssociations;"},{"lineNumber":686,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":687,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":689,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":690,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":691,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":692,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":693,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags))"},{"lineNumber":694,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.appointments.equals(((AddressBook) other).appointments)"},{"lineNumber":695,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.pets.equals(((AddressBook) other).pets);"},{"lineNumber":696,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":697,"author":{"gitID":"-"},"content":""},{"lineNumber":698,"author":{"gitID":"jonathanwj"},"content":"    //@@author jonathanwj"},{"lineNumber":699,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":700,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cClient\u003e getClientList() {"},{"lineNumber":701,"author":{"gitID":"jonathanwj"},"content":"        ObservableList\u003cClient\u003e clientList \u003d EasyBind.map(getPersonList(), (person) -\u003e {"},{"lineNumber":702,"author":{"gitID":"jonathanwj"},"content":"            if (person.isClient()) {"},{"lineNumber":703,"author":{"gitID":"jonathanwj"},"content":"                return (Client) person;"},{"lineNumber":704,"author":{"gitID":"jonathanwj"},"content":"            } else {"},{"lineNumber":705,"author":{"gitID":"jonathanwj"},"content":"                return null;"},{"lineNumber":706,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":707,"author":{"gitID":"jonathanwj"},"content":"        });"},{"lineNumber":708,"author":{"gitID":"jonathanwj"},"content":"        clientList \u003d FXCollections.unmodifiableObservableList(clientList).filtered(Objects::nonNull);"},{"lineNumber":709,"author":{"gitID":"jonathanwj"},"content":"        return clientList;"},{"lineNumber":710,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":711,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":712,"author":{"gitID":"jonathanwj"},"content":"    //@@author jonathanwj"},{"lineNumber":713,"author":{"gitID":"jonathanwj"},"content":"    @Override"},{"lineNumber":714,"author":{"gitID":"jonathanwj"},"content":"    public ObservableList\u003cVetTechnician\u003e getVetTechnicianList() {"},{"lineNumber":715,"author":{"gitID":"jonathanwj"},"content":"        ObservableList\u003cVetTechnician\u003e technicianList \u003d EasyBind.map(getPersonList(), (person) -\u003e {"},{"lineNumber":716,"author":{"gitID":"jonathanwj"},"content":"            if (!person.isClient()) {"},{"lineNumber":717,"author":{"gitID":"jonathanwj"},"content":"                return (VetTechnician) person;"},{"lineNumber":718,"author":{"gitID":"jonathanwj"},"content":"            } else {"},{"lineNumber":719,"author":{"gitID":"jonathanwj"},"content":"                return null;"},{"lineNumber":720,"author":{"gitID":"jonathanwj"},"content":"            }"},{"lineNumber":721,"author":{"gitID":"jonathanwj"},"content":"        });"},{"lineNumber":722,"author":{"gitID":"jonathanwj"},"content":"        technicianList \u003d FXCollections.unmodifiableObservableList(technicianList).filtered(Objects::nonNull);"},{"lineNumber":723,"author":{"gitID":"jonathanwj"},"content":"        return technicianList;"},{"lineNumber":724,"author":{"gitID":"jonathanwj"},"content":"    }"},{"lineNumber":725,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":726,"author":{"gitID":"jonathanwj"},"content":"    //@@author"},{"lineNumber":727,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":728,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":729,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":730,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags, appointments, pets);"},{"lineNumber":731,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":732,"author":{"gitID":"-"},"content":"}"},{"lineNumber":733,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"jonathanwj":251,"null":5,"-":292,"md-azsa":185}},{"path":"src/main/java/seedu/address/model/client/exceptions/ClientNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.client.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":" * Signals the operation is unable to find the specified client."},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class ClientNotFoundException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":5,"-":2}},{"path":"src/main/java/seedu/address/model/client/exceptions/ClientHasExistingPetException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.client.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":" * Signals the client has existing pet."},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class ClientHasExistingPetException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":5,"-":2}},{"path":"src/main/java/seedu/address/model/client/exceptions/ClientHasExistingAppointmentException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.client.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"jonathanwj"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"jonathanwj"},"content":" * Signals the client has existing appointment."},{"lineNumber":5,"author":{"gitID":"jonathanwj"},"content":" */"},{"lineNumber":6,"author":{"gitID":"jonathanwj"},"content":"public class ClientHasExistingAppointmentException extends Exception {"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"}"}],"authorContributionMap":{"jonathanwj":5,"-":2}},{"path":"src/main/java/seedu/address/model/client/exceptions/DuplicateClientException.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.client.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Signals that the operation will result in duplicate Client objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class DuplicateClientException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public DuplicateClientException() {"},{"lineNumber":10,"author":{"gitID":"jonathanwj"},"content":"        super(\"Operation would result in duplicate clients\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":1,"-":11}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":7,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.appointment.exceptions.AppointmentAlreadyHasVetTechnicianException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToNextException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentCloseToPreviousException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentDoesNotHavePetException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentHasBeenTakenException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentListIsEmptyException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":15,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.ClientOwnPet;"},{"lineNumber":16,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientAlreadyOwnsPetException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationListEmptyException;"},{"lineNumber":18,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.ClientPetAssociationNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasAppointmentException;"},{"lineNumber":20,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.association.exceptions.PetAlreadyHasOwnerException;"},{"lineNumber":21,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.Client;"},{"lineNumber":22,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientHasExistingAppointmentException;"},{"lineNumber":23,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.client.exceptions.ClientHasExistingPetException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonsListIsEmptyException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.Pet;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.DuplicatePetException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.pet.exceptions.PetNotFoundException;"},{"lineNumber":31,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.VetTechnician;"},{"lineNumber":32,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.TechnicianHasExistingAppointmentException;"},{"lineNumber":33,"author":{"gitID":"jonathanwj"},"content":"import seedu.address.model.vettechnician.exceptions.VetTechnicianNotFoundException;"},{"lineNumber":34,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":40,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"purplepers0n"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":42,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":44,"author":{"gitID":"jonathanwj"},"content":"    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLIENTS \u003d unused -\u003e true;"},{"lineNumber":45,"author":{"gitID":"jonathanwj"},"content":"    Predicate\u003cPet\u003e PREDICATE_SHOW_ALL_PETS \u003d unused -\u003e true;"},{"lineNumber":46,"author":{"gitID":"jonathanwj"},"content":"    Predicate\u003cVetTechnician\u003e PREDICATE_SHOW_ALL_TECHNICIAN \u003d unused -\u003e true;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    Predicate\u003cAppointment\u003e PREDICATE_SHOW_ALL_APPOINTMENT \u003d unused -\u003e true;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"purplepers0n"},"content":"     * {@code Predicate} that always evaluate to true"},{"lineNumber":51,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"purplepers0n"},"content":"    Predicate\u003cPet\u003e PREDICATE_SHOW_ALL_PET \u003d unused -\u003e true;"},{"lineNumber":53,"author":{"gitID":"jonathanwj"},"content":"    Predicate\u003cClientOwnPet\u003e PREDICATE_SHOW_ALL_ASSOCIATION \u003d unused -\u003e true;"},{"lineNumber":54,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":55,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"purplepers0n"},"content":"     * Clears existing backing model and replaces with the provided new data."},{"lineNumber":57,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"purplepers0n"},"content":"     * Returns the AddressBook"},{"lineNumber":62,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"purplepers0n"},"content":"     * Deletes the given person."},{"lineNumber":67,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"purplepers0n"},"content":"     * Adds the given person"},{"lineNumber":72,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Sorts the given client list."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    void sortClientList() throws PersonsListIsEmptyException;"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *                                  another existing person in the list."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":88,"author":{"gitID":"jonathanwj"},"content":"            throws DuplicatePersonException, PersonNotFoundException, ClientHasExistingAppointmentException,"},{"lineNumber":89,"author":{"gitID":"jonathanwj"},"content":"            ClientHasExistingPetException, TechnicianHasExistingAppointmentException;"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"purplepers0n"},"content":"     * Returns an unmodifiable view of the filtered person list"},{"lineNumber":93,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":98,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"purplepers0n"},"content":"     * Returns an unmodifiable view of the filtered client list"},{"lineNumber":105,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cClient\u003e getFilteredClientList();"},{"lineNumber":107,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":108,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"jonathanwj"},"content":"     * Updates the filter of the filtered client list to filter by the given {@code predicate}."},{"lineNumber":110,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"jonathanwj"},"content":"    void updateFilteredClientList(Predicate\u003cClient\u003e predicate);"},{"lineNumber":114,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":115,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"purplepers0n"},"content":"     * Returns an unmodifiable view of the filtered vetTechnician list"},{"lineNumber":117,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cVetTechnician\u003e getFilteredVetTechnicianList();"},{"lineNumber":119,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":120,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"jonathanwj"},"content":"     * Updates the filter of the filtered vet technician list to filter by the given {@code predicate}."},{"lineNumber":122,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"jonathanwj"},"content":"    void updateFilteredVetTechnicianList(Predicate\u003cVetTechnician\u003e predicate);"},{"lineNumber":126,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":127,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"purplepers0n"},"content":"     * Schedule the given appointment according to date and time"},{"lineNumber":129,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    void scheduleAppointment(Appointment appointment) throws"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            DuplicateAppointmentException, AppointmentCloseToPreviousException, AppointmentCloseToNextException;"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Unschedule the given appointment according to index"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    void unscheduleAppointment(Appointment appointment) throws"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            AppointmentListIsEmptyException, AppointmentNotFoundException,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            AppointmentCloseToPreviousException, AppointmentCloseToNextException;"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Reschedules the given appointment {@code target} with {@code rescheduledPerson}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @throws DuplicateAppointmentException if updating the appointment\u0027s details causes the appointment"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     *                                       to be clashed with another existing appointment in the list."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * @throws AppointmentNotFoundException  if {@code target} could not be found in the list."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    void updateAppointment(Appointment target, Appointment rescheduledAppointment)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException;"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the filtered appointment list"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     **/"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"purplepers0n"},"content":"     * Adds the given pet"},{"lineNumber":157,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    void addPet(Pet pet) throws DuplicatePetException;"},{"lineNumber":159,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":160,"author":{"gitID":"jonathanwj"},"content":"    void deletePet(Pet pet) throws PetNotFoundException, ClientPetAssociationNotFoundException;"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"purplepers0n"},"content":"     * Returns an unmodifiable view of the filtered pet list"},{"lineNumber":164,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"purplepers0n"},"content":"    ObservableList\u003cPet\u003e getFilteredPetList();"},{"lineNumber":166,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":167,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"purplepers0n"},"content":"     * Updates the filter of the filtered pet list to filter by the given {@code predicate}."},{"lineNumber":169,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"purplepers0n"},"content":"    void updateFilteredPetList(Predicate\u003cPet\u003e predicate);"},{"lineNumber":173,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"jonathanwj"},"content":"     * Updates the filter of the filtered client pet association list to filter by the given {@code predicate}."},{"lineNumber":176,"author":{"gitID":"jonathanwj"},"content":"     *"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"jonathanwj"},"content":"    void updateFilteredClientOwnPetAssocation(Predicate\u003cClientOwnPet\u003e predicate);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Sorts the pet list."},{"lineNumber":183,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    void sortPetList() throws ClientPetAssociationListEmptyException;"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"jonathanwj"},"content":"    /** Returns an unmodifiable view of the filtered client pet association list */"},{"lineNumber":187,"author":{"gitID":"jonathanwj"},"content":"    ObservableList\u003cClientOwnPet\u003e getFilteredClientPetAssociationList();"},{"lineNumber":188,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":189,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"jonathanwj"},"content":"     * Associates pet to client"},{"lineNumber":191,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"jonathanwj"},"content":"    void addPetToClient(Pet pet, Client client) throws ClientAlreadyOwnsPetException, PetAlreadyHasOwnerException;"},{"lineNumber":193,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":194,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"jonathanwj"},"content":"     * Removes association from pet and client"},{"lineNumber":196,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"jonathanwj"},"content":"    void removePetFromClient(Pet pet, Client client) throws ClientPetAssociationNotFoundException;"},{"lineNumber":198,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Updates the filteredAppointmentList"},{"lineNumber":201,"author":{"gitID":"purplepers0n"},"content":"     *"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    void updateFilteredAppointmentList(Predicate\u003cAppointment\u003e predicate);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Adds an appointment to a pet."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    void addAppointmentToPet(Appointment appointment, Pet pet) throws"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            PetAlreadyHasAppointmentException, ClientPetAssociationNotFoundException,"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            AppointmentNotFoundException, DuplicateAppointmentException, AppointmentHasBeenTakenException;"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Removes an appointment from a pet."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    void removeAppointmentFromPet(Appointment appointment) throws"},{"lineNumber":217,"author":{"gitID":"-"},"content":"            AppointmentNotFoundException, DuplicateAppointmentException, AppointmentDoesNotHavePetException;"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Sorts the appointment by date and then by time"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    void sortAppointmentList() throws AppointmentListIsEmptyException;"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"purplepers0n"},"content":"     * Sets the index of the current list that is viewed"},{"lineNumber":226,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":227,"author":{"gitID":"purplepers0n"},"content":"    void setCurrentList(int currList);"},{"lineNumber":228,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":229,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"purplepers0n"},"content":"     * Get the index of the current list that is viewed"},{"lineNumber":231,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"purplepers0n"},"content":"    int getCurrentList();"},{"lineNumber":233,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":234,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"jonathanwj"},"content":"     * Adds the given Vet Technician to the given appointment"},{"lineNumber":236,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"jonathanwj"},"content":"    void addVetTechToAppointment(VetTechnician technician, Appointment appointment)"},{"lineNumber":238,"author":{"gitID":"jonathanwj"},"content":"            throws AppointmentAlreadyHasVetTechnicianException,"},{"lineNumber":239,"author":{"gitID":"jonathanwj"},"content":"            DuplicateAppointmentException, AppointmentNotFoundException;"},{"lineNumber":240,"author":{"gitID":"jonathanwj"},"content":""},{"lineNumber":241,"author":{"gitID":"jonathanwj"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"jonathanwj"},"content":"     * Removes the vet from the given appointment"},{"lineNumber":243,"author":{"gitID":"jonathanwj"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"jonathanwj"},"content":"    void removeVetTechFromAppointent(Appointment apptToRemoveVetFrom)"},{"lineNumber":245,"author":{"gitID":"jonathanwj"},"content":"            throws DuplicateAppointmentException, AppointmentNotFoundException, VetTechnicianNotFoundException;"},{"lineNumber":246,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":247,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"purplepers0n"},"content":"     * Updates the listed details of a client"},{"lineNumber":249,"author":{"gitID":"purplepers0n"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"purplepers0n"},"content":"    void updateDetailsList(Client client, ObservableList\u003cPet\u003e pets,"},{"lineNumber":251,"author":{"gitID":"purplepers0n"},"content":"                           ObservableList\u003cAppointment\u003e appointments);"},{"lineNumber":252,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":253,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"purplepers0n"},"content":"     * Returns the queried client"},{"lineNumber":255,"author":{"gitID":"purplepers0n"},"content":"     **/"},{"lineNumber":256,"author":{"gitID":"purplepers0n"},"content":"    Client getClientDetails();"},{"lineNumber":257,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":258,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"purplepers0n"},"content":"     * Returns an unmodifiable view of the pet list of the queried client"},{"lineNumber":260,"author":{"gitID":"purplepers0n"},"content":"     **/"},{"lineNumber":261,"author":{"gitID":"purplepers0n"},"content":"    ObservableList\u003cPet\u003e getClientPetList();"},{"lineNumber":262,"author":{"gitID":"purplepers0n"},"content":""},{"lineNumber":263,"author":{"gitID":"purplepers0n"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"purplepers0n"},"content":"     * Returns an unmodifiable view of the appointment list of the queried client"},{"lineNumber":265,"author":{"gitID":"purplepers0n"},"content":"     **/"},{"lineNumber":266,"author":{"gitID":"purplepers0n"},"content":"    ObservableList\u003cAppointment\u003e getClientApptList();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"jonathanwj":61,"purplepers0n":81,"-":125}}]
