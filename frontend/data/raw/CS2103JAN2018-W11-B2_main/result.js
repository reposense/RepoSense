var resultJson = [{"path":"unused/EditMovieDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.EditMovieCommand;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.EditMovieCommand.EditMovieDescriptor;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Duration;"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.MovieName;"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Rating;"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"content":"//@@author slothhy-unused"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":" * This is not used as this is for building the test for EditMovie"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":" * A utility class to help with building EditMovieDescriptor objects."},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"public class EditMovieDescriptorBuilder {"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"    private EditMovieCommand.EditMovieDescriptor descriptor;"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"    public EditMovieDescriptorBuilder() {"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"        descriptor \u003d new EditMovieCommand.EditMovieDescriptor();"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"    public EditMovieDescriptorBuilder(EditMovieDescriptor descriptor) {"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"        this.descriptor \u003d new EditMovieDescriptor(descriptor);"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"     * Returns an {@code EditMovieDescriptor} with fields containing {@code movie}\u0027s details"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"    public EditMovieDescriptorBuilder(Movie movie) {"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"        descriptor \u003d new EditMovieDescriptor();"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"        descriptor.setName(movie.getName());"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"        descriptor.setDuration(movie.getDuration());"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"        descriptor.setRating(movie.getRating());"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"        descriptor.setStartDate(movie.getStartDate());"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"        descriptor.setTags(movie.getTags());"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"     * Sets the {@code MovieName} of the {@code EditMovieDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"    public EditMovieDescriptorBuilder withName(String movieName) {"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"        descriptor.setName(new MovieName(movieName));"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"     * Sets the {@code Duration} of the {@code EditMovieDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"    public EditMovieDescriptorBuilder withDuration(String duration) {"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"        descriptor.setDuration(new Duration(duration));"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"     * Sets the {@code Rating} of the {@code EditMovieDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"    public EditMovieDescriptorBuilder withRating(String rating) {"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"        descriptor.setRating(new Rating(rating));"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"     * Sets the {@code Address} of the {@code EditMovieDescriptor} that we are building."},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":"    public EditMovieDescriptorBuilder withStartDate(String startDate) {"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"        descriptor.setStartDate(new StartDate(startDate));"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditMovieDescriptor}"},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"     * that we are building."},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"    public EditMovieDescriptorBuilder withTags(String... tags) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"    public EditMovieDescriptor build() {"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":"        return descriptor;"},{"lineNumber":88,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"null":1,"slothhy":78,"-":10}},{"path":"unused/EditMovieCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.EditMovieCommand;"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.EditMovieCommand.EditMovieDescriptor;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"content":"//@@author slothhy-unused"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":" * This is not used because editing the duration might mess up the screening timings"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":" * for those that are already added to the theaters."},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":" * Parses input arguments and creates a new EditMovieCommand object"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"public class EditMovieCommandParser implements Parser\u003cEditMovieCommand\u003e {"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"     * Parses the given {@code String} of arguments in the context of the EditMovieCommand"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"     * and returns an EditMovieCommand object for execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"    public EditMovieCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DURATION, PREFIX_RATING,"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"                        PREFIX_STARTDATE, PREFIX_TAG);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMovieCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"        EditMovieDescriptor editMovieDescriptor \u003d new EditMovieDescriptor();"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"            ParserUtil.parseMovieName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editMovieDescriptor::setName);"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"            ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION)).ifPresent(editMovieDescriptor::setDuration);"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"            ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING)).ifPresent(editMovieDescriptor::setRating);"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"            ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_STARTDATE))"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"                    .ifPresent(editMovieDescriptor::setStartDate);"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editMovieDescriptor::setTags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"        if (!editMovieDescriptor.isAnyFieldEdited()) {"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"            throw new ParseException(EditMovieCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"        return new EditMovieCommand(index, editMovieDescriptor);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"slothhy":35,"-":47}},{"path":"docs/team/tinyjy94.adoc","lines":[{"lineNumber":1,"author":{"gitID":"tinyjy94"},"content":"\u003d Chan Jun Yuan - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"tinyjy94"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"tinyjy94"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d PROJECT: MoVie Planner (MVP) - V1.5"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"---"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":"MoVie Planner (MVP) - is a desktop application created to help simplify a"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"cinema manager\u0027s job by allowing them to manage schedules of cinema theaters,"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":"movies and their screenings. The user interacts with it using a CLI, and"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"it has a GUI created with JavaFX. It is written in Java, and has about 15 kLoc."},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"* *Major enhancement*: added *encryption and decryption function*"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"** What it does: allows the user to encrypt and decrypt files using password specified."},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"** Justification: This feature allows the user to safeguard/retrieve sensitive information safely regarding the cinema, movie as well as the screening details. With this implementation, users can be reassured that even if unauthorised personnel gets hold of the encrypted data file, they would be unable to recover the details without the correct password to decrypt it."},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"** Highlights: The current implementation will create a encrypted file on top of the plaintext file, so users can choose to keep the plaintext file if they want, or they could discard it, leaving the encrypted file solely for security purposes. Users can also make use of the email feature provided by this application and send the encrypted file to others without loss of confidentiality."},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":"* *Minor enhancement*: added theater commands such as `addtheater` and `deletetheater` to allow user to manipulate size of the cinema."},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W11-B2/main/blob/master/collated/functional/tinyjy94.md[Functional code]] [https://github.com/CS2103JAN2018-W11-B2/main/blob/master/collated/test/tinyjy94.md[Test code]]"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"* *Other contributions*:"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"** Project management:"},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"*** Managed releases `v1.0` - `v1.1` (1 release) on GitHub"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"** Enhancements to existing features:"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"*** Wrote tests for existing features to increase coverage from 77% to 81% (Pull requests https://github.com/CS2103JAN2018-W11-B2/main/pull/53[#53], https://github.com/CS2103JAN2018-W11-B2/main/pull/91[#91])"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"** Documentation:"},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":"*** Updated User Guide for encryption and decryption : https://github.com/CS2103JAN2018-W11-B2/main/pull/118[#118]"},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"*** Updated User Guide for theater commands : https://github.com/CS2103JAN2018-W11-B2/main/pull/87[#87]"},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"** Community:"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-F12-B3/main/issues/110[1], https://github.com/CS2103JAN2018-F12-B3/main/issues/107[2], https://github.com/CS2103JAN2018-F12-B3/main/issues/111[3])"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":44,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"include::../UserGuide.adoc[tag\u003dSecurityUtils]"},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dtheaterCommands]"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":54,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":"include::../DeveloperGuide.adoc[tag\u003dSecurityUtils]"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dtheaterCommands]"}],"authorContributionMap":{"tinyjy94":40,"-":18}},{"path":"docs/team/chanyikwai.adoc","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"\u003d Chan Yik Wai - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d PROJECT: MoVie Planner (MVP) - V1.5"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"---"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"MoVie Planner (MVP) is a desktop application that aims to assist cinema managers in managing schedule of movies in different cinemas, providing features such as replicating cinemas’ schedules across periods of time, secure storage of cinema schedule and more."},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 20 kLoC."},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"* *Major enhancement*: added *the email feature*"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"** What it does: allows the user to send out an email to the target recipient, with or without an attachment."},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"** Justification: This feature improves the product significantly because it provides the user with a convenient means of"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"sending out his schedule after he planned it right from the application itself."},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"** Highlights: This enhancement affects the existing model, because interacts with the model. The implementation of the email feature"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"was challenging too as it requires the use of the JavaMail API."},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"** Credits: JavaMail API"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"* *Minor enhancement*: added a shortcut key combinations that allows the user to access certain commands with ease."},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W11-B2/main/blob/master/collated/functional/chanyikwai.md[Functional code]] [https://github.com/CS2103JAN2018-W11-B2/main/blob/master/collated/test/chanyikwai.md[Test code]]"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"* *Other contributions*:"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"** Enhancements to existing features:"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"*** Updated the GUI color scheme (Pull requests https://github.com/CS2103JAN2018-W11-B2/main/pull/117[#117])"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"*** Wrote additional tests for existing features to increase coverage from 69% to 70% (Pull requests https://github.com/CS2103JAN2018-W11-B2/main/pull/148[#148])"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"** Documentation:"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"*** Updated User Guide with Email Feature: https://github.com/CS2103JAN2018-W11-B2/main/pull/100[#100]"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"** Community:"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"** Tools:"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"*** Integrated a third party library (JavaMail) to the project (https://github.com/CS2103JAN2018-W11-B2/main/pull/100[#100])"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":44,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"include::../UserGuide.adoc[tag\u003demailfeature]"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"include::../DeveloperGuide.adoc[tag\u003demailfeature]"}],"authorContributionMap":{"chanyikwai":39,"-":15}},{"path":"docs/team/hanyi.adoc","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"\u003d Oh Han Yi - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"slothhy"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"\u003d\u003d PROJECT: MoVie Planner (MVP) - V1.5"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"---"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"MoVie Planner (MVP) - is a desktop movie planner built to streamline a theater manager\u0027s job by managing schedules of movies in different cinemas. It also has features such as encryption and emailing. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 20 kLoc."},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"* *Major enhancement*: added *the ability to find movies by different predicates*"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"** What it does: allows the user to choose different parameters to search."},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"** Justification: This feature allows the user to narrow down the search result significantly if the movie database is  huge. This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"** Highlights: The current implementation is using `and` for parameters to make the search stricter in order to filter away unwanted results. This feature could be further built on to allow a broader search, for example allowing the user to specify `and` or `or` in their input. This will increase the flexibility of the search function in our application."},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"* *Minor enhancement*: added the Movie class with various parameters to allow integration with screenings."},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W11-B2/main/blob/master/collated/functional/slothhy.md[Functional code]] [https://github.com/CS2103JAN2018-W11-B2/main/blob/master/collated/test/slothhy.md[Test code]]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":27,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":28,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"*** Wrote tests for existing features to increase coverage from 84% to 88% (Pull requests https://github.com/CS2103JAN2018-W11-B2/main/pull/52[#52])"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"** Documentation:"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"*** Updated User Guide for Movie class : https://github.com/CS2103JAN2018-W11-B2/main/pull/94[#94]"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"** Community:"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-T09-B3/main/issues/191[1], https://github.com/CS2103JAN2018-T09-B3/main/issues/184[2], https://github.com/CS2103JAN2018-T09-B3/main/issues/177[3])"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"** Tools:"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":40,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":41,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"include::../UserGuide.adoc[tag\u003daddmovie]"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"include::../UserGuide.adoc[tag\u003dfindmovie]"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"include::../UserGuide.adoc[tag\u003ddeletemovie]"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":54,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"include::../DeveloperGuide.adoc[tag\u003dadddeletemovie]"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"include::../DeveloperGuide.adoc[tag\u003dfindmovie]"}],"authorContributionMap":{"slothhy":36,"-":22}},{"path":"unused/EditMovieCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MOVIES;"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Duration;"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.MovieName;"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Rating;"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDate;"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.DuplicateMovieException;"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.MovieNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"content":"//@@author slothhy-unused"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":" * This is not used because editing the duration might mess up the screening timings"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":" * for those that are already added to the theaters."},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":" * Edits the details of an existing movie in the movie planner."},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"public class EditMovieCommand extends UndoableCommand {"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"    public static final String COMMAND_WORD \u003d \"editmovie\";"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"    public static final String COMMAND_ALIAS \u003d \"em\";"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the movie identified \""},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"            + \"by the index number used in the last movie listing. \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"            + \"[\" + PREFIX_DURATION + \"PHONE] \""},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"            + \"[\" + PREFIX_RATING + \"EMAIL] \""},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"            + \"[\" + PREFIX_STARTDATE + \"ADDRESS] \""},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]\\n\""},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"            + PREFIX_DURATION + \"120 \""},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"            + PREFIX_RATING + \"PG \""},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"            + PREFIX_STARTDATE + \"20/03/2018 \""},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"            + PREFIX_TAG + \"comedy \";"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_EDIT_MOVIE_SUCCESS \u003d \"Edited Movie: %1$s\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_DUPLICATE_MOVIE \u003d \"This movie already exists in the movie planner.\";"},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"    private final Index index;"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"    private final EditMovieDescriptor editMovieDescriptor;"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"    private Movie movieToEdit;"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"    private Movie editedMovie;"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"     * @param index of the movie in the filtered movie list to edit"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"     * @param editMovieDescriptor details to edit the movie with"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":"    public EditMovieCommand(Index index, EditMovieDescriptor editMovieDescriptor) {"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"        requireNonNull(index);"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"        requireNonNull(editMovieDescriptor);"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"        this.index \u003d index;"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"        this.editMovieDescriptor \u003d new EditMovieDescriptor(editMovieDescriptor);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"            model.updateMovie(movieToEdit, editedMovie);"},{"lineNumber":83,"author":{"gitID":"slothhy"},"content":"        } catch (DuplicateMovieException dme) {"},{"lineNumber":84,"author":{"gitID":"slothhy"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_MOVIE);"},{"lineNumber":85,"author":{"gitID":"slothhy"},"content":"        } catch (MovieNotFoundException mnfe) {"},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"            throw new AssertionError(\"The target movie cannot be missing\");"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"slothhy"},"content":"        model.updateFilteredMovieList(PREDICATE_SHOW_ALL_MOVIES);"},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_MOVIE_SUCCESS, editedMovie));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":94,"author":{"gitID":"slothhy"},"content":"        List\u003cMovie\u003e lastShownList \u003d model.getFilteredMovieList();"},{"lineNumber":95,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":96,"author":{"gitID":"slothhy"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":97,"author":{"gitID":"slothhy"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MOVIE_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":100,"author":{"gitID":"slothhy"},"content":"        movieToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":101,"author":{"gitID":"slothhy"},"content":"        editedMovie \u003d createEditedMovie(movieToEdit, editMovieDescriptor);"},{"lineNumber":102,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":104,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"slothhy"},"content":"     * Creates and returns a {@code Movie} with the details of {@code movieToEdit}"},{"lineNumber":106,"author":{"gitID":"slothhy"},"content":"     * edited with {@code editMovieDescriptor}."},{"lineNumber":107,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"slothhy"},"content":"    private static Movie createEditedMovie(Movie movieToEdit, EditMovieDescriptor editMovieDescriptor) {"},{"lineNumber":109,"author":{"gitID":"slothhy"},"content":"        assert movieToEdit !\u003d null;"},{"lineNumber":110,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":111,"author":{"gitID":"slothhy"},"content":"        MovieName updatedMovieName \u003d editMovieDescriptor.getName().orElse(movieToEdit.getName());"},{"lineNumber":112,"author":{"gitID":"slothhy"},"content":"        Duration updatedDuration \u003d editMovieDescriptor.getDuration().orElse(movieToEdit.getDuration());"},{"lineNumber":113,"author":{"gitID":"slothhy"},"content":"        Rating updatedRating \u003d editMovieDescriptor.getRating().orElse(movieToEdit.getRating());"},{"lineNumber":114,"author":{"gitID":"slothhy"},"content":"        StartDate updatedStartDate \u003d editMovieDescriptor.getStartDate().orElse(movieToEdit.getStartDate());"},{"lineNumber":115,"author":{"gitID":"slothhy"},"content":"        Set\u003cTag\u003e updatedTags \u003d editMovieDescriptor.getTags().orElse(movieToEdit.getTags());"},{"lineNumber":116,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":117,"author":{"gitID":"slothhy"},"content":"        return new Movie(updatedMovieName, updatedDuration, updatedRating, updatedStartDate, updatedTags);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":128,"author":{"gitID":"slothhy"},"content":"        if (!(other instanceof EditMovieCommand)) {"},{"lineNumber":129,"author":{"gitID":"slothhy"},"content":"            return false;"},{"lineNumber":130,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":132,"author":{"gitID":"slothhy"},"content":"        // state check"},{"lineNumber":133,"author":{"gitID":"slothhy"},"content":"        EditMovieCommand e \u003d (EditMovieCommand) other;"},{"lineNumber":134,"author":{"gitID":"slothhy"},"content":"        return index.equals(e.index)"},{"lineNumber":135,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 editMovieDescriptor.equals(e.editMovieDescriptor)"},{"lineNumber":136,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 Objects.equals(movieToEdit, e.movieToEdit);"},{"lineNumber":137,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":139,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"slothhy"},"content":"     * Stores the details to edit the movie with. Each non-empty field value will replace the"},{"lineNumber":141,"author":{"gitID":"slothhy"},"content":"     * corresponding field value of the movie."},{"lineNumber":142,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"slothhy"},"content":"    public static class EditMovieDescriptor {"},{"lineNumber":144,"author":{"gitID":"qwlai"},"content":"        private MovieName movieName;"},{"lineNumber":145,"author":{"gitID":"slothhy"},"content":"        private Duration duration;"},{"lineNumber":146,"author":{"gitID":"slothhy"},"content":"        private Rating rating;"},{"lineNumber":147,"author":{"gitID":"slothhy"},"content":"        private StartDate startDate;"},{"lineNumber":148,"author":{"gitID":"slothhy"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":149,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":150,"author":{"gitID":"slothhy"},"content":"        public EditMovieDescriptor() {}"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":154,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":155,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":156,"author":{"gitID":"slothhy"},"content":"        public EditMovieDescriptor(EditMovieDescriptor toCopy) {"},{"lineNumber":157,"author":{"gitID":"slothhy"},"content":"            setName(toCopy.movieName);"},{"lineNumber":158,"author":{"gitID":"slothhy"},"content":"            setDuration(toCopy.duration);"},{"lineNumber":159,"author":{"gitID":"slothhy"},"content":"            setRating(toCopy.rating);"},{"lineNumber":160,"author":{"gitID":"slothhy"},"content":"            setStartDate(toCopy.startDate);"},{"lineNumber":161,"author":{"gitID":"slothhy"},"content":"            setTags(toCopy.tags);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":166,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":168,"author":{"gitID":"slothhy"},"content":"            return CollectionUtil.isAnyNonNull(this.movieName, this.duration, this.rating,"},{"lineNumber":169,"author":{"gitID":"slothhy"},"content":"                    this.startDate, this.tags);"},{"lineNumber":170,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":172,"author":{"gitID":"slothhy"},"content":"        public void setName(MovieName movieName) {"},{"lineNumber":173,"author":{"gitID":"slothhy"},"content":"            this.movieName \u003d movieName;"},{"lineNumber":174,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":176,"author":{"gitID":"slothhy"},"content":"        public Optional\u003cMovieName\u003e getName() {"},{"lineNumber":177,"author":{"gitID":"slothhy"},"content":"            return Optional.ofNullable(movieName);"},{"lineNumber":178,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":180,"author":{"gitID":"slothhy"},"content":"        public void setDuration(Duration duration) {"},{"lineNumber":181,"author":{"gitID":"slothhy"},"content":"            this.duration \u003d duration;"},{"lineNumber":182,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":184,"author":{"gitID":"slothhy"},"content":"        public Optional\u003cDuration\u003e getDuration() {"},{"lineNumber":185,"author":{"gitID":"slothhy"},"content":"            return Optional.ofNullable(duration);"},{"lineNumber":186,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":188,"author":{"gitID":"slothhy"},"content":"        public void setRating(Rating rating) {"},{"lineNumber":189,"author":{"gitID":"slothhy"},"content":"            this.rating \u003d rating;"},{"lineNumber":190,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":192,"author":{"gitID":"slothhy"},"content":"        public Optional\u003cRating\u003e getRating() {"},{"lineNumber":193,"author":{"gitID":"slothhy"},"content":"            return Optional.ofNullable(rating);"},{"lineNumber":194,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":196,"author":{"gitID":"slothhy"},"content":"        public void setStartDate(StartDate startDate) {"},{"lineNumber":197,"author":{"gitID":"slothhy"},"content":"            this.startDate \u003d startDate;"},{"lineNumber":198,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":200,"author":{"gitID":"slothhy"},"content":"        public Optional\u003cStartDate\u003e getStartDate() {"},{"lineNumber":201,"author":{"gitID":"slothhy"},"content":"            return Optional.ofNullable(startDate);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":205,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":206,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":207,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":214,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":215,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":216,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":218,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":230,"author":{"gitID":"slothhy"},"content":"            if (!(other instanceof EditMovieDescriptor)) {"},{"lineNumber":231,"author":{"gitID":"slothhy"},"content":"                return false;"},{"lineNumber":232,"author":{"gitID":"slothhy"},"content":"            }"},{"lineNumber":233,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":234,"author":{"gitID":"slothhy"},"content":"            // state check"},{"lineNumber":235,"author":{"gitID":"slothhy"},"content":"            EditMovieDescriptor e \u003d (EditMovieDescriptor) other;"},{"lineNumber":236,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":237,"author":{"gitID":"slothhy"},"content":"            return getName().equals(e.getName())"},{"lineNumber":238,"author":{"gitID":"slothhy"},"content":"                    \u0026\u0026 getDuration().equals(e.getDuration())"},{"lineNumber":239,"author":{"gitID":"slothhy"},"content":"                    \u0026\u0026 getRating().equals(e.getRating())"},{"lineNumber":240,"author":{"gitID":"slothhy"},"content":"                    \u0026\u0026 getStartDate().equals(e.getStartDate())"},{"lineNumber":241,"author":{"gitID":"slothhy"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":242,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"null":1,"slothhy":164,"-":78,"qwlai":1}},{"path":"docs/team/qwlai.adoc","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"\u003d Lai Qi Wei - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d PROJECT: MoVie Planner (MVP) - V1.5"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"---"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"MoVie Planner (MVP) is a desktop application that aims to help cinema managers manage the schedule of movies in"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"different cinemas."},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 20 kLoC."},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"* *Major enhancement*: Added scheduling system."},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"** What it does: Allows the user to add or delete a movie screening in a cinema."},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"** Justification: This feature makes cinema schedule planning much easier because the user can add a movie screening to a cinema\u0027s theater"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":" without worrying about variables such as preparation delay and advertisement time. These variables are calculated automatically in MVP"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":" to see if a screening can be added to the cinema\u0027s theater. Once added, the screening will be displayed for the user to view the schedule."},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"** Highlights: This enhancement interacts heavily with existing model and requires deep consideration"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"on areas such as storage and ui. Displaying the schedule also affects existing commands and it requires careful testing."},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"I have also added a jump command for user to navigate the dates in the schedule."},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"** Credits: CalendarFX API"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"* *Minor enhancement*: Added a panel to display the list of movies."},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W11-B2/main/blob/master/collated/functional/qwlai.md[Functional code]] [https://github.com/CS2103JAN2018-W11-B2/main/blob/master/collated/test/qwlai.md[Test code]]"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"* *Other contributions*:"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"** Project management"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"*** Managed releases `v1.3` - `v1.5` (3 releases) on GitHub"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"** Enhancements to existing features:"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"*** Add alias to existing commands (Pull requests https://github.com/CS2103JAN2018-W11-B2/main/pull/24[#24])"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"** Documentation:"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"*** Updated User Guide to show the before and after when a command is entered (Pull requests https://github.com/CS2103JAN2018-W11-B2/main/pull/162/[#162])"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"** Tools:"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"*** Integrated a third party library (CalendarFX) to the project (Pull requests https://github.com/CS2103JAN2018-W11-B2/main/pull/88[#88])"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":47,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"include::../UserGuide.adoc[tag\u003dscheduling]"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"include::../UserGuide.adoc[tag\u003djump]"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":57,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"include::../DeveloperGuide.adoc[tag\u003dscheduling]"}],"authorContributionMap":{"chanyikwai":13,"-":15,"qwlai":31}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"\u003d MoVie Planner - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":":toclevels: 3"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":5,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":10,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":11,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":12,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":13,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B2"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"By: `Team W11-B2`      Since: `Aug 2018`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"MoVie Planner(MVP) is a desktop application designed for cinema managers to manage cinemas\u0027 schedules."},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"More importantly, MVP is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"If you can type fast, MVP can get your scheduling tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d About"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"This User Guide provides an overview of available features, how to use them, and aims to help you get"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"started in MVP. Features are explained in detail with their respective CLI commands to demonstrate how you can use MVP effectively."},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"You will be able to understand this User Guide without the need to have any technical knowledge."},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"You can follow these steps to prepare your computer to run MVP."},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":42,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":43,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":".  Download the latest `movieplanner.jar` link:{repoURL}/releases[here]."},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":".  Copy `movieplanner.jar` to the folder you want to use as the home folder for MVP e.g. `C:\\Users\\student\\MVP`."},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":".  Double-click the file to start MVP. You should be able to see the Graphical User Interface (GUI) below."},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"[TIP]"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"* For the best viewing experience, you should set your computer resolution to 1920x1080."},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"* For Windows 10 user, you can follow the guide in this link http://www.thewindowsclub.com/change-screen-resolution-windows-10-2[here]."},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"* For Windows 7 \u0026 8 user, you can follow the guide in this link https://support.microsoft.com/en-us/help/14108/windows-7-change-screen-resolution[here]."},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":".UI appearance of MVP"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"image::UiSections.png[width\u003d\"790\"]"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"Sections of MVP:"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"* Section 1: `Command Box` to type your command."},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"* Section 2: `Result Display` to display the result of the command."},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"* Section 3: `Cinema Display` to display the list of cinemas in MVP."},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"* Section 4: `Movie Display` to display the list of movies in MVP."},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"* Section 5: `Schedule Display` to display the schedule of a cinema."},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"\u003d\u003d Sample commands"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"Now that you have set up MVP, you can execute a command by typing the command in the command box and pressing kbd:[Enter] to execute it. +"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"Here are some sample commands you can try:"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"* **`help`** : opens the help window."},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"* **`add`**`n/GV Paya Lebar th/3 p/66538100 e/customersvc@goldenvillage.com.sg a/SingPost Centre, 10 Eunos Road 8, #03-107, Singapore 408600` :"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"adds a cinema named `GV Paya Lebar` with `3` theaters and its relevant details to MVP."},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"* *`list`* : lists all cinemas and movies."},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"* **`delete`**`3` : deletes the 3rd contact shown in the cinema list."},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"* *`exit`* : exits MVP."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"[TIP]"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":88,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"chanyikwai"},"content":"Before proceeding on, you should take note of the following section:"},{"lineNumber":91,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":93,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"chanyikwai"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Cathay`."},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"* Items in square brackets are optional e.g `n/NAME [p/PHONE]` can be used as `n/Cathay p/61231245` or as `n/Cathay`."},{"lineNumber":97,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":98,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"[TIP]"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"You can also use an alias instead of typing the entire command word."},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d Cinema related commands"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"You can find cinema related commands like add, find and delete cinema in this section. This allows you to manage a list of cinemas."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Adding a cinema: `add` | `a`"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"Alias: `a`"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"To add a cinema to MVP, you can type the following command in the command box."},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS th/NUMBER_OF_THEATER`"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"* `add n/Cathay West p/61283712 e/cathay@cathay.com a/50 Jurong Gateway Road th/3` +"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"Adds a cinema named `Cathay West` with `3` theaters and its relevant details."},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"* `add n/We Cinema p/62181251 e/wecinema@wecinema.com a/321 Clementi Avenue 3 th/3` +"},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":"Adds a cinema named `We Cinema` with `3` theaters and its relevant details."},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":"* `add n/Shaws e/shaws@shaws.com a/2 Jurong East Central 1, 11 JCube p/6123122 th/2` +"},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"Adds a cinema named `Shaws` with `2` theaters and its relevant details. An example is shown in the picture below."},{"lineNumber":121,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":".Before and after `add n/Shaws e/shaws@shaws.com a/2 Jurong East Central 1, 11 JCube p/6123122 th/2`"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"image::AddCinema.png[width\u003d\"1000\"]"},{"lineNumber":124,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":125,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Editing a cinema: `edit` | `e`"},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":"Alias: `e`"},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"To edit an existing cinema in MVP, you can type the following command in the command box."},{"lineNumber":129,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":130,"author":{"gitID":"chanyikwai"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS]`"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":133,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":"* The existing values of the cinema specified at the `INDEX` will be updated with the input values."},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"* The index refers to the index number shown in the last cinema listing."},{"lineNumber":136,"author":{"gitID":"qwlai"},"content":"* The index *must be a positive number* 1, 2, 3, ..."},{"lineNumber":137,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":138,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":139,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":140,"author":{"gitID":"slothhy"},"content":"Examples:"},{"lineNumber":141,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":142,"author":{"gitID":"chanyikwai"},"content":"* `edit 1 p/67124231 e/shaw@yahoo.com` +"},{"lineNumber":143,"author":{"gitID":"qwlai"},"content":"Edits the phone number and email address of the 1st cinema in the `Cinema Display` to be `91234567` and `shaw@yahoo.com` respectively."},{"lineNumber":144,"author":{"gitID":"qwlai"},"content":"* `e 2 n/Golden Village` +"},{"lineNumber":145,"author":{"gitID":"qwlai"},"content":"Edits the name of the 2nd cinema in the `Cinema Display` to be `Golden Village`. An example is shown in the picture below."},{"lineNumber":146,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":147,"author":{"gitID":"qwlai"},"content":".Before and after `edit 2 n/Golden Village`"},{"lineNumber":148,"author":{"gitID":"qwlai"},"content":"image::EditCinema.png[width\u003d\"1000\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Finding cinemas by name: `find` | `f`"},{"lineNumber":151,"author":{"gitID":"qwlai"},"content":"Alias: `f`"},{"lineNumber":152,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":153,"author":{"gitID":"qwlai"},"content":"To find the cinemas whose names contain any of the given keywords, you can type the following command in the command box."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":156,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":159,"author":{"gitID":"qwlai"},"content":"* The search is case insensitive. e.g `cathay` will match `Cathay`."},{"lineNumber":160,"author":{"gitID":"qwlai"},"content":"* The order of the keywords does not matter. e.g. `Cathay West` will match `West Cathay`."},{"lineNumber":161,"author":{"gitID":"qwlai"},"content":"* Only full words will be matched e.g. `Cathay` will not match `Cathays`."},{"lineNumber":162,"author":{"gitID":"qwlai"},"content":"* Cinemas matching at least one keyword will be displayed. e.g. There are 2 keywords in `East West`, `East` and `West`."},{"lineNumber":163,"author":{"gitID":"qwlai"},"content":"  Cinemas displayed will include `Cathay East` and `West Village`."},{"lineNumber":164,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":165,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":166,"author":{"gitID":"chanyikwai"},"content":"Examples:"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"qwlai"},"content":"* `find Cathay` +"},{"lineNumber":169,"author":{"gitID":"qwlai"},"content":"Displays any cinema having names `cathay` and `Cathay West`."},{"lineNumber":170,"author":{"gitID":"qwlai"},"content":"* `f Golden Village North` +"},{"lineNumber":171,"author":{"gitID":"qwlai"},"content":"Displays any cinema having names `Golden`, `Village`, or `North`. An example is shown in the picture below."},{"lineNumber":172,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":173,"author":{"gitID":"qwlai"},"content":".Before and after `find Golden Village North`"},{"lineNumber":174,"author":{"gitID":"qwlai"},"content":"image::FindCinema.png[width\u003d\"1000\"]"},{"lineNumber":175,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":176,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Deleting a cinema : `delete` | `d`"},{"lineNumber":177,"author":{"gitID":"qwlai"},"content":"Alias: `d`"},{"lineNumber":178,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":179,"author":{"gitID":"qwlai"},"content":"To delete a specified cinema from MVP, you can type the following command in the command box."},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"qwlai"},"content":"Format: `delete INDEX`"},{"lineNumber":182,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":183,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":184,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":185,"author":{"gitID":"qwlai"},"content":"* The index refers to the index number shown in the last cinema listing."},{"lineNumber":186,"author":{"gitID":"qwlai"},"content":"* The index *must be a positive number* 1, 2, 3, ..."},{"lineNumber":187,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":188,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":189,"author":{"gitID":"qwlai"},"content":"Examples:"},{"lineNumber":190,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":191,"author":{"gitID":"qwlai"},"content":"* `delete 2` +"},{"lineNumber":192,"author":{"gitID":"qwlai"},"content":"Deletes the 2nd cinema in the `Cinema Display` in MVP."},{"lineNumber":193,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":194,"author":{"gitID":"qwlai"},"content":"* `find Cathay` +"},{"lineNumber":195,"author":{"gitID":"qwlai"},"content":"`d 2` +"},{"lineNumber":196,"author":{"gitID":"qwlai"},"content":"Deletes the 2nd cinema in the results of the `find` command. An example is shown in the picture below."},{"lineNumber":197,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":198,"author":{"gitID":"qwlai"},"content":".Before and after `d 2`"},{"lineNumber":199,"author":{"gitID":"qwlai"},"content":"image::DeleteCinema.png[width\u003d\"1000\"]"},{"lineNumber":200,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":201,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Selecting a cinema : `select` | `s`"},{"lineNumber":202,"author":{"gitID":"qwlai"},"content":"Alias: `s`"},{"lineNumber":203,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":204,"author":{"gitID":"qwlai"},"content":"To select a cinema at a specified index to view its schedule, you can type the following command in the command box."},{"lineNumber":205,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":206,"author":{"gitID":"qwlai"},"content":"Format: `select INDEX`"},{"lineNumber":207,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":208,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":209,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":210,"author":{"gitID":"qwlai"},"content":"* The cinema at the specified `INDEX` will be selected and its schedule will be displayed in the `Schedule Display`."},{"lineNumber":211,"author":{"gitID":"qwlai"},"content":"* The index refers to the index number shown in the last cinema listing."},{"lineNumber":212,"author":{"gitID":"qwlai"},"content":"* The index *must be a positive number* 1, 2, 3, ..."},{"lineNumber":213,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":214,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":215,"author":{"gitID":"qwlai"},"content":"Examples:"},{"lineNumber":216,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":217,"author":{"gitID":"qwlai"},"content":"* `select 2` +"},{"lineNumber":218,"author":{"gitID":"qwlai"},"content":"Selects the 2nd cinema in the `Cinema Display` and displays its schedule in the `Schedule Display`."},{"lineNumber":219,"author":{"gitID":"qwlai"},"content":"* `find Cathay` +"},{"lineNumber":220,"author":{"gitID":"qwlai"},"content":" `s 1` +"},{"lineNumber":221,"author":{"gitID":"qwlai"},"content":"Selects the 1st cinema in the results of the `find` command and displays its schedule in the `Schedule Display`."},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"tinyjy94"},"content":"// tag::theaterCommands[]"},{"lineNumber":224,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Adding theaters: `addtheater` | `at` | `Available in v1.2`"},{"lineNumber":225,"author":{"gitID":"chanyikwai"},"content":"Alias: `at`"},{"lineNumber":226,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":227,"author":{"gitID":"qwlai"},"content":"To add theaters to a cinema, you can type the following command in the command box."},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"qwlai"},"content":"Format: `addtheater CINEMA_INDEX th/NUMBER_OF_THEATER`"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"chanyikwai"},"content":"[NOTE]"},{"lineNumber":232,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":233,"author":{"gitID":"qwlai"},"content":"* The index refers to the index number shown in the last cinema listing."},{"lineNumber":234,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":235,"author":{"gitID":"qwlai"},"content":"* The number of theaters entered must be a *positive* number."},{"lineNumber":236,"author":{"gitID":"tinyjy94"},"content":"* The maximum number of theaters per cinema is *20*."},{"lineNumber":237,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":238,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":239,"author":{"gitID":"qwlai"},"content":"Examples:"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"qwlai"},"content":"* `addtheater 2 th/2` +"},{"lineNumber":242,"author":{"gitID":"qwlai"},"content":"Adds `2` theaters to the 2nd cinema in the `Cinema Display`."},{"lineNumber":243,"author":{"gitID":"qwlai"},"content":"* `at 2 th/3` +"},{"lineNumber":244,"author":{"gitID":"qwlai"},"content":"Adds `3` theaters to the 2nd cinema in the `Cinema Display`. An example is shown in the picture below."},{"lineNumber":245,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":246,"author":{"gitID":"qwlai"},"content":".Before and after `at 2 th/3`"},{"lineNumber":247,"author":{"gitID":"qwlai"},"content":"image::AddTheater.png[width\u003d\"1000\"]"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Deleting theaters: `deletetheater` | `dt` | `Available in v1.2`"},{"lineNumber":250,"author":{"gitID":"qwlai"},"content":"Alias: `dt`"},{"lineNumber":251,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":252,"author":{"gitID":"qwlai"},"content":"To delete theaters from a cinema, you can type the following command in the command box."},{"lineNumber":253,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":254,"author":{"gitID":"qwlai"},"content":"Format: `deletetheater CINEMA_INDEX th/NUMBER_OF_THEATER`"},{"lineNumber":255,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":256,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":257,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":258,"author":{"gitID":"qwlai"},"content":"* The index refers to the index number shown in the last cinema listing."},{"lineNumber":259,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":260,"author":{"gitID":"qwlai"},"content":"* The number of theaters entered must be a *positive* number."},{"lineNumber":261,"author":{"gitID":"qwlai"},"content":"* The number of theaters entered should be fewer than the current number of theaters in that cinema."},{"lineNumber":262,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":263,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":264,"author":{"gitID":"qwlai"},"content":"Examples:"},{"lineNumber":265,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":266,"author":{"gitID":"qwlai"},"content":"* `deletetheater 2 th/9` +"},{"lineNumber":267,"author":{"gitID":"qwlai"},"content":"Deletes `5` theaters from the 2nd cinema in the `Cinema Display`."},{"lineNumber":268,"author":{"gitID":"qwlai"},"content":"* `dt 1 th/2` +"},{"lineNumber":269,"author":{"gitID":"qwlai"},"content":"Deletes `2` theaters from the 1st cinema in the `Cinema Display`. An example is shown in the picture below."},{"lineNumber":270,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":271,"author":{"gitID":"qwlai"},"content":".Before and after `dt 1 th/2`"},{"lineNumber":272,"author":{"gitID":"qwlai"},"content":"image::DeleteTheater.png[width\u003d\"1000\"]"},{"lineNumber":273,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":274,"author":{"gitID":"tinyjy94"},"content":"// end::theaterCommands[]"},{"lineNumber":275,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":276,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Copying schedule: `copy` | `cp` | `Coming in v2.0`"},{"lineNumber":277,"author":{"gitID":"chanyikwai"},"content":"Alias: `cp`"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"qwlai"},"content":"To copy a cinema\u0027s theater schedule to another cinema\u0027s theater schedule, you can type the following command in the command box."},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"qwlai"},"content":"Format: `copy c/CINEMA_INDEX th/THEATER sd/SOURCE_DATE tc/TARGET_CINEMA_INDEX tth/TARGET_THEATER td/TARGET_DATE`"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"chanyikwai"},"content":"[NOTE]"},{"lineNumber":284,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":285,"author":{"gitID":"qwlai"},"content":"* The index refers to the index number shown in the last cinema listing."},{"lineNumber":286,"author":{"gitID":"qwlai"},"content":"* The index *must be a positive number* 1, 2, 3, ..."},{"lineNumber":287,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":288,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":289,"author":{"gitID":"qwlai"},"content":"Example:"},{"lineNumber":290,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":291,"author":{"gitID":"qwlai"},"content":"* `copy c/1 th/1 sd/14/03/2018 tc/1 tth/2 td/14/03/2018` +"},{"lineNumber":292,"author":{"gitID":"qwlai"},"content":"Copies the schedule of the 1st cinema\u0027s 1st theater to its 2nd theater."},{"lineNumber":293,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":294,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d Movie related commands"},{"lineNumber":297,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":298,"author":{"gitID":"qwlai"},"content":"You can find movie related commands like add, find, delete movie in this section. This allows you to manage a list of movies."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"slothhy"},"content":"// tag::addmovie[]"},{"lineNumber":301,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Adding a movie: `addmovie` | `am` | `Available in v1.2`"},{"lineNumber":302,"author":{"gitID":"qwlai"},"content":"Alias: `am`"},{"lineNumber":303,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":304,"author":{"gitID":"qwlai"},"content":"To add a movie to MVP, you can type the following command in the command box."},{"lineNumber":305,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"Format: `addmovie n/MOVIE_NAME d/DURATION r/RATING sd/START_DATE t/TAG`"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":309,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":310,"author":{"gitID":"slothhy"},"content":"* Movies cannot have the same `MovieName`."},{"lineNumber":311,"author":{"gitID":"qwlai"},"content":"* Once a movie is tagged, you cannot add or remove tags to a movie."},{"lineNumber":312,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":313,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"qwlai"},"content":"* `addmovie n/The Incredibles d/115 r/PG sd/18/11/2014 t/Animation` +"},{"lineNumber":317,"author":{"gitID":"qwlai"},"content":"Adds a movie named `The Incredibles` released on `18/11/2014` with a duration of `115 minutes` with a rating of `PG`."},{"lineNumber":318,"author":{"gitID":"qwlai"},"content":"* `am n/Spiderman 1 d/121 r/PG sd/29/04/2012 t/superhero t/Spiderman` +"},{"lineNumber":319,"author":{"gitID":"qwlai"},"content":"Adds a movie named `Spiderman 1` released on `29/04/2012` with a duration of `121 minutes` with a rating of `PG`. An example is shown in the picture below."},{"lineNumber":320,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":321,"author":{"gitID":"qwlai"},"content":".Before and after `am n/Spiderman 1 d/121 r/PG sd/29/04/2012 t/superhero t/Spiderman`"},{"lineNumber":322,"author":{"gitID":"qwlai"},"content":"image::AddMovie.png[width\u003d\"1000\"]"},{"lineNumber":323,"author":{"gitID":"slothhy"},"content":"// end::addmovie[]"},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"slothhy"},"content":"// tag::findmovie[]"},{"lineNumber":326,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Finding movies by user input: `findmovie` | `fm` | `Available in v1.3`"},{"lineNumber":327,"author":{"gitID":"qwlai"},"content":"Alias: `fm`"},{"lineNumber":328,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":329,"author":{"gitID":"qwlai"},"content":"To find movies based on the name, tag or start date, you can type the following command in the command box."},{"lineNumber":330,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"Format: `findmovie [n/MOVIE_NAME] [t/TAG] [sd/START_DATE]`"},{"lineNumber":332,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":333,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":334,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":335,"author":{"gitID":"qwlai"},"content":"* The search is case insensitive. e.g `spiderman` will match `Spiderman`."},{"lineNumber":336,"author":{"gitID":"qwlai"},"content":"* The order of the keywords does not matter. e.g. `Thor Ragnarok` will match `Ragnarok Thor`."},{"lineNumber":337,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"chanyikwai"},"content":"Examples:"},{"lineNumber":340,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":341,"author":{"gitID":"chanyikwai"},"content":"* `findmovie n/zombie` +"},{"lineNumber":342,"author":{"gitID":"qwlai"},"content":"Displays all movies which name contains keyword `zombie` like `Zombie Graveyard` and `attack the zombie`."},{"lineNumber":343,"author":{"gitID":"qwlai"},"content":"* `findmovie r/PG` +"},{"lineNumber":344,"author":{"gitID":"qwlai"},"content":"Displays all movies with rating `PG`."},{"lineNumber":345,"author":{"gitID":"qwlai"},"content":"* `fm t/horror` +"},{"lineNumber":346,"author":{"gitID":"qwlai"},"content":"Displays all movies which belongs to the tag `horror`."},{"lineNumber":347,"author":{"gitID":"slothhy"},"content":"* `findmovie sd/15/03/2017` +"},{"lineNumber":348,"author":{"gitID":"qwlai"},"content":"Displays all movies that starts on `15/03/2017`."},{"lineNumber":349,"author":{"gitID":"qwlai"},"content":"* `findmovie n/Spiderman t/superhero` +"},{"lineNumber":350,"author":{"gitID":"qwlai"},"content":"Displays all movies from tag `superhero` with name `Spiderman` like `Spiderman 1` and `Spiderman 2`. An example is shown in the picture below."},{"lineNumber":351,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":352,"author":{"gitID":"qwlai"},"content":".Before and after `findmovie n/Spiderman t/superhero`"},{"lineNumber":353,"author":{"gitID":"qwlai"},"content":"image::FindMovie.png[width\u003d\"1000\"]"},{"lineNumber":354,"author":{"gitID":"slothhy"},"content":"// end::findmovie[]"},{"lineNumber":355,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":356,"author":{"gitID":"slothhy"},"content":"// tag::deletemovie[]"},{"lineNumber":357,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Deleting a movie : `deletemovie` | `dm` | `Available in V1.2`"},{"lineNumber":358,"author":{"gitID":"chanyikwai"},"content":"Alias: `dm`"},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"qwlai"},"content":"To delete a specified movie from MVP, you can type the following command in the command box."},{"lineNumber":361,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":362,"author":{"gitID":"slothhy"},"content":"Format: `deletemovie INDEX`"},{"lineNumber":363,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":364,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":365,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":366,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":367,"author":{"gitID":"qwlai"},"content":"* The index *must be a positive number* 1, 2, 3, ..."},{"lineNumber":368,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":369,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":370,"author":{"gitID":"chanyikwai"},"content":"Examples:"},{"lineNumber":371,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":372,"author":{"gitID":"qwlai"},"content":"* `list` +"},{"lineNumber":373,"author":{"gitID":"qwlai"},"content":"`deletemovie 2` +"},{"lineNumber":374,"author":{"gitID":"qwlai"},"content":"Deletes the 2nd movie in `Movie Display`."},{"lineNumber":375,"author":{"gitID":"qwlai"},"content":"* `findmovie t/superhero` +"},{"lineNumber":376,"author":{"gitID":"qwlai"},"content":"`dm 3` +"},{"lineNumber":377,"author":{"gitID":"qwlai"},"content":"Deletes the 3rd movie in the results of the `find` command. An example is shown in the picture below."},{"lineNumber":378,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":379,"author":{"gitID":"qwlai"},"content":".Before and after `dm 3`"},{"lineNumber":380,"author":{"gitID":"qwlai"},"content":"image::DeleteMovie.png[width\u003d\"1000\"]"},{"lineNumber":381,"author":{"gitID":"slothhy"},"content":"// end::deletemovie[]"},{"lineNumber":382,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":383,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":384,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":385,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d Screening related Commands"},{"lineNumber":386,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":387,"author":{"gitID":"qwlai"},"content":"You can find screening related commands like add and delete screening in this section. This allows you to plan your cinema\u0027s schedule."},{"lineNumber":388,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":389,"author":{"gitID":"qwlai"},"content":"// tag::scheduling[]"},{"lineNumber":390,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Adding a movie screening: `addscreening` | `as` | `Available in v1.2`"},{"lineNumber":391,"author":{"gitID":"qwlai"},"content":"Alias: `as`"},{"lineNumber":392,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":393,"author":{"gitID":"qwlai"},"content":"To add a screening of a movie to a cinema theater, you can type the following command in the command box."},{"lineNumber":394,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":395,"author":{"gitID":"qwlai"},"content":"Format: `addscreening m/MOVIE_INDEX c/CINEMA_INDEX th/THEATER h/SCREEN_DATE_TIME`"},{"lineNumber":396,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":397,"author":{"gitID":"qwlai"},"content":"`SCREEN_DATE_TIME` is in this format e.g. 31/01/2018 15:00. `31` is the day, `01` is the month, `2018` is the year,"},{"lineNumber":398,"author":{"gitID":"qwlai"},"content":"`15:00` is the time."},{"lineNumber":399,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":400,"author":{"gitID":"chanyikwai"},"content":"[NOTE]"},{"lineNumber":401,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":402,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":403,"author":{"gitID":"qwlai"},"content":"* The index *must be a positive number* 1, 2, 3, ..."},{"lineNumber":404,"author":{"gitID":"qwlai"},"content":"* The movie to be screened must exist in MVP."},{"lineNumber":405,"author":{"gitID":"qwlai"},"content":"* `SCREEN_DATE_TIME` must not be before the release date of the movie. +"},{"lineNumber":406,"author":{"gitID":"qwlai"},"content":"e.g. A movie is released on `05/04/2018` but adding a screening on `04/04/2018 10:00` will not be allowed."},{"lineNumber":407,"author":{"gitID":"qwlai"},"content":"* The minutes in `SCREEN_DATE_TIME` must be in 5 minutes interval."},{"lineNumber":408,"author":{"gitID":"qwlai"},"content":"* The screenings that are being added must be between year 2000 and 2030, inclusive of 2000 and 2030."},{"lineNumber":409,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":410,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":411,"author":{"gitID":"qwlai"},"content":"Examples:"},{"lineNumber":412,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":413,"author":{"gitID":"qwlai"},"content":"* `addscreening m/1 c/2 th/1 h/05/05/2015 13:30` +"},{"lineNumber":414,"author":{"gitID":"qwlai"},"content":"Adds a screening of the 1st movie in the `Movie Display` to the 2nd cinema\u0027s 1st theater."},{"lineNumber":415,"author":{"gitID":"qwlai"},"content":"* `as m/2 c/3 th/2 h/13/04/2018 14:15` +"},{"lineNumber":416,"author":{"gitID":"qwlai"},"content":"Adds a screening of the 2nd movie in the `Movie Display` to the 3rd cinema\u0027s 2nd theater. An example is shown in the picture below."},{"lineNumber":417,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":418,"author":{"gitID":"qwlai"},"content":".Before and after `as m/2 c/3 th/2 h/13/04/2018 14:15`"},{"lineNumber":419,"author":{"gitID":"qwlai"},"content":"image::AddScreening.png[width\u003d\"1000\"]"},{"lineNumber":420,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":421,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Deleting a screening: `deletescreening` | `ds` | `Available in v1.4`"},{"lineNumber":422,"author":{"gitID":"qwlai"},"content":"Alias: `ds`"},{"lineNumber":423,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":424,"author":{"gitID":"qwlai"},"content":"To delete a screening from a cinema theater, you can type the following command in the command box."},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"qwlai"},"content":"Format: `deletescreening c/CINEMA_INDEX th/THEATER h/SCREEN_DATE_TIME`"},{"lineNumber":427,"author":{"gitID":"-"},"content":""},{"lineNumber":428,"author":{"gitID":"qwlai"},"content":"`SCREEN_DATE_TIME` is in this format e.g. 31/01/2018 15:00. `31` is the day, `01` is the month, `2018` is the year,"},{"lineNumber":429,"author":{"gitID":"qwlai"},"content":"`15:00` is the time."},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":432,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":433,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":434,"author":{"gitID":"qwlai"},"content":"* The index *must be a positive number* 1, 2, 3, ..."},{"lineNumber":435,"author":{"gitID":"qwlai"},"content":"* The movie screening must exist in the cinema theater."},{"lineNumber":436,"author":{"gitID":"qwlai"},"content":"* The time in `SCREEN_DATE_TIME` requires you to give the *exact time* when the screening starts. +"},{"lineNumber":437,"author":{"gitID":"qwlai"},"content":"e.g. There is a screening that lasts from 11:00 to 12:55, to delete the screening you have to give *11:00*, not 11:15 or 12:55."},{"lineNumber":438,"author":{"gitID":"qwlai"},"content":"* The minutes in `SCREEN_DATE_TIME` must be in 5 minutes interval."},{"lineNumber":439,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"qwlai"},"content":"Examples:"},{"lineNumber":442,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":443,"author":{"gitID":"qwlai"},"content":"* `deletescreening c/2 th/1 h/05/05/2015 13:30` +"},{"lineNumber":444,"author":{"gitID":"qwlai"},"content":"Deletes the screening which screens on `05/05/2015 13:30` from the 2nd cinema\u0027s 1st theater."},{"lineNumber":445,"author":{"gitID":"qwlai"},"content":"* `ds c/3 th/2 h/13/04/2018 14:15` +"},{"lineNumber":446,"author":{"gitID":"qwlai"},"content":"Deletes the screening which screens on `13/04/2018 14:15` from the 3rd cinema\u0027s 2nd theater. An example is shown in the picture below."},{"lineNumber":447,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":448,"author":{"gitID":"qwlai"},"content":".Before and after `ds c/3 th/2 h/13/04/2018 14:15`"},{"lineNumber":449,"author":{"gitID":"qwlai"},"content":"image::DeleteScreening.png[width\u003d\"1000\"]"},{"lineNumber":450,"author":{"gitID":"qwlai"},"content":"// end::scheduling[]"},{"lineNumber":451,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":452,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Predicting screening timeslots for a movie: `predict` | `p` | `Coming in v2.0`"},{"lineNumber":453,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":454,"author":{"gitID":"qwlai"},"content":"To predict suitable screening timeslots in the scheduler, you can type the following command in the command box."},{"lineNumber":455,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":456,"author":{"gitID":"qwlai"},"content":"Format: `predict m/MOVIE_INDEX`"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":459,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":460,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":461,"author":{"gitID":"qwlai"},"content":"* The index *must be a positive number* 1, 2, 3, ..."},{"lineNumber":462,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":463,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":464,"author":{"gitID":"qwlai"},"content":"Examples:"},{"lineNumber":465,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":466,"author":{"gitID":"qwlai"},"content":"* `predict m/1` +"},{"lineNumber":467,"author":{"gitID":"qwlai"},"content":"Predicts a list of suitable timeslots for the 1st movie in `Movie Display`. +"},{"lineNumber":468,"author":{"gitID":"qwlai"},"content":"e.g. Cathay\u0027s theater 2 14/04/2018 11:00, Cathay\u0027s theater 3 14/04/2018 15:00."},{"lineNumber":469,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":470,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":471,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":472,"author":{"gitID":"chanyikwai"},"content":"// tag::emailfeature[]"},{"lineNumber":473,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d Email command"},{"lineNumber":474,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":475,"author":{"gitID":"qwlai"},"content":"You can find email command and its relevant details in this section. This allows you to send email within MVP."},{"lineNumber":476,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":477,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Emailing schedule: `email` | `eml` | `Available in v1.3`"},{"lineNumber":478,"author":{"gitID":"chanyikwai"},"content":"Alias: `eml`"},{"lineNumber":479,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":480,"author":{"gitID":"qwlai"},"content":"To send an email to a target recipient, you can type the following command in the command box."},{"lineNumber":481,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":482,"author":{"gitID":"chanyikwai"},"content":"Format: `email msg/MESSAGE subj/SUBJECT recp/RECIPIENT func/\u003cSEND|CLEAR\u003e lgn/EMAIL_USERNAME:EMAIL_PASSWORD [attc/RELATIVE_FILE_PATH]`"},{"lineNumber":483,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":484,"author":{"gitID":"chanyikwai"},"content":"[NOTE]"},{"lineNumber":485,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":486,"author":{"gitID":"qwlai"},"content":"* The message `msg`, subject `subj`, and recipient `recp` must be filled before you send the email."},{"lineNumber":487,"author":{"gitID":"qwlai"},"content":"* The login `lgn` field requires you to provide an actual Gmail account."},{"lineNumber":488,"author":{"gitID":"qwlai"},"content":"* The parameters (e.g. `msg`, `subj`) can be edited without including other parameters."},{"lineNumber":489,"author":{"gitID":"qwlai"},"content":"* The *\"Allow less secure apps\"* setting should be enabled on the Gmail account. To do this, you can:"},{"lineNumber":490,"author":{"gitID":"qwlai"},"content":". Navigate to your Gmail account -\u003e My Account -\u003e Sign-in \u0026 Security -\u003e Allow less secure apps"},{"lineNumber":491,"author":{"gitID":"qwlai"},"content":". Toggle it and make sure that it shows *\"Allow less secure apps: ON\"*"},{"lineNumber":492,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":493,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":494,"author":{"gitID":"chanyikwai"},"content":"Examples:"},{"lineNumber":495,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":496,"author":{"gitID":"chanyikwai"},"content":"* `email msg/Hi Bob, Here is the schedule. subj/Schedule lgn/cmanager@gmail.com:1I2h@la recp/gv.manager@gmail.com attc/docs/images/Architecture.png func/send` +"},{"lineNumber":497,"author":{"gitID":"qwlai"},"content":"Sends out an email with the following details:"},{"lineNumber":498,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":499,"author":{"gitID":"chanyikwai"},"content":"** Recipient: `gv.manager@gmail.com`"},{"lineNumber":500,"author":{"gitID":"chanyikwai"},"content":"** Subject: `Schedule`"},{"lineNumber":501,"author":{"gitID":"chanyikwai"},"content":"** Message: `Hi Bob, Here is the schedule.`"},{"lineNumber":502,"author":{"gitID":"chanyikwai"},"content":"** Attachment: `Architecture.png`"},{"lineNumber":503,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":504,"author":{"gitID":"chanyikwai"},"content":"* `eml msg/This will be a very long message, so I hope that you are attentive when you read this.` +"},{"lineNumber":505,"author":{"gitID":"chanyikwai"},"content":"Edits the email message with `This will be a very long message, so I hope that you are attentive when you read this.`"},{"lineNumber":506,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":507,"author":{"gitID":"qwlai"},"content":".Before and after `email msg/Hi Bob, Here is the schedule. subj/Schedule recp/gv.manager@gmail.com`"},{"lineNumber":508,"author":{"gitID":"qwlai"},"content":"image::Email.png[width\u003d\"1000\"]"},{"lineNumber":509,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":510,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":511,"author":{"gitID":"chanyikwai"},"content":"// end::emailfeature[]"},{"lineNumber":512,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":513,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d Security related commands"},{"lineNumber":514,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":515,"author":{"gitID":"qwlai"},"content":"You can find security related commands like encrypt and decrypt in this section. This allows you to secure your cinema\u0027s scheduling information."},{"lineNumber":516,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":517,"author":{"gitID":"qwlai"},"content":"// tag::SecurityUtils[]"},{"lineNumber":518,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Encrypting data files : `encrypt` | `enc` | `Available in v1.4`"},{"lineNumber":519,"author":{"gitID":"qwlai"},"content":"Alias: `enc`"},{"lineNumber":520,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":521,"author":{"gitID":"qwlai"},"content":"To encrypt MVP, you can type the following command in the command box."},{"lineNumber":522,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":523,"author":{"gitID":"tinyjy94"},"content":"Format: `encrypt pw/PASSWORD`"},{"lineNumber":524,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":525,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":526,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":527,"author":{"gitID":"qwlai"},"content":"* Before you execute this command, please ensure that there is a `movieplanner.xml`."},{"lineNumber":528,"author":{"gitID":"qwlai"},"content":"You can check this by going to the `data` folder located in your home folder e.g. `C:\\Users\\student\\MVP\\data`."},{"lineNumber":529,"author":{"gitID":"qwlai"},"content":"** If you cannot find the `movieplanner.xml`, you can create one by executing any add or delete commands. e.g. `at 1 th/1`"},{"lineNumber":530,"author":{"gitID":"qwlai"},"content":"* A `encryptedmovieplanner.xml` file is created/overwritten upon successful `encrypt` command and it is located in the `data` folder."},{"lineNumber":531,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":532,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":533,"author":{"gitID":"chanyikwai"},"content":"Examples:"},{"lineNumber":534,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":535,"author":{"gitID":"tinyjy94"},"content":"* `encrypt pw/secret` +"},{"lineNumber":536,"author":{"gitID":"qwlai"},"content":"Encrypts MVP and creates a `encryptedmovieplanner.xml` using *secret* as the password."},{"lineNumber":537,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":538,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Decrypting encrypted data files : `decrypt` | `dec` | `Available in v1.4`"},{"lineNumber":539,"author":{"gitID":"qwlai"},"content":"Alias: `dec`"},{"lineNumber":540,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":541,"author":{"gitID":"qwlai"},"content":"To decrypt the encrypted MVP file, you can type the following command in the command box."},{"lineNumber":542,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":543,"author":{"gitID":"tinyjy94"},"content":"Format: `decrypt pw/PASSWORD`"},{"lineNumber":544,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":545,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":546,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":547,"author":{"gitID":"qwlai"},"content":"* Before you execute this command, please ensure that there is a `encryptedmovieplanner.xml`."},{"lineNumber":548,"author":{"gitID":"qwlai"},"content":"You can check this by going to the `data` folder located in your home folder e.g. `C:\\Users\\student\\MVP\\data`."},{"lineNumber":549,"author":{"gitID":"qwlai"},"content":"* A `movieplanner.xml` file is created/overwritten upon successful `decrypt` command. You will be prompted to restart the application to see changes."},{"lineNumber":550,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":551,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":552,"author":{"gitID":"chanyikwai"},"content":"Examples:"},{"lineNumber":553,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":554,"author":{"gitID":"tinyjy94"},"content":"* `decrypt pw/secret` +"},{"lineNumber":555,"author":{"gitID":"qwlai"},"content":"Decrypts the `encryptedmovieplanner.xml` and recovers a `movieplanner.xml`, if the password(*secret* in this case) is the same as the one used for encryption."},{"lineNumber":556,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":557,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":558,"author":{"gitID":"tinyjy94"},"content":"// end::SecurityUtils[]"},{"lineNumber":559,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":560,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d Other helpful commands"},{"lineNumber":561,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":562,"author":{"gitID":"qwlai"},"content":"You can find other helpful commands that can help you navigate MVP in this section."},{"lineNumber":563,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":564,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Viewing help : `help` | `h`"},{"lineNumber":565,"author":{"gitID":"qwlai"},"content":"Alias: `h`"},{"lineNumber":566,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":567,"author":{"gitID":"qwlai"},"content":"To find out more about the list of commands in MVP, you can type `help` or `h` in the command box."},{"lineNumber":568,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":569,"author":{"gitID":"qwlai"},"content":"Format: `help`"},{"lineNumber":570,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":571,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Clearing all entries : `clear` | `c`"},{"lineNumber":572,"author":{"gitID":"qwlai"},"content":"Alias: `c`"},{"lineNumber":573,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":574,"author":{"gitID":"qwlai"},"content":"To clear all entries of cinemas and movies from MVP, you can type `clear` or `c` in the command box."},{"lineNumber":575,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":576,"author":{"gitID":"qwlai"},"content":"Format: `clear`"},{"lineNumber":577,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":578,"author":{"gitID":"qwlai"},"content":".Before and after `clear`"},{"lineNumber":579,"author":{"gitID":"qwlai"},"content":"image::Clear.png[width\u003d\"1000\"]"},{"lineNumber":580,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":581,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Listing history of entered commands : `history` | `hist`"},{"lineNumber":582,"author":{"gitID":"qwlai"},"content":"Alias: `hist`"},{"lineNumber":583,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":584,"author":{"gitID":"qwlai"},"content":"To find out more about the commands you have entered previously, you can type `history` or `h` in the command box."},{"lineNumber":585,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":586,"author":{"gitID":"qwlai"},"content":"Format: `history`"},{"lineNumber":587,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":589,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":590,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":591,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":592,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":593,"author":{"gitID":"chanyikwai"},"content":"// tag::undoredo[]"},{"lineNumber":594,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Undoing previous command : `undo` | `u`"},{"lineNumber":595,"author":{"gitID":"chanyikwai"},"content":"Alias: `u`"},{"lineNumber":596,"author":{"gitID":"-"},"content":""},{"lineNumber":597,"author":{"gitID":"qwlai"},"content":"To restore MVP to the state before the previous _undoable_ command was executed, you can type `undo` or `u` in the command box."},{"lineNumber":598,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":599,"author":{"gitID":"chanyikwai"},"content":"Format: `undo`"},{"lineNumber":600,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":601,"author":{"gitID":"chanyikwai"},"content":"[NOTE]"},{"lineNumber":602,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":603,"author":{"gitID":"qwlai"},"content":"Undoable commands: those commands that modify MVP\u0027s content (`add`, `delete`, `edit`, `addtheater`, `deletetheater`, `addmovie`, `deletemovie`, `addscreening`, `deletescreening`, `clear`)."},{"lineNumber":604,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":605,"author":{"gitID":"-"},"content":""},{"lineNumber":606,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":607,"author":{"gitID":"-"},"content":""},{"lineNumber":608,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":609,"author":{"gitID":"qwlai"},"content":"`list` +"},{"lineNumber":610,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":611,"author":{"gitID":"-"},"content":""},{"lineNumber":612,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":613,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":614,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":615,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":618,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":619,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":620,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":621,"author":{"gitID":"-"},"content":""},{"lineNumber":622,"author":{"gitID":"qwlai"},"content":"* `add n/Shaws e/shaws@shaws.com a/2 Jurong East Central 1, 11 JCube p/6123122 th/2` +"},{"lineNumber":623,"author":{"gitID":"qwlai"},"content":"`undo` (reverse the `add` command, an example is shown in the picture below.)"},{"lineNumber":624,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":625,"author":{"gitID":"qwlai"},"content":".Before and after `undo`"},{"lineNumber":626,"author":{"gitID":"qwlai"},"content":"image::Undo.png[width\u003d\"1000\"]"},{"lineNumber":627,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":628,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo` | `r`"},{"lineNumber":629,"author":{"gitID":"qwlai"},"content":"Alias: `r`"},{"lineNumber":630,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":631,"author":{"gitID":"qwlai"},"content":"To reverse the most recent `undo` command, you can type `redo` or `r` in the command box."},{"lineNumber":632,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":633,"author":{"gitID":"qwlai"},"content":"Format: `redo`"},{"lineNumber":634,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":635,"author":{"gitID":"chanyikwai"},"content":"Examples:"},{"lineNumber":636,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":637,"author":{"gitID":"chanyikwai"},"content":"* `delete 1` +"},{"lineNumber":638,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":639,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":640,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":641,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":642,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":643,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":644,"author":{"gitID":"-"},"content":""},{"lineNumber":645,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":646,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":647,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":648,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":649,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":650,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":651,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":652,"author":{"gitID":"qwlai"},"content":"* `add n/Shaws e/shaws@shaws.com a/2 Jurong East Central 1, 11 JCube p/6123122 th/2` +"},{"lineNumber":653,"author":{"gitID":"qwlai"},"content":"`undo` (reverse the `add` command)"},{"lineNumber":654,"author":{"gitID":"qwlai"},"content":"`redo` (reapplies the `add` command, an example is shown in the picture below.)"},{"lineNumber":655,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":656,"author":{"gitID":"qwlai"},"content":".Before and after `redo`"},{"lineNumber":657,"author":{"gitID":"qwlai"},"content":"image::Redo.png[width\u003d\"1000\"]"},{"lineNumber":658,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":659,"author":{"gitID":"qwlai"},"content":"// end::undoredo[]"},{"lineNumber":660,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":661,"author":{"gitID":"qwlai"},"content":"// tag::jump[]"},{"lineNumber":662,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Jumping to a specified date : `jump` | `j` | `Available in v1.3`"},{"lineNumber":663,"author":{"gitID":"qwlai"},"content":"Alias: `j`"},{"lineNumber":664,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":665,"author":{"gitID":"qwlai"},"content":"To view the schedule of a cinema on a specified date, you can type the following command in the command box."},{"lineNumber":666,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":667,"author":{"gitID":"qwlai"},"content":"Format: `jump dd/mm/yyyy`"},{"lineNumber":668,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":669,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":670,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":671,"author":{"gitID":"qwlai"},"content":"* Remember to select a cinema using the `select` command before executing the jump command."},{"lineNumber":672,"author":{"gitID":"qwlai"},"content":"* You can only jump to a date between year 2000 and 2030, inclusive of 2000 and 2030."},{"lineNumber":673,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":674,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":675,"author":{"gitID":"qwlai"},"content":"Examples:"},{"lineNumber":676,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":677,"author":{"gitID":"qwlai"},"content":"* `jump 03/05/2018` +"},{"lineNumber":678,"author":{"gitID":"qwlai"},"content":"Jumps to the schedule of the selected cinema. You will be able to view the schedule of the cinema on 03/05/2018."},{"lineNumber":679,"author":{"gitID":"qwlai"},"content":"* `j 03/03/2017` +"},{"lineNumber":680,"author":{"gitID":"qwlai"},"content":"Jumps to the schedule of the selected cinema. You will be able to view the schedule of the cinema on 03/03/2017. An example is shown in the picture below."},{"lineNumber":681,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":682,"author":{"gitID":"qwlai"},"content":".Before and after `j 03/03/2017`"},{"lineNumber":683,"author":{"gitID":"qwlai"},"content":"image::Jump.png[width\u003d\"1000\"]"},{"lineNumber":684,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":685,"author":{"gitID":"qwlai"},"content":"//end::jump[]"},{"lineNumber":686,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":687,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Listing all cinemas and movies : `list` | `l`"},{"lineNumber":688,"author":{"gitID":"qwlai"},"content":"Alias: `l`"},{"lineNumber":689,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":690,"author":{"gitID":"qwlai"},"content":"To view a list of cinemas and movies in MVP, you can type `list` or `l` in the command box."},{"lineNumber":691,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":692,"author":{"gitID":"qwlai"},"content":"Format: `list`"},{"lineNumber":693,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":694,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":695,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":696,"author":{"gitID":"qwlai"},"content":"To exit MVP, you can type `exit` in the command box."},{"lineNumber":697,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":698,"author":{"gitID":"qwlai"},"content":"Format: `exit`"},{"lineNumber":699,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":700,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Saving the data"},{"lineNumber":701,"author":{"gitID":"-"},"content":""},{"lineNumber":702,"author":{"gitID":"qwlai"},"content":"MVP\u0027s data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":703,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":704,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":705,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":706,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":707,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":708,"author":{"gitID":"-"},"content":""},{"lineNumber":709,"author":{"gitID":"qwlai"},"content":"*Q*: How do I transfer my data to another computer? +"},{"lineNumber":710,"author":{"gitID":"qwlai"},"content":"*A*: Install MVP on the other computer and replace the `movieplanner.xml` file with your previous `movieplanner.xml` that contains the data of your previous MVP."},{"lineNumber":711,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":712,"author":{"gitID":"qwlai"},"content":"*Q*: How do I update to the latest version of MVP? +"},{"lineNumber":713,"author":{"gitID":"qwlai"},"content":"*A*: You can find the latest version of MVP https://github.com/CS2103JAN2018-W11-B2/main/releases[here]. To update, remember to overwrite the `movieplanner.jar` in your home folder."},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"qwlai"},"content":"*Q*: What is a screening? +"},{"lineNumber":716,"author":{"gitID":"qwlai"},"content":"*A*: A screening refers to a timeslot allocated to a movie so that it can be shown on the theater\u0027s screen."},{"lineNumber":717,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":718,"author":{"gitID":"qwlai"},"content":"*Q*: How do I check that I have attached a document in a email? +"},{"lineNumber":719,"author":{"gitID":"qwlai"},"content":"*A*: This feature is under development and it will be available in *v2.0*."},{"lineNumber":720,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":721,"author":{"gitID":"qwlai"},"content":"*Q*: Why can\u0027t I jump to a date before year 2000 or after year 2030? +"},{"lineNumber":722,"author":{"gitID":"qwlai"},"content":"*A*: This is to facilitate our future enhancements which uses data after year 2000 for statistical analysis to predict the demand of movies."},{"lineNumber":723,"author":{"gitID":"qwlai"},"content":"In future versions, the hard limit on year 2030 will be raised to allow cinema managers to plan further ahead."},{"lineNumber":724,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":725,"author":{"gitID":"qwlai"},"content":"*Q*: Why is the maximum number of theaters only 20? +"},{"lineNumber":726,"author":{"gitID":"qwlai"},"content":"*A*: This is to ensure that the schedules of the cinemas are displayed properly. If we allow cinema managers to add"},{"lineNumber":727,"author":{"gitID":"qwlai"},"content":"any number of theaters, there is a possibility that the cinema\u0027s schedule is not displayed properly and this will be addressed in a later version."},{"lineNumber":728,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":729,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":730,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"chanyikwai"},"content":"|\u003d\u003d\u003d"},{"lineNumber":734,"author":{"gitID":"chanyikwai"},"content":"|Feature|Command|Alias|Example"},{"lineNumber":735,"author":{"gitID":"qwlai"},"content":"|*Add* |`add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS th/THEATER`|`a`"},{"lineNumber":736,"author":{"gitID":"qwlai"},"content":"|`add n/Clement We Cinema p/62224444 e/wecinema@wecinema.com a/123, Clementi Rd, 1234665 th/3`"},{"lineNumber":737,"author":{"gitID":"qwlai"},"content":"|*Edit* |`edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]` |`e`"},{"lineNumber":738,"author":{"gitID":"chanyikwai"},"content":"|`edit 2 n/GV Jurong Point e/contacts@gv.com`"},{"lineNumber":739,"author":{"gitID":"chanyikwai"},"content":"|*Find* |`find KEYWORD [MORE_KEYWORDS]` |`f`"},{"lineNumber":740,"author":{"gitID":"chanyikwai"},"content":"|`find Cathay`"},{"lineNumber":741,"author":{"gitID":"chanyikwai"},"content":"|*Delete* |`delete INDEX` |`d`"},{"lineNumber":742,"author":{"gitID":"chanyikwai"},"content":"|`delete 3`"},{"lineNumber":743,"author":{"gitID":"chanyikwai"},"content":"|*Select* |`select INDEX` |`s` |`select 2`"},{"lineNumber":744,"author":{"gitID":"qwlai"},"content":"|*AddTheater* | `addtheater CINEMA_INDEX th/NUMBER_OF_THEATER` |`at` |`addtheater 1 th/2`"},{"lineNumber":745,"author":{"gitID":"qwlai"},"content":"|*DeleteTheater* |`deletetheater CINEMA_INDEX th/NUMBER_OF_THEATER` |`dt` |`deletetheater 1 th/9`"},{"lineNumber":746,"author":{"gitID":"qwlai"},"content":"| *Copy* `Coming in v2.0` | `copy c/CINEMA_INDEX th/THEATER sd/SOURCE_DATE tc/TARGET_CINEMA_INDEX tth/TARGET_THEATER td/TARGET_DATE`"},{"lineNumber":747,"author":{"gitID":"qwlai"},"content":"| `cp` | `cp c/1 th/1 sd/14/03/2018 tc/1 tth/2 td/14/03/2018`"},{"lineNumber":748,"author":{"gitID":"-"},"content":"|*AddMovie* |`addmovie n/MOVIE_NAME d/DURATION r/RATING sd/START_DATE t/TAG`|`am`"},{"lineNumber":749,"author":{"gitID":"qwlai"},"content":"|`addmovie n/The Incredibles d/115 r/PG sd/18/11/2014 t/Animation`"},{"lineNumber":750,"author":{"gitID":"-"},"content":"|*FindMovie* |`findmovie [n/MOVIE_NAME] [t/TAG] [sd/START_DATE]` |`fm`"},{"lineNumber":751,"author":{"gitID":"chanyikwai"},"content":"|`findmovie n/zombie`"},{"lineNumber":752,"author":{"gitID":"qwlai"},"content":"|*DeleteMovie* |`deletemovie INDEX` |`dm` |`list` +"},{"lineNumber":753,"author":{"gitID":"qwlai"},"content":" `deletemovie 2`"},{"lineNumber":754,"author":{"gitID":"qwlai"},"content":"|*AddScreening* |`addscreening m/MOVIE_INDEX c/CINEMA_INDEX th/THEATER h/SCREEN_DATE_TIME` |`as`"},{"lineNumber":755,"author":{"gitID":"qwlai"},"content":"|`addscreening m/1 c/2 th/1 h/05/05/2015 13:30`"},{"lineNumber":756,"author":{"gitID":"qwlai"},"content":"|*DeleteScreening* |`deletescreening c/CINEMA_INDEX th/THEATER h/SCREEN_DATE_TIME` |`ds`"},{"lineNumber":757,"author":{"gitID":"qwlai"},"content":"|`deletescreening c/2 th/1 h/05/05/2015 13:30`"},{"lineNumber":758,"author":{"gitID":"qwlai"},"content":"|*Predict* `Coming in v2.0` | `predict m/MOVIE_INDEX` | `p` | `predict m/1`"},{"lineNumber":759,"author":{"gitID":"qwlai"},"content":"|*Email* | `email msg/MESSAGE subj/SUBJECT recp/RECIPIENT func/\u003cSEND\\|CLEAR\u003e lgn/EMAIL_USERNAME:EMAIL_PASSWORD [attc/RELATIVE_FILE_PATH]` |`em`"},{"lineNumber":760,"author":{"gitID":"qwlai"},"content":"|`email msg/Hi Bob, Here is the schedule. subj/Schedule lgn/cmanager@gmail.com:1I2h@la recp/gv.manager@gmail.com attc/docs/images/Architecture.png func/send`"},{"lineNumber":761,"author":{"gitID":"qwlai"},"content":"|*Encrypt* | `encrypt pw/PASSWORD` | `enc` | `encrypt pw/iL0veSup3rHer0es`"},{"lineNumber":762,"author":{"gitID":"qwlai"},"content":"|*Decrypt* | `decrypt pw/PASSWORD` | `dec` | `decrypt pw/iL0veSup3rHer0es`"},{"lineNumber":763,"author":{"gitID":"chanyikwai"},"content":"|*Help* |`help` |`h` |`help`"},{"lineNumber":764,"author":{"gitID":"qwlai"},"content":"|*Clear* |`clear`| `c`| `clear`"},{"lineNumber":765,"author":{"gitID":"chanyikwai"},"content":"|*History* |`history` |`hist` |`history`"},{"lineNumber":766,"author":{"gitID":"chanyikwai"},"content":"|*Undo* |`undo` |`u` |`undo`"},{"lineNumber":767,"author":{"gitID":"chanyikwai"},"content":"|*Redo* |`redo` |`r` |`redo`"},{"lineNumber":768,"author":{"gitID":"qwlai"},"content":"|*Jump* | `jump dd/mm/yyyy` | `j` | `jump 28/03/2018`"},{"lineNumber":769,"author":{"gitID":"chanyikwai"},"content":"|*List* |`list` |`l` |`list`"},{"lineNumber":770,"author":{"gitID":"chanyikwai"},"content":"|*Exit* |`exit` |- |`exit`"},{"lineNumber":771,"author":{"gitID":"chanyikwai"},"content":"|\u003d\u003d\u003d"},{"lineNumber":772,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":773,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":774,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":775,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Key Shortcuts"},{"lineNumber":776,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":777,"author":{"gitID":"qwlai"},"content":"In this section you can find key shortcuts that can help you with your experience in MVP."},{"lineNumber":778,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":779,"author":{"gitID":"chanyikwai"},"content":"|\u003d\u003d\u003d"},{"lineNumber":780,"author":{"gitID":"chanyikwai"},"content":"|Shortcut |Corresponding Function"},{"lineNumber":781,"author":{"gitID":"chanyikwai"},"content":"|*Alt + Shift + C* | Clear command"},{"lineNumber":782,"author":{"gitID":"chanyikwai"},"content":"|*Ctrl + H* | History command"},{"lineNumber":783,"author":{"gitID":"chanyikwai"},"content":"|*Ctrl + L* | List command"},{"lineNumber":784,"author":{"gitID":"chanyikwai"},"content":"|*Ctrl + Y* | Redo command"},{"lineNumber":785,"author":{"gitID":"chanyikwai"},"content":"|*Ctrl + Z* | Undo command"},{"lineNumber":786,"author":{"gitID":"qwlai"},"content":"|*Shift + Tab* | Toggle between email and cinema display"},{"lineNumber":787,"author":{"gitID":"qwlai"},"content":"|*F1* | Help command"},{"lineNumber":788,"author":{"gitID":"chanyikwai"},"content":"|\u003d\u003d\u003d"},{"lineNumber":789,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":790,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":791,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":792,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Glossary"},{"lineNumber":793,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":794,"author":{"gitID":"chanyikwai"},"content":"[[application-programming-interface]]"},{"lineNumber":795,"author":{"gitID":"chanyikwai"},"content":"*Application Programming Interface*"},{"lineNumber":796,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":797,"author":{"gitID":"chanyikwai"},"content":"A set of functions and procedures that allow the creation of applications which access the features or data"},{"lineNumber":798,"author":{"gitID":"chanyikwai"},"content":"of an operating system, application, or other service."},{"lineNumber":799,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":800,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":801,"author":{"gitID":"chanyikwai"},"content":"[[graphical-user-interface]] Graphical User Interface::"},{"lineNumber":802,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":803,"author":{"gitID":"chanyikwai"},"content":"A type of user interface that allows users to interact with electronic devices through graphical icons and"},{"lineNumber":804,"author":{"gitID":"chanyikwai"},"content":"visual indicators."},{"lineNumber":805,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":806,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":807,"author":{"gitID":"qwlai"},"content":"[[home-folder]] Home Folder::"},{"lineNumber":808,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":809,"author":{"gitID":"qwlai"},"content":"A home folder refers to the folder where your `movieplanner.jar` is located e.g. `C:\\Users\\student\\MVP`."},{"lineNumber":810,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":811,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":812,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide.adoc#, Back to top\u003e\u003e"}],"authorContributionMap":{"slothhy":16,"chanyikwai":177,"tinyjy94":27,"-":125,"qwlai":467}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"MoVie Planner(MVP) was developed by W11-B2. +"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]. We have transformed the AddressBook - Level 4 application into a Movie Planner(MVP) that encompasses practical features for real life usage. MVP aims to assist cinema managers in managing schedule of movies in different cinemas, providing features such as managing cinemas’ schedules across periods of time, secured storage of cinema schedule and more."},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d Lai Qi Wei"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"image::qwlai.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"{empty}[https://github.com/qwlai[github]] [https://cs2103jan2018-w11-b2.github.io/main/team/qwlai.html[portfolio]]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"Role: Developer +"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"Responsibilities: Logic and Model Development"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d Oh Han Yi"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"image::slothhy.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":23,"author":{"gitID":"-"},"content":"{empty}[https://github.com/slothhy[github]] [https://cs2103jan2018-w11-b2.github.io/main/team/hanyi.html[portfolio]]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"Responsibilities: Storage Development, Logic Handling"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d Chan Jun Yuan"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"image::tinyjy94.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":32,"author":{"gitID":"-"},"content":"{empty}[https://github.com/tinyjy94[github]] [https://cs2103jan2018-w11-b2.github.io/main/team/tinyjy94.html[portfolio]]"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"Responsibilities: Model Development, Logic and Storage Handling"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d Chan Yik Wai"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"image::chanyikwai.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"{empty}[https://github.com/chanyikwai[github]] [https://cs2103jan2018-w11-b2.github.io/main/team/chanyikwai.html[portfolio]]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"Responsibilities: UI and Model Development"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"chanyikwai":13,"-":32,"qwlai":1}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"\u003d MVP (MoVie Planner)"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":"https://travis-ci.org/profile/CS2103JAN2018-W11-B2[image:https://travis-ci.org/CS2103JAN2018-W11-B2/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"https://ci.appveyor.com/project/tinyjy94/main[image:https://ci.appveyor.com/api/projects/status/29hd9q3b9vrvbljj/branch/master?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"https://coveralls.io/github/CS2103JAN2018-W11-B2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W11-B2/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":10,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":14,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Introduction"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"* This is a desktop Movie Planner application that helps cinema manager to plan movie schedules. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Getting Started"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"For developers setting up MVP, please refer to the \"DeveloperGuide.adoc\" under \"Section 2. Setting Up\""},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"and ensure the steps are properly followed."},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"For users who are new to MVP, please refer to the \"UserGuide.adoc\" for instructions on how to"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"use the MVP application."},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"Below is a list of useful links to the relevant documents to get you started."},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":33,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":34,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Running Tests"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"To run the tests for this application, ensure that you are using IntelliJ IDE, and:"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":" [FOR DEVELOPERS]"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":" 1. Create your own automated tests for your relevant features"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":" 2. Under \"src/\", right-click on the \"test\" folder and select \"Run \u0027All Tests\u0027\""},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":" [FOR USERS]"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":" 1. Under \"src/\", right-click on the \"test\" folder and select \"Run \u0027All Tests\u0027\""},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Built With"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"- IntelliJ IDE - Software Development"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"- GitHub - Source Control"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Authors"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"- Lai Qi Wei - Developer"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"- Oh Han Yi - Developer"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"- Chan Jun Yuan - Developer"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"- Chan Yik Wai - Developer"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":59,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":60,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"chanyikwai":31,"slothhy":1,"tinyjy94":3,"-":24,"qwlai":3}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"public class SampleDataTest extends MoviePlannerSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    protected MoviePlanner getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"    public void moviePlanner_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"        Cinema[] expectedList \u003d SampleDataUtil.getSampleCinemas();"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"        assertListMatching(getCinemaListPanel(), expectedList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":44,"qwlai":7}},{"path":"unused/EditMovieCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DURATION_DESC_INCREDIBLES;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DURATION_DESC_MARVEL;"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DURATION_DESC;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MOVIENAME_DESC;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_STARTDATE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MOVIENAME_DESC_INCREDIBLES;"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MOVIENAME_DESC_MARVEL;"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_INCREDIBLES;"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_MARVEL;"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STARTDATE_DESC_INCREDIBLES;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STARTDATE_DESC_MARVEL;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_COMEDY;"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SUPERHERO;"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_INCREDIBLES;"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_MARVEL;"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MOVIENAME_INCREDIBLES;"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MOVIENAME_MARVEL;"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_INCREDIBLES;"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_MARVEL;"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATE_INCREDIBLES;"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATE_MARVEL;"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMEDY;"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SUPERHERO;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MOVIE;"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MOVIE;"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_MOVIE;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.EditMovieCommand;"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.EditMovieCommand.EditMovieDescriptor;"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Duration;"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.MovieName;"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Rating;"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDate;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"import seedu.address.testutil.EditMovieDescriptorBuilder;"},{"lineNumber":47,"content":"//@@author slothhy-unused"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":" * This is a test for EditMovie"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"public class EditMovieCommandParserTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditMovieCommand.MESSAGE_USAGE);"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"    private EditMovieCommandParser parser \u003d new EditMovieCommandParser();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, VALID_MOVIENAME_INCREDIBLES, MESSAGE_INVALID_FORMAT);"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"        // no field specified"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, \"1\", EditMovieCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, \"-5\" + MOVIENAME_DESC_MARVEL, MESSAGE_INVALID_FORMAT);"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":"        // zero index"},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, \"0\" + MOVIENAME_DESC_INCREDIBLES, MESSAGE_INVALID_FORMAT);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":"        // invalid movieName"},{"lineNumber":90,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, \"1\" + INVALID_MOVIENAME_DESC, MovieName.MESSAGE_MOVIENAME_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitID":"slothhy"},"content":"        // invalid duration"},{"lineNumber":92,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DURATION_DESC, Duration.MESSAGE_DURATION_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"slothhy"},"content":"        // invalid rating"},{"lineNumber":94,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC, Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"slothhy"},"content":"        // invalid startDate"},{"lineNumber":96,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, \"1\" + INVALID_STARTDATE_DESC, StartDate.MESSAGE_STARTDATE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitID":"slothhy"},"content":"        // invalid tag"},{"lineNumber":98,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":100,"author":{"gitID":"slothhy"},"content":"        // invalid duration followed by valid email"},{"lineNumber":101,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, \"1\" + INVALID_DURATION_DESC + RATING_DESC_MARVEL,"},{"lineNumber":102,"author":{"gitID":"slothhy"},"content":"                Duration.MESSAGE_DURATION_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":104,"author":{"gitID":"slothhy"},"content":"        // valid duration followed by invalid duration. The test case for invalid duration followed by valid duration"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":106,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, \"1\" + DURATION_DESC_INCREDIBLES + INVALID_DURATION_DESC,"},{"lineNumber":107,"author":{"gitID":"slothhy"},"content":"                Duration.MESSAGE_DURATION_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":110,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, \"1\" + INVALID_MOVIENAME_DESC + INVALID_DURATION_DESC"},{"lineNumber":111,"author":{"gitID":"slothhy"},"content":"                        + VALID_RATING_INCREDIBLES + VALID_DURATION_INCREDIBLES,"},{"lineNumber":112,"author":{"gitID":"slothhy"},"content":"                MovieName.MESSAGE_MOVIENAME_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":117,"author":{"gitID":"slothhy"},"content":"        Index targetIndex \u003d INDEX_SECOND_MOVIE;"},{"lineNumber":118,"author":{"gitID":"slothhy"},"content":"        String userInput \u003d targetIndex.getOneBased() + RATING_DESC_INCREDIBLES"},{"lineNumber":119,"author":{"gitID":"slothhy"},"content":"                + DURATION_DESC_MARVEL + STARTDATE_DESC_MARVEL + MOVIENAME_DESC_MARVEL + TAG_DESC_SUPERHERO;"},{"lineNumber":120,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":121,"author":{"gitID":"slothhy"},"content":"        EditMovieDescriptor descriptor \u003d new EditMovieDescriptorBuilder().withName(VALID_MOVIENAME_MARVEL)"},{"lineNumber":122,"author":{"gitID":"slothhy"},"content":"                .withDuration(VALID_DURATION_MARVEL).withRating(VALID_RATING_INCREDIBLES)"},{"lineNumber":123,"author":{"gitID":"slothhy"},"content":"                .withStartDate(VALID_STARTDATE_MARVEL).withTags(VALID_TAG_SUPERHERO).build();"},{"lineNumber":124,"author":{"gitID":"slothhy"},"content":"        EditMovieCommand expectedCommand \u003d new EditMovieCommand(targetIndex, descriptor);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":131,"author":{"gitID":"slothhy"},"content":"        Index targetIndex \u003d INDEX_FIRST_MOVIE;"},{"lineNumber":132,"author":{"gitID":"slothhy"},"content":"        String userInput \u003d targetIndex.getOneBased() + DURATION_DESC_INCREDIBLES + RATING_DESC_MARVEL;"},{"lineNumber":133,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":134,"author":{"gitID":"slothhy"},"content":"        EditMovieDescriptor descriptor \u003d new EditMovieDescriptorBuilder().withDuration(VALID_DURATION_INCREDIBLES)"},{"lineNumber":135,"author":{"gitID":"slothhy"},"content":"                .withRating(VALID_RATING_MARVEL).build();"},{"lineNumber":136,"author":{"gitID":"slothhy"},"content":"        EditMovieCommand expectedCommand \u003d new EditMovieCommand(targetIndex, descriptor);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":144,"author":{"gitID":"slothhy"},"content":"        Index targetIndex \u003d INDEX_THIRD_MOVIE;"},{"lineNumber":145,"author":{"gitID":"slothhy"},"content":"        String userInput \u003d targetIndex.getOneBased() + MOVIENAME_DESC_INCREDIBLES;"},{"lineNumber":146,"author":{"gitID":"slothhy"},"content":"        EditMovieDescriptor descriptor \u003d new EditMovieDescriptorBuilder().withName(VALID_MOVIENAME_INCREDIBLES).build();"},{"lineNumber":147,"author":{"gitID":"slothhy"},"content":"        EditMovieCommand expectedCommand \u003d new EditMovieCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":150,"author":{"gitID":"slothhy"},"content":"        // duration"},{"lineNumber":151,"author":{"gitID":"slothhy"},"content":"        userInput \u003d targetIndex.getOneBased() + DURATION_DESC_MARVEL;"},{"lineNumber":152,"author":{"gitID":"slothhy"},"content":"        descriptor \u003d new EditMovieDescriptorBuilder().withDuration(VALID_DURATION_MARVEL).build();"},{"lineNumber":153,"author":{"gitID":"slothhy"},"content":"        expectedCommand \u003d new EditMovieCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"slothhy"},"content":"        // rating"},{"lineNumber":157,"author":{"gitID":"slothhy"},"content":"        userInput \u003d targetIndex.getOneBased() + RATING_DESC_MARVEL;"},{"lineNumber":158,"author":{"gitID":"slothhy"},"content":"        descriptor \u003d new EditMovieDescriptorBuilder().withRating(VALID_RATING_MARVEL).build();"},{"lineNumber":159,"author":{"gitID":"slothhy"},"content":"        expectedCommand \u003d new EditMovieCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"slothhy"},"content":"        // startDate"},{"lineNumber":163,"author":{"gitID":"slothhy"},"content":"        userInput \u003d targetIndex.getOneBased() + STARTDATE_DESC_MARVEL;"},{"lineNumber":164,"author":{"gitID":"slothhy"},"content":"        descriptor \u003d new EditMovieDescriptorBuilder().withStartDate(VALID_STARTDATE_MARVEL).build();"},{"lineNumber":165,"author":{"gitID":"slothhy"},"content":"        expectedCommand \u003d new EditMovieCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":172,"author":{"gitID":"slothhy"},"content":"        Index targetIndex \u003d INDEX_FIRST_MOVIE;"},{"lineNumber":173,"author":{"gitID":"slothhy"},"content":"        String userInput \u003d targetIndex.getOneBased()  + DURATION_DESC_MARVEL + STARTDATE_DESC_MARVEL"},{"lineNumber":174,"author":{"gitID":"slothhy"},"content":"                + RATING_DESC_MARVEL + DURATION_DESC_MARVEL + STARTDATE_DESC_MARVEL + RATING_DESC_MARVEL"},{"lineNumber":175,"author":{"gitID":"slothhy"},"content":"                + DURATION_DESC_INCREDIBLES + STARTDATE_DESC_INCREDIBLES + RATING_DESC_INCREDIBLES + TAG_DESC_COMEDY;"},{"lineNumber":176,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":177,"author":{"gitID":"slothhy"},"content":"        EditMovieDescriptor descriptor \u003d new EditMovieDescriptorBuilder().withDuration(VALID_DURATION_INCREDIBLES)"},{"lineNumber":178,"author":{"gitID":"slothhy"},"content":"                .withRating(VALID_RATING_INCREDIBLES).withStartDate(VALID_STARTDATE_INCREDIBLES)"},{"lineNumber":179,"author":{"gitID":"slothhy"},"content":"                .withTags(VALID_TAG_COMEDY).build();"},{"lineNumber":180,"author":{"gitID":"slothhy"},"content":"        EditMovieCommand expectedCommand \u003d new EditMovieCommand(targetIndex, descriptor);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":188,"author":{"gitID":"slothhy"},"content":"        Index targetIndex \u003d INDEX_FIRST_MOVIE;"},{"lineNumber":189,"author":{"gitID":"slothhy"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_DURATION_DESC + DURATION_DESC_INCREDIBLES;"},{"lineNumber":190,"author":{"gitID":"slothhy"},"content":"        EditMovieDescriptor descriptor \u003d new EditMovieDescriptorBuilder().withDuration(VALID_DURATION_INCREDIBLES)"},{"lineNumber":191,"author":{"gitID":"slothhy"},"content":"                .build();"},{"lineNumber":192,"author":{"gitID":"slothhy"},"content":"        EditMovieCommand expectedCommand \u003d new EditMovieCommand(targetIndex, descriptor);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":196,"author":{"gitID":"slothhy"},"content":"        userInput \u003d targetIndex.getOneBased() + RATING_DESC_INCREDIBLES + INVALID_DURATION_DESC"},{"lineNumber":197,"author":{"gitID":"slothhy"},"content":"                + STARTDATE_DESC_INCREDIBLES + DURATION_DESC_INCREDIBLES;"},{"lineNumber":198,"author":{"gitID":"slothhy"},"content":"        descriptor \u003d new EditMovieDescriptorBuilder().withDuration(VALID_DURATION_INCREDIBLES)"},{"lineNumber":199,"author":{"gitID":"slothhy"},"content":"                .withRating(VALID_RATING_INCREDIBLES).withStartDate(VALID_STARTDATE_INCREDIBLES).build();"},{"lineNumber":200,"author":{"gitID":"slothhy"},"content":"        expectedCommand \u003d new EditMovieCommand(targetIndex, descriptor);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":206,"author":{"gitID":"slothhy"},"content":"        Index targetIndex \u003d INDEX_THIRD_MOVIE;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"slothhy"},"content":"        EditMovieDescriptor descriptor \u003d new EditMovieDescriptorBuilder().withTags().build();"},{"lineNumber":210,"author":{"gitID":"slothhy"},"content":"        EditMovieCommand expectedCommand \u003d new EditMovieCommand(targetIndex, descriptor);"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"slothhy":123,"-":90}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_SENGKANG;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_TAMPINES;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_SENGKANG;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_TAMPINES;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_THEATER_DESC;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SENGKANG;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TAMPINES;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_SENGKANG;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_TAMPINES;"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.THEATER_DESC_THREE;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_SENGKANG;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_TAMPINES;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_SENGKANG;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_TAMPINES;"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SENGKANG;"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TAMPINES;"},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMOFTHEATERS;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_SENGKANG;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_TAMPINES;"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.ALJUNIED;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.CLEMENTI;"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.HOUGANG;"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.INDO;"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.KEYWORD_MATCHING_SHAWS;"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.SENGKANG;"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.TAMPINES;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaUtil;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"public class AddCommandSystemTest extends MoviePlannerSystemTest {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"        /* Case: add a cinema to a non-empty movie planner, command with leading spaces and trailing spaces"},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        Cinema toAdd \u003d SENGKANG;"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_SENGKANG + \"  \" + PHONE_DESC_SENGKANG + \" \""},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_SENGKANG + \"   \" + ADDRESS_DESC_SENGKANG + \"   \"  + THEATER_DESC_THREE + \" \";"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        model.addCinema(toAdd);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"        /* Case: add a cinema with all fields same as another cinema in the movie planner except name -\u003e added */"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"        toAdd \u003d new CinemaBuilder().withName(VALID_NAME_TAMPINES).withPhone(VALID_PHONE_SENGKANG)"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"                .withEmail(VALID_EMAIL_SENGKANG).withAddress(VALID_ADDRESS_SENGKANG)"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"                .withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_TAMPINES + PHONE_DESC_SENGKANG + EMAIL_DESC_SENGKANG"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_SENGKANG + THEATER_DESC_THREE;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        /* Case: add a cinema with all fields same as another cinema in the movie planner except phone -\u003e added */"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"        toAdd \u003d new CinemaBuilder().withName(VALID_NAME_SENGKANG).withPhone(VALID_PHONE_TAMPINES)"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"                .withEmail(VALID_EMAIL_SENGKANG).withAddress(VALID_ADDRESS_SENGKANG)"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"                .withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_SENGKANG + PHONE_DESC_TAMPINES + EMAIL_DESC_SENGKANG"},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_SENGKANG + THEATER_DESC_THREE;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        /* Case: add a cinema with all fields same as another cinema in the movie planner except email -\u003e added */"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"        toAdd \u003d new CinemaBuilder().withName(VALID_NAME_SENGKANG).withPhone(VALID_PHONE_SENGKANG)"},{"lineNumber":98,"author":{"gitID":"qwlai"},"content":"                .withEmail(VALID_EMAIL_TAMPINES).withAddress(VALID_ADDRESS_SENGKANG)"},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"                .withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_SENGKANG + PHONE_DESC_SENGKANG + EMAIL_DESC_TAMPINES"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_SENGKANG + THEATER_DESC_THREE;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"        /* Case: add a cinema with all fields same as another cinema in the movie planner except address -\u003e added */"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"        toAdd \u003d new CinemaBuilder().withName(VALID_NAME_SENGKANG).withPhone(VALID_PHONE_SENGKANG)"},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"                .withEmail(VALID_EMAIL_SENGKANG).withAddress(VALID_ADDRESS_TAMPINES)"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"                .withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_SENGKANG + PHONE_DESC_SENGKANG + EMAIL_DESC_SENGKANG"},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_TAMPINES + THEATER_DESC_THREE;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"        /* Case: add to empty movie planner -\u003e added */"},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"        deleteAllCinemas();"},{"lineNumber":114,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(ALJUNIED);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"slothhy"},"content":"        /* Case: add a cinema command with parameters in random order -\u003e added */"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"        toAdd \u003d TAMPINES;"},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_TAMPINES + ADDRESS_DESC_TAMPINES + NAME_DESC_TAMPINES"},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_TAMPINES + THEATER_DESC_THREE;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"slothhy"},"content":"        /* Case: add a cinema, -\u003e added */"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(HOUGANG);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":"        /* Case: filters the cinema list before adding -\u003e added */"},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"        showCinemasWithName(KEYWORD_MATCHING_SHAWS);"},{"lineNumber":129,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(INDO);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"qwlai"},"content":"        /* ------------------------ Perform add operation while a cinema card is selected --------------------------- */"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"qwlai"},"content":"        /* Case: selects first card in the cinema list, add a cinema -\u003e added, card selection remains unchanged */"},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":"        selectCinema(Index.fromOneBased(1));"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(CLEMENTI);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"qwlai"},"content":"        /* Case: add a duplicate cinema -\u003e rejected */"},{"lineNumber":140,"author":{"gitID":"qwlai"},"content":"        command \u003d CinemaUtil.getAddCommand(HOUGANG);"},{"lineNumber":141,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_CINEMA);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":144,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_SENGKANG + EMAIL_DESC_SENGKANG + ADDRESS_DESC_SENGKANG"},{"lineNumber":145,"author":{"gitID":"qwlai"},"content":"                + THEATER_DESC_THREE;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_SENGKANG + EMAIL_DESC_SENGKANG + ADDRESS_DESC_SENGKANG"},{"lineNumber":150,"author":{"gitID":"qwlai"},"content":"                + THEATER_DESC_THREE;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_SENGKANG + PHONE_DESC_SENGKANG + ADDRESS_DESC_SENGKANG"},{"lineNumber":155,"author":{"gitID":"qwlai"},"content":"                + THEATER_DESC_THREE;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_SENGKANG + PHONE_DESC_SENGKANG + EMAIL_DESC_SENGKANG"},{"lineNumber":160,"author":{"gitID":"qwlai"},"content":"                + THEATER_DESC_THREE;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"tinyjy94"},"content":"        /* Case: missing theater -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_SENGKANG + PHONE_DESC_SENGKANG + EMAIL_DESC_SENGKANG"},{"lineNumber":165,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_SENGKANG;"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"qwlai"},"content":"        command \u003d \"adds \" + CinemaUtil.getCinemaDetails(toAdd);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_SENGKANG"},{"lineNumber":174,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_SENGKANG + ADDRESS_DESC_SENGKANG + THEATER_DESC_THREE;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_SENGKANG + INVALID_PHONE_DESC"},{"lineNumber":179,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_SENGKANG + ADDRESS_DESC_SENGKANG + THEATER_DESC_THREE;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":183,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_SENGKANG + PHONE_DESC_SENGKANG"},{"lineNumber":184,"author":{"gitID":"qwlai"},"content":"                + INVALID_EMAIL_DESC + ADDRESS_DESC_SENGKANG + THEATER_DESC_THREE;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":188,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_SENGKANG + PHONE_DESC_SENGKANG"},{"lineNumber":189,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_SENGKANG + INVALID_ADDRESS_DESC + THEATER_DESC_THREE;"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"tinyjy94"},"content":"        /* Case: invalid theater -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"qwlai"},"content":"        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_SENGKANG + PHONE_DESC_SENGKANG"},{"lineNumber":194,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_SENGKANG + ADDRESS_DESC_SENGKANG + INVALID_THEATER_DESC;"},{"lineNumber":195,"author":{"gitID":"tinyjy94"},"content":"        assertCommandFailure(command, Theater.MESSAGE_THEATER_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"qwlai"},"content":"     * 4. {@code Model}, {@code Storage} and {@code CinemaListPanel} equal to the corresponding components in"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":209,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"qwlai"},"content":"    private void assertCommandSuccess(Cinema toAdd) {"},{"lineNumber":213,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(CinemaUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"qwlai"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Cinema)}. Executes {@code command}"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":219,"author":{"gitID":"qwlai"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Cinema)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"qwlai"},"content":"    private void assertCommandSuccess(String command, Cinema toAdd) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":224,"author":{"gitID":"qwlai"},"content":"            expectedModel.addCinema(toAdd);"},{"lineNumber":225,"author":{"gitID":"qwlai"},"content":"        } catch (DuplicateCinemaException dce) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"qwlai"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Cinema)} except asserts that"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"qwlai"},"content":"     * 2. {@code Model}, {@code Storage} and {@code CinemaListPanel} equal to the corresponding components in"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"qwlai"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Cinema)"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"qwlai"},"content":"     * 4. {@code Model}, {@code Storage} and {@code CinemaListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":257,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":3,"tinyjy94":7,"-":145,"qwlai":114}},{"path":"src/test/java/systemtests/DeleteCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_CINEMA_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TestUtil.getCinema;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.KEYWORD_MATCHING_SHAWS;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"public class DeleteCommandSystemTest extends MoviePlannerSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void delete() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        /* Case: delete the first cinema in the list, command with leading spaces and trailing spaces -\u003e deleted */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_CINEMA.getOneBased() + \"       \";"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        Cinema deletedCinema \u003d removeCinema(expectedModel, INDEX_FIRST_CINEMA);"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CINEMA_SUCCESS, deletedCinema);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        /* Case: delete the last cinema in the list -\u003e deleted */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        Model modelBeforeDeletingLast \u003d getModel();"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"        Index lastCinemaIndex \u003d getLastIndex(modelBeforeDeletingLast);"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(lastCinemaIndex);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        /* Case: undo deleting the last cinema in the list -\u003e last cinema restored */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"        /* Case: redo deleting the last cinema in the list -\u003e last cinema deleted again */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"        removeCinema(modelBeforeDeletingLast, lastCinemaIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"        /* Case: delete the middle cinema in the list -\u003e deleted */"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        Index middleCinemaIndex \u003d getMidIndex(getModel());"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(middleCinemaIndex);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        /* Case: filtered cinema list, delete index within bounds of movie planner and cinema list -\u003e deleted */"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        showCinemasWithName(KEYWORD_MATCHING_SHAWS);"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        Index index \u003d INDEX_FIRST_CINEMA;"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCinemaList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"        /* Case: filtered cinema list, delete index within bounds of movie planner but out of bounds of cinema list"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":70,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        showCinemasWithName(KEYWORD_MATCHING_SHAWS);"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        int invalidIndex \u003d getModel().getMoviePlanner().getCinemaList().size();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        /* --------------------- Performing delete operation while a cinema card is selected ------------------------ */"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        /* Case: delete the selected cinema -\u003e cinema list panel selects the cinema before the deleted cinema */"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        showAllCinemas();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Index selectedIndex \u003d getLastIndex(expectedModel);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"        selectCinema(selectedIndex);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"        deletedCinema \u003d removeCinema(expectedModel, selectedIndex);"},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_DELETE_CINEMA_SUCCESS, deletedCinema);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"                getModel().getMoviePlanner().getCinemaList().size() + 1);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"     * Removes the {@code Cinema} at the specified {@code index} in {@code model}\u0027s movie planner."},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"     * @return the removed cinema"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":"    private Cinema removeCinema(Model model, Index index) {"},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"        Cinema targetCinema \u003d getCinema(model, index);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"            model.deleteCinema(targetCinema);"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"        } catch (CinemaNotFoundException cnfe) {"},{"lineNumber":124,"author":{"gitID":"qwlai"},"content":"            throw new AssertionError(\"targetCinema is retrieved from model.\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":"        return targetCinema;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"qwlai"},"content":"     * Deletes the cinema at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Index toDelete) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":136,"author":{"gitID":"qwlai"},"content":"        Cinema deletedCinema \u003d removeCinema(expectedModel, toDelete);"},{"lineNumber":137,"author":{"gitID":"qwlai"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_CINEMA_SUCCESS, deletedCinema);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess("},{"lineNumber":140,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":152,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."},{"lineNumber":153,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"},{"lineNumber":163,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"qwlai"},"content":"        if (expectedSelectedCardIndex \u003d\u003d null) {"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":184,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":186,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":187,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":144,"qwlai":54}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"public class HelpCommandSystemTest extends MoviePlannerSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        getCinemaListPanel().click();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        getMovieListPanel().click();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CINEMA.getOneBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"        assertListMatching(getCinemaListPanel(), getModel().getFilteredCinemaList());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CINEMA.getOneBased());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":85,"qwlai":7}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyMoviePlanner\u003e moviePlanner, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(moviePlanner, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":70,"qwlai":3}},{"path":"src/test/java/systemtests/ClearCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.KEYWORD_MATCHING_SHAWS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"public class ClearCommandSystemTest extends MoviePlannerSystemTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void clear() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        final Model defaultModel \u003d getModel();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"        /* Case: clear non-empty movie planner, command with leading spaces and trailing alphanumeric characters and"},{"lineNumber":22,"author":{"gitID":"-"},"content":"         * spaces -\u003e cleared"},{"lineNumber":23,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"        /* Case: undo clearing movie planner -\u003e original movie planner restored */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        /* Case: redo clearing movie planner -\u003e cleared */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        /* Case: selects first card in cinema list and clears movie planner -\u003e cleared and no card selected */"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original movie planner"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        selectCinema(Index.fromOneBased(1));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        /* Case: filters the cinema list before clearing -\u003e entire movie planner cleared */"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"        executeCommand(UndoCommand.COMMAND_WORD); // restores the original movie planner"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        showCinemasWithName(KEYWORD_MATCHING_SHAWS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"        /* Case: clear empty movie planner -\u003e cleared */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ClearCommand.COMMAND_WORD);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see ClearCommandSystemTest#assertCommandSuccess(String)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":85,"qwlai":16}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_CINEMA_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.KEYWORD_MATCHING_SHAWS;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalCinemas;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"public class SelectCommandSystemTest extends MoviePlannerSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"        /* Case: select the first card in the cinema list, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":27,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CINEMA.getOneBased() + \"   \";"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(command, INDEX_FIRST_CINEMA);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"        /* Case: select the last card in the cinema list -\u003e selected */"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"        Index cinemaCount \u003d Index.fromOneBased(getTypicalCinemas().size());"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + cinemaCount.getOneBased();"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(command, cinemaCount);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"        /* Case: select the middle card in the cinema list -\u003e selected */"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        Index middleIndex \u003d Index.fromOneBased(cinemaCount.getOneBased() / 2);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"        /* Case: filtered cinema list, select index within bounds of movie planner but out of bounds of cinema list"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"        showCinemasWithName(KEYWORD_MATCHING_SHAWS);"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"        int invalidIndex \u003d getModel().getMoviePlanner().getCinemaList().size();"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        /* Case: filtered cinema list, select index within bounds of movie planner and cinema list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredCinemaList().size());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"        invalidIndex \u003d getModel().getFilteredCinemaList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":85,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"        /* Case: select from empty movie planner -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"        deleteAllCinemas();"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CINEMA.getOneBased(),"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"                MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"     * {@code expectedSelectedCardIndex} of the selected cinema.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"     * 4. {@code Model}, {@code Storage} and {@code CinemaListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"                MESSAGE_SELECT_CINEMA_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"        int preExecutionSelectedCardIndex \u003d getCinemaListPanel().getSelectedCardIndex();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"     * 4. {@code Model}, {@code Storage} and {@code CinemaListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":138,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":114,"qwlai":36}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_CINEMAS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.BEDOK;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.CLEMENTI;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.DOVER;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.KEYWORD_MATCHING_SHAWS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"public class FindCommandSystemTest extends MoviePlannerSystemTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"        /* Case: find multiple cinemas in movie planner, command with leading spaces and trailing spaces"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"         * -\u003e 2 cinemas found"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SHAWS + \"   \";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"        ModelHelper.setFilteredList(expectedModel, BEDOK, DOVER); // Bedok and Dover have Shaws"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        /* Case: repeat previous find command where cinema list is displaying the cinemas we are finding"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"         * -\u003e 2 cinemas found"},{"lineNumber":35,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SHAWS;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        /* Case: find cinema where cinema list is not displaying the cinema we are finding -\u003e 1 cinema found */"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Clementi\";"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"        ModelHelper.setFilteredList(expectedModel, CLEMENTI);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"        /* Case: find multiple cinemas in movie planner, 2 keywords -\u003e 2 cinemas found */"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Bedok Dover\";"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"        ModelHelper.setFilteredList(expectedModel, BEDOK, DOVER);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"        /* Case: find multiple cinemas in movie planner, 2 keywords in reversed order -\u003e 2 cinemas found */"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Dover Bedok\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        /* Case: find multiple cinemas in movie planner, 2 keywords with 1 repeat -\u003e 2 cinemas found */"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Dover Bedok Dover\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        /* Case: find multiple cinemas in movie planner, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"         * -\u003e 2 cinemas found"},{"lineNumber":64,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Dover Bedok NonMatchingKeyWord\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        /* Case: find same cinemas in movie planner after deleting 1 of them -\u003e 1 cinema found */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"        assertFalse(getModel().getMoviePlanner().getCinemaList().contains(BEDOK));"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SHAWS;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"        ModelHelper.setFilteredList(expectedModel, DOVER);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        /* Case: find cinema in movie planner, keyword is same as name but of different case -\u003e 1 cinema found */"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" ShAws\";"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"        /* Case: find cinema in movie planner, keyword is substring of name -\u003e 0 cinemas found */"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" sha\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"        /* Case: find cinema in movie planner, name is substring of keyword -\u003e 0 cinemas found */"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" shawss\";"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"        /* Case: find cinema not in movie planner -\u003e 0 cinemas found */"},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Yishun\";"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"        /* Case: find phone number of cinema in movie planner -\u003e 0 cinemas found */"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DOVER.getPhone().value;"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"        /* Case: find address of cinema in movie planner -\u003e 0 cinemas found */"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DOVER.getAddress().value;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"        /* Case: find email of cinema in movie planner -\u003e 0 cinemas found */"},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + DOVER.getEmail().value;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"qwlai"},"content":"        /* Case: find while a cinema is selected -\u003e selected card deselected */"},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":"        showAllCinemas();"},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":"        selectCinema(Index.fromOneBased(1));"},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"        assertFalse(getCinemaListPanel().getHandleToSelectedCard().getName().equals(DOVER.getName().fullName));"},{"lineNumber":129,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Dover\";"},{"lineNumber":130,"author":{"gitID":"qwlai"},"content":"        ModelHelper.setFilteredList(expectedModel, DOVER);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":"        /* Case: find cinema in empty movie planner -\u003e 0 cinemas found */"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"        deleteAllCinemas();"},{"lineNumber":136,"author":{"gitID":"qwlai"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_SHAWS;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":138,"author":{"gitID":"qwlai"},"content":"        ModelHelper.setFilteredList(expectedModel, DOVER);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":143,"author":{"gitID":"qwlai"},"content":"        command \u003d \"FiNd Dover\";"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":149,"author":{"gitID":"qwlai"},"content":"     * box displays {@code Messages#MESSAGE_CINEMAS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":152,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":155,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":159,"author":{"gitID":"qwlai"},"content":"                MESSAGE_CINEMAS_LISTED_OVERVIEW, expectedModel.getFilteredCinemaList().size());"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":171,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":174,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":124,"qwlai":61}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_SENGKANG;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_TAMPINES;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_SENGKANG;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_TAMPINES;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SENGKANG;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TAMPINES;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_SENGKANG;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_TAMPINES;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_TAMPINES;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_TAMPINES;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TAMPINES;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_TAMPINES;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CINEMAS;"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.KEYWORD_MATCHING_SHAWS;"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.SENGKANG;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.TAMPINES;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaUtil;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"public class EditCommandSystemTest extends MoviePlannerSystemTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":54,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":55,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"        Index index \u003d INDEX_FIRST_CINEMA;"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_TAMPINES + \"  \""},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"                + PHONE_DESC_TAMPINES + \" \" + EMAIL_DESC_TAMPINES + \"  \" + ADDRESS_DESC_TAMPINES + \" \";"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"        Cinema editedCinema \u003d new CinemaBuilder().withName(VALID_NAME_TAMPINES).withPhone(VALID_PHONE_TAMPINES)"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"                .withEmail(VALID_EMAIL_TAMPINES).withAddress(VALID_ADDRESS_TAMPINES).build();"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(command, index, editedCinema);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        /* Case: undo editing the last cinema in the list -\u003e last cinema restored */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"        /* Case: redo editing the last cinema in the list -\u003e last cinema edited again */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        model.updateCinema("},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"                getModel().getFilteredCinemaList().get(INDEX_FIRST_CINEMA.getZeroBased()), editedCinema);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"        /* Case: edit a cinema with new values same as existing values -\u003e edited */"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_TAMPINES + ADDRESS_DESC_TAMPINES;"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(command, index, TAMPINES);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"        /* Case: filtered cinema list, edit index within bounds of movie planner and cinema list -\u003e edited */"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"        showCinemasWithName(KEYWORD_MATCHING_SHAWS);"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"        index \u003d INDEX_FIRST_CINEMA;"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredCinemaList().size());"},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_TAMPINES;"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"        Cinema cinemaToEdit \u003d getModel().getFilteredCinemaList().get(index.getZeroBased());"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        editedCinema \u003d new CinemaBuilder(cinemaToEdit).withName(VALID_NAME_TAMPINES).build();"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(command, index, editedCinema);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        /* Case: filtered cinema list, edit index within bounds of movie planner but out of bounds of cinema list"},{"lineNumber":92,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":93,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"        showCinemasWithName(KEYWORD_MATCHING_SHAWS);"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"        int invalidIndex \u003d getModel().getMoviePlanner().getCinemaList().size();"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_TAMPINES,"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"                Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"        /* --------------------- Performing edit operation while a cinema card is selected -------------------------- */"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"        /* Case: selects first card in the cinema list, edit a cinema -\u003e edited, card selection remains unchanged but"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"        showAllCinemas();"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"        index \u003d INDEX_FIRST_CINEMA;"},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"        selectCinema(index);"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_SENGKANG + PHONE_DESC_SENGKANG"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_SENGKANG + ADDRESS_DESC_SENGKANG;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"        // browser\u0027s url is updated to reflect the new cinema\u0027s name"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(command, index, SENGKANG, index);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_TAMPINES,"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_TAMPINES,"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":124,"author":{"gitID":"qwlai"},"content":"        invalidIndex \u003d getModel().getFilteredCinemaList().size() + 1;"},{"lineNumber":125,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_TAMPINES,"},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":"                Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":129,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_TAMPINES,"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":133,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CINEMA.getOneBased(),"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":137,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CINEMA.getOneBased() + INVALID_NAME_DESC,"},{"lineNumber":138,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CINEMA.getOneBased() + INVALID_PHONE_DESC,"},{"lineNumber":142,"author":{"gitID":"-"},"content":"                Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CINEMA.getOneBased() + INVALID_EMAIL_DESC,"},{"lineNumber":146,"author":{"gitID":"-"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CINEMA.getOneBased() + INVALID_ADDRESS_DESC,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"qwlai"},"content":"        /* Case: edit a cinema with new values same as another cinema\u0027s values -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"qwlai"},"content":"        executeCommand(CinemaUtil.getAddCommand(TAMPINES));"},{"lineNumber":154,"author":{"gitID":"qwlai"},"content":"        assertTrue(getModel().getMoviePlanner().getCinemaList().contains(TAMPINES));"},{"lineNumber":155,"author":{"gitID":"qwlai"},"content":"        index \u003d INDEX_FIRST_CINEMA;"},{"lineNumber":156,"author":{"gitID":"qwlai"},"content":"        assertFalse(getModel().getFilteredCinemaList().get(index.getZeroBased()).equals(TAMPINES));"},{"lineNumber":157,"author":{"gitID":"qwlai"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES"},{"lineNumber":158,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_TAMPINES + ADDRESS_DESC_TAMPINES;"},{"lineNumber":159,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_CINEMA);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"qwlai"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Cinema, Index)} except that"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":166,"author":{"gitID":"qwlai"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Cinema, Index)"},{"lineNumber":167,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"qwlai"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Cinema editedCinema) {"},{"lineNumber":169,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(command, toEdit, editedCinema, null);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"qwlai"},"content":"     * 2. Asserts that the model related components are updated to reflect the cinema at index {@code toEdit} being"},{"lineNumber":176,"author":{"gitID":"qwlai"},"content":"     * updated to values specified {@code editedCinema}.\u003cbr\u003e"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"qwlai"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Cinema editedCinema,"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":184,"author":{"gitID":"qwlai"},"content":"            expectedModel.updateCinema("},{"lineNumber":185,"author":{"gitID":"qwlai"},"content":"                    expectedModel.getFilteredCinemaList().get(toEdit.getZeroBased()), editedCinema);"},{"lineNumber":186,"author":{"gitID":"qwlai"},"content":"            expectedModel.updateFilteredCinemaList(PREDICATE_SHOW_ALL_CINEMAS);"},{"lineNumber":187,"author":{"gitID":"qwlai"},"content":"        } catch (DuplicateCinemaException | CinemaNotFoundException e) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":189,"author":{"gitID":"qwlai"},"content":"                    \"editedCinema is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":193,"author":{"gitID":"qwlai"},"content":"                String.format(EditCommand.MESSAGE_EDIT_CINEMA_SUCCESS, editedCinema), expectedSelectedCardIndex);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":215,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":221,"author":{"gitID":"qwlai"},"content":"        expectedModel.updateFilteredCinemaList(PREDICATE_SHOW_ALL_CINEMAS);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":224,"author":{"gitID":"qwlai"},"content":"        if (expectedSelectedCardIndex \u003d\u003d null) {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":238,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"qwlai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":149,"qwlai":101}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"    private static final Predicate\u003cCinema\u003e PREDICATE_MATCHING_NO_CINEMAS \u003d unused -\u003e false;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    public static void setFilteredList(Model model, List\u003cCinema\u003e toDisplay) {"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"        Optional\u003cPredicate\u003cCinema\u003e\u003e predicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"        model.updateFilteredCinemaList(predicate.orElse(PREDICATE_MATCHING_NO_CINEMAS));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    public static void setFilteredList(Model model, Cinema... toDisplay) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"     * Returns a predicate that evaluates to true if this {@code Cinema} equals to {@code other}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    private static Predicate\u003cCinema\u003e getPredicateMatching(Cinema other) {"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"        return cinema -\u003e cinema.equals(other);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":30,"qwlai":9}},{"path":"src/test/java/systemtests/ErrorDialogGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postLater;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.AlertDialogHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"public class ErrorDialogGuiTest extends MoviePlannerSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void showErrorDialogs() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                alertDialog.getContentText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":33,"qwlai":1}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"\u003d MoVie Planner - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":":repoURL: https://github.com/CS2103JAN2018-W11-B2/main/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"By: `Team W11-B2`      Since: `Jun 2016`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Introduction"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"MoVie Planner (MVP) is a desktop application that aims to assist cinema managers in managing schedule of"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"movies in different cinemas, providing features such as managing cinemas’ schedules across periods of"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"time, secured storage of cinema schedule and more."},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"This guide provides information that will help you get started as a MVP contributor. In particular,"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"the guide details the design of our backend architecture, implementation of features, and the testing"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"methods used in our development."},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"To get you started, ensure that the following requirements are met:"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"Please install the following:"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":". *Java SE Development Kit* (JDK) `1.8.0_60` or later. +"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"You can download the latest JDK version http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html[here]."},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":42,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":43,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"[start\u003d2]"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":". *IntelliJ IDEA* Integrated Development Environment (IDE). +"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"You can download IntelliJ IDEA https://www.jetbrains.com/idea/download/[here]."},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":50,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":51,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":". *Fork* this repo, and *clone* the fork to your computer."},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":". Set up the correct JDK version for Gradle."},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":".. Click `New...` and find the directory of the JDK."},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":". Click `Import Project`."},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":". Locate the `build.gradle` file and select it. Click `OK`."},{"lineNumber":62,"author":{"gitID":"tinyjy94"},"content":". Click `Open as Project`."},{"lineNumber":63,"author":{"gitID":"tinyjy94"},"content":". Click `OK` to accept the default settings."},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":". Open a console and run the following command:"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":".. Windows: `gradlew processResources`"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":".. Mac/Linux: `./gradlew processResources`"},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"[NOTE]"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":"It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":70,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":". Run the `src\\main\\java\\seedu\\address\\MainApp.java` and try a few commands such as \u003c\u003cUserGuide#,add\u003e\u003e,"},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cUserGuide#,delete\u003e\u003e, \u003c\u003cUserGuide#,list\u003e\u003e, etc."},{"lineNumber":76,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d Configuring MVP before writing codes"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":85,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":86,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."},{"lineNumber":89,"author":{"gitID":"tinyjy94"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"chanyikwai"},"content":"[TIP]"},{"lineNumber":92,"author":{"gitID":"tinyjy94"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write codes."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"chanyikwai"},"content":"After forking the repo, links in the documentation will still point to the `CS2103JAN2018-W11-B2/main/` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `CS2103JAN2018-W11-B2/main/`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d Setting up Continuous Integration (CI)"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"chanyikwai"},"content":"You should set up Travis and AppVeyor to perform Continuous Integration (CI) for your fork."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"chanyikwai"},"content":"See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":105,"author":{"gitID":"tinyjy94"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"tinyjy94"},"content":"When you are ready to start coding, you can get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":112,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":116,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":"The following section contains information about the components in MVP to help you better understand how MVP is designed."},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":121,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"chanyikwai"},"content":"The *_Architecture Diagram_* given above explains the high-level design of MVP. Given below is a quick overview of each component."},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":126,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"chanyikwai"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for the following:"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"qwlai"},"content":"* At app launch: Initializing the components in the correct sequence, and connecting them with one another."},{"lineNumber":131,"author":{"gitID":"qwlai"},"content":"* At shut down: Shutting down the components and invoking cleanup method where necessary."},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":136,"author":{"gitID":"chanyikwai"},"content":"* `LogsCenter` : Used by many classes to write log messages to MVP\u0027s log file."},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"tinyjy94"},"content":"The rest of MVP consists of four components"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"tinyjy94"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: Defines the UI of MVP."},{"lineNumber":141,"author":{"gitID":"tinyjy94"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Executes the command."},{"lineNumber":142,"author":{"gitID":"chanyikwai"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of MVP in-memory."},{"lineNumber":143,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":148,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":153,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":161,"author":{"gitID":"qwlai"},"content":"image::SDforDeleteCinema.png[width\u003d\"800\"]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":164,"author":{"gitID":"qwlai"},"content":"Note how the `Model` simply raises a `MoviePlannerChangedEvent` when the Movie Planner data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"chanyikwai"},"content":"Figure 4 shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":169,"author":{"gitID":"qwlai"},"content":"image::SDforDeleteCinemaEventHandling.png[width\u003d\"800\"]"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":172,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":177,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"tinyjy94"},"content":"The `UI` component provides the API of \u003c\u003cgraphical-user-interface, Graphical User Interface\u003e\u003e. Figure 5 shows"},{"lineNumber":180,"author":{"gitID":"tinyjy94"},"content":"the structure of the `UI` component."},{"lineNumber":181,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":183,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"qwlai"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `CinemaListPanel`, `MovieListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"tinyjy94"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"tinyjy94"},"content":"The `UI` component is responsible for the following:"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"chanyikwai"},"content":"* Executing user commands using the `Logic` component."},{"lineNumber":194,"author":{"gitID":"chanyikwai"},"content":"* Binding itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":195,"author":{"gitID":"chanyikwai"},"content":"* Responding to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":198,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"chanyikwai"},"content":"The `Logic` component deals with how each command and respective parser are executed in an event-driven design."},{"lineNumber":201,"author":{"gitID":"chanyikwai"},"content":"Figures 6 and 7 shows the structure of the `Logic` component."},{"lineNumber":202,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":204,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":205,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":211,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"qwlai"},"content":".  `Logic` uses the `MoviePlannerParser` class to parse the user command."},{"lineNumber":214,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":215,"author":{"gitID":"qwlai"},"content":".  The command execution can affect the `Model` (e.g. adding a cinema) and/or raise events."},{"lineNumber":216,"author":{"gitID":"tinyjy94"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `UI`."},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"chanyikwai"},"content":"Figure 8 shows the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":221,"author":{"gitID":"qwlai"},"content":"image::DeleteCinemaSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":224,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"chanyikwai"},"content":"The `Model` component manages cinemas and movies in MVP, providing _APIs_ to create, read, update and delete."},{"lineNumber":227,"author":{"gitID":"chanyikwai"},"content":"Figure 9 shows the structure of the `Model` component."},{"lineNumber":228,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":229,"author":{"gitID":"qwlai"},"content":"[[model_component]]"},{"lineNumber":230,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":231,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"chanyikwai"},"content":"The `Model` component is responsible for the following:"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"chanyikwai"},"content":"* storing a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":238,"author":{"gitID":"chanyikwai"},"content":"* storing the Movie Planner data."},{"lineNumber":239,"author":{"gitID":"qwlai"},"content":"* exposing an unmodifiable `ObservableList\u003cCinema\u003e` and `ObservableList\u003cMovie\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":240,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":241,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":242,"author":{"gitID":"qwlai"},"content":"The `Model` component is not dependent on any of the other three components."},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":245,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"chanyikwai"},"content":"The `Storage` component handles the storage of all data of MVP in the local device. Figure 10 shows the"},{"lineNumber":248,"author":{"gitID":"chanyikwai"},"content":"structure of the `Storage` component."},{"lineNumber":249,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":251,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"chanyikwai"},"content":"The `Storage` component is responsible for the following:"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"chanyikwai"},"content":"* saving `UserPref` objects in json format and read it back."},{"lineNumber":258,"author":{"gitID":"chanyikwai"},"content":"* saving the Movie Planner data in xml format and read it back."},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":261,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"chanyikwai"},"content":"Classes used by multiple components are in the `seedu\\address\\commons` package."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":266,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":268,"author":{"gitID":"-"},"content":""},{"lineNumber":269,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":272,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"qwlai"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the movie planner (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":275,"author":{"gitID":"-"},"content":""},{"lineNumber":276,"author":{"gitID":"chanyikwai"},"content":"*Current Implementation*"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"chanyikwai"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. Figure 11 shows the inheritance diagram for commands:"},{"lineNumber":279,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":280,"author":{"gitID":"chanyikwai"},"content":"*Undoable Commands*"},{"lineNumber":281,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":282,"author":{"gitID":"chanyikwai"},"content":".Inheritance diagram for commands"},{"lineNumber":283,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"tinyjy94"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `AddCommand`."},{"lineNumber":286,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":287,"author":{"gitID":"chanyikwai"},"content":"[NOTE]"},{"lineNumber":288,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":289,"author":{"gitID":"chanyikwai"},"content":"* Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the movie planner before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command."},{"lineNumber":290,"author":{"gitID":"chanyikwai"},"content":"* Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":291,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":292,"author":{"gitID":"-"},"content":""},{"lineNumber":293,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":294,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":295,"author":{"gitID":"-"},"content":"----"},{"lineNumber":296,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":"}"},{"lineNumber":302,"author":{"gitID":"-"},"content":"----"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":305,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":306,"author":{"gitID":"-"},"content":"----"},{"lineNumber":307,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":313,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":314,"author":{"gitID":"-"},"content":"}"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":320,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"-"},"content":"}"},{"lineNumber":322,"author":{"gitID":"-"},"content":"----"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"chanyikwai"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th cinema in MVP. The current state of the MVP is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":327,"author":{"gitID":"chanyikwai"},"content":"Figure 12 illustrates the procedure."},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"chanyikwai"},"content":".Diagram of UndoRedoStack before and after delete command"},{"lineNumber":330,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"chanyikwai"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/Cathay ...` to add a new cinema as shown in Figure 13."},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"chanyikwai"},"content":".Diagram of UndoRedoStack before and after add command"},{"lineNumber":335,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":338,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"qwlai"},"content":"The user now decides that adding the cinema was a mistake, and decides to undo that action using `undo`."},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"chanyikwai"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore MVP to its previous state before the `add` command was executed, as shown in Figure 14."},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"chanyikwai"},"content":".Diagram of UndoRedoStack before and after undo command"},{"lineNumber":345,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":346,"author":{"gitID":"-"},"content":""},{"lineNumber":347,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":348,"author":{"gitID":"tinyjy94"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"chanyikwai"},"content":".Sequence Diagram of Undo Command"},{"lineNumber":353,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":354,"author":{"gitID":"-"},"content":""},{"lineNumber":355,"author":{"gitID":"chanyikwai"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores MVP to the state after the command is executed)."},{"lineNumber":356,"author":{"gitID":"-"},"content":""},{"lineNumber":357,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":358,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"chanyikwai"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/Cathay` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"chanyikwai"},"content":".Diagram of UndoRedoStack before and after clear command"},{"lineNumber":363,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":364,"author":{"gitID":"-"},"content":""},{"lineNumber":365,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"chanyikwai"},"content":".Diagram of UndoRedoStack before and after list command"},{"lineNumber":368,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":369,"author":{"gitID":"-"},"content":""},{"lineNumber":370,"author":{"gitID":"tinyjy94"},"content":"Figure 18 summarizes what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"chanyikwai"},"content":".Activity Diagram of UndoRedoStack"},{"lineNumber":373,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":376,"author":{"gitID":"-"},"content":""},{"lineNumber":377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`."},{"lineNumber":380,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":381,"author":{"gitID":"chanyikwai"},"content":"** Cons: It will be hard for new developers to understand the template pattern."},{"lineNumber":382,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 2:** Just override `execute()`."},{"lineNumber":383,"author":{"gitID":"tinyjy94"},"content":"** Pros: It does not involve the template pattern, so it is easier for new developers to understand."},{"lineNumber":384,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":387,"author":{"gitID":"-"},"content":""},{"lineNumber":388,"author":{"gitID":"qwlai"},"content":"* **Alternative 1 (current choice):** Saves the entire movie planner."},{"lineNumber":389,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":390,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":391,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":392,"author":{"gitID":"qwlai"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the cinema being deleted)."},{"lineNumber":393,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":394,"author":{"gitID":"-"},"content":""},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"qwlai"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the movie planner (`add`, `clear`, `edit`)."},{"lineNumber":399,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":400,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":401,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":402,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":403,"author":{"gitID":"tinyjy94"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the Movie Planner and not the view."},{"lineNumber":404,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":""},{"lineNumber":407,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":408,"author":{"gitID":"-"},"content":""},{"lineNumber":409,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo."},{"lineNumber":410,"author":{"gitID":"tinyjy94"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."},{"lineNumber":411,"author":{"gitID":"tinyjy94"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":412,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo."},{"lineNumber":413,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":414,"author":{"gitID":"tinyjy94"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."},{"lineNumber":415,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":416,"author":{"gitID":"-"},"content":""},{"lineNumber":417,"author":{"gitID":"tinyjy94"},"content":"// tag::SecurityUtils[]"},{"lineNumber":418,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d\u003d Data Encryption/Decryption"},{"lineNumber":419,"author":{"gitID":"tinyjy94"},"content":"MVP provides data encryption as well as decryption to allow for safe storage and transmission of data."},{"lineNumber":420,"author":{"gitID":"-"},"content":""},{"lineNumber":421,"author":{"gitID":"-"},"content":"The Sequence Diagram below shows how the components interact for the scenario where the user issues the command `encrypt pw/pass`."},{"lineNumber":422,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":423,"author":{"gitID":"tinyjy94"},"content":".Component interactions for `encrypt pw/pass` command (part 1)"},{"lineNumber":424,"author":{"gitID":"tinyjy94"},"content":"image::SDforEncryption.png[width\u003d\"800\"]"},{"lineNumber":425,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":426,"author":{"gitID":"tinyjy94"},"content":"The Sequence Diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk."},{"lineNumber":427,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":428,"author":{"gitID":"tinyjy94"},"content":".Component interactions for `encrypt pw/pass` command (part 2)"},{"lineNumber":429,"author":{"gitID":"tinyjy94"},"content":"image::SDforEncryptEventHandling.png[width\u003d\"800\"]"},{"lineNumber":430,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":431,"author":{"gitID":"tinyjy94"},"content":"[NOTE]"},{"lineNumber":432,"author":{"gitID":"tinyjy94"},"content":"`Decrypt` command also follows the same flow as shown in the Sequence Diagram above, but `DecryptionRequestEvent` is posted and `handleDecryptionRequestEvent` is called instead."},{"lineNumber":433,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":434,"author":{"gitID":"tinyjy94"},"content":"The Activity Diagram below displays the series of events that occurs when a user enters the encrypt command."},{"lineNumber":435,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":436,"author":{"gitID":"tinyjy94"},"content":".Activity Diagram of Encrypt command"},{"lineNumber":437,"author":{"gitID":"tinyjy94"},"content":"image::EncryptCommandActivityDiagram.png[width\u003d\"800\"]"},{"lineNumber":438,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":439,"author":{"gitID":"slothhy"},"content":"\u003d\u003d\u003d\u003d Implementation details"},{"lineNumber":440,"author":{"gitID":"tinyjy94"},"content":"`SecurityUtil` is used to facilitate the encryption and decryption process by providing the `encrypt` and `decrypt` commands."},{"lineNumber":441,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":442,"author":{"gitID":"tinyjy94"},"content":". When `encrypt pw/\u003cpassword\u003e` or `decrypt pw/\u003cpassword\u003e` command is entered by the user, `EncryptionRequestEvent` or `DecryptionRequestEvent` will be posted to the `EventsCenter` respectively."},{"lineNumber":443,"author":{"gitID":"tinyjy94"},"content":". `StorageManager` will then trigger `SecurityUtil` to perform the `encrypt` or `decrypt` command."},{"lineNumber":444,"author":{"gitID":"tinyjy94"},"content":". `generateKey()` and `processFile()` methods within `SecurityUtil` will then be executed to perform writing of files."},{"lineNumber":445,"author":{"gitID":"tinyjy94"},"content":". `encrypt` will create/overwrite an `encryptedmovieplanner.xml` by encrypting the data from `movieplanner.xml` using the password provided by the user."},{"lineNumber":446,"author":{"gitID":"tinyjy94"},"content":". `decrypt` will create/overwrite a `movieplanner.xml` by decrypting the data from `encryptedmovieplanner.xml` using the password provided by the user."},{"lineNumber":447,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":448,"author":{"gitID":"tinyjy94"},"content":"[NOTE]"},{"lineNumber":449,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":450,"author":{"gitID":"tinyjy94"},"content":"* If the user enters a different password that was used to encrypt the file when decrypting, an error will be shown on the `CommandBox`."},{"lineNumber":451,"author":{"gitID":"tinyjy94"},"content":"* `encrypt` and `decrypt` command can be performed repeatedly to overwrite the xml files."},{"lineNumber":452,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":453,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":454,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":455,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":456,"author":{"gitID":"-"},"content":""},{"lineNumber":457,"author":{"gitID":"tinyjy94"},"content":"*Aspect:* How to generate key"},{"lineNumber":458,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":459,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 1 (current choice):** Generating the key using password input by user."},{"lineNumber":460,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":461,"author":{"gitID":"tinyjy94"},"content":"** Pros: Users can customise their own passwords."},{"lineNumber":462,"author":{"gitID":"tinyjy94"},"content":"** Cons: It might not be secured as users would probably use a weak password."},{"lineNumber":463,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":464,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 2:** Generating the key using `java.crypto.KeyGenerator`."},{"lineNumber":465,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":466,"author":{"gitID":"tinyjy94"},"content":"** Pros: Password is quite strong, so even if outsiders were to obtain the data file, they would require tremendous effort to decrypt it."},{"lineNumber":467,"author":{"gitID":"tinyjy94"},"content":"** Cons: Users cannot customise their own passwords."},{"lineNumber":468,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":469,"author":{"gitID":"tinyjy94"},"content":"*Aspect:* Where to save password"},{"lineNumber":470,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":471,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 1 (current choice):** Users remember the password themselves."},{"lineNumber":472,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":473,"author":{"gitID":"tinyjy94"},"content":"** Pros: As the password is not stored anywhere in the application, unauthorized personnel would not be able to reverse-engineer the application to obtain the password."},{"lineNumber":474,"author":{"gitID":"tinyjy94"},"content":"** Cons: User will have to inform the other party about the password themselves through some means."},{"lineNumber":475,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":476,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 2:** Password saved in application."},{"lineNumber":477,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":478,"author":{"gitID":"tinyjy94"},"content":"** Pros: Password is not lost every time the application is started up."},{"lineNumber":479,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":480,"author":{"gitID":"tinyjy94"},"content":"** Cons: Password could be reversed-engineered from the application, which defeats the purpose of encryption."},{"lineNumber":481,"author":{"gitID":"-"},"content":""},{"lineNumber":482,"author":{"gitID":"tinyjy94"},"content":"// end::SecurityUtils[]"},{"lineNumber":483,"author":{"gitID":"-"},"content":""},{"lineNumber":484,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":485,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":487,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":489,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":490,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":491,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":492,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":493,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":494,"author":{"gitID":"chanyikwai"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of MVP."},{"lineNumber":495,"author":{"gitID":"tinyjy94"},"content":"* `WARNING` : Message to inform user to proceed with caution."},{"lineNumber":496,"author":{"gitID":"chanyikwai"},"content":"* `INFO` : Information showing the noteworthy actions by the MVP."},{"lineNumber":497,"author":{"gitID":"chanyikwai"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size."},{"lineNumber":498,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":499,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":500,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":501,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":502,"author":{"gitID":"tinyjy94"},"content":"Certain properties of the application can be controlled (e.g. App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":503,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":504,"author":{"gitID":"chanyikwai"},"content":"// tag::emailfeature[]"},{"lineNumber":505,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d Email feature"},{"lineNumber":506,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":507,"author":{"gitID":"tinyjy94"},"content":"The email feature is facilitated by the `Email` component. It supports sending of email through an external library `JavaMail`."},{"lineNumber":508,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":509,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":510,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":511,"author":{"gitID":"chanyikwai"},"content":"MVP uses the email command to send an email. The following activity diagram displays the series of events that occurs when a user enters the email"},{"lineNumber":512,"author":{"gitID":"chanyikwai"},"content":"command."},{"lineNumber":513,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":514,"author":{"gitID":"chanyikwai"},"content":".Activity Diagram of Email feature"},{"lineNumber":515,"author":{"gitID":"chanyikwai"},"content":"image::EmailActivityDiagram.png[width\u003d\"800\"]"},{"lineNumber":516,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":517,"author":{"gitID":"chanyikwai"},"content":"The email feature is constructed by 3 classes, `EmailLogin`, `EmailCompose`, `EmailSend`, which is handled by the `EmailManager`. More"},{"lineNumber":518,"author":{"gitID":"chanyikwai"},"content":"details about the classes are as provided:"},{"lineNumber":519,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":520,"author":{"gitID":"chanyikwai"},"content":"* `EmailLogin`: Handles the storage of login information and verifies whether the user is using a Gmail account to access"},{"lineNumber":521,"author":{"gitID":"chanyikwai"},"content":"the email feature."},{"lineNumber":522,"author":{"gitID":"chanyikwai"},"content":"* `EmailCompose`: Handles the email composing and drafting using a `MessageDraft` object to store email information such"},{"lineNumber":523,"author":{"gitID":"chanyikwai"},"content":"as message, subject and recipient email."},{"lineNumber":524,"author":{"gitID":"chanyikwai"},"content":"* `EmailSend`: Handles the sending of email by setting up a SMTP connection through the JavaMail API. The email cannot be sent if"},{"lineNumber":525,"author":{"gitID":"chanyikwai"},"content":"the following criteria are not met:"},{"lineNumber":526,"author":{"gitID":"tinyjy94"},"content":" ** `MessageDraft` object in `EmailCompose` is empty or,"},{"lineNumber":527,"author":{"gitID":"tinyjy94"},"content":" ** login details in `EmailLogin` is not valid."},{"lineNumber":528,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":529,"author":{"gitID":"chanyikwai"},"content":"The following sequence diagram shows how each component interacts when the email command is entered by the user."},{"lineNumber":530,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":531,"author":{"gitID":"chanyikwai"},"content":".Sequence Diagram of Email feature"},{"lineNumber":532,"author":{"gitID":"chanyikwai"},"content":"image::EmailUMLDiagram.png[width\u003d\"800\"]"},{"lineNumber":533,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":534,"author":{"gitID":"tinyjy94"},"content":"The following sequence diagram shows how the classes within the `EmailManager` interact when the email command"},{"lineNumber":535,"author":{"gitID":"chanyikwai"},"content":"is entered by the user."},{"lineNumber":536,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":537,"author":{"gitID":"chanyikwai"},"content":".Sequence Diagram of Email feature"},{"lineNumber":538,"author":{"gitID":"chanyikwai"},"content":"image::EmailSendUMLDiagram.png[width\u003d\"800\"]"},{"lineNumber":539,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":540,"author":{"gitID":"chanyikwai"},"content":"The following diagram shows how the email draft tab in the MVP UI is updated when the `EventCenter` responds to the"},{"lineNumber":541,"author":{"gitID":"chanyikwai"},"content":"`EmailDraftChangedEvent`."},{"lineNumber":542,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":543,"author":{"gitID":"chanyikwai"},"content":".Sequence Diagram of Email feature"},{"lineNumber":544,"author":{"gitID":"chanyikwai"},"content":"image::EmailEventsDiagram.png[width\u003d\"800\"]"},{"lineNumber":545,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":546,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d\u003d Implementation of JavaMail API"},{"lineNumber":547,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":548,"author":{"gitID":"tinyjy94"},"content":"The `Email` component uses the external library `JavaMail` to handle sending of email from MVP."},{"lineNumber":549,"author":{"gitID":"tinyjy94"},"content":"The code snippet below shows the set up (via SMTP) for sending email."},{"lineNumber":550,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":551,"author":{"gitID":"chanyikwai"},"content":"[source,java]"},{"lineNumber":552,"author":{"gitID":"chanyikwai"},"content":"----"},{"lineNumber":553,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":554,"author":{"gitID":"chanyikwai"},"content":" * Sets up the default email properties"},{"lineNumber":555,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":556,"author":{"gitID":"chanyikwai"},"content":"private void setUpEmailProperties() {"},{"lineNumber":557,"author":{"gitID":"chanyikwai"},"content":"    props \u003d new Properties();"},{"lineNumber":558,"author":{"gitID":"chanyikwai"},"content":"    props.put(\"mail.smtp.auth\", \"true\");"},{"lineNumber":559,"author":{"gitID":"chanyikwai"},"content":"    props.put(\"mail.smtp.host\", \"smtp.gmail.com\");"},{"lineNumber":560,"author":{"gitID":"chanyikwai"},"content":"    props.put(\"mail.smtp.socketFactory.port\", \"465\");"},{"lineNumber":561,"author":{"gitID":"chanyikwai"},"content":"    props.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\");"},{"lineNumber":562,"author":{"gitID":"chanyikwai"},"content":"    props.put(\"mail.smtp.port\", \"465\");"},{"lineNumber":563,"author":{"gitID":"chanyikwai"},"content":"}"},{"lineNumber":564,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":565,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":566,"author":{"gitID":"chanyikwai"},"content":" * Sends email out using JavaMail API"},{"lineNumber":567,"author":{"gitID":"chanyikwai"},"content":" *"},{"lineNumber":568,"author":{"gitID":"chanyikwai"},"content":" * @param login email login account"},{"lineNumber":569,"author":{"gitID":"chanyikwai"},"content":" * @param pass email login password"},{"lineNumber":570,"author":{"gitID":"chanyikwai"},"content":" * @param message message to send"},{"lineNumber":571,"author":{"gitID":"chanyikwai"},"content":" * @throws AuthenticationFailedException if gmail account can\u0027t be logged in"},{"lineNumber":572,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":573,"author":{"gitID":"chanyikwai"},"content":" private void sendingEmail(String login, String pass, ReadOnlyMessageDraft message)"},{"lineNumber":574,"author":{"gitID":"chanyikwai"},"content":"        throws AuthenticationFailedException {"},{"lineNumber":575,"author":{"gitID":"chanyikwai"},"content":"    final String username \u003d login;"},{"lineNumber":576,"author":{"gitID":"chanyikwai"},"content":"    final String password \u003d pass;"},{"lineNumber":577,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":578,"author":{"gitID":"chanyikwai"},"content":"    Session session \u003d Session.getInstance(props, new javax.mail.Authenticator() {"},{"lineNumber":579,"author":{"gitID":"chanyikwai"},"content":"        @Override"},{"lineNumber":580,"author":{"gitID":"chanyikwai"},"content":"        protected PasswordAuthentication getPasswordAuthentication() {"},{"lineNumber":581,"author":{"gitID":"chanyikwai"},"content":"            return new PasswordAuthentication(username, password);"},{"lineNumber":582,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":583,"author":{"gitID":"chanyikwai"},"content":"    });"},{"lineNumber":584,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":585,"author":{"gitID":"chanyikwai"},"content":"    try {"},{"lineNumber":586,"author":{"gitID":"chanyikwai"},"content":"        Message newMessage \u003d new MimeMessage(session);"},{"lineNumber":587,"author":{"gitID":"chanyikwai"},"content":"        newMessage.setFrom(new InternetAddress(username));"},{"lineNumber":588,"author":{"gitID":"chanyikwai"},"content":"        InternetAddress recipientEmail \u003d new InternetAddress(message.getRecipient());"},{"lineNumber":589,"author":{"gitID":"chanyikwai"},"content":"        newMessage.setRecipient(Message.RecipientType.TO, recipientEmail);"},{"lineNumber":590,"author":{"gitID":"chanyikwai"},"content":"        newMessage.setSubject(message.getSubject());"},{"lineNumber":591,"author":{"gitID":"chanyikwai"},"content":"        if (message.getRelativeFilePath().isEmpty()) {"},{"lineNumber":592,"author":{"gitID":"chanyikwai"},"content":"            newMessage.setText(message.getMessage());"},{"lineNumber":593,"author":{"gitID":"chanyikwai"},"content":"        } else {"},{"lineNumber":594,"author":{"gitID":"chanyikwai"},"content":"            BodyPart messageBodyPart \u003d new MimeBodyPart();"},{"lineNumber":595,"author":{"gitID":"chanyikwai"},"content":"            messageBodyPart.setText(message.getMessage());"},{"lineNumber":596,"author":{"gitID":"chanyikwai"},"content":"            Multipart multipart \u003d new MimeMultipart();"},{"lineNumber":597,"author":{"gitID":"chanyikwai"},"content":"            multipart.addBodyPart(messageBodyPart);"},{"lineNumber":598,"author":{"gitID":"chanyikwai"},"content":"            messageBodyPart \u003d new MimeBodyPart();"},{"lineNumber":599,"author":{"gitID":"chanyikwai"},"content":"            DataSource source \u003d new FileDataSource(message.getRelativeFilePath());"},{"lineNumber":600,"author":{"gitID":"chanyikwai"},"content":"            messageBodyPart.setDataHandler(new DataHandler(source));"},{"lineNumber":601,"author":{"gitID":"chanyikwai"},"content":"            messageBodyPart.setFileName(message.getRelativeFilePath());"},{"lineNumber":602,"author":{"gitID":"chanyikwai"},"content":"            multipart.addBodyPart(messageBodyPart);"},{"lineNumber":603,"author":{"gitID":"chanyikwai"},"content":"            newMessage.setContent(multipart);"},{"lineNumber":604,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":605,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":606,"author":{"gitID":"chanyikwai"},"content":"        Transport.send(newMessage);"},{"lineNumber":607,"author":{"gitID":"chanyikwai"},"content":"    } catch (AuthenticationFailedException e) {"},{"lineNumber":608,"author":{"gitID":"chanyikwai"},"content":"        throw new AuthenticationFailedException();"},{"lineNumber":609,"author":{"gitID":"chanyikwai"},"content":"    } catch (MessagingException e) {"},{"lineNumber":610,"author":{"gitID":"chanyikwai"},"content":"        throw new RuntimeException(e);"},{"lineNumber":611,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":612,"author":{"gitID":"chanyikwai"},"content":"}"},{"lineNumber":613,"author":{"gitID":"chanyikwai"},"content":"----"},{"lineNumber":614,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":615,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":616,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":617,"author":{"gitID":"chanyikwai"},"content":"*Aspect:* Implementation of email feature"},{"lineNumber":618,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":619,"author":{"gitID":"tinyjy94"},"content":"*Alternative 1 (current choice):* Adopt JavaMail API."},{"lineNumber":620,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":621,"author":{"gitID":"chanyikwai"},"content":"* *Pros:* The email feature will be integrated within the MVP application."},{"lineNumber":622,"author":{"gitID":"chanyikwai"},"content":"* *Cons:* The email is less secured."},{"lineNumber":623,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":624,"author":{"gitID":"tinyjy94"},"content":"*Alternative 2:* Link users to other email platforms."},{"lineNumber":625,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":626,"author":{"gitID":"chanyikwai"},"content":"* *Pros:* Users will have more options in editing email information."},{"lineNumber":627,"author":{"gitID":"chanyikwai"},"content":"* *Cons:* The email feature will not be integrated within the MVP application."},{"lineNumber":628,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":629,"author":{"gitID":"chanyikwai"},"content":"*Aspect:* Email Account Concealment (coming in V2.0)"},{"lineNumber":630,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":631,"author":{"gitID":"tinyjy94"},"content":"*Alternative 1 (current choice):* Display email login details in command line."},{"lineNumber":632,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":633,"author":{"gitID":"chanyikwai"},"content":"* *Pros:* The email account\u0027s information (username and password) can be seen by the user."},{"lineNumber":634,"author":{"gitID":"chanyikwai"},"content":"* *Cons:* The email account\u0027s information (username and password) can be seen by other people."},{"lineNumber":635,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":636,"author":{"gitID":"tinyjy94"},"content":"*Alternative 2:* Conceal email login details in command line with placeholder symbols."},{"lineNumber":637,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":638,"author":{"gitID":"chanyikwai"},"content":"* *Pros:* The email account\u0027s information (username and password) is hidden from other people."},{"lineNumber":639,"author":{"gitID":"chanyikwai"},"content":"* *Cons:* User may key in a wrong email password because they cannot identify what was typed."},{"lineNumber":640,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":641,"author":{"gitID":"chanyikwai"},"content":"// end::emailfeature[]"},{"lineNumber":642,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":643,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":644,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":645,"author":{"gitID":"slothhy"},"content":"// tag::adddeletemovie[]"},{"lineNumber":646,"author":{"gitID":"slothhy"},"content":"[[Implementation-Movie]]"},{"lineNumber":647,"author":{"gitID":"slothhy"},"content":"\u003d\u003d\u003d Addition and deletion of movies"},{"lineNumber":648,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":649,"author":{"gitID":"slothhy"},"content":"The user can add and delete movies in MVP. The results will be shown on the `MovieListPanel`."},{"lineNumber":650,"author":{"gitID":"slothhy"},"content":"[NOTE]"},{"lineNumber":651,"author":{"gitID":"slothhy"},"content":"Deletion of movies will delete the screenings in theaters that contain that movie."},{"lineNumber":652,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":653,"author":{"gitID":"slothhy"},"content":"\u003d\u003d\u003d\u003d Implementation details"},{"lineNumber":654,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":655,"author":{"gitID":"slothhy"},"content":"Addition and deletion of movies uses similar implementation. The sequence diagram below shows an overview of the high level interactions"},{"lineNumber":656,"author":{"gitID":"slothhy"},"content":"between components for the scenario when a `AddMovie` command is issued."},{"lineNumber":657,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":658,"author":{"gitID":"slothhy"},"content":".Component interactions for `AddMovieCommand`"},{"lineNumber":659,"author":{"gitID":"slothhy"},"content":"[[high_level_movie]]"},{"lineNumber":660,"author":{"gitID":"slothhy"},"content":"image::SDForMovie.PNG[width\u003d\"1000\"]"},{"lineNumber":661,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":662,"author":{"gitID":"slothhy"},"content":".Sequence diagram of addmovie command"},{"lineNumber":663,"author":{"gitID":"slothhy"},"content":"image::AddMovieSequenceDiagram.PNG[width\u003d\"1000\"]"},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"slothhy"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":666,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":667,"author":{"gitID":"slothhy"},"content":"*Aspects:* Enable editing of movies."},{"lineNumber":668,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":669,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 1 (current choice):** Do not allow editing of Movie."},{"lineNumber":670,"author":{"gitID":"tinyjy94"},"content":"** Pros: Will not cause overlap of schedule if user decides to edit duration of movie. e.g. two movies are planned back to back, editing the first movie to have a longer duration will cause it to overrun to the next movie."},{"lineNumber":671,"author":{"gitID":"slothhy"},"content":"** Cons: Users have to delete the movie and add it back if they make an error."},{"lineNumber":672,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":673,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 2:** Allow editing of Movie."},{"lineNumber":674,"author":{"gitID":"tinyjy94"},"content":"** Pros: More convenient for users to edit the movie if they made an error."},{"lineNumber":675,"author":{"gitID":"slothhy"},"content":"** Cons: It might cause overlap of schedule as mentioned above."},{"lineNumber":676,"author":{"gitID":"slothhy"},"content":"// end::adddeletemovie[]"},{"lineNumber":677,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":678,"author":{"gitID":"qwlai"},"content":"[[Implementation-ListMovie]]"},{"lineNumber":679,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d Listing movies"},{"lineNumber":680,"author":{"gitID":"qwlai"},"content":"In MVP, once the user has added or deleted any movies. The `MovieListPanel` will show any changes made to the list of movies."},{"lineNumber":681,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":682,"author":{"gitID":"slothhy"},"content":"\u003d\u003d\u003d\u003d Implementation details"},{"lineNumber":683,"author":{"gitID":"qwlai"},"content":"Whenever a movie is added or deleted, the `FilteredList\u003cMovie\u003e` is updated in the `Model` component. The `Model` component then exposes"},{"lineNumber":684,"author":{"gitID":"qwlai"},"content":"an unmodifiable `ObservableList\u003cMovie\u003e` as shown in \u003c\u003cmodel_component\u003e\u003e. The `MovieListPanel` which resides in the UI Component is bound to"},{"lineNumber":685,"author":{"gitID":"qwlai"},"content":"this `ObservableList\u003cMovie\u003e` object so that any changes made to the list of movies will be displayed. The `MovieListPanel` contains a list of movies in the form of `MovieCard` objects."},{"lineNumber":686,"author":{"gitID":"qwlai"},"content":"These `MovieCard` objects contain details about the movie as seen in the diagram below."},{"lineNumber":687,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":688,"author":{"gitID":"qwlai"},"content":".Movie cards"},{"lineNumber":689,"author":{"gitID":"qwlai"},"content":"image::MovieCard.png[width\u003d\"300\"]"},{"lineNumber":690,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":691,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":692,"author":{"gitID":"qwlai"},"content":"The tags of the movie have been colored to make the tags easily identifiable. To add more colors to a tag, you can"},{"lineNumber":693,"author":{"gitID":"qwlai"},"content":"modify the `TAG_COLORS` arraylist in `MovieCard`."},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"slothhy"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":696,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":697,"author":{"gitID":"qwlai"},"content":"*Aspects:* How to display the list of movies."},{"lineNumber":698,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":699,"author":{"gitID":"qwlai"},"content":"* **Alternative 1 (current choice):** Use a `MovieCard` to display the details of each movie."},{"lineNumber":700,"author":{"gitID":"qwlai"},"content":"** Pros: Easy to implement as existing implementation of cinema uses `CinemaCard`."},{"lineNumber":701,"author":{"gitID":"qwlai"},"content":"** Cons: It might take a long time for user to scroll through the list of movies especially when the user has a lot of movies."},{"lineNumber":702,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":703,"author":{"gitID":"qwlai"},"content":"* **Alternative 2:** Use a table to display the details of each movie."},{"lineNumber":704,"author":{"gitID":"qwlai"},"content":"** Pros: Movies can be displayed in a more compact manner."},{"lineNumber":705,"author":{"gitID":"qwlai"},"content":"** Cons: May not be visually appealing and the problem of scrolling through the list of movies still persists."},{"lineNumber":706,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":707,"author":{"gitID":"slothhy"},"content":"// tag::findmovie[]"},{"lineNumber":708,"author":{"gitID":"-"},"content":"[[Implementation-FindMovie]]"},{"lineNumber":709,"author":{"gitID":"slothhy"},"content":"\u003d\u003d\u003d Enhanced FindMovie command"},{"lineNumber":710,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":711,"author":{"gitID":"tinyjy94"},"content":"The user can find movies by `Category`, `MovieName` or `StartDate` or a combination of them as a multi-criteria search."},{"lineNumber":712,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":713,"author":{"gitID":"slothhy"},"content":"\u003d\u003d\u003d\u003d Finding movies"},{"lineNumber":714,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":715,"author":{"gitID":"tinyjy94"},"content":"Movies can be found by using the `findmovie` command. The command is parsed by `FindMovieCommandParser` and executed"},{"lineNumber":716,"author":{"gitID":"-"},"content":"in `FindMovieCommand`."},{"lineNumber":717,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":718,"author":{"gitID":"slothhy"},"content":"Figure below shows the interaction between the classes."},{"lineNumber":719,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"*Finding by `MovieName` or/and `StartDate` or/and `Tag`*"},{"lineNumber":721,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":".Sequence diagram of findmovie command"},{"lineNumber":723,"author":{"gitID":"-"},"content":"image::FindMovieSequenceDiagram.PNG[width\u003d\"1000\"]"},{"lineNumber":724,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":725,"author":{"gitID":"slothhy"},"content":"\u003d\u003d\u003d\u003d Implementation details"},{"lineNumber":726,"author":{"gitID":"slothhy"},"content":"The parser will take in all arguments the user specified and store it in an array. If the user search by `MovieName` or"},{"lineNumber":727,"author":{"gitID":"-"},"content":"`StartDate` or `Category`, MVP will retrieve movie records in the storage with the matching keywords. If two or more conditions"},{"lineNumber":728,"author":{"gitID":"-"},"content":"are specified, MVP will combine the predicates to get a smaller subset of results."},{"lineNumber":729,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":730,"author":{"gitID":"tinyjy94"},"content":"As seen in the sequence diagram above, MVP will do the following:"},{"lineNumber":731,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":732,"author":{"gitID":"-"},"content":". Calls `arePrefixesPresent()` to check if the necessary prefixes n/, sd/ and t/, which are used for name, startDate and tag"},{"lineNumber":733,"author":{"gitID":"-"},"content":"respectively are present."},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"tinyjy94"},"content":". Calls `tokenize` method in `ArgumentTokenizer` to get value entered by user."},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"tinyjy94"},"content":". Calls `FindMovieCommand` to take in different predicates to get the correct result, based on the `parameters` input by the user."},{"lineNumber":738,"author":{"gitID":"tinyjy94"},"content":"The code snippet below shows the implementation when all parameters are chosen."},{"lineNumber":739,"author":{"gitID":"-"},"content":""},{"lineNumber":740,"author":{"gitID":"-"},"content":"[source, java]"},{"lineNumber":741,"author":{"gitID":"-"},"content":"if (!argMultimap.getAllValues(PREFIX_NAME).isEmpty()"},{"lineNumber":742,"author":{"gitID":"-"},"content":"    \u0026\u0026 !argMultimap.getAllValues(PREFIX_STARTDATE).isEmpty()"},{"lineNumber":743,"author":{"gitID":"-"},"content":"    \u0026\u0026 !argMultimap.getAllValues(PREFIX_TAG).isEmpty()) {"},{"lineNumber":744,"author":{"gitID":"-"},"content":"    //name, startDate, tag present"},{"lineNumber":745,"author":{"gitID":"-"},"content":"    nameValues \u003d argMultimap.getValue(PREFIX_NAME).get();"},{"lineNumber":746,"author":{"gitID":"-"},"content":"    startDateValues \u003d argMultimap.getValue(PREFIX_STARTDATE).get();"},{"lineNumber":747,"author":{"gitID":"-"},"content":"    tagValues \u003d argMultimap.getValue(PREFIX_TAG).get();"},{"lineNumber":748,"author":{"gitID":"-"},"content":"    nameKeywords \u003d nameValues.split(\"\\\\s+\");"},{"lineNumber":749,"author":{"gitID":"-"},"content":"    startDateKeywords \u003d startDateValues.split(\"\\\\s+\");"},{"lineNumber":750,"author":{"gitID":"-"},"content":"    tagKeywords \u003d tagValues.split(\"\\\\s+\");"},{"lineNumber":751,"author":{"gitID":"-"},"content":"    return new FindMovieCommand(new NameAndStartDateAndTagContainsKeywordsPredicate"},{"lineNumber":752,"author":{"gitID":"-"},"content":"    (Arrays.asList(nameKeywords), Arrays.asList(startDateKeywords), Arrays.asList(tagKeywords)));"},{"lineNumber":753,"author":{"gitID":"-"},"content":"} else if ... //other parameters combination"},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":". `FindMovieCommand` then returns `CommandResult` to the user which shows the current status of the `Cinema`."},{"lineNumber":756,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":757,"author":{"gitID":"tinyjy94"},"content":"`parameters` above refers to parameters provided by the user. e.g. name only or name and tag"},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"slothhy"},"content":"\u003d\u003d\u003d\u003d Design considerations"},{"lineNumber":760,"author":{"gitID":"tinyjy94"},"content":"*Aspects:* Using `and` or `or` condition for the multi-criteria search"},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 1 (current choice):** Using `and` condition for multi-criteria search."},{"lineNumber":763,"author":{"gitID":"slothhy"},"content":"** Pros: User will be able to make a more detailed search to display on MVP."},{"lineNumber":764,"author":{"gitID":"tinyjy94"},"content":"** Cons: User cannot do a wider search with multiple keywords."},{"lineNumber":765,"author":{"gitID":"-"},"content":""},{"lineNumber":766,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 2:** Using `or` condition for multicriteria search."},{"lineNumber":767,"author":{"gitID":"slothhy"},"content":"** Pros: User can search for multiple `tag` for example to find movies of those categories."},{"lineNumber":768,"author":{"gitID":"slothhy"},"content":"** Cons: User will not be able to make a detailed search to narrow down the results displayed on MVP."},{"lineNumber":769,"author":{"gitID":"-"},"content":""},{"lineNumber":770,"author":{"gitID":"slothhy"},"content":"[NOTE]"},{"lineNumber":771,"author":{"gitID":"tinyjy94"},"content":"Future updates are planned in `V2.0` to support both `and` and `or` functions in the FindMovie command."},{"lineNumber":772,"author":{"gitID":"slothhy"},"content":"//end::findmovie[]"},{"lineNumber":773,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":774,"author":{"gitID":"qwlai"},"content":"//tag::scheduling[]"},{"lineNumber":775,"author":{"gitID":"qwlai"},"content":"[[Implementation-SchedulingSystem]]"},{"lineNumber":776,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d Scheduling System"},{"lineNumber":777,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":778,"author":{"gitID":"qwlai"},"content":"In MVP, the scheduling system enables the user to plan a schedule of a cinema via addition and removal of screenings."},{"lineNumber":779,"author":{"gitID":"qwlai"},"content":"The user can then use the `BrowserPanel` to view the cinema\u0027s schedule."},{"lineNumber":780,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":781,"author":{"gitID":"slothhy"},"content":"\u003d\u003d\u003d\u003d Implementation details"},{"lineNumber":782,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":783,"author":{"gitID":"qwlai"},"content":"Addition and removal of screenings uses similar implementation. The sequence diagram below shows an overview"},{"lineNumber":784,"author":{"gitID":"tinyjy94"},"content":"of the high level interactions between components for the scenario when a `addscreening` command is issued."},{"lineNumber":785,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":786,"author":{"gitID":"qwlai"},"content":"[[high_level_sd_scheduling]]"},{"lineNumber":787,"author":{"gitID":"qwlai"},"content":".Sequence diagram showing high level interactions"},{"lineNumber":788,"author":{"gitID":"qwlai"},"content":"image::SDForAddScreening.png[width\u003d\"1000\"]"},{"lineNumber":789,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":790,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d\u003d Add Screening Command"},{"lineNumber":791,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":792,"author":{"gitID":"qwlai"},"content":"MVP makes use of the `addscreening` command to add a new screening to a cinema\u0027s theater."},{"lineNumber":793,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":794,"author":{"gitID":"qwlai"},"content":"The following sequence diagram shows the interactions inside the Logic Component"},{"lineNumber":795,"author":{"gitID":"qwlai"},"content":"for `addscreening` command."},{"lineNumber":796,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":797,"author":{"gitID":"qwlai"},"content":".Sequence diagram of the interactions inside the Logic Component for `addscreening` command"},{"lineNumber":798,"author":{"gitID":"qwlai"},"content":"image::AddScreeningSequenceDiagram.png[width\u003d\"1000\"]"},{"lineNumber":799,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":800,"author":{"gitID":"tinyjy94"},"content":"As seen in the sequence diagram above, MVP will do the following:"},{"lineNumber":801,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":802,"author":{"gitID":"qwlai"},"content":". `LogicManager` calls the `MoviePlannerParser` to parse the user command."},{"lineNumber":803,"author":{"gitID":"qwlai"},"content":". `MoviePlannerParser` calls the `AddScreeningCommandParser` to process the prefixes `c/, m/, th/, h/`, which stands for"},{"lineNumber":804,"author":{"gitID":"qwlai"},"content":"cinema index, movie, theater number and date time respectively."},{"lineNumber":805,"author":{"gitID":"qwlai"},"content":". This results in a `Command` object which is executed by `LogicManager`."},{"lineNumber":806,"author":{"gitID":"qwlai"},"content":". `isValidScreening()` in `AddScreeningCommand` ensures a couple of properties before creating a `Screening` object."},{"lineNumber":807,"author":{"gitID":"qwlai"},"content":"... The movie index provided is valid."},{"lineNumber":808,"author":{"gitID":"qwlai"},"content":"... The cinema index provided is valid."},{"lineNumber":809,"author":{"gitID":"qwlai"},"content":"... The theater number provided is valid."},{"lineNumber":810,"author":{"gitID":"qwlai"},"content":"... The screening can fit into existing theater schedule."},{"lineNumber":811,"author":{"gitID":"qwlai"},"content":"... The screening date is not before the release date of the movie."},{"lineNumber":812,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":813,"author":{"gitID":"qwlai"},"content":"The code snippet below shows how MVP checks if the screening is valid."},{"lineNumber":814,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":815,"author":{"gitID":"qwlai"},"content":"[source, java]"},{"lineNumber":816,"author":{"gitID":"qwlai"},"content":"----"},{"lineNumber":817,"author":{"gitID":"qwlai"},"content":"    private boolean isValidScreening() throws CommandException {"},{"lineNumber":818,"author":{"gitID":"qwlai"},"content":"        movie \u003d getValidMovie();"},{"lineNumber":819,"author":{"gitID":"qwlai"},"content":"        cinema \u003d getValidCinema();"},{"lineNumber":820,"author":{"gitID":"qwlai"},"content":"        theater \u003d getValidTheater(cinema);"},{"lineNumber":821,"author":{"gitID":"qwlai"},"content":"        ArrayList\u003cScreening\u003e screeningList \u003d theater.getScreeningList();"},{"lineNumber":822,"author":{"gitID":"qwlai"},"content":"        toAddScreeningEndDateTime \u003d getEndTime();"},{"lineNumber":823,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":824,"author":{"gitID":"qwlai"},"content":"        return isSlotAvailable(screeningList) \u0026\u0026 canAddMovie(movie);"},{"lineNumber":825,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":826,"author":{"gitID":"qwlai"},"content":"----"},{"lineNumber":827,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":828,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":829,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":830,"author":{"gitID":"qwlai"},"content":"* The formula used to calculate the screening\u0027s end time is (start time + movie\u0027s duration + preparation delay) rounded up to the nearest 5 minutes."},{"lineNumber":831,"author":{"gitID":"qwlai"},"content":"* By default the preparation delay is *15 minutes*."},{"lineNumber":832,"author":{"gitID":"tinyjy94"},"content":"* e.g. Screening is scheduled to start at 13:30, movie\u0027s duration is 93 minutes."},{"lineNumber":833,"author":{"gitID":"qwlai"},"content":"The end time of this screening is calculated by (13:30 + 15 minutes + 93 minutes) \u003d 15:18."},{"lineNumber":834,"author":{"gitID":"qwlai"},"content":"By rounding up to the nearest 5 minutes, the screening will end at 15:20."},{"lineNumber":835,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":836,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":837,"author":{"gitID":"qwlai"},"content":"[start \u003d 4]"},{"lineNumber":838,"author":{"gitID":"qwlai"},"content":". The command execution can affect the `Model` as it updates the `Cinema` object to include the new `Screening`."},{"lineNumber":839,"author":{"gitID":"qwlai"},"content":". The result of the execution is encapsulated as a `CommandResult` object which is passed back to the `UI`."},{"lineNumber":840,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":841,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d\u003d Storing screenings to xml"},{"lineNumber":842,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":843,"author":{"gitID":"qwlai"},"content":"Once a `Screening` is added to a cinema\u0027s theater, the `Cinema` needs to be updated and"},{"lineNumber":844,"author":{"gitID":"qwlai"},"content":"saved into XML format."},{"lineNumber":845,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":846,"author":{"gitID":"qwlai"},"content":"The part in red border below shows the class diagram of the storage component"},{"lineNumber":847,"author":{"gitID":"qwlai"},"content":"and the relationship between `XMLAdaptedCinema`, `XMLAdaptedTheater` and `XMLAdaptedScreening`."},{"lineNumber":848,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":849,"author":{"gitID":"qwlai"},"content":".Class diagram of storage component"},{"lineNumber":850,"author":{"gitID":"qwlai"},"content":"[[screening_storage]]"},{"lineNumber":851,"author":{"gitID":"qwlai"},"content":"image::ScreeningStorageComponent.png[width\u003d\"500\"]"},{"lineNumber":852,"author":{"gitID":"qwlai"},"content":"The data will be stored as such in the movieplanner.xml file:"},{"lineNumber":853,"author":{"gitID":"qwlai"},"content":"[source, xml]"},{"lineNumber":854,"author":{"gitID":"qwlai"},"content":"    \u003ccinemas\u003e"},{"lineNumber":855,"author":{"gitID":"qwlai"},"content":"        \u003cname\u003eCathay\u003c/name\u003e"},{"lineNumber":856,"author":{"gitID":"qwlai"},"content":"        ..."},{"lineNumber":857,"author":{"gitID":"qwlai"},"content":"        \u003ctheater number\u003d\"1\"/\u003e"},{"lineNumber":858,"author":{"gitID":"qwlai"},"content":"        \u003ctheater number\u003d\"2\"\u003e"},{"lineNumber":859,"author":{"gitID":"qwlai"},"content":"            \u003cscreening\u003e"},{"lineNumber":860,"author":{"gitID":"qwlai"},"content":"                \u003cmovie\u003eFinding Nemo\u003c/movie\u003e"},{"lineNumber":861,"author":{"gitID":"qwlai"},"content":"                \u003cstartDateTime\u003e11/11/2015 13:35\u003c/startDateTime\u003e"},{"lineNumber":862,"author":{"gitID":"qwlai"},"content":"                \u003cendDateTime\u003e11/11/2015 15:50\u003c/endDateTime\u003e"},{"lineNumber":863,"author":{"gitID":"qwlai"},"content":"            \u003c/screening\u003e"},{"lineNumber":864,"author":{"gitID":"qwlai"},"content":"        \u003c/theater\u003e"},{"lineNumber":865,"author":{"gitID":"qwlai"},"content":"    \u003c/cinemas\u003e"},{"lineNumber":866,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":867,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d\u003d Reading screenings from `movieplanner.xml`"},{"lineNumber":868,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":869,"author":{"gitID":"qwlai"},"content":"As shown in \u003c\u003cscreening_storage\u003e\u003e, it shows the relationship between `XMLAdaptedCinema`, `XMLAdaptedTheater` and `XMLAdaptedScreening`."},{"lineNumber":870,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":871,"author":{"gitID":"qwlai"},"content":"The following steps show how MVP extracts the list of cinemas and converts the `XMLAdaptedScreening` back into"},{"lineNumber":872,"author":{"gitID":"qwlai"},"content":"screening object."},{"lineNumber":873,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":874,"author":{"gitID":"qwlai"},"content":". In `XMLAdaptedCinema`, an ArrayList is created to store the `XMLAdaptedTheater`, this ArrayList contains theaters in a cinema."},{"lineNumber":875,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":876,"author":{"gitID":"qwlai"},"content":"[source, java]"},{"lineNumber":877,"author":{"gitID":"qwlai"},"content":"----"},{"lineNumber":878,"author":{"gitID":"qwlai"},"content":"public class XmlAdaptedCinema {"},{"lineNumber":879,"author":{"gitID":"qwlai"},"content":"    @XmlElement(name \u003d \"theater\")"},{"lineNumber":880,"author":{"gitID":"qwlai"},"content":"    private ArrayList\u003cXmlAdaptedTheater\u003e theaters \u003d new ArrayList\u003c\u003e();"},{"lineNumber":881,"author":{"gitID":"qwlai"},"content":"    ..."},{"lineNumber":882,"author":{"gitID":"qwlai"},"content":"}"},{"lineNumber":883,"author":{"gitID":"qwlai"},"content":"----"},{"lineNumber":884,"author":{"gitID":"qwlai"},"content":"[start \u003d 2]"},{"lineNumber":885,"author":{"gitID":"qwlai"},"content":". In `XMLAdaptedTheater`, an ArrayList is created to store the `XMLAdaptedScreening`,"},{"lineNumber":886,"author":{"gitID":"tinyjy94"},"content":"this ArrayList contains screenings in a theater. It also creates the `Screening` object to be stored in `Theater`."},{"lineNumber":887,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":888,"author":{"gitID":"qwlai"},"content":"[source, java]"},{"lineNumber":889,"author":{"gitID":"qwlai"},"content":"----"},{"lineNumber":890,"author":{"gitID":"qwlai"},"content":"public class XmlAdaptedTheater {"},{"lineNumber":891,"author":{"gitID":"qwlai"},"content":"    @XmlAttribute(name \u003d \"number\")"},{"lineNumber":892,"author":{"gitID":"qwlai"},"content":"    private int theaterNumber;"},{"lineNumber":893,"author":{"gitID":"qwlai"},"content":"    @XmlElement(name \u003d \"screening\")"},{"lineNumber":894,"author":{"gitID":"qwlai"},"content":"    private ArrayList\u003cXmlAdaptedScreening\u003e screenings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":895,"author":{"gitID":"qwlai"},"content":"    ..."},{"lineNumber":896,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":897,"author":{"gitID":"qwlai"},"content":"    public Theater toModelType() throws IllegalValueException {"},{"lineNumber":898,"author":{"gitID":"qwlai"},"content":"        ..."},{"lineNumber":899,"author":{"gitID":"qwlai"},"content":"        Theater theater \u003d new Theater(theaterNumber);"},{"lineNumber":900,"author":{"gitID":"qwlai"},"content":"        for (XmlAdaptedScreening s : screenings) {"},{"lineNumber":901,"author":{"gitID":"qwlai"},"content":"            // logic to create a screening object"},{"lineNumber":902,"author":{"gitID":"qwlai"},"content":"            theater.addScreeningToTheater(screening);"},{"lineNumber":903,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":904,"author":{"gitID":"qwlai"},"content":"        ..."},{"lineNumber":905,"author":{"gitID":"qwlai"},"content":"        return theater;"},{"lineNumber":906,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":907,"author":{"gitID":"qwlai"},"content":"    ..."},{"lineNumber":908,"author":{"gitID":"qwlai"},"content":"}"},{"lineNumber":909,"author":{"gitID":"qwlai"},"content":"----"},{"lineNumber":910,"author":{"gitID":"qwlai"},"content":"[start \u003d 3]"},{"lineNumber":911,"author":{"gitID":"qwlai"},"content":". In `XMLAdaptedScreening`, it will read the movie name, the start and end date time of a screening."},{"lineNumber":912,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":913,"author":{"gitID":"qwlai"},"content":"[source, java]"},{"lineNumber":914,"author":{"gitID":"qwlai"},"content":"----"},{"lineNumber":915,"author":{"gitID":"qwlai"},"content":"public class XMLAdaptedScreening {"},{"lineNumber":916,"author":{"gitID":"qwlai"},"content":"    @XmlElement(required \u003d true, name \u003d \"movie\")"},{"lineNumber":917,"author":{"gitID":"qwlai"},"content":"    private String movieName;"},{"lineNumber":918,"author":{"gitID":"qwlai"},"content":"    @XmlElement(required \u003d true, name \u003d \"startDateTime\")"},{"lineNumber":919,"author":{"gitID":"qwlai"},"content":"    private String screeningDateTime;"},{"lineNumber":920,"author":{"gitID":"qwlai"},"content":"    @XmlElement(required \u003d true, name \u003d \"endDateTime\")"},{"lineNumber":921,"author":{"gitID":"qwlai"},"content":"    private String screeningEndDateTime;"},{"lineNumber":922,"author":{"gitID":"qwlai"},"content":"    ..."},{"lineNumber":923,"author":{"gitID":"qwlai"},"content":"}"},{"lineNumber":924,"author":{"gitID":"qwlai"},"content":"----"},{"lineNumber":925,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":926,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d\u003d Displaying screenings on UI"},{"lineNumber":927,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":928,"author":{"gitID":"qwlai"},"content":"[TIP]"},{"lineNumber":929,"author":{"gitID":"qwlai"},"content":"`BrowserPanel` uses the CalendarFX API to display the cinema\u0027s schedule. You can refer to http://dlsc.com/wp-content/html/calendarfx/manual.html to find out more about CalendarFX."},{"lineNumber":930,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":931,"author":{"gitID":"qwlai"},"content":"Once a screening is added to a cinema\u0027s theater, the user can view the screening on the `BrowserPanel`."},{"lineNumber":932,"author":{"gitID":"qwlai"},"content":"As seen in the diagram below, the `BrowserPanel` shows the schedule of a cinema."},{"lineNumber":933,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":934,"author":{"gitID":"qwlai"},"content":"image::BrowserPanelDisplay.png[width\u003d\"800\"]"},{"lineNumber":935,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":936,"author":{"gitID":"qwlai"},"content":"Extending on \u003c\u003chigh_level_sd_scheduling\u003e\u003e, the following sequence diagram shows how the UI component is notified on a new screening."},{"lineNumber":937,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":938,"author":{"gitID":"qwlai"},"content":".ReloadBrowserPanelEvent in execution"},{"lineNumber":939,"author":{"gitID":"qwlai"},"content":"image::SDForAddScreeningEventHandling.png[width\u003d\"800\"]"},{"lineNumber":940,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":941,"author":{"gitID":"qwlai"},"content":"[NOTE]"},{"lineNumber":942,"author":{"gitID":"qwlai"},"content":"`BrowserPanel` subscribes to the `ReloadBrowserPanel` and will load all the schedules of the cinema in MVP."},{"lineNumber":943,"author":{"gitID":"-"},"content":""},{"lineNumber":944,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":945,"author":{"gitID":"qwlai"},"content":"*Aspect:* How to display a cinema\u0027s schedule"},{"lineNumber":946,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":947,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 1 (current choice):** Use an external framework such as `CalendarFX` to display the schedule."},{"lineNumber":948,"author":{"gitID":"qwlai"},"content":"** Pros: `CalendarFX` is visually appealing and there are a lot of functionalities such as the ability to add an entry with date and time."},{"lineNumber":949,"author":{"gitID":"qwlai"},"content":"** Cons: Requires some time to be familiar with the API."},{"lineNumber":950,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 2:** Use `JavaFX` to display the schedule."},{"lineNumber":951,"author":{"gitID":"qwlai"},"content":"** Pros: `JavaFX` is well documented."},{"lineNumber":952,"author":{"gitID":"qwlai"},"content":"** Cons: Lacks calendar specific functionalities such as the ability to add an entry with date and time."},{"lineNumber":953,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":954,"author":{"gitID":"qwlai"},"content":"*Aspect:* How to edit screening details"},{"lineNumber":955,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":956,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 1:** Implement an edit command for screening."},{"lineNumber":957,"author":{"gitID":"qwlai"},"content":"** Pros: User can edit their screenings to their preferred date and timing."},{"lineNumber":958,"author":{"gitID":"qwlai"},"content":"** Cons: Edit command may introduce problems such as verifying a screening can be edited to another timeslot."},{"lineNumber":959,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":960,"author":{"gitID":"tinyjy94"},"content":"* **Alternative 2 (current choice):** Use existing command `deletescreening` and `addscreening` to perform an edit equivalent action."},{"lineNumber":961,"author":{"gitID":"qwlai"},"content":"** Pros: Less commands for the user to learn about."},{"lineNumber":962,"author":{"gitID":"qwlai"},"content":"** Cons: User will need to delete existing screening and add the screening with new details to perform an edit equivalent action."},{"lineNumber":963,"author":{"gitID":"qwlai"},"content":"//end::scheduling[]"},{"lineNumber":964,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":965,"author":{"gitID":"tinyjy94"},"content":"// tag::theaterCommands[]"},{"lineNumber":966,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":967,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d\u003d Add/Delete Theater"},{"lineNumber":968,"author":{"gitID":"tinyjy94"},"content":"When creating a new `Cinema`, the initial number of theaters must be stated. This value will be used to create a corresponding number of `Theater`, which is stored as an ArrayList\u003cTheater\u003e in `Cinema`."},{"lineNumber":969,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":970,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d\u003d Implementation details"},{"lineNumber":971,"author":{"gitID":"tinyjy94"},"content":"*Add Theater Command*"},{"lineNumber":972,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":973,"author":{"gitID":"tinyjy94"},"content":"When there is a need to resize the `Cinema`, the user can use `addTheater` and `deleteTheater` commands to increase/decrease the number of theaters respectively."},{"lineNumber":974,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":975,"author":{"gitID":"tinyjy94"},"content":"The following sequence diagram shows the interactions inside the Logic Component for `addTheater` command."},{"lineNumber":976,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":977,"author":{"gitID":"tinyjy94"},"content":".Sequence diagram of addTheater Command"},{"lineNumber":978,"author":{"gitID":"tinyjy94"},"content":"image::AddTheaterSequenceDiagram.png[width\u003d\"1000\"]"},{"lineNumber":979,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":980,"author":{"gitID":"tinyjy94"},"content":"[NOTE]"},{"lineNumber":981,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":982,"author":{"gitID":"tinyjy94"},"content":". `deleteTheater` follows the same flow as the diagram shown above, but uses `DeleteTheaterCommand` and `DeleteTheaterCommandParser` instead."},{"lineNumber":983,"author":{"gitID":"tinyjy94"},"content":". The maximum number of theaters per cinema is *20*."},{"lineNumber":984,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":985,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":986,"author":{"gitID":"tinyjy94"},"content":"The addition and deletion of `Theater` in `Cinema` are facilitated by `addTheater` and `deleteTheater` commands. When executing these commands, MVP will do the following:"},{"lineNumber":987,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":988,"author":{"gitID":"tinyjy94"},"content":". Calls `tokenize` method in `ArgumentTokenizer` to get value entered by user."},{"lineNumber":989,"author":{"gitID":"tinyjy94"},"content":". Calls `parseIndex` and `parseTheaters` methods in `ParserUtil` to parse input into objects required for `addTheater` command and checks for invalid format of user input."},{"lineNumber":990,"author":{"gitID":"tinyjy94"},"content":". Creates a `AddTheaterCommand` object to take in the `parameters`. Checks are present in `AddTheaterCommand` to ensure values provided by user is valid."},{"lineNumber":991,"author":{"gitID":"tinyjy94"},"content":". `AddTheaterCommand` then returns a `Command` object to the `LogicManager` for it to execute."},{"lineNumber":992,"author":{"gitID":"tinyjy94"},"content":". `LogicManager` will then create the newly resized cinema and update the `Model`."},{"lineNumber":993,"author":{"gitID":"tinyjy94"},"content":". Upon success, the result of this execution will then be returned as a `CommandResult` object back to the UI."},{"lineNumber":994,"author":{"gitID":"tinyjy94"},"content":"[NOTE]"},{"lineNumber":995,"author":{"gitID":"tinyjy94"},"content":"`parameters` above refers to parameters provided by the user. e.g. Index and number of theaters"},{"lineNumber":996,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":997,"author":{"gitID":"tinyjy94"},"content":"\u003d\u003d\u003d\u003d Design Consideration"},{"lineNumber":998,"author":{"gitID":"tinyjy94"},"content":"Aspect: Implementation of `addTheater` and `deleteTheater`"},{"lineNumber":999,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1000,"author":{"gitID":"tinyjy94"},"content":"* *Alternative 1 (current choice):* Using `addTheater` and `deleteTheater` commands to add and remove theaters respectively"},{"lineNumber":1001,"author":{"gitID":"tinyjy94"},"content":"** Pros: Users will be clear that they are increasing or decreasing the size of cinema, as compared to previous implementation where the number of theaters is just overwritten in the `EditCommand`."},{"lineNumber":1002,"author":{"gitID":"tinyjy94"},"content":"** Cons: Each respective command only does an action, thus two commands are required instead of one."},{"lineNumber":1003,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1004,"author":{"gitID":"tinyjy94"},"content":"* *Alternative 2:* Reusing the existing `editCommand` to add or delete theaters"},{"lineNumber":1005,"author":{"gitID":"tinyjy94"},"content":"** Pros: A single command is needed to increase and reduce number of theaters in cinema."},{"lineNumber":1006,"author":{"gitID":"tinyjy94"},"content":"** Cons: Overwrites current value of `Theater` in cinema, which might cause the user to lose information in theater."},{"lineNumber":1007,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1008,"author":{"gitID":"tinyjy94"},"content":"// end::theaterCommands[]"},{"lineNumber":1009,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1010,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":1011,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1012,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1013,"author":{"gitID":"-"},"content":""},{"lineNumber":1014,"author":{"gitID":"chanyikwai"},"content":"Documentation for MVP are done in acsiidoc."},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1017,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1018,"author":{"gitID":"-"},"content":""},{"lineNumber":1019,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1022,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1023,"author":{"gitID":"-"},"content":""},{"lineNumber":1024,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":1025,"author":{"gitID":"-"},"content":""},{"lineNumber":1026,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1031,"author":{"gitID":"-"},"content":""},{"lineNumber":1032,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1033,"author":{"gitID":"-"},"content":""},{"lineNumber":1034,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1035,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1036,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1037,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1038,"author":{"gitID":"-"},"content":""},{"lineNumber":1039,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":1040,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1041,"author":{"gitID":"-"},"content":""},{"lineNumber":1042,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":1043,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1045,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1046,"author":{"gitID":"-"},"content":""},{"lineNumber":1047,"author":{"gitID":"chanyikwai"},"content":"Tests play a vital role in the development of MVP as they guarantee that features are working as"},{"lineNumber":1048,"author":{"gitID":"chanyikwai"},"content":"intended. They also ensure that the newly added features do not conflict with existing ones."},{"lineNumber":1049,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1053,"author":{"gitID":"-"},"content":""},{"lineNumber":1054,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1055,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1058,"author":{"gitID":"-"},"content":""},{"lineNumber":1059,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":1061,"author":{"gitID":"-"},"content":""},{"lineNumber":1062,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"chanyikwai"},"content":"Open a console and run the command:"},{"lineNumber":1065,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1066,"author":{"gitID":"chanyikwai"},"content":"* Windows: `gradlew clean allTests`"},{"lineNumber":1067,"author":{"gitID":"chanyikwai"},"content":"* Mac/Linux: `./gradlew clean allTests`"},{"lineNumber":1068,"author":{"gitID":"-"},"content":""},{"lineNumber":1069,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1070,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"tinyjy94"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the computer while the tests are running."},{"lineNumber":1075,"author":{"gitID":"-"},"content":""},{"lineNumber":1076,"author":{"gitID":"chanyikwai"},"content":"To run tests in headless mode, open a console and run the command:"},{"lineNumber":1077,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1078,"author":{"gitID":"chanyikwai"},"content":"* Windows: `gradlew clean headless allTests`"},{"lineNumber":1079,"author":{"gitID":"chanyikwai"},"content":"* Mac/Linux: `./gradlew clean headless allTests`"},{"lineNumber":1080,"author":{"gitID":"-"},"content":""},{"lineNumber":1081,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1084,"author":{"gitID":"-"},"content":""},{"lineNumber":1085,"author":{"gitID":"tinyjy94"},"content":".  *GUI Tests* - These are tests involving the GUI. They include:"},{"lineNumber":1086,"author":{"gitID":"chanyikwai"},"content":".. _System Tests_ that test MVP by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1087,"author":{"gitID":"chanyikwai"},"content":".. _Unit tests_ that test the individual components. These are in `seedu\\address\\ui` package."},{"lineNumber":1088,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":1089,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1090,"author":{"gitID":"chanyikwai"},"content":"e.g. `seedu\\address\\commons\\StringUtilTest`"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1092,"author":{"gitID":"chanyikwai"},"content":"e.g. `seedu\\address\\storage\\StorageManagerTest`"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1094,"author":{"gitID":"chanyikwai"},"content":"e.g. `seedu\\address\\logic\\LogicManagerTest`"},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":1098,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1101,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":1104,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1105,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d Development Operations"},{"lineNumber":1106,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1107,"author":{"gitID":"chanyikwai"},"content":"Automation and CI tools play a vital role in MVP\u0027s development process. They help to run tests automatically"},{"lineNumber":1108,"author":{"gitID":"chanyikwai"},"content":"to identify integration problems in MVP\u0027s development by ensuring that MVP is not undermined as new"},{"lineNumber":1109,"author":{"gitID":"chanyikwai"},"content":"features are added."},{"lineNumber":1110,"author":{"gitID":"-"},"content":""},{"lineNumber":1111,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":1112,"author":{"gitID":"-"},"content":""},{"lineNumber":1113,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1114,"author":{"gitID":"-"},"content":""},{"lineNumber":1115,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":1124,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":1127,"author":{"gitID":"-"},"content":""},{"lineNumber":1128,"author":{"gitID":"tinyjy94"},"content":"Here are the steps to create a new release:"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1131,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1132,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":1133,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"chanyikwai"},"content":"MVP depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than the following alternatives:"},{"lineNumber":1138,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1139,"author":{"gitID":"chanyikwai"},"content":". Including those libraries in the repo (this bloats the repo size) +"},{"lineNumber":1140,"author":{"gitID":"chanyikwai"},"content":". Requiring developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":1143,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"slothhy"},"content":"* has a need to manage a number of movie theatres"},{"lineNumber":1150,"author":{"gitID":"slothhy"},"content":"* has a need to plan movie schedule for movie theatres"},{"lineNumber":1151,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1152,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":1153,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1154,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"slothhy"},"content":"*Value proposition*: manage schedule faster than a typical mouse/GUI scheduling app"},{"lineNumber":1157,"author":{"gitID":"-"},"content":""},{"lineNumber":1158,"author":{"gitID":"tinyjy94"},"content":"*Feature contribution*: +"},{"lineNumber":1159,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1160,"author":{"gitID":"tinyjy94"},"content":"Chan Jun Yuan"},{"lineNumber":1161,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"Major feature: *Security Utilities(Encrypt/Decrypt)* +"},{"lineNumber":1163,"author":{"gitID":"-"},"content":"This allows the user to encrypt and decrypt the `movieplanner.xml`, which contains cinema scheduling information. As cinema scheduling information is a trade secret, it is important to secure this through encryption. Users can also send the encrypted file to themselves or others to decrypt in order to continue cinema scheduling."},{"lineNumber":1164,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1165,"author":{"gitID":"tinyjy94"},"content":"Minor feature: *Theater commands (add, delete)* +"},{"lineNumber":1166,"author":{"gitID":"tinyjy94"},"content":"`AddTheater` and `DeleteTheater` commands will give user flexibility to expand or shrink the size of the cinema."},{"lineNumber":1167,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1168,"author":{"gitID":"chanyikwai"},"content":"Chan Yik Wai"},{"lineNumber":1169,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1170,"author":{"gitID":"chanyikwai"},"content":"Major feature: *Email* +"},{"lineNumber":1171,"author":{"gitID":"chanyikwai"},"content":"This allows the user to send out emails to the cinema branch managers if there are any updates to the cinema schedules."},{"lineNumber":1172,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1173,"author":{"gitID":"chanyikwai"},"content":"Minor feature: *Shortcut keys* +"},{"lineNumber":1174,"author":{"gitID":"chanyikwai"},"content":"This allows the user to press shortcut keys eg. (Ctrl-Z, Ctrl-Y) to undo and redo."},{"lineNumber":1175,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1176,"author":{"gitID":"-"},"content":"Lai Qi Wei"},{"lineNumber":1177,"author":{"gitID":"-"},"content":""},{"lineNumber":1178,"author":{"gitID":"-"},"content":"Major feature: *Scheduling system* +"},{"lineNumber":1179,"author":{"gitID":"-"},"content":"This allows the user to add a movie to an available timeslot in the cinema\u0027s theater. User will also be able to view the"},{"lineNumber":1180,"author":{"gitID":"-"},"content":"schedule of the cinema theaters."},{"lineNumber":1181,"author":{"gitID":"-"},"content":""},{"lineNumber":1182,"author":{"gitID":"-"},"content":"Minor feature: *Add movie panel to UI* +"},{"lineNumber":1183,"author":{"gitID":"qwlai"},"content":"This allows the user to view a list of movies in real time after adding or deleting a movie."},{"lineNumber":1184,"author":{"gitID":"-"},"content":""},{"lineNumber":1185,"author":{"gitID":"slothhy"},"content":"Oh Han Yi"},{"lineNumber":1186,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":1187,"author":{"gitID":"slothhy"},"content":"Major feature: *Enhance FindMovie command* +"},{"lineNumber":1188,"author":{"gitID":"-"},"content":"This allows the user to find movies by `Tag`, `MovieName` or `StartDate`. This is such that it filters out the result and"},{"lineNumber":1189,"author":{"gitID":"slothhy"},"content":"make it easier for the user to read."},{"lineNumber":1190,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":1191,"author":{"gitID":"qwlai"},"content":"Minor feature: *Movie commands (add, delete)* +"},{"lineNumber":1192,"author":{"gitID":"slothhy"},"content":"This allows the user to add movies and delete movies from the movie list. It also allows the user to edit movie details."},{"lineNumber":1193,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":1194,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":1195,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1196,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1197,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1200,"author":{"gitID":"-"},"content":""},{"lineNumber":1201,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1202,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1203,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1204,"author":{"gitID":"tinyjy94"},"content":"|`* * *` |cinema manager |view a list of movies available for screening |add them to a movie theater"},{"lineNumber":1205,"author":{"gitID":"-"},"content":""},{"lineNumber":1206,"author":{"gitID":"tinyjy94"},"content":"|`* * *` |cinema manager |add a new movie |see a list of available movies"},{"lineNumber":1207,"author":{"gitID":"-"},"content":""},{"lineNumber":1208,"author":{"gitID":"tinyjy94"},"content":"|`* * *` |cinema manager |remove a movie |delete movies that are not popular"},{"lineNumber":1209,"author":{"gitID":"-"},"content":""},{"lineNumber":1210,"author":{"gitID":"tinyjy94"},"content":"|`* * *` |cinema manager |add a new movie theater |have a list of different theaters"},{"lineNumber":1211,"author":{"gitID":"-"},"content":""},{"lineNumber":1212,"author":{"gitID":"tinyjy94"},"content":"|`* * *` |cinema manager |add a movie to available slot in movie theater |screen the movie at the specific slot in the movie theater"},{"lineNumber":1213,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1214,"author":{"gitID":"tinyjy94"},"content":"|`* * *` |cinema manager |see the usage guide |know what commands are available"},{"lineNumber":1215,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1216,"author":{"gitID":"tinyjy94"},"content":"|`* *` |customer-oriented cinema manager |check popularity of movies |schedule more time slots for more popular movies"},{"lineNumber":1217,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1218,"author":{"gitID":"tinyjy94"},"content":"|`* *` |depressed cinema manager |remove cinemas |close down cinemas that are not profiting"},{"lineNumber":1219,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1220,"author":{"gitID":"tinyjy94"},"content":"|`* *` |customer-oriented cinema manager |use ratings of movies |cater to respective demographics timetable"},{"lineNumber":1221,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1222,"author":{"gitID":"tinyjy94"},"content":"|`* *` |cinema manager |filter rating for movies |find appropriate cinema to screen movies"},{"lineNumber":1223,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1224,"author":{"gitID":"tinyjy94"},"content":"|`* *` |careless cinema manager |edit movie details |change details of movie if I make mistakes"},{"lineNumber":1225,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1226,"author":{"gitID":"tinyjy94"},"content":"|`* *` |cinema manager |find movies by name |see what theater is screening the movie"},{"lineNumber":1227,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1228,"author":{"gitID":"tinyjy94"},"content":"|`* *` |cinema manager with many movies |sort movies by name |locate a specific movie easily"},{"lineNumber":1229,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1230,"author":{"gitID":"tinyjy94"},"content":"|`* *` |cinema manager with many movies |add categories for movies |categorize movies into different genre"},{"lineNumber":1231,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":1232,"author":{"gitID":"qwlai"},"content":"|`*` |lazy cinema manager |copy cinema\u0027s schedule | copy the schedule of 1 cinema to another quickly"},{"lineNumber":1233,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1234,"author":{"gitID":"tinyjy94"},"content":"|`*` |lazy cinema manager |have keyboard shortcuts |execute commands quickly"},{"lineNumber":1235,"author":{"gitID":"-"},"content":""},{"lineNumber":1236,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1237,"author":{"gitID":"-"},"content":""},{"lineNumber":1238,"author":{"gitID":"-"},"content":""},{"lineNumber":1239,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":1240,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1241,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1243,"author":{"gitID":"-"},"content":""},{"lineNumber":1244,"author":{"gitID":"chanyikwai"},"content":"(For all use cases below, the *System* is the `MoviePlanner` and the *Actor* is the `Cinema Manager`, unless specified otherwise)"},{"lineNumber":1245,"author":{"gitID":"-"},"content":""},{"lineNumber":1246,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1247,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d Use case: Delete movie"},{"lineNumber":1248,"author":{"gitID":"-"},"content":""},{"lineNumber":1249,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1250,"author":{"gitID":"-"},"content":""},{"lineNumber":1251,"author":{"gitID":"-"},"content":"1.  User requests to list movie."},{"lineNumber":1252,"author":{"gitID":"-"},"content":"2.  MoviePlanner shows a list of movies."},{"lineNumber":1253,"author":{"gitID":"-"},"content":"3.  User requests to delete a specific movie in the list."},{"lineNumber":1254,"author":{"gitID":"-"},"content":"4.  MoviePlanner shows confirmation box for deleting the selected movie."},{"lineNumber":1255,"author":{"gitID":"-"},"content":"5.  User confirms deletion of selected movie."},{"lineNumber":1256,"author":{"gitID":"-"},"content":"6.  MoviePlanner deletes the selected movie upon confirmation."},{"lineNumber":1257,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1258,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1259,"author":{"gitID":"-"},"content":""},{"lineNumber":1260,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1261,"author":{"gitID":"-"},"content":""},{"lineNumber":1262,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1263,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1264,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1265,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1266,"author":{"gitID":"-"},"content":""},{"lineNumber":1267,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1268,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1270,"author":{"gitID":"chanyikwai"},"content":"** 3a1. MoviePlanner shows an error message."},{"lineNumber":1271,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1272,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"chanyikwai"},"content":"[discrete]"},{"lineNumber":1275,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d Use case: Find movie by name"},{"lineNumber":1276,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1277,"author":{"gitID":"chanyikwai"},"content":"*MSS*"},{"lineNumber":1278,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1279,"author":{"gitID":"-"},"content":"1.  User requests to find movie."},{"lineNumber":1280,"author":{"gitID":"-"},"content":"2.  MoviePlanner shows a list of cinema screening corresponding movie."},{"lineNumber":1281,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1282,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1285,"author":{"gitID":"-"},"content":""},{"lineNumber":1286,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1287,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1288,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1289,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1290,"author":{"gitID":"-"},"content":""},{"lineNumber":1291,"author":{"gitID":"chanyikwai"},"content":"* 2b. Movie name does not exist."},{"lineNumber":1292,"author":{"gitID":"chanyikwai"},"content":"+"},{"lineNumber":1293,"author":{"gitID":"chanyikwai"},"content":"Use case ends."},{"lineNumber":1294,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1295,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add Theater"},{"lineNumber":1297,"author":{"gitID":"-"},"content":""},{"lineNumber":1298,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1299,"author":{"gitID":"-"},"content":""},{"lineNumber":1300,"author":{"gitID":"-"},"content":"1.  User requests to add theaters to a specific cinema in the list."},{"lineNumber":1301,"author":{"gitID":"-"},"content":"2.  User enters addtheater command."},{"lineNumber":1302,"author":{"gitID":"-"},"content":"3.  MoviePlanner adds theaters to the selected cinema."},{"lineNumber":1303,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1304,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1307,"author":{"gitID":"-"},"content":""},{"lineNumber":1308,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1309,"author":{"gitID":"-"},"content":"* 2a. User enters wrong format."},{"lineNumber":1310,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1311,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1312,"author":{"gitID":"-"},"content":"** 2a1. MoviePlanner displays wrong format error message."},{"lineNumber":1313,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1314,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1315,"author":{"gitID":"-"},"content":""},{"lineNumber":1316,"author":{"gitID":"-"},"content":"* 2b. User enters too many theaters such that the result is greater than 20."},{"lineNumber":1317,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1318,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1319,"author":{"gitID":"-"},"content":"** 2b1. MoviePlanner displays \"too many theater\" error message."},{"lineNumber":1320,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1321,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1322,"author":{"gitID":"-"},"content":""},{"lineNumber":1323,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":1324,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1326,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1327,"author":{"gitID":"-"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1329,"author":{"gitID":"qwlai"},"content":".  Should be able to hold up to 100 cinemas and 10000 movies and be able to respond to all commands within 1 second."},{"lineNumber":1330,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1331,"author":{"gitID":"qwlai"},"content":".  Should be free to download and use."},{"lineNumber":1332,"author":{"gitID":"qwlai"},"content":".  Should not take up more than 100MB of storage space."},{"lineNumber":1333,"author":{"gitID":"qwlai"},"content":".  Should be able to load storage file from previous editions within 2 seconds."},{"lineNumber":1334,"author":{"gitID":"qwlai"},"content":".  Should come with automated unit test and source code."},{"lineNumber":1335,"author":{"gitID":"tinyjy94"},"content":".  Should be easy to use without any programming knowledge."},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":1338,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1339,"author":{"gitID":"chanyikwai"},"content":"[[Glossary]]"},{"lineNumber":1340,"author":{"gitID":"chanyikwai"},"content":"[appendix]"},{"lineNumber":1341,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1342,"author":{"gitID":"-"},"content":""},{"lineNumber":1343,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1344,"author":{"gitID":"tinyjy94"},"content":"Windows, Linux, Unix, OS-X."},{"lineNumber":1345,"author":{"gitID":"-"},"content":""},{"lineNumber":1346,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1347,"author":{"gitID":"tinyjy94"},"content":"A contact detail that is not meant to be shared with others."},{"lineNumber":1348,"author":{"gitID":"-"},"content":""},{"lineNumber":1349,"author":{"gitID":"chanyikwai"},"content":"[[graphical-user-interface]] Graphical User Interface::"},{"lineNumber":1350,"author":{"gitID":"chanyikwai"},"content":"A type of user interface that allows users to interact with electronic devices through graphical icons and"},{"lineNumber":1351,"author":{"gitID":"chanyikwai"},"content":"visual indicators."},{"lineNumber":1352,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1353,"author":{"gitID":"qwlai"},"content":"[[SMTP]] Simple Mail Transfer Protocol (SMTP)::"},{"lineNumber":1354,"author":{"gitID":"chanyikwai"},"content":"A TCP/IP protocol used in sending and receiving e-mail."},{"lineNumber":1355,"author":{"gitID":"-"},"content":""},{"lineNumber":1356,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"},{"lineNumber":1357,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1358,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1359,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1360,"author":{"gitID":"-"},"content":""},{"lineNumber":1361,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1362,"author":{"gitID":"-"},"content":""},{"lineNumber":1363,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1364,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1365,"author":{"gitID":"-"},"content":""},{"lineNumber":1366,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1367,"author":{"gitID":"-"},"content":""},{"lineNumber":1368,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1369,"author":{"gitID":"-"},"content":""},{"lineNumber":1370,"author":{"gitID":"tinyjy94"},"content":".. Download the jar file and copy into an empty folder."},{"lineNumber":1371,"author":{"gitID":"tinyjy94"},"content":".. Double-click the jar file. +"},{"lineNumber":1372,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1373,"author":{"gitID":"-"},"content":""},{"lineNumber":1374,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1375,"author":{"gitID":"-"},"content":""},{"lineNumber":1376,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1377,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1378,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1379,"author":{"gitID":"-"},"content":""},{"lineNumber":1380,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d Deleting a cinema"},{"lineNumber":1381,"author":{"gitID":"-"},"content":""},{"lineNumber":1382,"author":{"gitID":"qwlai"},"content":". Deleting a cinema while all cinemas are listed"},{"lineNumber":1383,"author":{"gitID":"-"},"content":""},{"lineNumber":1384,"author":{"gitID":"qwlai"},"content":".. Prerequisites: List all cinemas using the `list` command. Multiple cinemas in the list."},{"lineNumber":1385,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1386,"author":{"gitID":"qwlai"},"content":"   Expected: First cinema is deleted from the list. Details of the deleted cinema shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1387,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1388,"author":{"gitID":"qwlai"},"content":"   Expected: No cinema is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1389,"author":{"gitID":"-"},"content":".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"},{"lineNumber":1390,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1391,"author":{"gitID":"-"},"content":""},{"lineNumber":1392,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Theater commands"},{"lineNumber":1393,"author":{"gitID":"-"},"content":". Adding theaters to a cinema"},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":".. Prerequisites: The specified cinema must have less than *20* theaters. Multiple cinemas in the list."},{"lineNumber":1396,"author":{"gitID":"-"},"content":"* The first cinema has *x*(where x is any integer smaller than 20) theaters."},{"lineNumber":1397,"author":{"gitID":"-"},"content":".. Test case: `addtheater 1 th/1` +"},{"lineNumber":1398,"author":{"gitID":"-"},"content":"   Expected: First cinema will have 1 theater added. Details of the resized cinema shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1399,"author":{"gitID":"-"},"content":".. Test case: `addtheater 1 th/0` +"},{"lineNumber":1400,"author":{"gitID":"-"},"content":"   Expected: No theater is added to the first cinema. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1401,"author":{"gitID":"-"},"content":".. Other incorrect addtheater commands to try: `addtheater 0 th/3`, `addtheater 1 th/10` (where 10 + *x* is larger than *20*) +"},{"lineNumber":1402,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1403,"author":{"gitID":"-"},"content":""},{"lineNumber":1404,"author":{"gitID":"-"},"content":". Deleting theaters from a cinema"},{"lineNumber":1405,"author":{"gitID":"-"},"content":""},{"lineNumber":1406,"author":{"gitID":"-"},"content":".. Prerequisites: The specified cinema must have more than *1* theater. Multiple cinemas in the list."},{"lineNumber":1407,"author":{"gitID":"-"},"content":".. Test case: `deletetheater 1 th/1` +"},{"lineNumber":1408,"author":{"gitID":"-"},"content":"   Expected: First cinema will have 1 theater removed from the back. Details of the resized cinema shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1409,"author":{"gitID":"-"},"content":".. Test case: `deletetheater 1 th/0` +"},{"lineNumber":1410,"author":{"gitID":"-"},"content":"   Expected: No theater is removed from the first cinema. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1411,"author":{"gitID":"-"},"content":".. Other incorrect deletetheater commands to try: `deletetheater 0 th/3`, `deletetheater 1 th/10` (where number of theaters in the first cinema is *10* or less). +"},{"lineNumber":1412,"author":{"gitID":"-"},"content":"   Expected: Similar to previous."},{"lineNumber":1413,"author":{"gitID":"-"},"content":""},{"lineNumber":1414,"author":{"gitID":"-"},"content":""},{"lineNumber":1415,"author":{"gitID":"qwlai"},"content":"\u003d\u003d\u003d Scheduling system"},{"lineNumber":1416,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1417,"author":{"gitID":"qwlai"},"content":". Adding a screening to MVP"},{"lineNumber":1418,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1419,"author":{"gitID":"qwlai"},"content":".. Prerequisites: List all cinemas and movies using the list command. Multiple cinemas and movies in the list."},{"lineNumber":1420,"author":{"gitID":"-"},"content":"* The first movie has a duration of 100 minutes. The calculated duration for this screening is 115 minutes."},{"lineNumber":1421,"author":{"gitID":"-"},"content":"* The first movie release date is on 31/03/2018."},{"lineNumber":1422,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1423,"author":{"gitID":"qwlai"},"content":".. Test case:"},{"lineNumber":1424,"author":{"gitID":"qwlai"},"content":"... `addscreening m/1 c/1 th/1 h/01/04/2018 11:00` +"},{"lineNumber":1425,"author":{"gitID":"qwlai"},"content":"... `addscreening m/1 c/1 th/1 h/01/04/2018 12:55` +"},{"lineNumber":1426,"author":{"gitID":"qwlai"},"content":"Expected: This screening will be successfully added to the cinema\u0027s theater. The `BrowserPanel` will show new information about this screening."},{"lineNumber":1427,"author":{"gitID":"qwlai"},"content":"Details of the screening will be shown in the status message."},{"lineNumber":1428,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1429,"author":{"gitID":"qwlai"},"content":".. Test case:"},{"lineNumber":1430,"author":{"gitID":"qwlai"},"content":"... `addscreening m/1 c/1 th/1 h/01/04/2018 11:00` +"},{"lineNumber":1431,"author":{"gitID":"qwlai"},"content":"... `addscreening m/1 c/1 th/1 h/01/04/2018 13:15` +"},{"lineNumber":1432,"author":{"gitID":"qwlai"},"content":"... `addscreening m/1 c/1 th/1 h/01/04/2018 13:00` +"},{"lineNumber":1433,"author":{"gitID":"qwlai"},"content":"Expected: This screening will not be added to the cinema\u0027s theater due to conflicting timeslot."},{"lineNumber":1434,"author":{"gitID":"qwlai"},"content":"An error message \"Please ensure that there is no conflict of screening before and after this. Please also make sure the screening date is after the movie release date.\" will be shown in the status message."},{"lineNumber":1435,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1436,"author":{"gitID":"qwlai"},"content":".. Test case: `addscreening m/1 c/1 th/1 h/29/03/2018 11:00` +"},{"lineNumber":1437,"author":{"gitID":"qwlai"},"content":"Expected: This screening will not be added to the cinema\u0027s theater as the screening date is before the release date of the movie."},{"lineNumber":1438,"author":{"gitID":"qwlai"},"content":"An error message \"Please ensure that there is no conflict of screening before and after this. Please also make sure the screening date is after the movie release date.\" will be shown in the status message."},{"lineNumber":1439,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1440,"author":{"gitID":"qwlai"},"content":".. Test case: `addscreening m/1 c/1 th/1 h/01/04/2018 11:04` +"},{"lineNumber":1441,"author":{"gitID":"qwlai"},"content":"Expected: This screening will not be added to the cinema\u0027s theater as the minutes of the screening is not within the 5 minutes interval."},{"lineNumber":1442,"author":{"gitID":"tinyjy94"},"content":"An error message \"Please provide a valid date and time in the form DD/MM/YYYY HH/mm. With the minutes being in 5 minutes interval. e.g. 05/05/2015 23:0\" will be shown in the status message."},{"lineNumber":1443,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1444,"author":{"gitID":"qwlai"},"content":". Deleting a screening from MVP"},{"lineNumber":1445,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1446,"author":{"gitID":"qwlai"},"content":".. Prerequisites: List all cinemas using the list command."},{"lineNumber":1447,"author":{"gitID":"-"},"content":"* The first cinema\u0027s first theater has only 1 screening and it is on 01/04/2018 11:00. The movie in this screening has a duration of 100 minutes. The screening lasts from 11:00 to 12:55."},{"lineNumber":1448,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1449,"author":{"gitID":"qwlai"},"content":".. Test case: `deletescreening c/1 th/1 h/01/04/2018 11:00` +"},{"lineNumber":1450,"author":{"gitID":"qwlai"},"content":"Expected: This screening is deleted from the cinema\u0027s theater. The `BrowserPanel` will show the updated schedule of the cinema\u0027s theater."},{"lineNumber":1451,"author":{"gitID":"qwlai"},"content":"Details of the screening will be shown in the status message."},{"lineNumber":1452,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1453,"author":{"gitID":"qwlai"},"content":".. Test case: `deletescreening c/1 th/1 h/01/04/2018 11:20` +"},{"lineNumber":1454,"author":{"gitID":"qwlai"},"content":"Expected: This screening is not deleted from the cinema\u0027s theater as the time provided is not the exact time when the screening starts."},{"lineNumber":1455,"author":{"gitID":"qwlai"},"content":"An error message \"Please ensure that the screening exist in the given cinema. Please also ensure that the time given is the exact time when the screening starts.\" will be shown in the status message."},{"lineNumber":1456,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1457,"author":{"gitID":"qwlai"},"content":".. Test case: `deletescreening c/1 th/1 h/01/04/2018 10:20` +"},{"lineNumber":1458,"author":{"gitID":"qwlai"},"content":"Expected: No screening is found."},{"lineNumber":1459,"author":{"gitID":"qwlai"},"content":"An error message \"Please ensure that the screening exist in the given cinema. Please also ensure that the time given is the exact time when the screening starts.\" will be shown in the status message."},{"lineNumber":1460,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1461,"author":{"gitID":"qwlai"},"content":". Navigating the dates in the schedule"},{"lineNumber":1462,"author":{"gitID":"qwlai"},"content":".. Prerequisites: A cinema is selected."},{"lineNumber":1463,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1464,"author":{"gitID":"qwlai"},"content":".. Test case: `jump 28/03/2018` +"},{"lineNumber":1465,"author":{"gitID":"qwlai"},"content":"Expected: This command will bring you to the date of 28/03/2018. You should be able to see the screenings of the cinema on 28/03/2018."},{"lineNumber":1466,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1467,"author":{"gitID":"qwlai"},"content":".. Test case: `jump 28/03/2031` +"},{"lineNumber":1468,"author":{"gitID":"qwlai"},"content":"Expected: This command will fail as the year is not between 2000 to 2030. An error message \"Please provide a valid year. The year provided should be between 2000 and 2030, inclusive of year 2000 and 2030.\" will be shown in the status message."},{"lineNumber":1469,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1470,"author":{"gitID":"qwlai"},"content":".. Test case: `jump 28/03/1999` +"},{"lineNumber":1471,"author":{"gitID":"qwlai"},"content":"Expected: This command will fail as the year is not between 2000 to 2030. An error message \"Please provide a valid year. The year provided should be between 2000 and 2030, inclusive of year 2000 and 2030.\" will be shown in the status message."},{"lineNumber":1472,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":1473,"author":{"gitID":"chanyikwai"},"content":"\u003d\u003d\u003d Sending a email"},{"lineNumber":1474,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1475,"author":{"gitID":"chanyikwai"},"content":". Editing the email message field"},{"lineNumber":1476,"author":{"gitID":"chanyikwai"},"content":".. Prerequisites: The email command\u0027s msg parameter should have at least *1* character."},{"lineNumber":1477,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1478,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email msg/This is a message.` +"},{"lineNumber":1479,"author":{"gitID":"chanyikwai"},"content":"Expected: \"This is a message.\" will be reflected in the Message field of the Email Draft tab."},{"lineNumber":1480,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1481,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email msg/` +"},{"lineNumber":1482,"author":{"gitID":"chanyikwai"},"content":"Expected: This command will fail as the msg parameter is empty."},{"lineNumber":1483,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1484,"author":{"gitID":"chanyikwai"},"content":". Editing the email subject field"},{"lineNumber":1485,"author":{"gitID":"chanyikwai"},"content":".. Prerequisites: The email command\u0027s subj parameter should have at least *1* character."},{"lineNumber":1486,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1487,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email subj/Main subject` +"},{"lineNumber":1488,"author":{"gitID":"chanyikwai"},"content":"Expected: \"Main subject\" will be reflected in the Subject field of the Email Draft tab."},{"lineNumber":1489,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1490,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email subj/` +"},{"lineNumber":1491,"author":{"gitID":"chanyikwai"},"content":"Expected: This command will fail as the subj parameter is empty."},{"lineNumber":1492,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1493,"author":{"gitID":"chanyikwai"},"content":". Editing the email recipient field"},{"lineNumber":1494,"author":{"gitID":"chanyikwai"},"content":".. Prerequisites: The email command\u0027s recp parameter should have at least *1* character."},{"lineNumber":1495,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1496,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email recp/someone@gmail.com` +"},{"lineNumber":1497,"author":{"gitID":"chanyikwai"},"content":"Expected: \"someone@gmail.com\" will be reflected in the Recipients field of the Email Draft tab."},{"lineNumber":1498,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1499,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email recp/` +"},{"lineNumber":1500,"author":{"gitID":"chanyikwai"},"content":"Expected: This command will fail as the msg parameter is empty."},{"lineNumber":1501,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1502,"author":{"gitID":"chanyikwai"},"content":". Logging in using Gmail account in MVP"},{"lineNumber":1503,"author":{"gitID":"chanyikwai"},"content":".. Prerequisites: A Gmail account must be provided to log in to the email feature. The username and password parameter must not be empty."},{"lineNumber":1504,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1505,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email lgn/test@gmail.com:123` +"},{"lineNumber":1506,"author":{"gitID":"chanyikwai"},"content":"Expected: \"You are logged in to test@gmail.com\" will be shown in the status message."},{"lineNumber":1507,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1508,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email lgn/` +"},{"lineNumber":1509,"author":{"gitID":"chanyikwai"},"content":"Expected: This command will fail as the username and password parameters are empty."},{"lineNumber":1510,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1511,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email lgn/test@gmail.com` +"},{"lineNumber":1512,"author":{"gitID":"chanyikwai"},"content":"Expected: This command will fail as the password parameter is empty."},{"lineNumber":1513,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1514,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email lgn/:123` +"},{"lineNumber":1515,"author":{"gitID":"chanyikwai"},"content":"Expected: This command will fail as the username parameter is empty."},{"lineNumber":1516,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1517,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email lgn/test@yahoo.com:123` +"},{"lineNumber":1518,"author":{"gitID":"chanyikwai"},"content":"Expected: This command will fail as the account provided is not a Gmail account."},{"lineNumber":1519,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1520,"author":{"gitID":"chanyikwai"},"content":". Sending an email via MVP"},{"lineNumber":1521,"author":{"gitID":"chanyikwai"},"content":".. Prerequisites: The Subject, Recipients and Message field must not be empty, and you must be logged in with a registered Gmail account and have the *Allow less secured apps* setting turned on."},{"lineNumber":1522,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1523,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email func/send` +"},{"lineNumber":1524,"author":{"gitID":"chanyikwai"},"content":"Expected: Assuming a registered email account \"test@gmail.com\" is successfully logged in. Then \"Email have been sent using test@gmail.com\" will be shown in the status message."},{"lineNumber":1525,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1526,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email func/send` +"},{"lineNumber":1527,"author":{"gitID":"chanyikwai"},"content":"Expected: Assuming a non-registered email account, or an incorrect username or password has been entered."},{"lineNumber":1528,"author":{"gitID":"chanyikwai"},"content":"An error message \"MVP is unable to log in to your gmail account. Please check the following: \" will be shown in the status message."},{"lineNumber":1529,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1530,"author":{"gitID":"chanyikwai"},"content":".. Test case: `email func/send` +"},{"lineNumber":1531,"author":{"gitID":"chanyikwai"},"content":"Expected: Assuming an invalid file path to an attachment had been entered."},{"lineNumber":1532,"author":{"gitID":"chanyikwai"},"content":"An error message \"An unexpected error have occurred. Please try again later.\" will be shown in the status message."},{"lineNumber":1533,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":1534,"author":{"gitID":"chanyikwai"},"content":"\u003c\u003cDeveloperGuide.adoc#, Back to top\u003e\u003e"}],"authorContributionMap":{"chanyikwai":357,"slothhy":72,"tinyjy94":220,"-":587,"qwlai":298}},{"path":"src/test/java/systemtests/EmailCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_ANOTHER_MESSAGE;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_ANOTHER_RECIPIENT;"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_ANOTHER_SUBJECT;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_LOGIN_ACCOUNT;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_MESSAGE;"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_RECIPIENT;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_SUBJECT;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_LOGIN_ACCOUNT;"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MESSAGE;"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_RECIPIENT;"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_SUBJECT;"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.testutil.TypicalEmail.EMAIL_DRAFT_1;"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"import guitests.GuiRobot;"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.testutil.EmailBuilder;"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.testutil.EmailUtil;"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"public class EmailCommandSystemTest extends MoviePlannerSystemTest {"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"    public void draftMessageWithoutSend() {"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"        Model model \u003d getModel();"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"        GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.push(KeyCode.SHIFT, KeyCode.TAB);"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"        /* ------------------------------------- Perform email operations --------------------------------------- */"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"        EmailManager toEdit \u003d EMAIL_DRAFT_1;"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"        /* Case: edit the email draft with all fields (without sending) -\u003e drafted */"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"        String command \u003d \"   \" + EmailCommand.COMMAND_WORD + \"  \""},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"                + EMAIL_DESC_MESSAGE + \"  \" + EMAIL_DESC_SUBJECT + \" \""},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"                + EMAIL_DESC_RECIPIENT + \"   \" + EMAIL_DESC_LOGIN_ACCOUNT + \" \";"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        assertCommandSuccess(command, toEdit);"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"        /* Case: edit the email draft with all fields same as previous email draft except recipient -\u003e drafted */"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"        EmailManager tempEmailManager \u003d null;"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"            tempEmailManager \u003d new EmailBuilder().withMessage(VALID_EMAIL_MESSAGE)"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"                    .withSubject(VALID_EMAIL_SUBJECT)"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"                    .withRecipient(\"anotherPerson@gmail.com\")"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"                    .withLoginAccount(VALID_EMAIL_LOGIN_ACCOUNT)"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"                    .build();"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailLoginInvalidException e) {"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"            e.printStackTrace();"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"        toEdit \u003d tempEmailManager;"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":"        command \u003d EmailCommand.COMMAND_WORD + EMAIL_DESC_MESSAGE + EMAIL_DESC_SUBJECT"},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"                + EMAIL_DESC_ANOTHER_RECIPIENT + EMAIL_DESC_LOGIN_ACCOUNT;"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"        assertCommandSuccess(command, toEdit);"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":"        /* Case: edit the email draft with all fields same as previous email draft except message"},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":"         * -\u003e drafted"},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":"        toEdit \u003d EMAIL_DRAFT_1;"},{"lineNumber":70,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"chanyikwai"},"content":"            tempEmailManager \u003d new EmailBuilder().withMessage(\"Hi Mr. Matthews, This is a new email.\")"},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":"                    .withSubject(VALID_EMAIL_SUBJECT)"},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":"                    .withRecipient(VALID_EMAIL_RECIPIENT)"},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":"                    .withLoginAccount(VALID_EMAIL_LOGIN_ACCOUNT)"},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":"                    .build();"},{"lineNumber":76,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailLoginInvalidException e) {"},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"            e.printStackTrace();"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":"        toEdit \u003d tempEmailManager;"},{"lineNumber":80,"author":{"gitID":"chanyikwai"},"content":"        command \u003d EmailCommand.COMMAND_WORD + EMAIL_DESC_ANOTHER_MESSAGE"},{"lineNumber":81,"author":{"gitID":"chanyikwai"},"content":"                + EMAIL_DESC_SUBJECT"},{"lineNumber":82,"author":{"gitID":"chanyikwai"},"content":"                + EMAIL_DESC_RECIPIENT + EMAIL_DESC_LOGIN_ACCOUNT;"},{"lineNumber":83,"author":{"gitID":"chanyikwai"},"content":"        assertCommandSuccess(command, toEdit);"},{"lineNumber":84,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":85,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":"        /* Case: edit the email draft with all fields same as previous email draft except subject"},{"lineNumber":87,"author":{"gitID":"chanyikwai"},"content":"         * -\u003e drafted"},{"lineNumber":88,"author":{"gitID":"chanyikwai"},"content":"         */"},{"lineNumber":89,"author":{"gitID":"chanyikwai"},"content":"        toEdit \u003d EMAIL_DRAFT_1;"},{"lineNumber":90,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"chanyikwai"},"content":"            tempEmailManager \u003d new EmailBuilder().withMessage(VALID_EMAIL_MESSAGE)"},{"lineNumber":92,"author":{"gitID":"chanyikwai"},"content":"                    .withSubject(\"Scheduled Meeting\")"},{"lineNumber":93,"author":{"gitID":"chanyikwai"},"content":"                    .withRecipient(VALID_EMAIL_RECIPIENT)"},{"lineNumber":94,"author":{"gitID":"chanyikwai"},"content":"                    .withLoginAccount(VALID_EMAIL_LOGIN_ACCOUNT)"},{"lineNumber":95,"author":{"gitID":"chanyikwai"},"content":"                    .build();"},{"lineNumber":96,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailLoginInvalidException e) {"},{"lineNumber":97,"author":{"gitID":"chanyikwai"},"content":"            e.printStackTrace();"},{"lineNumber":98,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"chanyikwai"},"content":"        toEdit \u003d tempEmailManager;"},{"lineNumber":100,"author":{"gitID":"chanyikwai"},"content":"        command \u003d EmailCommand.COMMAND_WORD + EMAIL_DESC_MESSAGE + EMAIL_DESC_ANOTHER_SUBJECT"},{"lineNumber":101,"author":{"gitID":"chanyikwai"},"content":"                + EMAIL_DESC_RECIPIENT + EMAIL_DESC_LOGIN_ACCOUNT;"},{"lineNumber":102,"author":{"gitID":"chanyikwai"},"content":"        assertCommandSuccess(command, toEdit);"},{"lineNumber":103,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":104,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":105,"author":{"gitID":"chanyikwai"},"content":"        /* Case: clear email draft -\u003e cleared */"},{"lineNumber":106,"author":{"gitID":"chanyikwai"},"content":"        command \u003d EmailCommand.COMMAND_WORD + \" \" + \"func/clear\";"},{"lineNumber":107,"author":{"gitID":"chanyikwai"},"content":"        executeCommand(command);"},{"lineNumber":108,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":109,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"chanyikwai"},"content":"     * Executes the {@code EmailCommand} that adds {@code toEdit} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"chanyikwai"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"chanyikwai"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"chanyikwai"},"content":"     * 3. Result display box displays the success message of executing {@code EmailCommand} with the details of"},{"lineNumber":116,"author":{"gitID":"chanyikwai"},"content":"     * {@code toEdit}.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"chanyikwai"},"content":"     * 4. {@code Model}, {@code MessageDraft} and {@code EmailMessagePanel} equal to the corresponding components in"},{"lineNumber":118,"author":{"gitID":"chanyikwai"},"content":"     * the current model added with {@code toEdit}.\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"chanyikwai"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":120,"author":{"gitID":"chanyikwai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":121,"author":{"gitID":"chanyikwai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":122,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"chanyikwai"},"content":"    private void assertCommandSuccess(EmailManager toAdd) {"},{"lineNumber":124,"author":{"gitID":"chanyikwai"},"content":"        assertCommandSuccess(EmailUtil.getEmailCommand(toAdd), toAdd);"},{"lineNumber":125,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":127,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"chanyikwai"},"content":"     * Performs the same verification as {@code assertCommandSuccess(EmailManager)}. Executes {@code command}"},{"lineNumber":129,"author":{"gitID":"chanyikwai"},"content":"     * instead."},{"lineNumber":130,"author":{"gitID":"chanyikwai"},"content":"     * @see EmailCommandSystemTest#assertCommandSuccess(EmailManager)"},{"lineNumber":131,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"chanyikwai"},"content":"    private void assertCommandSuccess(String command, EmailManager toEdit) {"},{"lineNumber":133,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":134,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":135,"author":{"gitID":"chanyikwai"},"content":"        MessageDraft tempMessageDraft \u003d new MessageDraft();"},{"lineNumber":136,"author":{"gitID":"chanyikwai"},"content":"        tempMessageDraft.setMessage(toEdit.getEmailDraft().getMessage());"},{"lineNumber":137,"author":{"gitID":"chanyikwai"},"content":"        tempMessageDraft.setSubject(toEdit.getEmailDraft().getSubject());"},{"lineNumber":138,"author":{"gitID":"chanyikwai"},"content":"        tempMessageDraft.setRecipients(toEdit.getEmailDraft().getRecipient());"},{"lineNumber":139,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":140,"author":{"gitID":"chanyikwai"},"content":"        String loginAccount \u003d EMAIL_DESC_LOGIN_ACCOUNT.substring(5, 39);"},{"lineNumber":141,"author":{"gitID":"chanyikwai"},"content":"        String[] tempLoginAccount \u003d loginAccount.split(\":\");"},{"lineNumber":142,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":143,"author":{"gitID":"chanyikwai"},"content":"            expectedModel.loginEmailAccount(tempLoginAccount);"},{"lineNumber":144,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailLoginInvalidException e) {"},{"lineNumber":145,"author":{"gitID":"chanyikwai"},"content":"            e.printStackTrace();"},{"lineNumber":146,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"chanyikwai"},"content":"        expectedModel.draftEmail(tempMessageDraft);"},{"lineNumber":148,"author":{"gitID":"chanyikwai"},"content":"        expectedModel.getEmailManager();"},{"lineNumber":149,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":150,"author":{"gitID":"chanyikwai"},"content":"        String expectedResultMessage \u003d String.format(EmailCommand.MESSAGE_SUCCESS, expectedModel.getEmailStatus());"},{"lineNumber":151,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":152,"author":{"gitID":"chanyikwai"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":153,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":155,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"chanyikwai"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, EmailManager)} except asserts that"},{"lineNumber":157,"author":{"gitID":"chanyikwai"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"chanyikwai"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"chanyikwai"},"content":"     * 2. {@code Model}, {@code MessageDraft} and {@code EmailMessagePanel} equal to the corresponding components in"},{"lineNumber":160,"author":{"gitID":"chanyikwai"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"chanyikwai"},"content":"     * @see EmailCommandSystemTest#assertCommandSuccess(String, EmailManager)"},{"lineNumber":162,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"chanyikwai"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":164,"author":{"gitID":"chanyikwai"},"content":"        executeCommand(command);"},{"lineNumber":165,"author":{"gitID":"chanyikwai"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":166,"author":{"gitID":"chanyikwai"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":167,"author":{"gitID":"chanyikwai"},"content":"        //assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":168,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":170,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"chanyikwai"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":172,"author":{"gitID":"chanyikwai"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":173,"author":{"gitID":"chanyikwai"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"chanyikwai"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"chanyikwai"},"content":"     * 4. {@code Model}, {@code MessageDraft} and {@code CinemaListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":176,"author":{"gitID":"chanyikwai"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":177,"author":{"gitID":"chanyikwai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":178,"author":{"gitID":"chanyikwai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":179,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"chanyikwai"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":181,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":182,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":183,"author":{"gitID":"chanyikwai"},"content":"        executeCommand(command);"},{"lineNumber":184,"author":{"gitID":"chanyikwai"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":185,"author":{"gitID":"chanyikwai"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":186,"author":{"gitID":"chanyikwai"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":187,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":188}},{"path":"src/test/java/seedu/address/ui/CinemaCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysCinema;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import guitests.guihandles.CinemaCardHandle;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"public class CinemaCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"        Cinema cinema \u003d new CinemaBuilder().build();"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"        CinemaCard cinemaCard \u003d new CinemaCard(cinema, 1);"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"        uiPartRule.setUiPart(cinemaCard);"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"        assertCardDisplay(cinemaCard, cinema, 1);"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    public void equals() {"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"        Cinema cinema \u003d new CinemaBuilder().build();"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"        CinemaCard cinemaCard \u003d new CinemaCard(cinema, 0);"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"        // same cinema, same index -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"        CinemaCard copy \u003d new CinemaCard(cinema, 0);"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"        assertTrue(cinemaCard.equals(copy));"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        // same object -\u003e returns true"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"        assertTrue(cinemaCard.equals(cinemaCard));"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        // null -\u003e returns false"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"        assertFalse(cinemaCard.equals(null));"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        // different types -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        assertFalse(cinemaCard.equals(0));"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"        // different cinema, same index -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"        Cinema differentCinema \u003d new CinemaBuilder().withName(\"differentName\").build();"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"        assertFalse(cinemaCard.equals(new CinemaCard(differentCinema, 0)));"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"        // same cinema, different index -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        assertFalse(cinemaCard.equals(new CinemaCard(cinema, 1)));"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"     * Asserts that {@code cinemaCard} displays the details of {@code expectedCinema} correctly and matches"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"     * {@code expectedId}."},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"    private void assertCardDisplay(CinemaCard cinemaCard, Cinema expectedCinema, int expectedId) {"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        CinemaCardHandle cinemaCardHandle \u003d new CinemaCardHandle(cinemaCard.getRoot());"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"        // verify id is displayed correctly"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", cinemaCardHandle.getId());"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        // verify cinema details are displayed correctly"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        assertCardDisplaysCinema(expectedCinema, cinemaCardHandle);"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"slothhy":2,"-":5,"qwlai":58}},{"path":"src/test/java/seedu/address/ui/GuiUnitTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.NodeNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.UiPartRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":" * A GUI unit test class for MoviePlanner."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final UiPartRule uiPartRule \u003d new UiPartRule();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void tearDown() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Retrieves the {@code query} node owned by the {@code rootNode}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param query name of the CSS selector of the node to retrieve."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return node.orElseThrow(NodeNotFoundException::new);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":36,"qwlai":1}},{"path":"src/test/java/seedu/address/ui/CinemaListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalCinemas;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CINEMA;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysCinema;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import guitests.guihandles.CinemaCardHandle;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import guitests.guihandles.CinemaListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"public class CinemaListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    private static final ObservableList\u003cCinema\u003e TYPICAL_CINEMAS \u003d"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"            FXCollections.observableList(getTypicalCinemas());"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_CINEMA);"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"    private CinemaListPanelHandle cinemaListPanelHandle;"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"        CinemaListPanel cinemaListPanel \u003d new CinemaListPanel(TYPICAL_CINEMAS);"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"        uiPartRule.setUiPart(cinemaListPanel);"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        cinemaListPanelHandle \u003d new CinemaListPanelHandle(getChildNode(cinemaListPanel.getRoot(),"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"                CinemaListPanelHandle.CINEMA_LIST_VIEW_ID));"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"    public void display() {"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_CINEMAS.size(); i++) {"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"            cinemaListPanelHandle.navigateToCard(TYPICAL_CINEMAS.get(i));"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"            Cinema expectedCinema \u003d TYPICAL_CINEMAS.get(i);"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"            CinemaCardHandle actualCard \u003d cinemaListPanelHandle.getCinemaCardHandle(i);"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"            assertCardDisplaysCinema(expectedCinema, actualCard);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"        CinemaCardHandle expectedCard \u003d cinemaListPanelHandle.getCinemaCardHandle(INDEX_SECOND_CINEMA.getZeroBased());"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"        CinemaCardHandle selectedCard \u003d cinemaListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":24,"qwlai":34}},{"path":"src/test/java/seedu/address/ui/MovieListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalMovies.getTypicalMovies;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysMovie;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import guitests.guihandles.MovieCardHandle;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import guitests.guihandles.MovieListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"public class MovieListPanelTest extends GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    private static final ObservableList\u003cMovie\u003e TYPICAL_MOVIES \u003d"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"            FXCollections.observableList(getTypicalMovies());"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    private MovieListPanelHandle movieListPanelHandle;"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"        MovieListPanel movieListPanel \u003d new MovieListPanel(TYPICAL_MOVIES);"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"        uiPartRule.setUiPart(movieListPanel);"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"        movieListPanelHandle \u003d new MovieListPanelHandle(getChildNode(movieListPanel.getRoot(),"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"                MovieListPanelHandle.MOVIE_LIST_VIEW_ID));"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    public void display_cardMatches_returnTrue() {"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_MOVIES.size(); i++) {"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"            movieListPanelHandle.navigateToCard(TYPICAL_MOVIES.get(i));"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"            Movie expectedMovie \u003d TYPICAL_MOVIES.get(i);"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"            MovieCardHandle actualCard \u003d movieListPanelHandle.getMovieCardHandle(i);"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"            assertCardDisplaysMovie(expectedMovie, actualCard);"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"-":5,"qwlai":38}},{"path":"src/test/java/systemtests/MoviePlannerSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import guitests.guihandles.CinemaListPanelHandle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"import guitests.guihandles.MovieListPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.TypicalCinemas;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":" * A system test class for MoviePlanner, which provides access to handles of GUI components and helper methods"},{"lineNumber":40,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":41,"author":{"gitID":"-"},"content":" */"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"public abstract class MoviePlannerSystemTest {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"    protected MoviePlanner getInitialData() {"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        return TypicalCinemas.getTypicalMoviePlanner();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"    public CinemaListPanelHandle getCinemaListPanel() {"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"        return mainWindowHandle.getCinemaListPanel();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"    public MovieListPanelHandle getMovieListPanel() {"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"        return mainWindowHandle.getMovieListPanel();"},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":124,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"qwlai"},"content":"     * Displays all cinemas in the movie planner."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"qwlai"},"content":"    protected void showAllCinemas() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"        assertEquals(getModel().getMoviePlanner().getCinemaList().size(), getModel().getFilteredCinemaList().size());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"qwlai"},"content":"     * Displays all cinemas with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"qwlai"},"content":"    protected void showCinemasWithName(String keyword) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":143,"author":{"gitID":"qwlai"},"content":"        assertTrue(getModel().getFilteredCinemaList().size() \u003c getModel().getMoviePlanner().getCinemaList().size());"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"qwlai"},"content":"     * Selects the cinema at {@code index} of the displayed list."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"qwlai"},"content":"    protected void selectCinema(Index index) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":151,"author":{"gitID":"qwlai"},"content":"        assertEquals(index.getZeroBased(), getCinemaListPanel().getSelectedCardIndex());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"qwlai"},"content":"     * Deletes all cinemas in the movie planner."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"qwlai"},"content":"    protected void deleteAllCinemas() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":159,"author":{"gitID":"qwlai"},"content":"        assertEquals(0, getModel().getMoviePlanner().getCinemaList().size());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":164,"author":{"gitID":"qwlai"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same cinema objects as {@code expectedModel}"},{"lineNumber":165,"author":{"gitID":"qwlai"},"content":"     * and the cinema list panel displays the cinemas in the model correctly."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":172,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedModel.getMoviePlanner(), testApp.readStorageMoviePlanner());"},{"lineNumber":173,"author":{"gitID":"qwlai"},"content":"        assertListMatching(getCinemaListPanel(), expectedModel.getFilteredCinemaList());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"qwlai"},"content":"     * Calls {@code BrowserPanelHandle}, {@code CinemaListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":184,"author":{"gitID":"qwlai"},"content":"        getCinemaListPanel().rememberSelectedCinemaCard();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":189,"author":{"gitID":"qwlai"},"content":"     * of the previously selected cinema."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":192,"author":{"gitID":"qwlai"},"content":"        assertFalse(getCinemaListPanel().isAnyCardSelected());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"qwlai"},"content":"     * Asserts that the browser\u0027s url and the selected card in the cinema list panel remain unchanged."},{"lineNumber":197,"author":{"gitID":"qwlai"},"content":"     * @see CinemaListPanelHandle#isSelectedCinemaCardChanged()"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":200,"author":{"gitID":"qwlai"},"content":"        assertFalse(getCinemaListPanel().isSelectedCinemaCardChanged());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":228,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":229,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":245,"author":{"gitID":"qwlai"},"content":"            assertListMatching(getCinemaListPanel(), getModel().getFilteredCinemaList());"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":255,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":221,"qwlai":38}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import guitests.guihandles.CinemaCardHandle;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import guitests.guihandles.CinemaListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import guitests.guihandles.MovieCardHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"    private static final String DEFAULT_LABEL_STYLE \u003d \"label\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    public static void assertCardEquals(CinemaCardHandle expectedCard, CinemaCardHandle actualCard) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedCinema}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    public static void assertCardDisplaysCinema(Cinema expectedCinema, CinemaCardHandle actualCard) {"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedCinema.getName().fullName, actualCard.getName());"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedCinema.getPhone().value, actualCard.getPhone());"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedCinema.getEmail().value, actualCard.getEmail());"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedCinema.getAddress().value, actualCard.getAddress());"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"        //assertTagsEqual(expectedCinema, actualCard);"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"    private static String getTagColorStyle(String tagName) {"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"        switch (tagName) {"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        case \"classmates\":"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"        case \"owesMoney\":"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"            return \"red\";"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"        case \"colleagues\":"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"        case \"neighbours\":"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"            return \"orange\";"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"        case \"friends\":"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"            return \"grey\";"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"        case \"friend\":"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"        case \"family\":"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"            return \"yellow\";"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":"        case \"husband\":"},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"            return \"brown\";"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"        default:"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"            fail(tagName + \" has no color assignment.\");"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":"            return \"\";"},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":"     * Asserts that tags that are in {@code actualCard} matches all tags in {@code expectedPerson}"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"     * with corresponding color"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"     * @param expectedMovie"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":"     * @param actualCard"},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"    private static void assertTagsEqual(Movie expectedMovie, MovieCardHandle actualCard) {"},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":"        List\u003cString\u003e expectedTags \u003d expectedMovie.getTags()"},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"                .stream()"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"                .map(tag -\u003e tag.tagName)"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"                .collect(Collectors.toList());"},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":"        assertEquals(expectedTags, actualCard.getTags());"},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"        expectedTags.forEach(tag -\u003e assertEquals(Arrays.asList("},{"lineNumber":83,"author":{"gitID":"slothhy"},"content":"                DEFAULT_LABEL_STYLE, getTagColorStyle(tag)), actualCard.getTagStyleClasses(tag)));"},{"lineNumber":84,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"     * Asserts that the list in {@code cinemaListPanelHandle} displays the details of {@code cinemas} correctly and"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"    public static void assertListMatching(CinemaListPanelHandle cinemaListPanelHandle, Cinema... cinemas) {"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        for (int i \u003d 0; i \u003c cinemas.length; i++) {"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"            assertCardDisplaysCinema(cinemas[i], cinemaListPanelHandle.getCinemaCardHandle(i));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"     * Asserts that the list in {@code cinemaListPanelHandle} displays the details of {@code cinemas} correctly and"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"    public static void assertListMatching(CinemaListPanelHandle cinemaListPanelHandle, List\u003cCinema\u003e cinemas) {"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"        assertListMatching(cinemaListPanelHandle, cinemas.toArray(new Cinema[0]));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"     * Asserts the size of the list in {@code cinemaListPanelHandle} equals to {@code size}."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"    public static void assertListSize(CinemaListPanelHandle cinemaListPanelHandle, int size) {"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"        int numberOfPeople \u003d cinemaListPanelHandle.getListSize();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedMovie}."},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"    public static void assertCardDisplaysMovie(Movie expectedMovie, MovieCardHandle actualCard) {"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedMovie.getName().toString(), actualCard.getName());"},{"lineNumber":124,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedMovie.getDuration().toString(), actualCard.getDuration());"},{"lineNumber":125,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedMovie.getRating().toString(), actualCard.getRating());"},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedMovie.getStartDate().toString(), actualCard.getStartDate());"},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":31,"slothhy":16,"-":49,"qwlai":32}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.ALJUNIED;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.ui.CinemaPanelSelectionChangedEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"    private CinemaPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"        selectionChangedEventStub \u003d new CinemaPanelSelectionChangedEvent(new CinemaCard(ALJUNIED, 0));"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":17,"qwlai":4}},{"path":"src/test/java/systemtests/KeyShortcutSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.SENGKANG;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"import guitests.GuiRobot;"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.testutil.CinemaUtil;"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"public class KeyShortcutSystemTest extends MoviePlannerSystemTest {"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"    public void undo() {"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"        /* ------------------------ Perform undo operation on the shown unfiltered list ----------------------------- */"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"        /* Case: add to empty movie planner -\u003e added */"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"        deleteAllCinemas();"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"        /* Case: add a cinema without tags to an empty movie planner -\u003e added */"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"        assertAddCommandSuccess(SENGKANG);"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.push(KeyCode.CONTROL, KeyCode.Z);"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"        assertShortcutSuccess(expectedResultMessage);"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"    public void redo() {"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"        /* ------------------------ Perform redo operation on the shown unfiltered list ----------------------------- */"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        /* Case: add to empty movie planner -\u003e added */"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"        deleteAllCinemas();"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"        /* Case: add a cinema without tags to an empty movie planner -\u003e added */"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"        assertAddCommandSuccess(SENGKANG);"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.push(KeyCode.CONTROL, KeyCode.Z);"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.push(KeyCode.CONTROL, KeyCode.Y);"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"        String expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":"        assertShortcutSuccess(expectedResultMessage);"},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"    public void clear() {"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":"        /* ------------------------ Perform redo operation on the shown unfiltered list ----------------------------- */"},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"        /* Case: add to empty movie planner -\u003e added */"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":"        deleteAllCinemas();"},{"lineNumber":70,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":71,"author":{"gitID":"chanyikwai"},"content":"        /* Case: add a cinema without tags to an empty movie planner -\u003e added */"},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":"        assertAddCommandSuccess(SENGKANG);"},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":"        /* Case: clear list through shortcut key -\u003e list of contacts deleted */"},{"lineNumber":76,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.push(KeyCode.ALT, KeyCode.SHIFT, KeyCode.C);"},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"        String expectedResultMessage \u003d ClearCommand.MESSAGE_SUCCESS;"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":"        assertShortcutSuccess(expectedResultMessage);"},{"lineNumber":80,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":82,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"chanyikwai"},"content":"    public void list() {"},{"lineNumber":84,"author":{"gitID":"chanyikwai"},"content":"        /* ------------------------ Perform redo operation on the shown unfiltered list ----------------------------- */"},{"lineNumber":85,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":"        /* Case: add to empty movie planner -\u003e added */"},{"lineNumber":87,"author":{"gitID":"chanyikwai"},"content":"        deleteAllCinemas();"},{"lineNumber":88,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":89,"author":{"gitID":"chanyikwai"},"content":"        /* Case: add a cinema without tags to an empty movie planner -\u003e added */"},{"lineNumber":90,"author":{"gitID":"chanyikwai"},"content":"        assertAddCommandSuccess(SENGKANG);"},{"lineNumber":91,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":92,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":93,"author":{"gitID":"chanyikwai"},"content":"        /* Case: clear list through shortcut key -\u003e list of contacts deleted */"},{"lineNumber":94,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.push(KeyCode.CONTROL, KeyCode.L);"},{"lineNumber":95,"author":{"gitID":"chanyikwai"},"content":"        String expectedResultMessage \u003d ListCommand.MESSAGE_SUCCESS;"},{"lineNumber":96,"author":{"gitID":"chanyikwai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":97,"author":{"gitID":"chanyikwai"},"content":"        assertShortcutSuccess(expectedResultMessage);"},{"lineNumber":98,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":100,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"chanyikwai"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"chanyikwai"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"chanyikwai"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"chanyikwai"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":105,"author":{"gitID":"chanyikwai"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"chanyikwai"},"content":"     * 4. {@code Model}, {@code Storage} and {@code CinemaListPanel} equal to the corresponding components in"},{"lineNumber":107,"author":{"gitID":"chanyikwai"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"chanyikwai"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"chanyikwai"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"chanyikwai"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"chanyikwai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":113,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"chanyikwai"},"content":"    private void assertAddCommandSuccess(Cinema toAdd) {"},{"lineNumber":115,"author":{"gitID":"chanyikwai"},"content":"        assertAddCommandSuccess(CinemaUtil.getAddCommand(toAdd), toAdd);"},{"lineNumber":116,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":118,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"chanyikwai"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Cinema)}. Executes {@code command}"},{"lineNumber":120,"author":{"gitID":"chanyikwai"},"content":"     * instead."},{"lineNumber":121,"author":{"gitID":"chanyikwai"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Cinema)"},{"lineNumber":122,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"chanyikwai"},"content":"    private void assertAddCommandSuccess(String command, Cinema toAdd) {"},{"lineNumber":124,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":125,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":126,"author":{"gitID":"chanyikwai"},"content":"            expectedModel.addCinema(toAdd);"},{"lineNumber":127,"author":{"gitID":"chanyikwai"},"content":"        } catch (DuplicateCinemaException dce) {"},{"lineNumber":128,"author":{"gitID":"chanyikwai"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":129,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"chanyikwai"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":131,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":132,"author":{"gitID":"chanyikwai"},"content":"        assertAddCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":133,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":135,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"chanyikwai"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Cinema)} except asserts that"},{"lineNumber":137,"author":{"gitID":"chanyikwai"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"chanyikwai"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"chanyikwai"},"content":"     * 2. {@code Model}, {@code Storage} and {@code CinemaListPanel} equal to the corresponding components in"},{"lineNumber":140,"author":{"gitID":"chanyikwai"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"chanyikwai"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Cinema)"},{"lineNumber":142,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"chanyikwai"},"content":"    private void assertAddCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":144,"author":{"gitID":"chanyikwai"},"content":"        executeCommand(command);"},{"lineNumber":145,"author":{"gitID":"chanyikwai"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":146,"author":{"gitID":"chanyikwai"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":147,"author":{"gitID":"chanyikwai"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":148,"author":{"gitID":"chanyikwai"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":149,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":151,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"chanyikwai"},"content":"     * Executes the {@code UndoCommand/RedoCommand} that undoes {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"chanyikwai"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"chanyikwai"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"chanyikwai"},"content":"     * 3. Result display box displays the success message of executing {@code UndoCommand/RedoCommand}. \u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"chanyikwai"},"content":"     * 4. {@code Model}, {@code Storage} and {@code CinemaListPanel} equal to the corresponding components in"},{"lineNumber":157,"author":{"gitID":"chanyikwai"},"content":"     * the current model after executing {@code UndoCommand/RedoCommand}.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"chanyikwai"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"chanyikwai"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":160,"author":{"gitID":"chanyikwai"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":161,"author":{"gitID":"chanyikwai"},"content":"     * {@code MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"chanyikwai"},"content":"     * @see MoviePlannerSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":163,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"chanyikwai"},"content":"    private void assertShortcutSuccess(String expectedResultMessage) {"},{"lineNumber":165,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":166,"author":{"gitID":"chanyikwai"},"content":"        assertShortcutSuccess(expectedModel, expectedResultMessage);"},{"lineNumber":167,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":169,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"chanyikwai"},"content":"     * Performs the same verification as {@code assertShortcutSuccess(String, Cinema)} except asserts that"},{"lineNumber":171,"author":{"gitID":"chanyikwai"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":172,"author":{"gitID":"chanyikwai"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":173,"author":{"gitID":"chanyikwai"},"content":"     * 2. {@code Model}, {@code Storage} and {@code CinemaListPanel} equal to the corresponding components in"},{"lineNumber":174,"author":{"gitID":"chanyikwai"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"chanyikwai"},"content":"    private void assertShortcutSuccess(Model expectedModel, String expectedResultMessage) {"},{"lineNumber":177,"author":{"gitID":"chanyikwai"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":178,"author":{"gitID":"chanyikwai"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":179,"author":{"gitID":"chanyikwai"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":180,"author":{"gitID":"chanyikwai"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":181,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":175,"-":4,"qwlai":3}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"import seedu.address.storage.XmlSerializableMoviePlanner;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    protected static final String MOVIE_PLANNER_NAME \u003d \"Test\";"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    protected Supplier\u003cReadOnlyMoviePlanner\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    public TestApp(Supplier\u003cReadOnlyMoviePlanner\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"            createDataFileWithData(new XmlSerializableMoviePlanner(this.initialDataSupplier.get()),"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"        userPrefs.setMoviePlannerFilePath(saveFileLocation);"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"        userPrefs.setMoviePlannerName(MOVIE_PLANNER_NAME);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"     * Returns a defensive copy of the movie planner data stored inside the storage file."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"    public MoviePlanner readStorageMoviePlanner() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"            return new MoviePlanner(storage.readMoviePlanner().get());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"            throw new AssertionError(\"Data is not in the MoviePlanner format.\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        return storage.getMoviePlannerFilePath();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":98,"author":{"gitID":"chanyikwai"},"content":"        Model copy \u003d new ModelManager((model.getMoviePlanner()), new UserPrefs(), new EmailManager());"},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredCinemaList());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":2,"-":107,"qwlai":15}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"    private HashMap\u003cString, String\u003e keywordColorCoding;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCoding \u003d commandBox.initializeKeywordColorCoding();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"chanyikwai"},"content":"    public void initializeKeywordColorCoding_isAddGreen_returnTrue() {"},{"lineNumber":135,"author":{"gitID":"chanyikwai"},"content":"        String addCommandKeyword \u003d \"add\";"},{"lineNumber":136,"author":{"gitID":"chanyikwai"},"content":"        String correctKeywordColor \u003d \"white\";"},{"lineNumber":137,"author":{"gitID":"chanyikwai"},"content":"        assertEqualCommandKeywordTag(addCommandKeyword, correctKeywordColor);"},{"lineNumber":138,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":140,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"chanyikwai"},"content":"    public void initializeKeywordColorCoding_isAddGreen_returnFalse() {"},{"lineNumber":142,"author":{"gitID":"chanyikwai"},"content":"        String addCommandKeyword \u003d \"add\";"},{"lineNumber":143,"author":{"gitID":"chanyikwai"},"content":"        String wrongKeywordColor \u003d \"yellow\";"},{"lineNumber":144,"author":{"gitID":"chanyikwai"},"content":"        assertNotEqualCommandKeywordTag(addCommandKeyword, wrongKeywordColor);"},{"lineNumber":145,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":147,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"chanyikwai"},"content":"    public void initializeKeywordColorCoding_isListYellow_returnTrue() {"},{"lineNumber":149,"author":{"gitID":"chanyikwai"},"content":"        String listCommandKeyword \u003d \"list\";"},{"lineNumber":150,"author":{"gitID":"chanyikwai"},"content":"        String correctKeywordColor \u003d \"white\";"},{"lineNumber":151,"author":{"gitID":"chanyikwai"},"content":"        assertEqualCommandKeywordTag(listCommandKeyword, correctKeywordColor);"},{"lineNumber":152,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":154,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"chanyikwai"},"content":"    public void initializeKeywordColorCoding_isListYellow_returnFalse() {"},{"lineNumber":156,"author":{"gitID":"chanyikwai"},"content":"        String listCommandKeyword \u003d \"list\";"},{"lineNumber":157,"author":{"gitID":"chanyikwai"},"content":"        String wrongKeywordColor \u003d \"blue\";"},{"lineNumber":158,"author":{"gitID":"chanyikwai"},"content":"        assertNotEqualCommandKeywordTag(listCommandKeyword, wrongKeywordColor);"},{"lineNumber":159,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":161,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"chanyikwai"},"content":"    public void initializeKeywordColorCoding_isDeleteRed_returnTrue() {"},{"lineNumber":163,"author":{"gitID":"chanyikwai"},"content":"        String deleteCommandKeyword \u003d \"delete\";"},{"lineNumber":164,"author":{"gitID":"chanyikwai"},"content":"        String correctKeywordColor \u003d \"white\";"},{"lineNumber":165,"author":{"gitID":"chanyikwai"},"content":"        assertEqualCommandKeywordTag(deleteCommandKeyword, correctKeywordColor);"},{"lineNumber":166,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":168,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":169,"author":{"gitID":"chanyikwai"},"content":"    public void initializeKeywordColorCoding_isDeleteRed_returnFalse() {"},{"lineNumber":170,"author":{"gitID":"chanyikwai"},"content":"        String deleteCommandKeyword \u003d \"delete\";"},{"lineNumber":171,"author":{"gitID":"chanyikwai"},"content":"        String wrongKeywordColor \u003d \"brown\";"},{"lineNumber":172,"author":{"gitID":"chanyikwai"},"content":"        assertNotEqualCommandKeywordTag(deleteCommandKeyword, wrongKeywordColor);"},{"lineNumber":173,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":175,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"chanyikwai"},"content":"    public void initializeKeywordColorCoding_isFindBlue_returnTrue() {"},{"lineNumber":177,"author":{"gitID":"chanyikwai"},"content":"        String findCommandKeyword \u003d \"find\";"},{"lineNumber":178,"author":{"gitID":"chanyikwai"},"content":"        String correctKeywordColor \u003d \"white\";"},{"lineNumber":179,"author":{"gitID":"chanyikwai"},"content":"        assertEqualCommandKeywordTag(findCommandKeyword, correctKeywordColor);"},{"lineNumber":180,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":182,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"chanyikwai"},"content":"    public void initializeKeywordColorCoding_isFindBlue_returnFalse() {"},{"lineNumber":184,"author":{"gitID":"chanyikwai"},"content":"        String findCommandKeyword \u003d \"find\";"},{"lineNumber":185,"author":{"gitID":"chanyikwai"},"content":"        String wrongKeywordColor \u003d \"pink\";"},{"lineNumber":186,"author":{"gitID":"chanyikwai"},"content":"        assertNotEqualCommandKeywordTag(findCommandKeyword, wrongKeywordColor);"},{"lineNumber":187,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":189,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"chanyikwai"},"content":"    public void initializeKeywordColorCoding_isClearRed_returnTrue() {"},{"lineNumber":191,"author":{"gitID":"chanyikwai"},"content":"        String clearCommandKeyword \u003d \"clear\";"},{"lineNumber":192,"author":{"gitID":"chanyikwai"},"content":"        String correctKeywordColor \u003d \"white\";"},{"lineNumber":193,"author":{"gitID":"chanyikwai"},"content":"        assertEqualCommandKeywordTag(clearCommandKeyword, correctKeywordColor);"},{"lineNumber":194,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":196,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":197,"author":{"gitID":"chanyikwai"},"content":"    public void initializeKeywordColorCoding_isClearRed_returnFalse() {"},{"lineNumber":198,"author":{"gitID":"chanyikwai"},"content":"        String clearCommandKeyword \u003d \"clear\";"},{"lineNumber":199,"author":{"gitID":"chanyikwai"},"content":"        String wrongKeywordColor \u003d \"blue\";"},{"lineNumber":200,"author":{"gitID":"chanyikwai"},"content":"        assertNotEqualCommandKeywordTag(clearCommandKeyword, wrongKeywordColor);"},{"lineNumber":201,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":203,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"chanyikwai"},"content":"    public void initializeKeywordColorCoding_isHelpBlue_returnTrue() {"},{"lineNumber":205,"author":{"gitID":"chanyikwai"},"content":"        String helpCommandKeyword \u003d \"help\";"},{"lineNumber":206,"author":{"gitID":"chanyikwai"},"content":"        String correctKeywordColor \u003d \"white\";"},{"lineNumber":207,"author":{"gitID":"chanyikwai"},"content":"        assertEqualCommandKeywordTag(helpCommandKeyword, correctKeywordColor);"},{"lineNumber":208,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":210,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"chanyikwai"},"content":"    public void initializeKeywordColorCoding_isHelpBlue_returnFalse() {"},{"lineNumber":212,"author":{"gitID":"chanyikwai"},"content":"        String helpCommandKeyword \u003d \"help\";"},{"lineNumber":213,"author":{"gitID":"chanyikwai"},"content":"        String wrongKeywordColor \u003d \"brown\";"},{"lineNumber":214,"author":{"gitID":"chanyikwai"},"content":"        assertNotEqualCommandKeywordTag(helpCommandKeyword, wrongKeywordColor);"},{"lineNumber":215,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":217,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":219,"author":{"gitID":"chanyikwai"},"content":"     *     - tag is cleared"},{"lineNumber":220,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"chanyikwai"},"content":"    private void assertEqualCommandKeywordTag(String commandKeyword, String correctKeywordColor) {"},{"lineNumber":222,"author":{"gitID":"chanyikwai"},"content":"        commandBoxHandle.run(commandKeyword);"},{"lineNumber":223,"author":{"gitID":"chanyikwai"},"content":"        assertEqualColor(correctKeywordColor, commandKeyword);"},{"lineNumber":224,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"chanyikwai"},"content":"     *     - tag is cleared"},{"lineNumber":229,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"chanyikwai"},"content":"    private void assertNotEqualCommandKeywordTag(String commandKeyword, String wrongKeywordColor) {"},{"lineNumber":231,"author":{"gitID":"chanyikwai"},"content":"        commandBoxHandle.run(commandKeyword);"},{"lineNumber":232,"author":{"gitID":"chanyikwai"},"content":"        assertDifferentColor(wrongKeywordColor, commandKeyword);"},{"lineNumber":233,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":235,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"chanyikwai"},"content":"     * Verifies that the expected command keyword color is the same as {@code correctKeywordColor}"},{"lineNumber":237,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"chanyikwai"},"content":"    private void assertEqualColor(String correctKeywordColor, String commandKeyword) {"},{"lineNumber":239,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(correctKeywordColor, keywordColorCoding.get(commandKeyword));"},{"lineNumber":240,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":242,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"chanyikwai"},"content":"     * Verifies that the expected command keyword color is the not the same as {@code correctKeywordColor}"},{"lineNumber":244,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"chanyikwai"},"content":"    private void assertDifferentColor(String wrongKeywordColor, String commandKeyword) {"},{"lineNumber":246,"author":{"gitID":"chanyikwai"},"content":"        assertNotEquals(wrongKeywordColor, keywordColorCoding.get(commandKeyword));"},{"lineNumber":247,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":253,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":117,"-":161}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"        String defaultConfigAsString \u003d \"App title : MoVie Planner\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":31,"qwlai":1}},{"path":"src/test/java/seedu/address/commons/core/index/IndexTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core.index;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class IndexTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void createOneBasedIndex() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        assertCreateOneBasedFailure(0);"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // convert from one-based index to zero-based index"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void createZeroBasedIndex() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCreateZeroBasedFailure(-1);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // convert from zero-based index to one-based index"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidZeroBasedIndex, true);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidOneBasedIndex, false);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            if (isZeroBased) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                Index.fromZeroBased(invalidIndex);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                Index.fromOneBased(invalidIndex);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            fail(\"The expected IndexOutOfBoundsException was not thrown.\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IndexOutOfBoundsException ie) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            // expected behaviour"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"        final Index fifthCinemaIndex \u003d Index.fromOneBased(5);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        assertTrue(fifthCinemaIndex.equals(Index.fromOneBased(5)));"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        assertTrue(fifthCinemaIndex.equals(Index.fromZeroBased(4)));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"        assertTrue(fifthCinemaIndex.equals(fifthCinemaIndex));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"        assertFalse(fifthCinemaIndex.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        assertFalse(fifthCinemaIndex.equals(5.0f));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        assertFalse(fifthCinemaIndex.equals(Index.fromOneBased(1)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":86,"qwlai":7}},{"path":"src/test/java/seedu/address/commons/util/AppUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class AppUtilTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"        assertNotNull(AppUtil.getImage(\"/images/calendar.png\"));"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        AppUtil.getImage(null);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalArgumentException.class);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        thrown.expectMessage(errorMessage);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        AppUtil.checkArgument(false,  errorMessage);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":46,"qwlai":1}},{"path":"src/test/java/seedu/address/ui/MovieCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysMovie;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import guitests.guihandles.MovieCardHandle;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.MovieBuilder;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"public class MovieCardTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    private Movie movie;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"    private MovieCard movieCard;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    @Before"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    public void setUp() throws Exception {"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"        movie \u003d new MovieBuilder().build();"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"        movieCard \u003d new MovieCard(movie, 1);"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    public void display_checkDetails_displayedCorrectly() {"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"        uiPartRule.setUiPart(movieCard);"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"        assertCardDisplay(movieCard, movie, 1);"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    public void equals_sameNameSameIndex_returnTrue() {"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"        MovieCard copy \u003d new MovieCard(movie, 1);"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        assertTrue(movieCard.equals(copy));"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"    public void equals_checkNull_returnFalse() {"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        assertFalse(movieCard.equals(null));"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"    public void equals_sameMovieCard_returnTrue() {"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"        assertTrue(movieCard.equals(movieCard));"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    public void equals_differentMovieSameIndex_returnFalse() {"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"        Movie differentMovie \u003d new MovieBuilder().withMovieName(\"differentName\").build();"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"        assertFalse(movieCard.equals((new MovieCard(differentMovie, 1))));"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"    public void equals_sameMovieDifferentIndex_returnFalse() {"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        assertFalse(movieCard.equals(new MovieCard(movie, 2)));"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"     * Asserts that {@code movieCard} displays the details of {@code expectedMovie} correctly and matches"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"     * {@code expectedId}."},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"    private void assertCardDisplay(MovieCard movieCard, Movie expectedMovie, int expectedId) {"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"        MovieCardHandle movieCardHandle \u003d new MovieCardHandle(movieCard.getRoot());"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"        // verify id is displayed correctly"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", movieCardHandle.getId());"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        // verify movie details are displayed correctly"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"        assertCardDisplaysMovie(expectedMovie, movieCardHandle);"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"-":5,"qwlai":70}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.model.MoviePlannerChangedEvent;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    private static final MoviePlannerChangedEvent EVENT_STUB \u003d new MoviePlannerChangedEvent(new MoviePlanner());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"        // after movie planner is updated"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":71,"qwlai":4}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import seedu.address.storage.XmlAdaptedCinema;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import seedu.address.storage.XmlAdaptedScreening;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.storage.XmlAdaptedTheater;"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"import seedu.address.storage.XmlSerializableMoviePlanner;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.MoviePlannerBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validMoviePlanner.xml\");"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    private static final File MISSING_CINEMA_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingCinemaField.xml\");"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"    private static final File INVALID_CINEMA_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidCinemaField.xml\");"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    private static final File VALID_CINEMA_FILE \u003d new File(TEST_DATA_FOLDER + \"validCinema.xml\");"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempMoviePlanner.xml\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"    private static final String VALID_NAME \u003d \"Hans Cinema\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"superhero\"));"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"    private static final ArrayList\u003cXmlAdaptedScreening\u003e VALID_SCREENING \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"    private static final List\u003cXmlAdaptedTheater\u003e VALID_THEATERLIST \u003d"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"            Collections.singletonList(new XmlAdaptedTheater(1, VALID_SCREENING));"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":"    private static final ArrayList\u003cXmlAdaptedTheater\u003e VALID_THEATER \u003d new ArrayList\u003c\u003e(VALID_THEATERLIST);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        XmlUtil.getDataFromFile(null, MoviePlanner.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, MoviePlanner.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, MoviePlanner.class);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"        MoviePlanner dataFromFile \u003d XmlUtil.getDataFromFile("},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"                VALID_FILE, XmlSerializableMoviePlanner.class).toModelType();"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"        assertEquals(9, dataFromFile.getCinemaList().size());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"    public void xmlAdaptedCinemaFromFile_fileWithMissingCinemaField_validResult() throws Exception {"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedCinema actualCinema \u003d XmlUtil.getDataFromFile("},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"                MISSING_CINEMA_FIELD_FILE, XmlAdaptedCinemaWithRootElement.class);"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedCinema expectedCinema \u003d new XmlAdaptedCinema("},{"lineNumber":91,"author":{"gitID":"slothhy"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_THEATER);"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedCinema, actualCinema);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"    public void xmlAdaptedCinemaFromFile_fileWithInvalidCinemaField_validResult() throws Exception {"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedCinema actualCinema \u003d XmlUtil.getDataFromFile("},{"lineNumber":98,"author":{"gitID":"qwlai"},"content":"                INVALID_CINEMA_FIELD_FILE, XmlAdaptedCinemaWithRootElement.class);"},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedCinema expectedCinema \u003d new XmlAdaptedCinema("},{"lineNumber":100,"author":{"gitID":"slothhy"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_THEATER);"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedCinema, actualCinema);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"    public void xmlAdaptedCinemaFromFile_fileWithValidCinema_validResult() throws Exception {"},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedCinema actualCinema \u003d XmlUtil.getDataFromFile("},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"                VALID_CINEMA_FILE, XmlAdaptedCinemaWithRootElement.class);"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedCinema expectedCinema \u003d new XmlAdaptedCinema("},{"lineNumber":109,"author":{"gitID":"slothhy"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_THEATER);"},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedCinema, actualCinema);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"        XmlUtil.saveDataToFile(null, new MoviePlanner());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new MoviePlanner());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":"        XmlSerializableMoviePlanner dataToWrite \u003d new XmlSerializableMoviePlanner(new MoviePlanner());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":136,"author":{"gitID":"qwlai"},"content":"        XmlSerializableMoviePlanner dataFromFile \u003d XmlUtil.getDataFromFile("},{"lineNumber":137,"author":{"gitID":"qwlai"},"content":"                TEMP_FILE, XmlSerializableMoviePlanner.class);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"qwlai"},"content":"        MoviePlannerBuilder builder \u003d new MoviePlannerBuilder(new MoviePlanner());"},{"lineNumber":141,"author":{"gitID":"qwlai"},"content":"        dataToWrite \u003d new XmlSerializableMoviePlanner("},{"lineNumber":142,"author":{"gitID":"qwlai"},"content":"                builder.withCinema(new CinemaBuilder().build()).build());"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":145,"author":{"gitID":"qwlai"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableMoviePlanner.class);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"qwlai"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedCinema}"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"qwlai"},"content":"    @XmlRootElement(name \u003d \"cinema\")"},{"lineNumber":154,"author":{"gitID":"qwlai"},"content":"    private static class XmlAdaptedCinemaWithRootElement extends XmlAdaptedCinema {}"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":4,"tinyjy94":4,"-":100,"qwlai":47}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"    public void getFilteredCinemaList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"        logic.getFilteredCinemaList().remove(0);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager(model.getMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"     *      - {@code expectedModel}\u0027s movie planner was saved to the storage file."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":119,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":2,"-":118,"qwlai":5}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_CINEMA));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":27,"qwlai":2}},{"path":"src/test/java/seedu/address/logic/parser/MoviePlannerParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.EditCommand.EditCinemaDescriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.NameContainsKeywordsPredicate;"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaUtil;"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.EditCinemaDescriptorBuilder;"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"public class MoviePlannerParserTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    private final MoviePlannerParser parser \u003d new MoviePlannerParser();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        Cinema cinema \u003d new CinemaBuilder().build();"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(CinemaUtil.getAddCommand(cinema));"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"        assertEquals(new AddCommand(cinema), command);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    public void parseCommand_addUsingAlias() throws Exception {"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"        Cinema cinema \u003d new CinemaBuilder().build();"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(CinemaUtil.getAddUsingAliasCommand(cinema));"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"        assertEquals(new AddCommand(cinema), command);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"    public void parseCommand_clearUsingAlias() throws Exception {"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CINEMA.getOneBased());"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_CINEMA), command);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"    public void parseCommand_deleteUsingAlias() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_CINEMA.getOneBased());"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_CINEMA), command);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"        Cinema cinema \u003d new CinemaBuilder().build();"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder(cinema).build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":90,"author":{"gitID":"tinyjy94"},"content":"                + INDEX_FIRST_CINEMA.getOneBased() + \" \" + CinemaUtil.getEditedCinemaDetails(cinema));"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_CINEMA, descriptor), command);"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"    public void parseCommand_editUsingAlias() throws Exception {"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        Cinema cinema \u003d new CinemaBuilder().build();"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder(cinema).build();"},{"lineNumber":98,"author":{"gitID":"qwlai"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":"                + INDEX_FIRST_CINEMA.getOneBased() + \" \" + CinemaUtil.getEditedCinemaDetails(cinema));"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_CINEMA, descriptor), command);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":113,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":"    public void parseCommand_findUsingAlias() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"qwlai"},"content":"    public void parseCommand_helpUsingAlias() throws Exception {"},{"lineNumber":133,"author":{"gitID":"qwlai"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS) instanceof HelpCommand);"},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_ALIAS + \" 3\") instanceof HelpCommand);"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"qwlai"},"content":"    public void parseCommand_historyUsingAlias() throws Exception {"},{"lineNumber":152,"author":{"gitID":"qwlai"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"},{"lineNumber":153,"author":{"gitID":"qwlai"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"qwlai"},"content":"    public void parseCommand_listUsingAlias() throws Exception {"},{"lineNumber":171,"author":{"gitID":"qwlai"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"},{"lineNumber":172,"author":{"gitID":"qwlai"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"},{"lineNumber":173,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":178,"author":{"gitID":"qwlai"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CINEMA.getOneBased());"},{"lineNumber":179,"author":{"gitID":"qwlai"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_CINEMA), command);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"qwlai"},"content":"    public void parseCommand_selectUsingAlias() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":185,"author":{"gitID":"qwlai"},"content":"                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_CINEMA.getOneBased());"},{"lineNumber":186,"author":{"gitID":"qwlai"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_CINEMA), command);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"qwlai"},"content":"    public void parseCommand_redoCommandWordUsingAlias_returnsRedoCommand() throws Exception {"},{"lineNumber":197,"author":{"gitID":"qwlai"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"qwlai"},"content":"    public void parseCommand_undoCommandWordUsingAlias_returnsUndoCommand() throws Exception {"},{"lineNumber":209,"author":{"gitID":"qwlai"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tinyjy94":2,"-":152,"qwlai":72}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_SENGKANG;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_TAMPINES;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_SENGKANG;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_TAMPINES;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SENGKANG;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_SENGKANG;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_TAMPINES;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_SENGKANG;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_TAMPINES;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_SENGKANG;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_TAMPINES;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SENGKANG;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_SENGKANG;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_TAMPINES;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CINEMA;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CINEMA;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.EditCommand.EditCinemaDescriptor;"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.EditCinemaDescriptorBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, VALID_NAME_SENGKANG, MESSAGE_INVALID_FORMAT);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_SENGKANG, MESSAGE_INVALID_FORMAT);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_SENGKANG, MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_SENGKANG, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_TAMPINES + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"                        + VALID_ADDRESS_SENGKANG + VALID_PHONE_SENGKANG, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"        Index targetIndex \u003d INDEX_SECOND_CINEMA;"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_TAMPINES"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_SENGKANG + ADDRESS_DESC_SENGKANG + NAME_DESC_SENGKANG;"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder().withName(VALID_NAME_SENGKANG)"},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"                .withPhone(VALID_PHONE_TAMPINES).withEmail(VALID_EMAIL_SENGKANG).withAddress(VALID_ADDRESS_SENGKANG)"},{"lineNumber":100,"author":{"gitID":"slothhy"},"content":"                .build();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"        Index targetIndex \u003d INDEX_FIRST_CINEMA;"},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_TAMPINES + EMAIL_DESC_SENGKANG;"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder().withPhone(VALID_PHONE_TAMPINES)"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"                .withEmail(VALID_EMAIL_SENGKANG).build();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"        Index targetIndex \u003d INDEX_THIRD_CINEMA;"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_SENGKANG;"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder().withName(VALID_NAME_SENGKANG).build();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_SENGKANG;"},{"lineNumber":129,"author":{"gitID":"qwlai"},"content":"        descriptor \u003d new EditCinemaDescriptorBuilder().withPhone(VALID_PHONE_SENGKANG).build();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_SENGKANG;"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"        descriptor \u003d new EditCinemaDescriptorBuilder().withEmail(VALID_EMAIL_SENGKANG).build();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // address"},{"lineNumber":140,"author":{"gitID":"qwlai"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_SENGKANG;"},{"lineNumber":141,"author":{"gitID":"qwlai"},"content":"        descriptor \u003d new EditCinemaDescriptorBuilder().withAddress(VALID_ADDRESS_SENGKANG).build();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":149,"author":{"gitID":"qwlai"},"content":"        Index targetIndex \u003d INDEX_FIRST_CINEMA;"},{"lineNumber":150,"author":{"gitID":"qwlai"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_SENGKANG + ADDRESS_DESC_SENGKANG"},{"lineNumber":151,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_SENGKANG + PHONE_DESC_SENGKANG + ADDRESS_DESC_SENGKANG + EMAIL_DESC_SENGKANG"},{"lineNumber":152,"author":{"gitID":"qwlai"},"content":"                + PHONE_DESC_TAMPINES + ADDRESS_DESC_TAMPINES + EMAIL_DESC_TAMPINES;"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder().withPhone(VALID_PHONE_TAMPINES)"},{"lineNumber":155,"author":{"gitID":"qwlai"},"content":"                .withEmail(VALID_EMAIL_TAMPINES).withAddress(VALID_ADDRESS_TAMPINES).build();"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":164,"author":{"gitID":"qwlai"},"content":"        Index targetIndex \u003d INDEX_FIRST_CINEMA;"},{"lineNumber":165,"author":{"gitID":"qwlai"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_TAMPINES;"},{"lineNumber":166,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder().withPhone(VALID_PHONE_TAMPINES).build();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":171,"author":{"gitID":"qwlai"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_TAMPINES + INVALID_PHONE_DESC + ADDRESS_DESC_TAMPINES"},{"lineNumber":172,"author":{"gitID":"qwlai"},"content":"                + PHONE_DESC_TAMPINES;"},{"lineNumber":173,"author":{"gitID":"qwlai"},"content":"        descriptor \u003d new EditCinemaDescriptorBuilder().withPhone(VALID_PHONE_TAMPINES).withEmail(VALID_EMAIL_TAMPINES)"},{"lineNumber":174,"author":{"gitID":"qwlai"},"content":"                .withAddress(VALID_ADDRESS_TAMPINES).build();"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":1,"-":116,"qwlai":61}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":33,"qwlai":1}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitID":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_CINEMA));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":30,"qwlai":2}},{"path":"src/test/java/seedu/address/commons/util/SecurityUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"tinyjy94"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"public class SecurityUtilTest {"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/SecurityUtilTest/\");"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"    private static final String password \u003d \"pass\";"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":"    private static final File plainFile \u003d new File(TEST_DATA_FOLDER + \"movieplanner.xml\");"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"    public void encrypt_nullOutputFile_throwsNullPointerException() {"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"        SecurityUtil.encrypt(plainFile, null, password);"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"    public void generateKey_nullPassword_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"        SecurityUtil.generateKey(null);"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":24,"-":6}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_SENGKANG;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_TAMPINES;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_SENGKANG;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_TAMPINES;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_THEATER_DESC;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_SENGKANG;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TAMPINES;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_SENGKANG;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_TAMPINES;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.THEATER_DESC_FIVE;"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.THEATER_DESC_THREE;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_SENGKANG;"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_TAMPINES;"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_SENGKANG;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_TAMPINES;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SENGKANG;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TAMPINES;"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMOFTHEATERS;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_SENGKANG;"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_TAMPINES;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"        Cinema expectedCinema \u003d new CinemaBuilder().withName(VALID_NAME_TAMPINES).withPhone(VALID_PHONE_TAMPINES)"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"                .withEmail(VALID_EMAIL_TAMPINES).withAddress(VALID_ADDRESS_TAMPINES)"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"                .withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_TAMPINES + THEATER_DESC_THREE, new AddCommand(expectedCinema));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"        assertParseSuccess(parser, NAME_DESC_SENGKANG + NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_TAMPINES + THEATER_DESC_THREE, new AddCommand(expectedCinema));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        assertParseSuccess(parser, NAME_DESC_TAMPINES + PHONE_DESC_SENGKANG + PHONE_DESC_TAMPINES"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_TAMPINES + ADDRESS_DESC_TAMPINES + THEATER_DESC_THREE, new AddCommand(expectedCinema));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"        assertParseSuccess(parser, NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + EMAIL_DESC_SENGKANG"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"                + EMAIL_DESC_TAMPINES + ADDRESS_DESC_TAMPINES + THEATER_DESC_THREE, new AddCommand(expectedCinema));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"        assertParseSuccess(parser, NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_SENGKANG + ADDRESS_DESC_TAMPINES + THEATER_DESC_THREE, new AddCommand(expectedCinema));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"tinyjy94"},"content":"        // multiple theaters - last theater accepted"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"        assertParseSuccess(parser, NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_TAMPINES + THEATER_DESC_FIVE + THEATER_DESC_THREE, new AddCommand(expectedCinema));"},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        Cinema expectedCinemaMultipleTags \u003d new CinemaBuilder().withName(VALID_NAME_TAMPINES)"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"                .withPhone(VALID_PHONE_TAMPINES).withEmail(VALID_EMAIL_TAMPINES).withAddress(VALID_ADDRESS_TAMPINES)"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"                .withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"        assertParseSuccess(parser, NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_TAMPINES + THEATER_DESC_THREE, new AddCommand(expectedCinemaMultipleTags));"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        Cinema expectedCinema \u003d new CinemaBuilder().withName(VALID_NAME_SENGKANG).withPhone(VALID_PHONE_SENGKANG)"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"                .withEmail(VALID_EMAIL_SENGKANG).withAddress(VALID_ADDRESS_SENGKANG)"},{"lineNumber":90,"author":{"gitID":"slothhy"},"content":"                .withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        assertParseSuccess(parser, NAME_DESC_SENGKANG + PHONE_DESC_SENGKANG + EMAIL_DESC_SENGKANG"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_SENGKANG + THEATER_DESC_THREE, new AddCommand(expectedCinema));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, VALID_NAME_TAMPINES + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_TAMPINES + THEATER_DESC_THREE, expectedMessage);"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, NAME_DESC_TAMPINES + VALID_PHONE_TAMPINES + EMAIL_DESC_TAMPINES"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_TAMPINES + THEATER_DESC_THREE, expectedMessage);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + VALID_EMAIL_TAMPINES"},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_TAMPINES + THEATER_DESC_THREE, expectedMessage);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES"},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"                + VALID_ADDRESS_TAMPINES + THEATER_DESC_THREE, expectedMessage);"},{"lineNumber":114,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":115,"author":{"gitID":"tinyjy94"},"content":"        // missing theater prefix"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_TAMPINES + VALID_NUMOFTHEATERS, expectedMessage);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, VALID_NAME_TAMPINES + VALID_PHONE_TAMPINES + VALID_EMAIL_TAMPINES"},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"                + VALID_ADDRESS_TAMPINES + VALID_NUMOFTHEATERS, expectedMessage);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES + ADDRESS_DESC_TAMPINES"},{"lineNumber":128,"author":{"gitID":"slothhy"},"content":"                + THEATER_DESC_THREE, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":131,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, NAME_DESC_TAMPINES + INVALID_PHONE_DESC + EMAIL_DESC_TAMPINES + ADDRESS_DESC_TAMPINES"},{"lineNumber":132,"author":{"gitID":"slothhy"},"content":"                + THEATER_DESC_THREE, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + INVALID_EMAIL_DESC + ADDRESS_DESC_TAMPINES"},{"lineNumber":136,"author":{"gitID":"slothhy"},"content":"                + THEATER_DESC_THREE, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":139,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES + INVALID_ADDRESS_DESC"},{"lineNumber":140,"author":{"gitID":"slothhy"},"content":"                + THEATER_DESC_THREE, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"tinyjy94"},"content":"        // invalid theater"},{"lineNumber":143,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES"},{"lineNumber":144,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_TAMPINES + INVALID_THEATER_DESC, Theater.MESSAGE_THEATER_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":147,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES"},{"lineNumber":148,"author":{"gitID":"tinyjy94"},"content":"                + INVALID_ADDRESS_DESC + THEATER_DESC_THREE, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":151,"author":{"gitID":"qwlai"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_TAMPINES + PHONE_DESC_TAMPINES + EMAIL_DESC_TAMPINES"},{"lineNumber":152,"author":{"gitID":"qwlai"},"content":"                + ADDRESS_DESC_TAMPINES + THEATER_DESC_THREE,"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":7,"tinyjy94":11,"-":72,"qwlai":65}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.parser.ParserUtil.parseTheaterNumber;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"    private static final String INVALID_DATE_WITHOUT_TIME \u003d \"25/03/2018\";"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"    private static final String INVALID_TIME_WITHOUT_DATE \u003d \"11:10\";"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    private static final String INVALID_DATE_TIME_FORMAT_1 \u003d \"11/11/2015 11.10\";"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"    private static final String INVALID_DATE_TIME_FORMAT_2 \u003d \"11.11.2015 11:10\";"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"    private static final String INVALID_DATE_TIME_FORMAT_3 \u003d \"11.11.2015  11:10\";"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"    private static final String INVALID_DATE_TIME_FORMAT_4 \u003d \"11/11/2015 11:10PM\";"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"    private static final String INVALID_DATE_TIME_FORMAT_5 \u003d \"11/2/2015 11:10\";"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"    private static final String INVALID_DATE_TIME_FORMAT_6 \u003d \"30/02/2015 11:10\";"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"    private static final String INVALID_DATE_TIME_MINUTES \u003d \"11/11/2015 11:11\";"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":"    private static final int INVALID_THEATER \u003d -5;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"    private static final String VALID_DATE_TIME \u003d \"11/11/2015 11:10\";"},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":"    private static final int VALID_THEATER \u003d 5;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"    private static final String DATE_TIME_FORMAT \u003d \"dd/MM/uuuu HH:mm\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"        assertEquals(INDEX_FIRST_CINEMA, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"        assertEquals(INDEX_FIRST_CINEMA, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":268,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":269,"author":{"gitID":"tinyjy94"},"content":"    public void parseTheaters_null_throwsNullPointerException() {"},{"lineNumber":270,"author":{"gitID":"tinyjy94"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTheaters((String) null));"},{"lineNumber":271,"author":{"gitID":"tinyjy94"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTheaters((Optional\u003cString\u003e) null));"},{"lineNumber":272,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":274,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":275,"author":{"gitID":"tinyjy94"},"content":"    public void parseTheaters_invalidValue_throwsIllegalValueException() {"},{"lineNumber":276,"author":{"gitID":"tinyjy94"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e"},{"lineNumber":277,"author":{"gitID":"tinyjy94"},"content":"                ParserUtil.parseTheaters(String.valueOf(INVALID_THEATER)));"},{"lineNumber":278,"author":{"gitID":"tinyjy94"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e"},{"lineNumber":279,"author":{"gitID":"tinyjy94"},"content":"                ParserUtil.parseTheaters(Optional.of(String.valueOf(INVALID_THEATER))));"},{"lineNumber":280,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":282,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":283,"author":{"gitID":"tinyjy94"},"content":"    public void parseTheaters_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":284,"author":{"gitID":"tinyjy94"},"content":"        assertFalse(ParserUtil.parseTheaters(Optional.empty()).isPresent());"},{"lineNumber":285,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":287,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":288,"author":{"gitID":"tinyjy94"},"content":"    public void parseTheaters_validValueWithoutWhitespace_returnsTheaterList() throws Exception {"},{"lineNumber":289,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e expectedTheaters \u003d new ArrayList\u003c\u003e(VALID_THEATER);"},{"lineNumber":290,"author":{"gitID":"tinyjy94"},"content":"        for (int i \u003d 1; i \u003c\u003d VALID_THEATER; i++) {"},{"lineNumber":291,"author":{"gitID":"tinyjy94"},"content":"            expectedTheaters.add(new Theater(i));"},{"lineNumber":292,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":293,"author":{"gitID":"tinyjy94"},"content":"        assertEquals(expectedTheaters, ParserUtil.parseTheaters(String.valueOf(VALID_THEATER)));"},{"lineNumber":294,"author":{"gitID":"tinyjy94"},"content":"        assertEquals(Optional.of(expectedTheaters),"},{"lineNumber":295,"author":{"gitID":"tinyjy94"},"content":"                ParserUtil.parseTheaters(Optional.of(String.valueOf(VALID_THEATER))));"},{"lineNumber":296,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":298,"author":{"gitID":"qwlai"},"content":"    //@@author qwlai"},{"lineNumber":299,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":300,"author":{"gitID":"qwlai"},"content":"    public void parseTheaterNumber_null_throwsNullPointerException() throws Exception {"},{"lineNumber":301,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTheaterNumber((String) null));"},{"lineNumber":302,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":304,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":305,"author":{"gitID":"qwlai"},"content":"    public void parseTheaterNumber_validValueWithWhitespace_returnsTheaterNumber() throws Exception {"},{"lineNumber":306,"author":{"gitID":"qwlai"},"content":"        String theaterNumberWithWhitespace \u003d WHITESPACE + VALID_THEATER + WHITESPACE;"},{"lineNumber":307,"author":{"gitID":"qwlai"},"content":"        assertEquals(VALID_THEATER, parseTheaterNumber(theaterNumberWithWhitespace));"},{"lineNumber":308,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":310,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":311,"author":{"gitID":"qwlai"},"content":"    public void parseTheaterNumber_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":312,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e"},{"lineNumber":313,"author":{"gitID":"qwlai"},"content":"                ParserUtil.parseTheaterNumber(String.valueOf(INVALID_THEATER)));"},{"lineNumber":314,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":316,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":317,"author":{"gitID":"qwlai"},"content":"    public void parseScreeningDateTime_null_throwsNullPointerException() throws Exception {"},{"lineNumber":318,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e"},{"lineNumber":319,"author":{"gitID":"qwlai"},"content":"                ParserUtil.parseScreeningDateTime((String) null));"},{"lineNumber":320,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":321,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":322,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":323,"author":{"gitID":"qwlai"},"content":"    public void parseScreeningDateTime_invalidDateWithoutTime_throwsDateTimeParseException() throws Exception {"},{"lineNumber":324,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e"},{"lineNumber":325,"author":{"gitID":"qwlai"},"content":"                ParserUtil.parseScreeningDateTime(INVALID_DATE_WITHOUT_TIME));"},{"lineNumber":326,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":327,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":328,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":329,"author":{"gitID":"qwlai"},"content":"    public void parseScreeningDateTime_invalidTimeWithoutDate_throwsDateTimeParseException() throws Exception {"},{"lineNumber":330,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e"},{"lineNumber":331,"author":{"gitID":"qwlai"},"content":"                ParserUtil.parseScreeningDateTime(INVALID_TIME_WITHOUT_DATE));"},{"lineNumber":332,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":334,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":335,"author":{"gitID":"qwlai"},"content":"    public void parseScreeningDateTime_invalidDateTimeFormat_throwsDateTimeParseException() throws Exception {"},{"lineNumber":336,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e"},{"lineNumber":337,"author":{"gitID":"qwlai"},"content":"                ParserUtil.parseScreeningDateTime(INVALID_DATE_TIME_FORMAT_1));"},{"lineNumber":338,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e"},{"lineNumber":339,"author":{"gitID":"qwlai"},"content":"                ParserUtil.parseScreeningDateTime(INVALID_DATE_TIME_FORMAT_2));"},{"lineNumber":340,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e"},{"lineNumber":341,"author":{"gitID":"qwlai"},"content":"                ParserUtil.parseScreeningDateTime(INVALID_DATE_TIME_FORMAT_3));"},{"lineNumber":342,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e"},{"lineNumber":343,"author":{"gitID":"qwlai"},"content":"                ParserUtil.parseScreeningDateTime(INVALID_DATE_TIME_FORMAT_4));"},{"lineNumber":344,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e"},{"lineNumber":345,"author":{"gitID":"qwlai"},"content":"                ParserUtil.parseScreeningDateTime(INVALID_DATE_TIME_FORMAT_5));"},{"lineNumber":346,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(DateTimeParseException.class, () -\u003e"},{"lineNumber":347,"author":{"gitID":"qwlai"},"content":"                ParserUtil.parseScreeningDateTime(INVALID_DATE_TIME_FORMAT_6));"},{"lineNumber":348,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":349,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":350,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":351,"author":{"gitID":"qwlai"},"content":"    public void parseScreeningDateTime_invalidTimeValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":352,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e"},{"lineNumber":353,"author":{"gitID":"qwlai"},"content":"                ParserUtil.parseScreeningDateTime(INVALID_DATE_TIME_MINUTES));"},{"lineNumber":354,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":356,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":357,"author":{"gitID":"qwlai"},"content":"    public void parseScreeningDateTime_validDateTime_returnsScreeningDateTime() throws Exception {"},{"lineNumber":358,"author":{"gitID":"qwlai"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT).withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":359,"author":{"gitID":"qwlai"},"content":"        LocalDateTime expectedScreeningDateTime \u003d LocalDateTime.parse(VALID_DATE_TIME, dtf);"},{"lineNumber":360,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedScreeningDateTime, ParserUtil.parseScreeningDateTime(VALID_DATE_TIME));"},{"lineNumber":361,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":363,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":364,"author":{"gitID":"qwlai"},"content":"    public void parseScreeningDateTime_validDateTimeWithWhitespace_returnsScreeningDateTime() throws Exception {"},{"lineNumber":365,"author":{"gitID":"qwlai"},"content":"        String screeningDateTimeWithWhitespace \u003d WHITESPACE + VALID_DATE_TIME + WHITESPACE;"},{"lineNumber":366,"author":{"gitID":"qwlai"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT).withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":367,"author":{"gitID":"qwlai"},"content":"        LocalDateTime expectedScreeningDateTime \u003d LocalDateTime.parse(VALID_DATE_TIME, dtf);"},{"lineNumber":368,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedScreeningDateTime, ParserUtil.parseScreeningDateTime(screeningDateTimeWithWhitespace));"},{"lineNumber":369,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":370,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"tinyjy94":35,"-":238,"qwlai":97}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCinemaAtIndex;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CINEMA;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"    private Model model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"        Cinema cinemaToDelete \u003d model.getFilteredCinemaList().get(INDEX_FIRST_CINEMA.getZeroBased());"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_CINEMA);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CINEMA_SUCCESS, cinemaToDelete);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"        expectedModel.deleteCinema(cinemaToDelete);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCinemaList().size() + 1);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        Cinema cinemaToDelete \u003d model.getFilteredCinemaList().get(INDEX_FIRST_CINEMA.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_CINEMA);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CINEMA_SUCCESS, cinemaToDelete);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager(model.getMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"        expectedModel.deleteCinema(cinemaToDelete);"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"        showNoCinema(expectedModel);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CINEMA;"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        // ensures that outOfBoundIndex is still in bounds of movie planner list"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMoviePlanner().getCinemaList().size());"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        Cinema cinemaToDelete \u003d model.getFilteredCinemaList().get(INDEX_FIRST_CINEMA.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_CINEMA);"},{"lineNumber":93,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager(model.getMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"        // delete -\u003e first cinema deleted"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"        // undo -\u003e reverts movieplanner back to previous state and filtered cinema list to show all cinemas"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"        // redo -\u003e same first cinema deleted again"},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"        expectedModel.deleteCinema(cinemaToDelete);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCinemaList().size() + 1);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"qwlai"},"content":"     * 1. Deletes a {@code Cinema} from a filtered list."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted cinema in the"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the cinema object regardless of indexing."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitID":"qwlai"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameCinemaDeleted() throws Exception {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_CINEMA);"},{"lineNumber":136,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager(model.getMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_SECOND_CINEMA);"},{"lineNumber":139,"author":{"gitID":"qwlai"},"content":"        Cinema cinemaToDelete \u003d model.getFilteredCinemaList().get(INDEX_FIRST_CINEMA.getZeroBased());"},{"lineNumber":140,"author":{"gitID":"qwlai"},"content":"        // delete -\u003e deletes second cinema in unfiltered cinema list / first cinema in filtered cinema list"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"qwlai"},"content":"        // undo -\u003e reverts movieplanner back to previous state and filtered cinema list to show all cinemas"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"qwlai"},"content":"        expectedModel.deleteCinema(cinemaToDelete);"},{"lineNumber":148,"author":{"gitID":"qwlai"},"content":"        assertNotEquals(cinemaToDelete, model.getFilteredCinemaList().get(INDEX_FIRST_CINEMA.getZeroBased()));"},{"lineNumber":149,"author":{"gitID":"qwlai"},"content":"        // redo -\u003e deletes same second cinema in unfiltered cinema list"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":155,"author":{"gitID":"qwlai"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_CINEMA);"},{"lineNumber":156,"author":{"gitID":"qwlai"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_CINEMA);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":162,"author":{"gitID":"qwlai"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_CINEMA);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"qwlai"},"content":"        // different cinema -\u003e returns false"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"qwlai"},"content":"    private void showNoCinema(Model model) {"},{"lineNumber":192,"author":{"gitID":"qwlai"},"content":"        model.updateFilteredCinemaList(p -\u003e false);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"qwlai"},"content":"        assertTrue(model.getFilteredCinemaList().isEmpty());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":7,"-":140,"qwlai":49}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_SENGKANG;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_TAMPINES;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TAMPINES;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_TAMPINES;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCinemaAtIndex;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CINEMA;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.EditCommand.EditCinemaDescriptor;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.EditCinemaDescriptorBuilder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"public class EditCommandTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"    private Model model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"        Cinema editedCinema \u003d new CinemaBuilder().build();"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder(editedCinema).build();"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_CINEMA, descriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CINEMA_SUCCESS, editedCinema);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager("},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"                new MoviePlanner(model.getMoviePlanner()), new UserPrefs(), new EmailManager());"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"        expectedModel.updateCinema(model.getFilteredCinemaList().get(0), editedCinema);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        Index indexLastCinema \u003d Index.fromOneBased(model.getFilteredCinemaList().size());"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        Cinema lastCinema \u003d model.getFilteredCinemaList().get(indexLastCinema.getZeroBased());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        CinemaBuilder cinemaInList \u003d new CinemaBuilder(lastCinema);"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        Cinema editedCinema \u003d cinemaInList.withName(VALID_NAME_TAMPINES).withPhone(VALID_PHONE_TAMPINES)"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"                .build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder().withName(VALID_NAME_TAMPINES)"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"                .withPhone(VALID_PHONE_TAMPINES).build();"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"        EditCommand editCommand \u003d prepareCommand(indexLastCinema, descriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CINEMA_SUCCESS, editedCinema);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager(new MoviePlanner(model.getMoviePlanner()),"},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":"                new UserPrefs(), new EmailManager());"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        expectedModel.updateCinema(lastCinema, editedCinema);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_CINEMA, new EditCinemaDescriptor());"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"        Cinema editedCinema \u003d model.getFilteredCinemaList().get(INDEX_FIRST_CINEMA.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CINEMA_SUCCESS, editedCinema);"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager(new MoviePlanner(model.getMoviePlanner()),"},{"lineNumber":89,"author":{"gitID":"chanyikwai"},"content":"                new UserPrefs(), new EmailManager());"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"qwlai"},"content":"        Cinema cinemaInFilteredList \u003d model.getFilteredCinemaList().get(INDEX_FIRST_CINEMA.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"        Cinema editedCinema \u003d new CinemaBuilder(cinemaInFilteredList).withName(VALID_NAME_TAMPINES).build();"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_CINEMA,"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"                new EditCinemaDescriptorBuilder().withName(VALID_NAME_TAMPINES).build());"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CINEMA_SUCCESS, editedCinema);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager(new MoviePlanner(model.getMoviePlanner()),"},{"lineNumber":106,"author":{"gitID":"chanyikwai"},"content":"                new UserPrefs(), new EmailManager());"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"        expectedModel.updateCinema(model.getFilteredCinemaList().get(0), editedCinema);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"    public void execute_duplicateCinemaUnfilteredList_failure() {"},{"lineNumber":114,"author":{"gitID":"qwlai"},"content":"        Cinema firstCinema \u003d model.getFilteredCinemaList().get(INDEX_FIRST_CINEMA.getZeroBased());"},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder(firstCinema).build();"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_CINEMA, descriptor);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CINEMA);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"    public void execute_duplicateCinemaFilteredList_failure() {"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"qwlai"},"content":"        // edit cinema in filtered list into a duplicate in movie planner"},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":"        Cinema cinemaInList \u003d model.getMoviePlanner().getCinemaList().get(INDEX_SECOND_CINEMA.getZeroBased());"},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_CINEMA,"},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"                new EditCinemaDescriptorBuilder(cinemaInList).build());"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CINEMA);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":"    public void execute_invalidCinemaIndexUnfilteredList_failure() {"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCinemaList().size() + 1);"},{"lineNumber":136,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder().withName(VALID_NAME_TAMPINES).build();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":144,"author":{"gitID":"qwlai"},"content":"     * but smaller than size of movie planner"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"qwlai"},"content":"    public void execute_invalidCinemaIndexFilteredList_failure() {"},{"lineNumber":148,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":149,"author":{"gitID":"qwlai"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CINEMA;"},{"lineNumber":150,"author":{"gitID":"qwlai"},"content":"        // ensures that outOfBoundIndex is still in bounds of movie planner list"},{"lineNumber":151,"author":{"gitID":"qwlai"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMoviePlanner().getCinemaList().size());"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":154,"author":{"gitID":"qwlai"},"content":"                new EditCinemaDescriptorBuilder().withName(VALID_NAME_TAMPINES).build());"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":164,"author":{"gitID":"qwlai"},"content":"        Cinema editedCinema \u003d new CinemaBuilder().build();"},{"lineNumber":165,"author":{"gitID":"qwlai"},"content":"        Cinema cinemaToEdit \u003d model.getFilteredCinemaList().get(INDEX_FIRST_CINEMA.getZeroBased());"},{"lineNumber":166,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder(editedCinema).build();"},{"lineNumber":167,"author":{"gitID":"qwlai"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_CINEMA, descriptor);"},{"lineNumber":168,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager(new MoviePlanner(model.getMoviePlanner()),"},{"lineNumber":169,"author":{"gitID":"chanyikwai"},"content":"                new UserPrefs(), new EmailManager());"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"qwlai"},"content":"        // edit -\u003e first cinema edited"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"qwlai"},"content":"        // undo -\u003e reverts movieplanner back to previous state and filtered cinema list to show all cinemas"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"qwlai"},"content":"        // redo -\u003e same first cinema edited again"},{"lineNumber":179,"author":{"gitID":"qwlai"},"content":"        expectedModel.updateCinema(cinemaToEdit, editedCinema);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":188,"author":{"gitID":"qwlai"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCinemaList().size() + 1);"},{"lineNumber":189,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder().withName(VALID_NAME_TAMPINES).build();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // execution failed -\u003e editCommand not pushed into undoRedoStack"},{"lineNumber":193,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"qwlai"},"content":"     * 1. Edits a {@code Cinema} from a filtered list."},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":203,"author":{"gitID":"qwlai"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited cinema in the"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":205,"author":{"gitID":"qwlai"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the cinema object regardless of indexing."},{"lineNumber":206,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"qwlai"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameCinemaEdited() throws Exception {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":212,"author":{"gitID":"qwlai"},"content":"        Cinema editedCinema \u003d new CinemaBuilder().build();"},{"lineNumber":213,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptor \u003d new EditCinemaDescriptorBuilder(editedCinema).build();"},{"lineNumber":214,"author":{"gitID":"qwlai"},"content":"        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_CINEMA, descriptor);"},{"lineNumber":215,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager(new MoviePlanner(model.getMoviePlanner()),"},{"lineNumber":216,"author":{"gitID":"chanyikwai"},"content":"                new UserPrefs(), new EmailManager());"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_SECOND_CINEMA);"},{"lineNumber":219,"author":{"gitID":"qwlai"},"content":"        Cinema cinemaToEdit \u003d model.getFilteredCinemaList().get(INDEX_FIRST_CINEMA.getZeroBased());"},{"lineNumber":220,"author":{"gitID":"qwlai"},"content":"        // edit -\u003e edits second cinema in unfiltered cinema list / first cinema in filtered cinema list"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        editCommand.execute();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        undoRedoStack.push(editCommand);"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"qwlai"},"content":"        // undo -\u003e reverts movieplanner back to previous state and filtered cinema list to show all cinemas"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"qwlai"},"content":"        expectedModel.updateCinema(cinemaToEdit, editedCinema);"},{"lineNumber":228,"author":{"gitID":"qwlai"},"content":"        assertNotEquals(model.getFilteredCinemaList().get(INDEX_FIRST_CINEMA.getZeroBased()), cinemaToEdit);"},{"lineNumber":229,"author":{"gitID":"qwlai"},"content":"        // redo -\u003e edits same second cinema in unfiltered cinema list"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":235,"author":{"gitID":"qwlai"},"content":"        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_CINEMA, DESC_SENGKANG);"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":238,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor copyDescriptor \u003d new EditCinemaDescriptor(DESC_SENGKANG);"},{"lineNumber":239,"author":{"gitID":"qwlai"},"content":"        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_CINEMA, copyDescriptor);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":256,"author":{"gitID":"qwlai"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_CINEMA, DESC_SENGKANG)));"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":259,"author":{"gitID":"qwlai"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_CINEMA, DESC_TAMPINES)));"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"qwlai"},"content":"    private EditCommand prepareCommand(Index index, EditCinemaDescriptor descriptor) {"},{"lineNumber":266,"author":{"gitID":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(index, descriptor);"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"        return editCommand;"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":15,"slothhy":1,"-":162,"qwlai":92}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCinemaAtIndex;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"        model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"        expectedModel \u003d new ModelManager(model.getMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":3,"-":39,"qwlai":4}},{"path":"src/test/java/seedu/address/logic/parser/AddTheaterCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_THEATER_DESC;"},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.THEATER_DESC_FIVE;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.THEATER_DESC_THREE;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SENGKANG;"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMOFNEWTHEATERS;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMOFTHEATERS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.logic.commands.AddTheaterCommand;"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"public class AddTheaterCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTheaterCommand.MESSAGE_USAGE);"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"    private AddTheaterCommandParser parser \u003d new AddTheaterCommandParser();"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"    private Index targetIndex \u003d INDEX_FIRST_CINEMA;"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"        // no index specified"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, VALID_NAME_SENGKANG, MESSAGE_INVALID_FORMAT);"},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"        // no field specified"},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":"        // no index and no field specified"},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":"        // negative index"},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"-5\" + THEATER_DESC_FIVE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"        // zero index"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"0\" + THEATER_DESC_THREE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"1\" + INVALID_THEATER_DESC,"},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":"                           Theater.MESSAGE_THEATER_CONSTRAINTS); // invalid theater number"},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":63,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"tinyjy94"},"content":"    public void parse_zeroFieldSpecified_failure() {"},{"lineNumber":65,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT); // invalid format"},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"tinyjy94"},"content":"    public void parse_singleFieldSpecified_success() {"},{"lineNumber":70,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":71,"author":{"gitID":"tinyjy94"},"content":"        String userInput \u003d targetIndex.getOneBased() + THEATER_DESC_THREE;"},{"lineNumber":72,"author":{"gitID":"tinyjy94"},"content":"        Cinema cinema \u003d new CinemaBuilder().withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":73,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":74,"author":{"gitID":"tinyjy94"},"content":"        AddTheaterCommand expectedCommand \u003d new AddTheaterCommand(targetIndex, cinema.getTheaters().size());"},{"lineNumber":75,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":77,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":79,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"tinyjy94"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":"        // both values are valid but last one is accepted"},{"lineNumber":82,"author":{"gitID":"tinyjy94"},"content":"        String userInput \u003d targetIndex.getOneBased() + THEATER_DESC_THREE + THEATER_DESC_FIVE;"},{"lineNumber":83,"author":{"gitID":"tinyjy94"},"content":"        Cinema newCinema \u003d new CinemaBuilder().withTheater(VALID_NUMOFNEWTHEATERS).build();"},{"lineNumber":84,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":"        AddTheaterCommand expectedCommand \u003d new AddTheaterCommand(targetIndex, newCinema.getTheaters().size());"},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":90,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"tinyjy94"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":92,"author":{"gitID":"tinyjy94"},"content":"        // last value is accepted"},{"lineNumber":93,"author":{"gitID":"tinyjy94"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_THEATER_DESC + THEATER_DESC_THREE;"},{"lineNumber":94,"author":{"gitID":"tinyjy94"},"content":"        Cinema newCinema \u003d new CinemaBuilder().withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":95,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":96,"author":{"gitID":"tinyjy94"},"content":"        AddTheaterCommand expectedCommand \u003d new AddTheaterCommand(targetIndex, newCinema.getTheaters().size());"},{"lineNumber":97,"author":{"gitID":"tinyjy94"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":98,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":100,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":89,"-":8,"qwlai":3}},{"path":"src/test/java/seedu/address/logic/commands/EditCinemaDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_SENGKANG;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_TAMPINES;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_TAMPINES;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_TAMPINES;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TAMPINES;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_TAMPINES;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.EditCommand.EditCinemaDescriptor;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.EditCinemaDescriptorBuilder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"public class EditCinemaDescriptorTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor descriptorWithSameValues \u003d new EditCinemaDescriptor(DESC_SENGKANG);"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"        assertTrue(DESC_SENGKANG.equals(descriptorWithSameValues));"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"        assertTrue(DESC_SENGKANG.equals(DESC_SENGKANG));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"        assertFalse(DESC_SENGKANG.equals(null));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"        assertFalse(DESC_SENGKANG.equals(5));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"        assertFalse(DESC_SENGKANG.equals(DESC_TAMPINES));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor editedAmy \u003d new EditCinemaDescriptorBuilder(DESC_SENGKANG)"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"                .withName(VALID_NAME_TAMPINES).build();"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        assertFalse(DESC_SENGKANG.equals(editedAmy));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"        editedAmy \u003d new EditCinemaDescriptorBuilder(DESC_SENGKANG).withPhone(VALID_PHONE_TAMPINES).build();"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"        assertFalse(DESC_SENGKANG.equals(editedAmy));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        editedAmy \u003d new EditCinemaDescriptorBuilder(DESC_SENGKANG).withEmail(VALID_EMAIL_TAMPINES).build();"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"        assertFalse(DESC_SENGKANG.equals(editedAmy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"        editedAmy \u003d new EditCinemaDescriptorBuilder(DESC_SENGKANG).withAddress(VALID_ADDRESS_TAMPINES).build();"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"        assertFalse(DESC_SENGKANG.equals(editedAmy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":31,"qwlai":24}},{"path":"src/test/java/seedu/address/logic/parser/DeleteTheaterCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_THEATER_DESC;"},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.THEATER_DESC_FIVE;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.THEATER_DESC_THREE;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SENGKANG;"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMOFNEWTHEATERS;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMOFTHEATERS;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.logic.commands.DeleteTheaterCommand;"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"public class DeleteTheaterCommandParserTest {"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTheaterCommand.MESSAGE_USAGE);"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"    private DeleteTheaterCommandParser parser \u003d new DeleteTheaterCommandParser();"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"    private Index targetIndex \u003d INDEX_FIRST_CINEMA;"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"        // no index specified"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, VALID_NAME_SENGKANG, MESSAGE_INVALID_FORMAT);"},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"        // no field specified"},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":"        // no index and no field specified"},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":"        // negative index"},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"-5\" + THEATER_DESC_FIVE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"        // zero index"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"0\" + THEATER_DESC_THREE, MESSAGE_INVALID_FORMAT);"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"1\" + INVALID_THEATER_DESC,"},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":"                Theater.MESSAGE_THEATER_CONSTRAINTS); // invalid theater number"},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":63,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"tinyjy94"},"content":"    public void parse_zeroFieldSpecified_failure() {"},{"lineNumber":65,"author":{"gitID":"tinyjy94"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT); // invalid format"},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"tinyjy94"},"content":"    public void parse_singleFieldSpecified_success() {"},{"lineNumber":70,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":71,"author":{"gitID":"tinyjy94"},"content":"        String userInput \u003d targetIndex.getOneBased() + THEATER_DESC_THREE;"},{"lineNumber":72,"author":{"gitID":"tinyjy94"},"content":"        Cinema cinema \u003d new CinemaBuilder().withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":73,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":74,"author":{"gitID":"tinyjy94"},"content":"        DeleteTheaterCommand expectedCommand \u003d new DeleteTheaterCommand(targetIndex, cinema.getTheaters().size());"},{"lineNumber":75,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":77,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":79,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"tinyjy94"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":"        // both values are valid but last one is accepted"},{"lineNumber":82,"author":{"gitID":"tinyjy94"},"content":"        String userInput \u003d targetIndex.getOneBased() + THEATER_DESC_THREE + THEATER_DESC_FIVE;"},{"lineNumber":83,"author":{"gitID":"tinyjy94"},"content":"        Cinema newCinema \u003d new CinemaBuilder().withTheater(VALID_NUMOFNEWTHEATERS).build();"},{"lineNumber":84,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":"        DeleteTheaterCommand expectedCommand \u003d new DeleteTheaterCommand(targetIndex, newCinema.getTheaters().size());"},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":90,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"tinyjy94"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":92,"author":{"gitID":"tinyjy94"},"content":"        // last value is accepted"},{"lineNumber":93,"author":{"gitID":"tinyjy94"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_THEATER_DESC + THEATER_DESC_THREE;"},{"lineNumber":94,"author":{"gitID":"tinyjy94"},"content":"        Cinema newCinema \u003d new CinemaBuilder().withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":95,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":96,"author":{"gitID":"tinyjy94"},"content":"        DeleteTheaterCommand expectedCommand \u003d new DeleteTheaterCommand(targetIndex, newCinema.getTheaters().size());"},{"lineNumber":97,"author":{"gitID":"tinyjy94"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":98,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":100,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":89,"-":8,"qwlai":3}},{"path":"src/test/java/seedu/address/logic/parser/AddMovieCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DURATION_DESC_INCREDIBLES;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DURATION_DESC_MARVEL;"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DURATION_DESC;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MOVIENAME_DESC;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_STARTDATE_DESC;"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MOVIENAME_DESC_INCREDIBLES;"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MOVIENAME_DESC_MARVEL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_INCREDIBLES;"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_MARVEL;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STARTDATE_DESC_INCREDIBLES;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STARTDATE_DESC_MARVEL;"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_COMEDY;"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SUPERHERO;"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_INCREDIBLES;"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DURATION_MARVEL;"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MOVIENAME_INCREDIBLES;"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MOVIENAME_MARVEL;"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_INCREDIBLES;"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_MARVEL;"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATE_INCREDIBLES;"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATE_MARVEL;"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMEDY;"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SUPERHERO;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.AddMovieCommand;"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Duration;"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.MovieName;"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Rating;"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDate;"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"import seedu.address.testutil.MovieBuilder;"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"public class AddMovieCommandParserTest {"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"    private AddMovieCommandParser parser \u003d new AddMovieCommandParser();"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"        Movie expectedMovie \u003d new MovieBuilder().withMovieName(VALID_MOVIENAME_MARVEL)"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"                .withDuration(VALID_DURATION_MARVEL).withRating(VALID_RATING_MARVEL)"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"                .withStartDate(VALID_STARTDATE_MARVEL).withTags(VALID_TAG_SUPERHERO).build();"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"        // whitespace only preamble"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MOVIENAME_DESC_MARVEL"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"                        + DURATION_DESC_MARVEL + RATING_DESC_MARVEL + STARTDATE_DESC_MARVEL + TAG_DESC_SUPERHERO,"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"                new AddMovieCommand(expectedMovie));"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"        // multiple movie names - last movie name accepted"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"        assertParseSuccess(parser, MOVIENAME_DESC_INCREDIBLES + MOVIENAME_DESC_MARVEL"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"                        + DURATION_DESC_MARVEL + RATING_DESC_MARVEL + STARTDATE_DESC_MARVEL + TAG_DESC_SUPERHERO,"},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"                new AddMovieCommand(expectedMovie));"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"        // multiple durations - last duration accepted"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"        assertParseSuccess(parser, MOVIENAME_DESC_MARVEL + DURATION_DESC_INCREDIBLES"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"                        + DURATION_DESC_MARVEL + RATING_DESC_MARVEL + STARTDATE_DESC_MARVEL + TAG_DESC_SUPERHERO,"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"                new AddMovieCommand(expectedMovie));"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":"        // multiple ratings - last rating accepted"},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"        assertParseSuccess(parser, MOVIENAME_DESC_MARVEL + DURATION_DESC_MARVEL"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"                        + RATING_DESC_INCREDIBLES + RATING_DESC_MARVEL + STARTDATE_DESC_MARVEL + TAG_DESC_SUPERHERO,"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"                new AddMovieCommand(expectedMovie));"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"        // multiple startDates - last startDate accepted"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"        assertParseSuccess(parser, MOVIENAME_DESC_MARVEL + DURATION_DESC_MARVEL"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":"                        + RATING_DESC_MARVEL + STARTDATE_DESC_INCREDIBLES + STARTDATE_DESC_MARVEL + TAG_DESC_SUPERHERO,"},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"                new AddMovieCommand(expectedMovie));"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMovieCommand.MESSAGE_USAGE);"},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"        // missing movieName prefix"},{"lineNumber":83,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, VALID_MOVIENAME_INCREDIBLES + DURATION_DESC_INCREDIBLES"},{"lineNumber":84,"author":{"gitID":"slothhy"},"content":"                + RATING_DESC_INCREDIBLES + STARTDATE_DESC_INCREDIBLES + TAG_DESC_COMEDY, expectedMessage);"},{"lineNumber":85,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"        // missing duration prefix"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, MOVIENAME_DESC_INCREDIBLES + VALID_DURATION_INCREDIBLES"},{"lineNumber":88,"author":{"gitID":"slothhy"},"content":"                + RATING_DESC_INCREDIBLES + STARTDATE_DESC_INCREDIBLES + TAG_DESC_COMEDY, expectedMessage);"},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":90,"author":{"gitID":"slothhy"},"content":"        // missing rating prefix"},{"lineNumber":91,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, MOVIENAME_DESC_INCREDIBLES + DURATION_DESC_INCREDIBLES"},{"lineNumber":92,"author":{"gitID":"slothhy"},"content":"                + VALID_RATING_INCREDIBLES + STARTDATE_DESC_INCREDIBLES + TAG_DESC_COMEDY, expectedMessage);"},{"lineNumber":93,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":94,"author":{"gitID":"slothhy"},"content":"        // missing startDate prefix"},{"lineNumber":95,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, MOVIENAME_DESC_INCREDIBLES + DURATION_DESC_INCREDIBLES"},{"lineNumber":96,"author":{"gitID":"slothhy"},"content":"                + RATING_DESC_INCREDIBLES + VALID_STARTDATE_INCREDIBLES + TAG_DESC_COMEDY, expectedMessage);"},{"lineNumber":97,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":98,"author":{"gitID":"slothhy"},"content":"        // all prefixes missing"},{"lineNumber":99,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, VALID_MOVIENAME_INCREDIBLES + VALID_DURATION_INCREDIBLES"},{"lineNumber":100,"author":{"gitID":"slothhy"},"content":"                + VALID_RATING_INCREDIBLES + VALID_STARTDATE_INCREDIBLES + VALID_TAG_COMEDY, expectedMessage);"},{"lineNumber":101,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":103,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"slothhy"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":105,"author":{"gitID":"slothhy"},"content":"        // invalid movieName"},{"lineNumber":106,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, INVALID_MOVIENAME_DESC + DURATION_DESC_MARVEL + RATING_DESC_MARVEL"},{"lineNumber":107,"author":{"gitID":"slothhy"},"content":"                + STARTDATE_DESC_MARVEL + TAG_DESC_SUPERHERO, MovieName.MESSAGE_MOVIENAME_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":109,"author":{"gitID":"slothhy"},"content":"        // invalid duration"},{"lineNumber":110,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, MOVIENAME_DESC_MARVEL + INVALID_DURATION_DESC + RATING_DESC_MARVEL"},{"lineNumber":111,"author":{"gitID":"slothhy"},"content":"                + STARTDATE_DESC_MARVEL + TAG_DESC_SUPERHERO, Duration.MESSAGE_DURATION_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":113,"author":{"gitID":"slothhy"},"content":"        // invalid rating"},{"lineNumber":114,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, MOVIENAME_DESC_MARVEL + DURATION_DESC_MARVEL + INVALID_RATING_DESC"},{"lineNumber":115,"author":{"gitID":"slothhy"},"content":"                + STARTDATE_DESC_MARVEL + TAG_DESC_SUPERHERO, Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":117,"author":{"gitID":"slothhy"},"content":"        // invalid startDate"},{"lineNumber":118,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, MOVIENAME_DESC_MARVEL + DURATION_DESC_MARVEL + RATING_DESC_MARVEL"},{"lineNumber":119,"author":{"gitID":"slothhy"},"content":"                + INVALID_STARTDATE_DESC + TAG_DESC_SUPERHERO, StartDate.MESSAGE_STARTDATE_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":121,"author":{"gitID":"slothhy"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":122,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, INVALID_MOVIENAME_DESC + DURATION_DESC_MARVEL + RATING_DESC_MARVEL"},{"lineNumber":123,"author":{"gitID":"slothhy"},"content":"                + INVALID_STARTDATE_DESC + TAG_DESC_SUPERHERO, MovieName.MESSAGE_MOVIENAME_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":125,"author":{"gitID":"slothhy"},"content":"        // non-empty preamble"},{"lineNumber":126,"author":{"gitID":"slothhy"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + MOVIENAME_DESC_MARVEL + DURATION_DESC_MARVEL"},{"lineNumber":127,"author":{"gitID":"slothhy"},"content":"                        + RATING_DESC_MARVEL + STARTDATE_DESC_MARVEL,"},{"lineNumber":128,"author":{"gitID":"slothhy"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMovieCommand.MESSAGE_USAGE));"},{"lineNumber":129,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":120,"-":10}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"        model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"    public void execute_newCinema_success() throws Exception {"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        Cinema validCinema \u003d new CinemaBuilder().build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager(model.getMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        expectedModel.addCinema(validCinema);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(prepareCommand(validCinema, model), model,"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validCinema), expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    public void execute_duplicateCinema_throwsCommandException() {"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"        Cinema cinemaInList \u003d model.getMoviePlanner().getCinemaList().get(0);"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(prepareCommand(cinemaInList, model), model, AddCommand.MESSAGE_DUPLICATE_CINEMA);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"     * Generates a new {@code AddCommand} which upon execution, adds {@code cinema} into the {@code model}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"    private AddCommand prepareCommand(Cinema cinema, Model model) {"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"        AddCommand command \u003d new AddCommand(cinema);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":3,"-":39,"qwlai":14}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    public void execute_emptyMoviePlanner_success() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    public void execute_nonEmptyMoviePlanner_success() {"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"        Model model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":2,"-":32,"qwlai":3}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_LOGIN;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_MESSAGE;"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_RECIPIENT;"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_SUBJECT;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMOFTHEATERS;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.NameContainsKeywordsPredicate;"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.EditCinemaDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"    public static final String VALID_MOVIENAME_INCREDIBLES \u003d \"The Incredibles\";"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"    public static final String VALID_MOVIENAME_MARVEL \u003d \"Marvel\";"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    public static final String VALID_DURATION_INCREDIBLES \u003d \"90\";"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"    public static final String VALID_DURATION_MARVEL \u003d \"120\";"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"    public static final String VALID_RATING_INCREDIBLES \u003d \"PG\";"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"    public static final String VALID_RATING_MARVEL \u003d \"NC16\";"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"    public static final String VALID_STARTDATE_INCREDIBLES \u003d \"03/03/2000\";"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"    public static final String VALID_STARTDATE_MARVEL \u003d \"08/09/2016\";"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"    public static final String VALID_NAME_SENGKANG \u003d \"Sengkang Cathay\";"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"    public static final String VALID_NAME_TAMPINES \u003d \"Tampines Cathay\";"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    public static final String VALID_PHONE_SENGKANG \u003d \"11111111\";"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"    public static final String VALID_PHONE_TAMPINES \u003d \"22222222\";"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"    public static final String VALID_EMAIL_SENGKANG \u003d \"sengkang@cathay.com\";"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    public static final String VALID_EMAIL_TAMPINES \u003d \"tampines@cathay.com\";"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"    public static final String VALID_ADDRESS_SENGKANG \u003d \"Sengkang Street 1\";"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    public static final String VALID_ADDRESS_TAMPINES \u003d \"Tampines\";"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"    public static final String VALID_TAG_SUPERHERO \u003d \"superhero\";"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"    public static final String VALID_TAG_COMEDY \u003d \"comedy\";"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"    public static final String VALID_TAG_UNUSED \u003d \"unused\"; // not to assign to any movie"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"    public static final String VALID_EMAIL_MESSAGE \u003d \"Hello Chief Manager, attached is my email.\";"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"    public static final String VALID_EMAIL_SUBJECT \u003d \"Schedule for next month\";"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":"    public static final String VALID_EMAIL_RECIPIENT \u003d \"chiefCineManager@gmail.com\";"},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"    public static final String VALID_EMAIL_LOGIN_ACCOUNT \u003d \"cineManager@gmail.com:somePassWord\";"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"    public static final String VALID_ANOTHER_MESSAGE \u003d \"Hi Mr. Matthews, This is a new email.\";"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"    public static final String VALID_ANOTHER_SUBJECT \u003d \"Scheduled Meeting\";"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"    public static final String VALID_ANOTHER_RECIPIENT \u003d \"anotherPerson@gmail.com\";"},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":"    public static final int VALID_NUMOFTHEATERS \u003d 3;"},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":"    public static final int VALID_NUMOFNEWTHEATERS \u003d 5;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"    public static final String MOVIENAME_DESC_INCREDIBLES \u003d \" \" + PREFIX_NAME + VALID_MOVIENAME_INCREDIBLES;"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"    public static final String MOVIENAME_DESC_MARVEL \u003d \" \" + PREFIX_NAME + VALID_MOVIENAME_MARVEL;"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":"    public static final String DURATION_DESC_INCREDIBLES \u003d \" \" + PREFIX_DURATION + VALID_DURATION_INCREDIBLES;"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"    public static final String DURATION_DESC_MARVEL \u003d \" \" + PREFIX_DURATION + VALID_DURATION_MARVEL;"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"    public static final String RATING_DESC_INCREDIBLES \u003d \" \" + PREFIX_RATING + VALID_RATING_INCREDIBLES;"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":"    public static final String RATING_DESC_MARVEL \u003d \" \" + PREFIX_RATING + VALID_RATING_MARVEL;"},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"    public static final String STARTDATE_DESC_INCREDIBLES \u003d \" \" + PREFIX_STARTDATE + VALID_STARTDATE_INCREDIBLES;"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"    public static final String STARTDATE_DESC_MARVEL \u003d \" \" + PREFIX_STARTDATE + VALID_STARTDATE_MARVEL;"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"    public static final String NAME_DESC_SENGKANG \u003d \" \" + PREFIX_NAME + VALID_NAME_SENGKANG;"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"    public static final String NAME_DESC_TAMPINES \u003d \" \" + PREFIX_NAME + VALID_NAME_TAMPINES;"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"    public static final String PHONE_DESC_SENGKANG \u003d \" \" + PREFIX_PHONE + VALID_PHONE_SENGKANG;"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"    public static final String PHONE_DESC_TAMPINES \u003d \" \" + PREFIX_PHONE + VALID_PHONE_TAMPINES;"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"    public static final String EMAIL_DESC_SENGKANG \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_SENGKANG;"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"    public static final String EMAIL_DESC_TAMPINES \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_TAMPINES;"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"    public static final String ADDRESS_DESC_SENGKANG \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_SENGKANG;"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"    public static final String ADDRESS_DESC_TAMPINES \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_TAMPINES;"},{"lineNumber":85,"author":{"gitID":"slothhy"},"content":"    public static final String TAG_DESC_COMEDY \u003d \" \" + PREFIX_TAG + VALID_TAG_COMEDY;"},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"    public static final String TAG_DESC_SUPERHERO \u003d \" \" + PREFIX_TAG + VALID_TAG_SUPERHERO;"},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"    public static final String THEATER_DESC_THREE \u003d \" \" + PREFIX_NUMOFTHEATERS + VALID_NUMOFTHEATERS;"},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":"    public static final String THEATER_DESC_FIVE \u003d \" \" + PREFIX_NUMOFTHEATERS + VALID_NUMOFNEWTHEATERS;"},{"lineNumber":89,"author":{"gitID":"chanyikwai"},"content":"    public static final String EMAIL_DESC_MESSAGE \u003d \" \" + PREFIX_EMAIL_MESSAGE + VALID_EMAIL_MESSAGE;"},{"lineNumber":90,"author":{"gitID":"chanyikwai"},"content":"    public static final String EMAIL_DESC_SUBJECT \u003d \" \" + PREFIX_EMAIL_SUBJECT + VALID_EMAIL_SUBJECT;"},{"lineNumber":91,"author":{"gitID":"chanyikwai"},"content":"    public static final String EMAIL_DESC_RECIPIENT \u003d \" \" + PREFIX_EMAIL_RECIPIENT + VALID_EMAIL_RECIPIENT;"},{"lineNumber":92,"author":{"gitID":"chanyikwai"},"content":"    public static final String EMAIL_DESC_LOGIN_ACCOUNT \u003d \" \" + PREFIX_EMAIL_LOGIN + VALID_EMAIL_LOGIN_ACCOUNT;"},{"lineNumber":93,"author":{"gitID":"chanyikwai"},"content":"    public static final String EMAIL_DESC_ANOTHER_MESSAGE \u003d \" \" + PREFIX_EMAIL_MESSAGE + VALID_ANOTHER_MESSAGE;"},{"lineNumber":94,"author":{"gitID":"chanyikwai"},"content":"    public static final String EMAIL_DESC_ANOTHER_SUBJECT \u003d \" \" + PREFIX_EMAIL_SUBJECT + VALID_ANOTHER_SUBJECT;"},{"lineNumber":95,"author":{"gitID":"chanyikwai"},"content":"    public static final String EMAIL_DESC_ANOTHER_RECIPIENT \u003d \" \" + PREFIX_EMAIL_RECIPIENT + VALID_ANOTHER_RECIPIENT;"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"slothhy"},"content":"    public static final String INVALID_MOVIENAME_DESC \u003d \" \" + PREFIX_NAME + \"Ghost\u0026\"; // \u0027\u0026\u0027 not allowed in movieNames"},{"lineNumber":98,"author":{"gitID":"slothhy"},"content":"    public static final String INVALID_DURATION_DESC \u003d \" \" + PREFIX_DURATION + \"12a\"; // \u0027a\u0027 not allowed in durations"},{"lineNumber":99,"author":{"gitID":"slothhy"},"content":"    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING + \"ABCDE\"; // rating can only be 2-4 characters"},{"lineNumber":100,"author":{"gitID":"slothhy"},"content":"    public static final String INVALID_STARTDATE_DESC \u003d \" \" + PREFIX_STARTDATE + \"ab/ac/abcd\"; // invalid date format"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":106,"author":{"gitID":"tinyjy94"},"content":"    public static final String INVALID_THEATER_DESC \u003d \" \""},{"lineNumber":107,"author":{"gitID":"tinyjy94"},"content":"                                    + PREFIX_NUMOFTHEATERS + \"-5\"; // negative number not allowed for number of theater"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"    public static final EditCommand.EditCinemaDescriptor DESC_SENGKANG;"},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"    public static final EditCommand.EditCinemaDescriptor DESC_TAMPINES;"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"        DESC_SENGKANG \u003d new EditCinemaDescriptorBuilder().withName(VALID_NAME_SENGKANG)"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"                .withPhone(VALID_PHONE_SENGKANG).withEmail(VALID_EMAIL_SENGKANG).withAddress(VALID_ADDRESS_SENGKANG)"},{"lineNumber":118,"author":{"gitID":"tinyjy94"},"content":"                .build();"},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":"        DESC_TAMPINES \u003d new EditCinemaDescriptorBuilder().withName(VALID_NAME_TAMPINES)"},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"                .withPhone(VALID_PHONE_TAMPINES).withEmail(VALID_EMAIL_TAMPINES).withAddress(VALID_ADDRESS_TAMPINES)"},{"lineNumber":121,"author":{"gitID":"tinyjy94"},"content":"                .build();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":144,"author":{"gitID":"qwlai"},"content":"     * - the movie planner and the filtered cinema list in the {@code actualModel} remain unchanged"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":149,"author":{"gitID":"qwlai"},"content":"        MoviePlanner expectedMoviePlanner \u003d new MoviePlanner(actualModel.getMoviePlanner());"},{"lineNumber":150,"author":{"gitID":"qwlai"},"content":"        List\u003cCinema\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCinemaList());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":157,"author":{"gitID":"qwlai"},"content":"            assertEquals(expectedMoviePlanner, actualModel.getMoviePlanner());"},{"lineNumber":158,"author":{"gitID":"qwlai"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredCinemaList());"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"qwlai"},"content":"     * Updates {@code model}\u0027s filtered list to show only the cinema at the given {@code targetIndex} in the"},{"lineNumber":164,"author":{"gitID":"qwlai"},"content":"     * {@code model}\u0027s movie planner."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"qwlai"},"content":"    public static void showCinemaAtIndex(Model model, Index targetIndex) {"},{"lineNumber":167,"author":{"gitID":"qwlai"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCinemaList().size());"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"qwlai"},"content":"        Cinema cinema \u003d model.getFilteredCinemaList().get(targetIndex.getZeroBased());"},{"lineNumber":170,"author":{"gitID":"qwlai"},"content":"        final String[] splitName \u003d cinema.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":171,"author":{"gitID":"qwlai"},"content":"        model.updateFilteredCinemaList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"qwlai"},"content":"        assertEquals(1, model.getFilteredCinemaList().size());"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"qwlai"},"content":"     * Deletes the first cinema in {@code model}\u0027s filtered list from {@code model}\u0027s movie planner."},{"lineNumber":178,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"qwlai"},"content":"    public static void deleteFirstCinema(Model model) {"},{"lineNumber":180,"author":{"gitID":"qwlai"},"content":"        Cinema firstCinema \u003d model.getFilteredCinemaList().get(0);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":182,"author":{"gitID":"qwlai"},"content":"            model.deleteCinema(firstCinema);"},{"lineNumber":183,"author":{"gitID":"qwlai"},"content":"        } catch (CinemaNotFoundException cnfe) {"},{"lineNumber":184,"author":{"gitID":"qwlai"},"content":"            throw new AssertionError(\"Cinema in filtered list must exist in model.\", cnfe);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":28,"chanyikwai":18,"tinyjy94":9,"-":104,"qwlai":46}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstCinema;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"    private final Model model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_CINEMA);"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_CINEMA);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":40,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"        deleteFirstCinema(expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"        expectedModel \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":4,"-":48,"qwlai":6}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstCinema;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCinemaAtIndex;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"    private final Model model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"        deleteFirstCinema(expectedModel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"        // undo() should cause the model\u0027s filtered list to show all cinemas"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"        expectedModel \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        // redo() should cause the model\u0027s filtered list to show all cinemas"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        deleteFirstCinema(expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"     * Deletes the first cinema in the model\u0027s filtered list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"            Cinema cinemaToDelete \u003d model.getFilteredCinemaList().get(0);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"                model.deleteCinema(cinemaToDelete);"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"            } catch (CinemaNotFoundException cnfe) {"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"                fail(\"Impossible: cinemaToDelete was retrieved from model.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":5,"-":48,"qwlai":17}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstCinema;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CINEMA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"    private final Model model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_CINEMA);"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_CINEMA);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":43,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"        deleteFirstCinema(expectedModel);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"        deleteFirstCinema(expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":3,"-":48,"qwlai":8}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCinemaAtIndex;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CINEMA;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CINEMA;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"        model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"        Index lastCinemaIndex \u003d Index.fromOneBased(model.getFilteredCinemaList().size());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"        assertExecutionSuccess(INDEX_FIRST_CINEMA);"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"        assertExecutionSuccess(INDEX_THIRD_CINEMA);"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"        assertExecutionSuccess(lastCinemaIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredCinemaList().size() + 1);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        assertExecutionSuccess(INDEX_FIRST_CINEMA);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_CINEMA;"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        // ensures that outOfBoundIndex is still in bounds of movie planner list"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getMoviePlanner().getCinemaList().size());"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_CINEMA);"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_CINEMA);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_CINEMA);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        // different cinema -\u003e returns false"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_CINEMA_SUCCESS, index.getOneBased()),"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":3,"-":117,"qwlai":23}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_CINEMAS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.CLEMENTI;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.EUNOS;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.FARRER;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"    private Model model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        // different cinema -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    public void execute_zeroKeywords_noCinemaFound() {"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CINEMAS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"    public void execute_multipleKeywords_multipleCinemasFound() {"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CINEMAS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        FindCommand command \u003d prepareCommand(\"Clementi Eunos Farrer\");"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CLEMENTI, EUNOS, FARRER));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"     *     - the {@code FilteredList\u003cCinema\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"     *     - the {@code MoviePlanner} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cCinema\u003e expectedList) {"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"        MoviePlanner expectedMoviePlanner \u003d new MoviePlanner(model.getMoviePlanner());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedList, model.getFilteredCinemaList());"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"        assertEquals(expectedMoviePlanner, model.getMoviePlanner());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":2,"-":76,"qwlai":21}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.AuthenticationFailedException;"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.Email;"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailMessageEmptyException;"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailRecipientsEmptyException;"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.DuplicateMovieException;"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.MovieNotFoundException;"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"    public void constructor_nullCinema_throwsNullPointerException() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    public void execute_cinemaAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"        ModelStubAcceptingCinemaAdded modelStub \u003d new ModelStubAcceptingCinemaAdded();"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"        Cinema validCinema \u003d new CinemaBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        CommandResult commandResult \u003d getAddCommandForCinema(validCinema, modelStub).execute();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validCinema), commandResult.feedbackToUser);"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"        assertEquals(Arrays.asList(validCinema), modelStub.cinemasAdded);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"    public void execute_duplicateCinema_throwsCommandException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateCinemaException();"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"        Cinema validCinema \u003d new CinemaBuilder().build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_CINEMA);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        getAddCommandForCinema(validCinema, modelStub).execute();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        Cinema aljunied \u003d new CinemaBuilder().withName(\"Cathay Aljunied\").build();"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"        Cinema bedok \u003d new CinemaBuilder().withName(\"Cathay Bedok\").build();"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        AddCommand addAljuniedCommand \u003d new AddCommand(aljunied);"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        AddCommand addBedokCommand \u003d new AddCommand(bedok);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"        assertTrue(addAljuniedCommand.equals(addAljuniedCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"        AddCommand addAljuniedCommandCopy \u003d new AddCommand(aljunied);"},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":"        assertTrue(addAljuniedCommand.equals(addAljuniedCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"        assertFalse(addAljuniedCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"        assertFalse(addAljuniedCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"        // different cinema -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"        assertFalse(addAljuniedCommand.equals(addBedokCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"     * Generates a new AddCommand with the details of the given cinema."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"    private AddCommand getAddCommandForCinema(Cinema cinema, Model model) {"},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"        AddCommand command \u003d new AddCommand(cinema);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"        public void addCinema(Cinema cinema) throws DuplicateCinemaException {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"        public void resetData(ReadOnlyMoviePlanner newData) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"        public ReadOnlyMoviePlanner getMoviePlanner() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"        public void deleteCinema(Cinema target) throws CinemaNotFoundException {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"qwlai"},"content":"        public void updateCinema(Cinema target, Cinema editedCinema)"},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":"                throws DuplicateCinemaException {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"tinyjy94"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"tinyjy94"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"qwlai"},"content":"        public ObservableList\u003cCinema\u003e getFilteredCinemaList() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"qwlai"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"qwlai"},"content":"        public ObservableList\u003cMovie\u003e getFilteredMovieList() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"slothhy"},"content":"        public void addMovie(Movie movie) throws DuplicateMovieException {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"slothhy"},"content":"        public void deleteMovie(Movie target) throws MovieNotFoundException {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"slothhy"},"content":"        public void updateMovie(Movie target, Movie editedMovie)"},{"lineNumber":167,"author":{"gitID":"slothhy"},"content":"                throws DuplicateMovieException {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"qwlai"},"content":"        public void updateFilteredCinemaList(Predicate\u003cCinema\u003e predicate) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":176,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"slothhy"},"content":"        public void updateFilteredMovieList(Predicate\u003cMovie\u003e predicate) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":179,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":181,"author":{"gitID":"chanyikwai"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"chanyikwai"},"content":"        public Email getEmailManager() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"chanyikwai"},"content":"        public void sendEmail(MessageDraft message) throws EmailLoginInvalidException, EmailMessageEmptyException,"},{"lineNumber":189,"author":{"gitID":"chanyikwai"},"content":"                EmailRecipientsEmptyException, AuthenticationFailedException {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"chanyikwai"},"content":"        public void loginEmailAccount(String [] loginDetails) throws EmailLoginInvalidException {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"chanyikwai"},"content":"        public String getEmailStatus() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":205,"author":{"gitID":"chanyikwai"},"content":"        public void clearEmailDraft() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":210,"author":{"gitID":"chanyikwai"},"content":"        public void draftEmail(MessageDraft message) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"qwlai"},"content":"     * A Model stub that always throw a DuplicateCinemaException when trying to add a cinema."},{"lineNumber":217,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"qwlai"},"content":"    private class ModelStubThrowingDuplicateCinemaException extends ModelStub {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"qwlai"},"content":"        public void addCinema(Cinema cinema) throws DuplicateCinemaException {"},{"lineNumber":221,"author":{"gitID":"qwlai"},"content":"            throw new DuplicateCinemaException();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"qwlai"},"content":"        public ReadOnlyMoviePlanner getMoviePlanner() {"},{"lineNumber":226,"author":{"gitID":"qwlai"},"content":"            return new MoviePlanner();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"qwlai"},"content":"     * A Model stub that always accept the cinema being added."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"qwlai"},"content":"    private class ModelStubAcceptingCinemaAdded extends ModelStub {"},{"lineNumber":234,"author":{"gitID":"qwlai"},"content":"        final ArrayList\u003cCinema\u003e cinemasAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":237,"author":{"gitID":"qwlai"},"content":"        public void addCinema(Cinema cinema) throws DuplicateCinemaException {"},{"lineNumber":238,"author":{"gitID":"qwlai"},"content":"            requireNonNull(cinema);"},{"lineNumber":239,"author":{"gitID":"qwlai"},"content":"            cinemasAdded.add(cinema);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"qwlai"},"content":"        public ReadOnlyMoviePlanner getMoviePlanner() {"},{"lineNumber":244,"author":{"gitID":"qwlai"},"content":"            return new MoviePlanner();"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":17,"slothhy":14,"tinyjy94":6,"-":154,"qwlai":57}},{"path":"src/test/java/seedu/address/logic/commands/AddTheaterCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMOFNEWTHEATERS;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMOFTHEATERS;"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCinemaAtIndex;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CINEMA;"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":" * Contains integration tests (interaction with the Model, UndoCommand) and unit tests for AddTheaterCommand."},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"public class AddTheaterCommandTest {"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":"    private Model model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"    public void execute_invalidCinemaIndexFilteredList_failure() {"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CINEMA;"},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":"        // ensures that outOfBoundIndex is still in bounds of movie planner list"},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMoviePlanner().getCinemaList().size());"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"        Cinema resizedCinema \u003d new CinemaBuilder().build();"},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":"        AddTheaterCommand addTheaterCommand \u003d prepareCommand(outOfBoundIndex, resizedCinema);"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"        assertCommandFailure(addTheaterCommand, model, Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":"    public void executeUndo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":"        Cinema resizedCinema \u003d new CinemaBuilder().build();"},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":"        AddTheaterCommand addTheaterCommand \u003d prepareCommand(INDEX_FIRST_CINEMA, resizedCinema);"},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":"        Model expectedModel \u003d new ModelManager(new MoviePlanner(model.getMoviePlanner()), new UserPrefs(),"},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":"                                              new EmailManager());"},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":62,"author":{"gitID":"tinyjy94"},"content":"        // edit -\u003e first cinema edited"},{"lineNumber":63,"author":{"gitID":"tinyjy94"},"content":"        addTheaterCommand.execute();"},{"lineNumber":64,"author":{"gitID":"tinyjy94"},"content":"        undoRedoStack.push(addTheaterCommand);"},{"lineNumber":65,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":"        // undo -\u003e reverts movieplanner back to previous state and filtered cinema list to show all cinemas"},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":70,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"tinyjy94"},"content":"    public void equals() {"},{"lineNumber":72,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e firstTheater \u003d new ArrayList\u003c\u003e(VALID_NUMOFTHEATERS);"},{"lineNumber":73,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e secondTheater \u003d new ArrayList\u003c\u003e(VALID_NUMOFNEWTHEATERS);"},{"lineNumber":74,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e thirdTheater \u003d new ArrayList\u003c\u003e(VALID_NUMOFTHEATERS);"},{"lineNumber":75,"author":{"gitID":"tinyjy94"},"content":"        AddTheaterCommand firstTheaterCommand \u003d new AddTheaterCommand(INDEX_FIRST_CINEMA, firstTheater.size());"},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":"        AddTheaterCommand secondTheaterCommand \u003d new AddTheaterCommand(INDEX_SECOND_CINEMA, secondTheater.size());"},{"lineNumber":77,"author":{"gitID":"tinyjy94"},"content":"        AddTheaterCommand thirdTheaterCommand \u003d new AddTheaterCommand(INDEX_FIRST_CINEMA, thirdTheater.size());"},{"lineNumber":78,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":79,"author":{"gitID":"tinyjy94"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"tinyjy94"},"content":"        assertFalse(firstTheaterCommand.equals(null));"},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":82,"author":{"gitID":"tinyjy94"},"content":"        // not equals -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"tinyjy94"},"content":"        assertFalse(firstTheaterCommand.equals(secondTheaterCommand));"},{"lineNumber":84,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":"        // same value -\u003e returns true"},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":"        assertTrue(firstTheaterCommand.equals(thirdTheaterCommand));"},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":"        // same object -\u003e returns true"},{"lineNumber":89,"author":{"gitID":"tinyjy94"},"content":"        assertTrue(firstTheaterCommand.equals(firstTheaterCommand));"},{"lineNumber":90,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":92,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"tinyjy94"},"content":"     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":94,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"tinyjy94"},"content":"    private AddTheaterCommand prepareCommand (Index index, Cinema cinema) {"},{"lineNumber":96,"author":{"gitID":"tinyjy94"},"content":"        AddTheaterCommand addTheaterCommand \u003d new AddTheaterCommand(index, cinema.getTheaters().size());"},{"lineNumber":97,"author":{"gitID":"tinyjy94"},"content":"        addTheaterCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitID":"tinyjy94"},"content":"        return addTheaterCommand;"},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":82,"-":12,"qwlai":6}},{"path":"src/test/java/seedu/address/logic/commands/AddScreeningCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCinemaAtIndex;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MOVIE;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CINEMA;"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_MOVIE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDateTime;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import org.junit.Before;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.StartDate;"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.TypicalMovies;"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"public class AddScreeningCommandTest {"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"    private static final int VALID_THEATER_NUMBER \u003d 1;"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    private static final String VALID_DATE_TIME \u003d \"11/11/2015 11:10\";"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"    private static final int INVALID_THEATER_NUMBER \u003d 5;"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"    private static final String DATE_TIME_FORMAT \u003d \"dd/MM/uuuu HH:mm\";"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"    private Model model;"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"    private DateTimeFormatter dtf;"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"    private AddScreeningCommand addScreeningCommand;"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"    @Before"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    public void setUp() throws Exception {"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"        model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"        model.addMovie(TypicalMovies.BLACK_PANTHER);"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"        model.addMovie(TypicalMovies.THOR_RAGNAROK);"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"        dtf \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT).withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"    public void constructor_nullFields_throwsNullPointerException() {"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        new AddScreeningCommand(null, null, 0, null);"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"    public void execute_invalidIndexCinemaFilteredList_throwsCommandException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"        Index outOfBoundIndex \u003d INDEX_THIRD_CINEMA;"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"        // ensures that outOfBoundIndex is still in bounds of movie planner list"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMoviePlanner().getCinemaList().size());"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        addScreeningCommand \u003d prepareCommand(INDEX_FIRST_MOVIE, outOfBoundIndex,"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"                VALID_THEATER_NUMBER, getDateTime(VALID_DATE_TIME));"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(addScreeningCommand, model, Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"    public void execute_invalidIndexMovieFilteredList_throwsCommandException() throws Exception {"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        Index outOfBoundIndex \u003d INDEX_THIRD_MOVIE;"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        addScreeningCommand \u003d prepareCommand(outOfBoundIndex, INDEX_FIRST_CINEMA,"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"                VALID_THEATER_NUMBER, getDateTime(VALID_DATE_TIME));"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(addScreeningCommand, model, Messages.MESSAGE_INVALID_MOVIE_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"    public void execute_invalidTheaterNumber_throwsCommandException() throws Exception {"},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":"        addScreeningCommand \u003d prepareCommand(INDEX_FIRST_MOVIE, INDEX_FIRST_CINEMA,"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"                INVALID_THEATER_NUMBER, getDateTime(VALID_DATE_TIME));"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(addScreeningCommand, model, Messages.MESSAGE_INVALID_THEATER_NUMBER);"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"    public void execute_screeningDateBeforeMovieReleaseDate_throwsCommandException() throws Exception {"},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"        StartDate firstMovieDate \u003d model.getFilteredMovieList().get(INDEX_FIRST_MOVIE.getZeroBased()).getStartDate();"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"        LocalDateTime invalidScreenDate \u003d getDateTime(firstMovieDate.toString() + \" 10:00\").minusDays(1);"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"        addScreeningCommand \u003d prepareCommand(INDEX_FIRST_MOVIE, INDEX_FIRST_CINEMA,"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"                VALID_THEATER_NUMBER, invalidScreenDate);"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"        assertCommandFailure(addScreeningCommand, model, Messages.MESSAGE_INVALID_SCREENING);"},{"lineNumber":98,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"     * Parses datetime and returns a valid LocalDateTime object"},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"    private LocalDateTime getDateTime(String dateTime) {"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"        return LocalDateTime.parse(dateTime, dtf);"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"     * Prepares an addScreeningCommand"},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"    private AddScreeningCommand prepareCommand(Index movieIndex, Index cinemaIndex,"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"                                               int theaterNumber, LocalDateTime screeningDateTime) {"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"        AddScreeningCommand command \u003d"},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"                new AddScreeningCommand(movieIndex, cinemaIndex, theaterNumber, screeningDateTime);"},{"lineNumber":114,"author":{"gitID":"qwlai"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"        return command;"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"slothhy":2,"-":14,"qwlai":101}},{"path":"src/test/java/seedu/address/storage/XmlSerializableMoviePlannerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.TypicalCinemas;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"public class XmlSerializableMoviePlannerTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableMoviePlannerTest/\");"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    private static final File TYPICAL_CINEMAS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalCinemasMoviePlanner.xml\");"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    private static final File INVALID_CINEMA_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidCinemaMoviePlanner.xml\");"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagMoviePlanner.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    public void toModelType_typicalCinemasFile_success() throws Exception {"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"        XmlSerializableMoviePlanner dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_CINEMAS_FILE,"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"                XmlSerializableMoviePlanner.class);"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"        MoviePlanner moviePlannerFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"        MoviePlanner typicalCinemasMoviePlanner \u003d TypicalCinemas.getTypicalMoviePlanner();"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        assertEquals(moviePlannerFromFile, typicalCinemasMoviePlanner);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    public void toModelType_invalidCinemaFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"        XmlSerializableMoviePlanner dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_CINEMA_FILE,"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"                XmlSerializableMoviePlanner.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"        XmlSerializableMoviePlanner dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"                XmlSerializableMoviePlanner.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":33,"qwlai":18}},{"path":"src/test/java/seedu/address/logic/commands/AddMovieCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.AuthenticationFailedException;"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.Email;"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailMessageEmptyException;"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailRecipientsEmptyException;"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.DuplicateMovieException;"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.MovieNotFoundException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"import seedu.address.testutil.MovieBuilder;"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"public class AddMovieCommandTest {"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"    @Rule"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"    public void constructor_nullMovie_throwsNullPointerException() {"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"        new AddMovieCommand(null);"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"    public void execute_movieAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"        ModelStubAcceptingMovieAdded modelStub \u003d new ModelStubAcceptingMovieAdded();"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"        Movie validMovie \u003d new MovieBuilder().build();"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"        CommandResult commandResult \u003d getAddMovieCommandForMovie(validMovie, modelStub).execute();"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"        assertEquals(String.format(AddMovieCommand.MESSAGE_SUCCESS, validMovie), commandResult.feedbackToUser);"},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"        assertEquals(Arrays.asList(validMovie), modelStub.moviesAdded);"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"    public void execute_duplicateMovie_throwsCommandException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicateMovieException();"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"        Movie validMovie \u003d new MovieBuilder().build();"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"        thrown.expectMessage(AddMovieCommand.MESSAGE_DUPLICATE_MOVIE);"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":"        getAddMovieCommandForMovie(validMovie, modelStub).execute();"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"    public void equals() {"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"        Movie incredibles \u003d new MovieBuilder().withMovieName(\"The Incredibles\").build();"},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":"        Movie batman \u003d new MovieBuilder().withMovieName(\"Batman Begins\").build();"},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"        AddMovieCommand addIncrediblesCommand \u003d new AddMovieCommand(incredibles);"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"        AddMovieCommand addBatmanCommand \u003d new AddMovieCommand(batman);"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"        assertTrue(addIncrediblesCommand.equals(addIncrediblesCommand));"},{"lineNumber":83,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":84,"author":{"gitID":"slothhy"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"slothhy"},"content":"        AddMovieCommand addIncrediblesCommandCopy \u003d new AddMovieCommand(incredibles);"},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"        assertTrue(addIncrediblesCommand.equals(addIncrediblesCommandCopy));"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":88,"author":{"gitID":"slothhy"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":"        assertFalse(addIncrediblesCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":91,"author":{"gitID":"slothhy"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"slothhy"},"content":"        assertFalse(addIncrediblesCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":94,"author":{"gitID":"slothhy"},"content":"        // different movie -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"slothhy"},"content":"        assertFalse(addIncrediblesCommand.equals(addBatmanCommand));"},{"lineNumber":96,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":98,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"slothhy"},"content":"     * Generates a new AddMovieCommand with the details of the given movie."},{"lineNumber":100,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"slothhy"},"content":"    private AddMovieCommand getAddMovieCommandForMovie(Movie movie, Model model) {"},{"lineNumber":102,"author":{"gitID":"slothhy"},"content":"        AddMovieCommand command \u003d new AddMovieCommand(movie);"},{"lineNumber":103,"author":{"gitID":"slothhy"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":104,"author":{"gitID":"slothhy"},"content":"        return command;"},{"lineNumber":105,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":107,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"slothhy"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":109,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"slothhy"},"content":"    private class ModelStub implements Model {"},{"lineNumber":111,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"slothhy"},"content":"        public void addCinema(Cinema cinema) throws DuplicateCinemaException {"},{"lineNumber":113,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":116,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"slothhy"},"content":"        public void resetData(ReadOnlyMoviePlanner newData) {"},{"lineNumber":118,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":121,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"slothhy"},"content":"        public ReadOnlyMoviePlanner getMoviePlanner() {"},{"lineNumber":123,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitID":"slothhy"},"content":"            return null;"},{"lineNumber":125,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":127,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":128,"author":{"gitID":"slothhy"},"content":"        public void deleteCinema(Cinema target) throws CinemaNotFoundException {"},{"lineNumber":129,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":132,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":133,"author":{"gitID":"slothhy"},"content":"        public void updateCinema(Cinema target, Cinema editedCinema)"},{"lineNumber":134,"author":{"gitID":"slothhy"},"content":"                throws DuplicateCinemaException {"},{"lineNumber":135,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":138,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":139,"author":{"gitID":"slothhy"},"content":"        public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":140,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":143,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":144,"author":{"gitID":"slothhy"},"content":"        public ObservableList\u003cCinema\u003e getFilteredCinemaList() {"},{"lineNumber":145,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitID":"slothhy"},"content":"            return null;"},{"lineNumber":147,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":149,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":150,"author":{"gitID":"slothhy"},"content":"        public ObservableList\u003cMovie\u003e getFilteredMovieList() {"},{"lineNumber":151,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":152,"author":{"gitID":"slothhy"},"content":"            return null;"},{"lineNumber":153,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":155,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":156,"author":{"gitID":"slothhy"},"content":"        public void addMovie(Movie movie) throws DuplicateMovieException {"},{"lineNumber":157,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":158,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":160,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"slothhy"},"content":"        public void deleteMovie(Movie target) throws MovieNotFoundException {"},{"lineNumber":162,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":165,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":166,"author":{"gitID":"slothhy"},"content":"        public void updateMovie(Movie target, Movie editedMovie)"},{"lineNumber":167,"author":{"gitID":"slothhy"},"content":"                throws DuplicateMovieException {"},{"lineNumber":168,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":171,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"slothhy"},"content":"        public void updateFilteredCinemaList(Predicate\u003cCinema\u003e predicate) {"},{"lineNumber":173,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":176,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"slothhy"},"content":"        public void updateFilteredMovieList(Predicate\u003cMovie\u003e predicate) {"},{"lineNumber":178,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":179,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":181,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"slothhy"},"content":"        public Email getEmailManager() {"},{"lineNumber":183,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitID":"slothhy"},"content":"            return null;"},{"lineNumber":185,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":187,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"slothhy"},"content":"        public void sendEmail(MessageDraft message) throws EmailLoginInvalidException, EmailMessageEmptyException,"},{"lineNumber":189,"author":{"gitID":"slothhy"},"content":"                EmailRecipientsEmptyException, AuthenticationFailedException {"},{"lineNumber":190,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":191,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":193,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"slothhy"},"content":"        public void loginEmailAccount(String [] loginDetails) throws EmailLoginInvalidException {"},{"lineNumber":195,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":198,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"slothhy"},"content":"        public String getEmailStatus() {"},{"lineNumber":200,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"slothhy"},"content":"            return null;"},{"lineNumber":202,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":204,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":205,"author":{"gitID":"slothhy"},"content":"        public void clearEmailDraft() {"},{"lineNumber":206,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":207,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":209,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":210,"author":{"gitID":"slothhy"},"content":"        public void draftEmail(MessageDraft message) {"},{"lineNumber":211,"author":{"gitID":"slothhy"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":212,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":215,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":216,"author":{"gitID":"slothhy"},"content":"     * A Model stub that always throw a DuplicateMovieException when trying to add a movie."},{"lineNumber":217,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"slothhy"},"content":"    private class ModelStubThrowingDuplicateMovieException extends ModelStub {"},{"lineNumber":219,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"slothhy"},"content":"        public void addMovie(Movie movie) throws DuplicateMovieException {"},{"lineNumber":221,"author":{"gitID":"slothhy"},"content":"            throw new DuplicateMovieException();"},{"lineNumber":222,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":224,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"slothhy"},"content":"        public ReadOnlyMoviePlanner getMoviePlanner() {"},{"lineNumber":226,"author":{"gitID":"slothhy"},"content":"            return new MoviePlanner();"},{"lineNumber":227,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":230,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"slothhy"},"content":"     * A Model stub that always accept the movie being added."},{"lineNumber":232,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"slothhy"},"content":"    private class ModelStubAcceptingMovieAdded extends ModelStub {"},{"lineNumber":234,"author":{"gitID":"slothhy"},"content":"        final ArrayList\u003cMovie\u003e moviesAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":235,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":236,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":237,"author":{"gitID":"slothhy"},"content":"        public void addMovie(Movie movie) throws DuplicateMovieException {"},{"lineNumber":238,"author":{"gitID":"slothhy"},"content":"            requireNonNull(movie);"},{"lineNumber":239,"author":{"gitID":"slothhy"},"content":"            moviesAdded.add(movie);"},{"lineNumber":240,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":242,"author":{"gitID":"slothhy"},"content":"        @Override"},{"lineNumber":243,"author":{"gitID":"slothhy"},"content":"        public ReadOnlyMoviePlanner getMoviePlanner() {"},{"lineNumber":244,"author":{"gitID":"slothhy"},"content":"            return new MoviePlanner();"},{"lineNumber":245,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":248,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"chanyikwai":7,"slothhy":212,"tinyjy94":1,"-":22,"qwlai":6}},{"path":"src/test/java/seedu/address/storage/XmlMoviePlannerStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.ALJUNIED;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.HOUGANG;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.INDO;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"public class XmlMoviePlannerStorageTest {"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlMoviePlannerStorageTest/\");"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"    public void readMoviePlanner_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"        readMoviePlanner(null);"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    private java.util.Optional\u003cReadOnlyMoviePlanner\u003e readMoviePlanner(String filePath) throws Exception {"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"        return new XmlMoviePlannerStorage(filePath).readMoviePlanner(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"        assertFalse(readMoviePlanner(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":"        readMoviePlanner(\"NotXmlFormatMoviePlanner.xml\");"},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":"    /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":"    That means you should not have more than one exception test in one method"},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":"    \u003cp\u003e"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    */"},{"lineNumber":63,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"tinyjy94"},"content":"    public void readMoviePlanner_invalidCinemaMoviePlanner_throwDataConversionException() throws Exception {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":"        readMoviePlanner(\"invalidCinemaMoviePlanner.xml\");"},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"    public void readMoviePlanner_invalidAndValidCinemaMoviePlanner_throwDataConversionException() throws Exception {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        readMoviePlanner(\"invalidAndValidCinemaMoviePlanner.xml\");"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"    public void readAndSaveMoviePlanner_allInOrder_success() throws Exception {"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempMoviePlanner.xml\";"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        MoviePlanner original \u003d getTypicalMoviePlanner();"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        XmlMoviePlannerStorage xmlMoviePlannerStorage \u003d new XmlMoviePlannerStorage(filePath);"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"        //Save in new file and read back"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"        xmlMoviePlannerStorage.saveMoviePlanner(original, filePath);"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"        ReadOnlyMoviePlanner readBack \u003d xmlMoviePlannerStorage.readMoviePlanner(filePath).get();"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"        assertEquals(original, new MoviePlanner(readBack));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"        original.addCinema(HOUGANG);"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        original.removeCinema(ALJUNIED);"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"        xmlMoviePlannerStorage.saveMoviePlanner(original, filePath);"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"        readBack \u003d xmlMoviePlannerStorage.readMoviePlanner(filePath).get();"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        assertEquals(original, new MoviePlanner(readBack));"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"        //Save and read without specifying file path"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"        original.addCinema(INDO);"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"        xmlMoviePlannerStorage.saveMoviePlanner(original); //file path not specified"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        readBack \u003d xmlMoviePlannerStorage.readMoviePlanner().get(); //file path not specified"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"        assertEquals(original, new MoviePlanner(readBack));"},{"lineNumber":98,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"    public void saveMoviePlanner_nullMoviePlanner_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"        saveMoviePlanner(null, \"SomeFile.xml\");"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"     * Saves {@code moviePlanner} at the specified {@code filePath}."},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"    private void saveMoviePlanner(ReadOnlyMoviePlanner moviePlanner, String filePath) {"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"        try {"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"            new XmlMoviePlannerStorage(filePath).saveMoviePlanner(moviePlanner, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":"    public void saveMoviePlanner_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"        saveMoviePlanner(new MoviePlanner(), null);"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":124,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":125,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"tinyjy94":14,"-":43,"qwlai":68}},{"path":"src/test/java/seedu/address/logic/commands/DeleteTheaterCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMOFNEWTHEATERS;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMOFTHEATERS;"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCinemaAtIndex;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CINEMA;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CINEMA;"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":" * Contains integration tests (interaction with the Model, UndoCommand) and unit tests for DeleteTheaterCommand."},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"public class DeleteTheaterCommandTest {"},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":"    private Model model \u003d new ModelManager(getTypicalMoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"    public void execute_invalidCinemaIndexFilteredList_failure() {"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"        showCinemaAtIndex(model, INDEX_FIRST_CINEMA);"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CINEMA;"},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":"        // ensures that outOfBoundIndex is still in bounds of movie planner list"},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMoviePlanner().getCinemaList().size());"},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"        Cinema resizedCinema \u003d new CinemaBuilder().build();"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"        DeleteTheaterCommand deleteTheaterCommand \u003d prepareCommand(outOfBoundIndex, resizedCinema);"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":"        assertCommandFailure(deleteTheaterCommand, model, Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"    public void executeUndo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":"        Cinema resizedCinema \u003d new CinemaBuilder().build();"},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":"        DeleteTheaterCommand deleteTheaterCommand \u003d prepareCommand(INDEX_FIRST_CINEMA, resizedCinema);"},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":"        Model expectedModel \u003d new ModelManager(new MoviePlanner(model.getMoviePlanner()), new UserPrefs(),"},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":"                                              new EmailManager());"},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":"        // resize -\u003e first cinema resized"},{"lineNumber":62,"author":{"gitID":"tinyjy94"},"content":"        deleteTheaterCommand.execute();"},{"lineNumber":63,"author":{"gitID":"tinyjy94"},"content":"        undoRedoStack.push(deleteTheaterCommand);"},{"lineNumber":64,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":65,"author":{"gitID":"tinyjy94"},"content":"        // undo -\u003e reverts movieplanner back to previous state and filtered cinema list to show all cinemas"},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":69,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"tinyjy94"},"content":"    public void equals() {"},{"lineNumber":71,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e firstTheater \u003d new ArrayList\u003c\u003e(VALID_NUMOFTHEATERS);"},{"lineNumber":72,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e secondTheater \u003d new ArrayList\u003c\u003e(VALID_NUMOFNEWTHEATERS);"},{"lineNumber":73,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e thirdTheater \u003d new ArrayList\u003c\u003e(VALID_NUMOFTHEATERS);"},{"lineNumber":74,"author":{"gitID":"tinyjy94"},"content":"        DeleteTheaterCommand firstTheaterCommand \u003d new DeleteTheaterCommand(INDEX_FIRST_CINEMA, firstTheater.size());"},{"lineNumber":75,"author":{"gitID":"tinyjy94"},"content":"        DeleteTheaterCommand secondTheaterCommand \u003d new DeleteTheaterCommand(INDEX_SECOND_CINEMA, secondTheater.size());"},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":"        DeleteTheaterCommand thirdTheaterCommand \u003d new DeleteTheaterCommand(INDEX_FIRST_CINEMA, thirdTheater.size());"},{"lineNumber":77,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":78,"author":{"gitID":"tinyjy94"},"content":"        // null -\u003e returns false"},{"lineNumber":79,"author":{"gitID":"tinyjy94"},"content":"        assertFalse(firstTheaterCommand.equals(null));"},{"lineNumber":80,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":"        // not equals -\u003e returns false"},{"lineNumber":82,"author":{"gitID":"tinyjy94"},"content":"        assertFalse(firstTheaterCommand.equals(secondTheaterCommand));"},{"lineNumber":83,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":84,"author":{"gitID":"tinyjy94"},"content":"        // same value -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":"        assertTrue(firstTheaterCommand.equals(thirdTheaterCommand));"},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"        // same object -\u003e returns true"},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":"        assertTrue(firstTheaterCommand.equals(firstTheaterCommand));"},{"lineNumber":89,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":91,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"tinyjy94"},"content":"     * Returns a {@code DeleteTheaterCommand} with parameters {@code index} and {@code cinema}"},{"lineNumber":93,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"tinyjy94"},"content":"    private DeleteTheaterCommand prepareCommand(Index index, Cinema cinema) {"},{"lineNumber":95,"author":{"gitID":"tinyjy94"},"content":"        DeleteTheaterCommand deleteTheaterCommand \u003d new DeleteTheaterCommand(index, cinema.getTheaters().size() - 1);"},{"lineNumber":96,"author":{"gitID":"tinyjy94"},"content":"        deleteTheaterCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":97,"author":{"gitID":"tinyjy94"},"content":"        return deleteTheaterCommand;"},{"lineNumber":98,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":81,"-":12,"qwlai":6}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100);"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"        userPrefs.setMoviePlannerFilePath(\"movieplanner.xml\");"},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":"        userPrefs.setMoviePlannerName(\"TypicalMoviePlannerName\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        original.setGuiSettings(1200, 200, 0, 2);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        original.setGuiSettings(5, 5, 5, 5);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":133,"qwlai":2}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.model.MoviePlannerChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        XmlMoviePlannerStorage moviePlannerStorage \u003d new XmlMoviePlannerStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"        storageManager \u003d new StorageManager(moviePlannerStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"    public void moviePlannerReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"         * {@link XmlMoviePlannerStorage} class."},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlMoviePlannerStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        MoviePlanner original \u003d getTypicalMoviePlanner();"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        storageManager.saveMoviePlanner(original);"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"        ReadOnlyMoviePlanner retrieved \u003d storageManager.readMoviePlanner().get();"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"        assertEquals(original, new MoviePlanner(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"    public void getMoviePlannerFilePath() {"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        assertNotNull(storageManager.getMoviePlannerFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"    public void handleMoviePlannerChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        Storage storage \u003d new StorageManager(new XmlMoviePlannerStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"        storage.handleMoviePlannerChangedEvent(new MoviePlannerChangedEvent(new MoviePlanner()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"    class XmlMoviePlannerStorageExceptionThrowingStub extends XmlMoviePlannerStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"        public XmlMoviePlannerStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"        public void saveMoviePlanner(ReadOnlyMoviePlanner moviePlanner, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":80,"qwlai":21}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedMovieTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":"import static seedu.address.storage.XmlAdaptedMovie.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import static seedu.address.testutil.TypicalMovies.ABTM4;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Duration;"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.MovieName;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Rating;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDate;"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"public class XmlAdaptedMovieTest {"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"    private static final String INVALID_DURATION \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    private static final String INVALID_RATING \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"    private static final String INVALID_STARTDATE \u003d \"03031231\";"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"    private static final String VALID_NAME \u003d ABTM4.getName().toString();"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"    private static final String VALID_DURATION \u003d ABTM4.getDuration().toString();"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"    private static final String VALID_RATING \u003d ABTM4.getRating().toString();"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"    private static final String VALID_STARTDATE \u003d ABTM4.getStartDate().toString();"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d ABTM4.getTags().stream()"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"    public void toModelType_validMovieDetails_returnsMovie() throws Exception {"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"        XmlAdaptedMovie movie \u003d new XmlAdaptedMovie(ABTM4);"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"        assertEquals(ABTM4, movie.toModelType());"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"        XmlAdaptedMovie movie \u003d"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"                new XmlAdaptedMovie(INVALID_NAME, VALID_DURATION, VALID_RATING, VALID_STARTDATE, VALID_TAGS);"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"        String expectedMessage \u003d MovieName.MESSAGE_MOVIENAME_CONSTRAINTS;"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, movie::toModelType);"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"        XmlAdaptedMovie movie \u003d new XmlAdaptedMovie(null, VALID_DURATION, VALID_RATING, VALID_STARTDATE,"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"                VALID_TAGS);"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MovieName.class.getSimpleName());"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, movie::toModelType);"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"    public void toModelType_invalidDuration_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"        XmlAdaptedMovie movie \u003d"},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"                new XmlAdaptedMovie(VALID_NAME, INVALID_DURATION, VALID_RATING, VALID_STARTDATE, VALID_TAGS);"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"        String expectedMessage \u003d Duration.MESSAGE_DURATION_CONSTRAINTS;"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, movie::toModelType);"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"    public void toModelType_nullDuration_throwsIllegalValueException() {"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":"        XmlAdaptedMovie movie \u003d new XmlAdaptedMovie(VALID_NAME, null, VALID_RATING,"},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"                VALID_STARTDATE, VALID_TAGS);"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Duration.class.getSimpleName());"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, movie::toModelType);"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":"    public void toModelType_invalidRating_throwsIllegalValueException() {"},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"        XmlAdaptedMovie movie \u003d"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"                new XmlAdaptedMovie(VALID_NAME, VALID_DURATION, INVALID_RATING, VALID_STARTDATE, VALID_TAGS);"},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":"        String expectedMessage \u003d Rating.MESSAGE_RATING_CONSTRAINTS;"},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, movie::toModelType);"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"    public void toModelType_nullRating_throwsIllegalValueException() {"},{"lineNumber":83,"author":{"gitID":"slothhy"},"content":"        XmlAdaptedMovie movie \u003d new XmlAdaptedMovie(VALID_NAME, VALID_DURATION, null,"},{"lineNumber":84,"author":{"gitID":"slothhy"},"content":"                VALID_STARTDATE, VALID_TAGS);"},{"lineNumber":85,"author":{"gitID":"slothhy"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName());"},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, movie::toModelType);"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"slothhy"},"content":"    public void toModelType_invalidStartDate_throwsIllegalValueException() {"},{"lineNumber":91,"author":{"gitID":"slothhy"},"content":"        XmlAdaptedMovie movie \u003d"},{"lineNumber":92,"author":{"gitID":"slothhy"},"content":"                new XmlAdaptedMovie(VALID_NAME, VALID_DURATION, VALID_RATING, INVALID_STARTDATE, VALID_TAGS);"},{"lineNumber":93,"author":{"gitID":"slothhy"},"content":"        String expectedMessage \u003d StartDate.MESSAGE_STARTDATE_CONSTRAINTS;"},{"lineNumber":94,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, movie::toModelType);"},{"lineNumber":95,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":97,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"slothhy"},"content":"    public void toModelType_nullStartDate_throwsIllegalValueException() {"},{"lineNumber":99,"author":{"gitID":"slothhy"},"content":"        XmlAdaptedMovie movie \u003d new XmlAdaptedMovie(VALID_NAME, VALID_DURATION, VALID_RATING, null,"},{"lineNumber":100,"author":{"gitID":"slothhy"},"content":"                VALID_TAGS);"},{"lineNumber":101,"author":{"gitID":"slothhy"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, StartDate.class.getSimpleName());"},{"lineNumber":102,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, movie::toModelType);"},{"lineNumber":103,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":105,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"slothhy"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":107,"author":{"gitID":"slothhy"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":108,"author":{"gitID":"slothhy"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":109,"author":{"gitID":"slothhy"},"content":"        XmlAdaptedMovie movie \u003d"},{"lineNumber":110,"author":{"gitID":"slothhy"},"content":"                new XmlAdaptedMovie(VALID_NAME, VALID_DURATION, VALID_RATING, VALID_STARTDATE, invalidTags);"},{"lineNumber":111,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(IllegalValueException.class, movie::toModelType);"},{"lineNumber":112,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":114,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":103,"-":11}},{"path":"src/test/java/seedu/address/model/cinema/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":40,"qwlai":1}},{"path":"src/test/java/seedu/address/model/cinema/PhoneTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class PhoneTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null phone number"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid phone numbers"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // valid phone numbers"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":40,"qwlai":1}},{"path":"src/test/java/seedu/address/model/movie/MovieNameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"public class MovieNameTest {"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new MovieName(null));"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new MovieName(invalidName));"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e MovieName.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"        assertFalse(MovieName.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"        assertFalse(MovieName.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"        assertFalse(MovieName.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"        assertFalse(MovieName.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"        assertTrue(MovieName.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"        assertTrue(MovieName.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"        assertTrue(MovieName.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"        assertTrue(MovieName.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"        assertTrue(MovieName.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":34,"-":7}},{"path":"src/test/java/seedu/address/model/cinema/TheaterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":"public class TheaterTest {"},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":"    public void constructor_invalidTheaterNumber_throwsIllegalArgumentException() {"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"        int invalidTheaterNumber \u003d 0;"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Theater(invalidTheaterNumber));"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"    public void isValidTheaterNumber() {"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"        // invalid theater numbers"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"        assertFalse(Theater.isValidTheater(\"\")); // empty string"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"        assertFalse(Theater.isValidTheater(\" \")); // spaces only"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":"        assertFalse(Theater.isValidTheater(\"phone\")); // non-numeric"},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"        assertFalse(Theater.isValidTheater(\"a9011p041\")); // alphabets and digits"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"        assertFalse(Theater.isValidTheater(\"9312 1534\")); // spaces within digits"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"        // valid theater numbers"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"        assertTrue(Theater.isValidTheater(\"1\")); // 1 digit"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"        assertTrue(Theater.isValidTheater(\"123456\")); // multiple digits"},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"}"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":""}],"authorContributionMap":{"tinyjy94":24,"-":7,"qwlai":1}},{"path":"src/test/java/seedu/address/model/cinema/EmailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class EmailTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null email"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // blank email"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // missing parts"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // invalid parts"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // valid email"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\"));  // minimal"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));   // long domain name"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":61,"qwlai":1}},{"path":"src/test/java/seedu/address/model/cinema/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.CinemaBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"        // different cinema -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        assertTrue(predicate.test(new CinemaBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"        assertTrue(predicate.test(new CinemaBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"        assertTrue(predicate.test(new CinemaBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        assertTrue(predicate.test(new CinemaBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        assertFalse(predicate.test(new CinemaBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"        assertFalse(predicate.test(new CinemaBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        assertFalse(predicate.test(new CinemaBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":65,"qwlai":10}},{"path":"src/test/java/seedu/address/model/cinema/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null address"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":36,"qwlai":1}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedCinemaTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.storage.XmlAdaptedCinema.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.BEDOK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"public class XmlAdaptedCinemaTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":"    private static final int INVALID_THEATER \u003d -5;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    private static final String VALID_NAME \u003d BEDOK.getName().toString();"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    private static final String VALID_PHONE \u003d BEDOK.getPhone().toString();"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    private static final String VALID_EMAIL \u003d BEDOK.getEmail().toString();"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    private static final String VALID_ADDRESS \u003d BEDOK.getAddress().toString();"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"    private static final List\u003cXmlAdaptedTheater\u003e VALID_THEATERLIST \u003d BEDOK.getTheaters().stream()"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"            .map(XmlAdaptedTheater::new)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"    private static final ArrayList\u003cXmlAdaptedTheater\u003e VALID_THEATER \u003d new ArrayList\u003c\u003e(VALID_THEATERLIST);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"    public void toModelType_validCinemaDetails_returnsCinema() throws Exception {"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedCinema cinema \u003d new XmlAdaptedCinema(BEDOK);"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        assertEquals(BEDOK, cinema.toModelType());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedCinema cinema \u003d"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"                new XmlAdaptedCinema(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_THEATER);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, cinema::toModelType);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"        XmlAdaptedCinema cinema \u003d new XmlAdaptedCinema(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"                                                        VALID_THEATER);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, cinema::toModelType);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedCinema cinema \u003d"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"                new XmlAdaptedCinema(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_THEATER);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, cinema::toModelType);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":69,"author":{"gitID":"tinyjy94"},"content":"        XmlAdaptedCinema cinema \u003d new XmlAdaptedCinema(VALID_NAME, null, VALID_EMAIL,"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"                VALID_ADDRESS, VALID_THEATER);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, cinema::toModelType);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedCinema cinema \u003d"},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"                new XmlAdaptedCinema(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_THEATER);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, cinema::toModelType);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":"        XmlAdaptedCinema cinema \u003d new XmlAdaptedCinema(VALID_NAME, VALID_PHONE, null,"},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"                VALID_ADDRESS, VALID_THEATER);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, cinema::toModelType);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedCinema cinema \u003d"},{"lineNumber":94,"author":{"gitID":"slothhy"},"content":"                new XmlAdaptedCinema(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_THEATER);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, cinema::toModelType);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":101,"author":{"gitID":"tinyjy94"},"content":"        XmlAdaptedCinema cinema \u003d new XmlAdaptedCinema(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":102,"author":{"gitID":"slothhy"},"content":"                VALID_THEATER);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, cinema::toModelType);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"tinyjy94"},"content":"    public void toModelType_invalidTheaterNum_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"tinyjy94"},"content":"        String expectedMessage \u003d \"\";"},{"lineNumber":110,"author":{"gitID":"tinyjy94"},"content":"        if (!Theater.isValidTheater(String.valueOf(INVALID_THEATER))) {"},{"lineNumber":111,"author":{"gitID":"tinyjy94"},"content":"            expectedMessage \u003d Theater.MESSAGE_THEATER_CONSTRAINTS;"},{"lineNumber":112,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cXmlAdaptedTheater\u003e invalidTheater \u003d new ArrayList\u003c\u003e();"},{"lineNumber":114,"author":{"gitID":"tinyjy94"},"content":"        XmlAdaptedCinema cinema \u003d new XmlAdaptedCinema(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":115,"author":{"gitID":"slothhy"},"content":"                VALID_ADDRESS, invalidTheater);"},{"lineNumber":116,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, cinema::toModelType);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"tinyjy94"},"content":"    public void toModelType_nullTheaterNum_throwsIllegalValueException() {"},{"lineNumber":122,"author":{"gitID":"tinyjy94"},"content":"        XmlAdaptedCinema cinema \u003d new XmlAdaptedCinema(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":123,"author":{"gitID":"slothhy"},"content":"                VALID_ADDRESS, null);"},{"lineNumber":124,"author":{"gitID":"tinyjy94"},"content":"        String expectedMessage \u003d Theater.MESSAGE_THEATER_CONSTRAINTS;"},{"lineNumber":125,"author":{"gitID":"qwlai"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, cinema::toModelType);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":10,"tinyjy94":20,"-":69,"qwlai":29}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"tinyjy94"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMEDY;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SUPERHERO;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CINEMAS;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.ALJUNIED;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.BEDOK;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.SENGKANG;"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"import static seedu.address.testutil.TypicalMovies.ABTM4;"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"import static seedu.address.testutil.TypicalMovies.BLACK_PANTHER;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"import seedu.address.testutil.MovieBuilder;"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.MoviePlannerBuilder;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    public void getFilteredCinemaList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        modelManager.getFilteredCinemaList().remove(0);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"        MoviePlanner moviePlanner \u003d new MoviePlannerBuilder().withCinema(ALJUNIED).withCinema(BEDOK).build();"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        MoviePlanner differentMoviePlanner \u003d new MoviePlanner();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"        EmailManager emailManager \u003d new EmailManager();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"        ModelManager modelManager \u003d new ModelManager(moviePlanner, userPrefs, emailManager);"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(moviePlanner, userPrefs, emailManager);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        // different moviePlanner -\u003e returns false"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentMoviePlanner, userPrefs, emailManager)));"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"        String[] keywords \u003d ALJUNIED.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"        modelManager.updateFilteredCinemaList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":"        assertFalse(modelManager.equals(new ModelManager(moviePlanner, userPrefs, emailManager)));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        modelManager.updateFilteredCinemaList(PREDICATE_SHOW_ALL_CINEMAS);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        differentUserPrefs.setMoviePlannerName(\"differentName\");"},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"        assertTrue(modelManager.equals(new ModelManager(moviePlanner, differentUserPrefs, emailManager)));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":80,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":"    public void deleteTag_tagNotInUse_modelNotChanged() throws Exception {"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"        MoviePlanner moviePlannerWithAmy \u003d new MoviePlannerBuilder().withCinema(SENGKANG).build();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitID":"chanyikwai"},"content":"        EmailManager emailManager \u003d new EmailManager();"},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":"        ModelManager modelManager \u003d new ModelManager(moviePlannerWithAmy, userPrefs, emailManager);"},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"        thrown.expect(TagNotFoundException.class);"},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":89,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":90,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(new ModelManager(moviePlannerWithAmy, userPrefs, emailManager), modelManager);"},{"lineNumber":91,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":93,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"tinyjy94"},"content":"    public void deleteTag_tagInUseByOneCinema_tagRemoved() throws Exception {"},{"lineNumber":95,"author":{"gitID":"slothhy"},"content":"        MoviePlanner moviePlannerWithAmyAndBob \u003d new MoviePlannerBuilder().withMovie(ABTM4).withMovie(BLACK_PANTHER)"},{"lineNumber":96,"author":{"gitID":"slothhy"},"content":"                .build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":98,"author":{"gitID":"chanyikwai"},"content":"        EmailManager emailManager \u003d new EmailManager();"},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":100,"author":{"gitID":"chanyikwai"},"content":"        ModelManager modelManager \u003d new ModelManager(moviePlannerWithAmyAndBob, userPrefs, emailManager);"},{"lineNumber":101,"author":{"gitID":"slothhy"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_SUPERHERO));"},{"lineNumber":102,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":103,"author":{"gitID":"slothhy"},"content":"        Movie bpSuperheroTagRemoved \u003d new MovieBuilder(BLACK_PANTHER).withTags(VALID_TAG_COMEDY).build();"},{"lineNumber":104,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":105,"author":{"gitID":"slothhy"},"content":"        MoviePlanner expectedMoviePlanner \u003d new MoviePlannerBuilder().withMovie(ABTM4)"},{"lineNumber":106,"author":{"gitID":"slothhy"},"content":"                                                                  .withMovie(bpSuperheroTagRemoved).build();"},{"lineNumber":107,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":108,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(new ModelManager(expectedMoviePlanner, userPrefs, emailManager), modelManager);"},{"lineNumber":109,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":111,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"slothhy"},"content":"    public void deleteTag_tagInUseByMultipleMovie_tagRemoved() throws Exception {"},{"lineNumber":113,"author":{"gitID":"slothhy"},"content":"        MoviePlanner moviePlannerWithAbtm44AndBp \u003d new MoviePlannerBuilder().withMovie(ABTM4).withMovie(BLACK_PANTHER)"},{"lineNumber":114,"author":{"gitID":"slothhy"},"content":"                .build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":116,"author":{"gitID":"chanyikwai"},"content":"        EmailManager emailManager \u003d new EmailManager();"},{"lineNumber":117,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":118,"author":{"gitID":"chanyikwai"},"content":"        ModelManager modelManager \u003d new ModelManager(moviePlannerWithAbtm44AndBp, userPrefs, emailManager);"},{"lineNumber":119,"author":{"gitID":"slothhy"},"content":"        modelManager.deleteTag(new Tag(VALID_TAG_COMEDY));"},{"lineNumber":120,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":121,"author":{"gitID":"slothhy"},"content":"        Movie abtm4ComedyTagRemoved \u003d new MovieBuilder(ABTM4).withTags().build();"},{"lineNumber":122,"author":{"gitID":"slothhy"},"content":"        Movie bpComedyTagRemoved \u003d new MovieBuilder(BLACK_PANTHER).withTags(VALID_TAG_SUPERHERO).build();"},{"lineNumber":123,"author":{"gitID":"slothhy"},"content":"        MoviePlanner expectedMoviePlanner \u003d new MoviePlannerBuilder().withMovie(abtm4ComedyTagRemoved)"},{"lineNumber":124,"author":{"gitID":"slothhy"},"content":"                                                                  .withMovie(bpComedyTagRemoved).build();"},{"lineNumber":125,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":126,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(new ModelManager(expectedMoviePlanner, userPrefs, emailManager), modelManager);"},{"lineNumber":127,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":17,"slothhy":20,"tinyjy94":26,"-":49,"qwlai":16}},{"path":"src/test/java/seedu/address/model/movie/NameContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"import seedu.address.testutil.MovieBuilder;"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"        // same values -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"        // different cinema -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"        // One keyword"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Ghost\"));"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"        assertTrue(predicate.test(new MovieBuilder().withMovieName(\"Ghost Hunter\").build()));"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"        // Multiple keywords"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Ghost\", \"Hunter\"));"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"        assertTrue(predicate.test(new MovieBuilder().withMovieName(\"Ghost Hunter\").build()));"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"        // Mixed-case keywords"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"sPiDerMan\"));"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"        assertTrue(predicate.test(new MovieBuilder().withMovieName(\"Spiderman\").build()));"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"        // Zero keywords"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"        assertTrue(predicate.test(new MovieBuilder().withMovieName(\"Ghost\").build()));"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"        // Non-matching keyword"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Incredibles\"));"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"        assertFalse(predicate.test(new MovieBuilder().withMovieName(\"Spiderman\").build()));"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":57,"-":10}},{"path":"src/test/java/seedu/address/model/movie/DurationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"public class DurationTest {"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Duration(null));"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"        String invalidDuration \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Duration(invalidDuration));"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"    public void isValidDuration() {"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"        // null duration"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Duration.isValidDuration(null));"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"        // invalid duration"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"        assertFalse(Duration.isValidDuration(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"        assertFalse(Duration.isValidDuration(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"        assertFalse(Duration.isValidDuration(\"phone\")); // non-numeric"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"        assertFalse(Duration.isValidDuration(\"9011p041\")); // alphabets within digits"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"        assertFalse(Duration.isValidDuration(\"9312 1534\")); // spaces within digits"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"        // valid duration"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"        assertTrue(Duration.isValidDuration(\"60\"));"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"        assertTrue(Duration.isValidDuration(\"120\"));"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":32,"-":7}},{"path":"src/test/java/seedu/address/model/UniqueCinemaListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.UniqueCinemaList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"public class UniqueCinemaListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"        UniqueCinemaList uniqueCinemaList \u003d new UniqueCinemaList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"        uniqueCinemaList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":15,"qwlai":4}},{"path":"src/test/java/seedu/address/testutil/EmailBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":" * A utility class to help with building Email objects."},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"public class EmailBuilder {"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"    public static final String DEFAULT_MESSAGE \u003d \"Hello Chief Manager. This is the planned schedule.\";"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"    public static final String DEFAULT_SUBJECT \u003d \"Planned schedule\";"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"    public static final String DEFAULT_RECIPIENT \u003d \"chiefCineManager@gmail.com\";"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"    public static final String DEFAULT_LOGIN_ACCOUNT \u003d \"cineManager@gmail.com:somePassword\";"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"    private EmailManager emailManager;"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"    private MessageDraft messageDraft;"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"    private String[] loginAccount;"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"    public EmailBuilder() {"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"        emailManager \u003d new EmailManager();"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"        messageDraft \u003d new MessageDraft(DEFAULT_MESSAGE, DEFAULT_SUBJECT, DEFAULT_RECIPIENT);"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"        loginAccount \u003d DEFAULT_LOGIN_ACCOUNT.split(\":\");"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"        emailManager.composeEmail(messageDraft);"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"            emailManager.loginEmailAccount(loginAccount);"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailLoginInvalidException e) {"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"            System.out.println(e);"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"     * Initializes the EmailBuilder with the data of {@code messageDraftToCopy}."},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"    public EmailBuilder(EmailManager emailManager) {"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"        this.emailManager \u003d emailManager;"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"     * Sets the {@code message} of the {@code MessageDraft} that we are building."},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"    public EmailBuilder withMessage(String message) {"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"        messageDraft.setMessage(message);"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"        emailManager.composeEmail(messageDraft);"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        return this;"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"     * Sets the {@code subject} of the {@code MessageDraft} that we are building."},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"    public EmailBuilder withSubject(String subject) {"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"        messageDraft.setSubject(subject);"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"        emailManager.composeEmail(messageDraft);"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"     * Sets the {@code recipient} of the {@code MessageDraft} that we are building."},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":"    public EmailBuilder withRecipient(String recipient) {"},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"        messageDraft.setRecipients(recipient);"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"        emailManager.composeEmail(messageDraft);"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"        return this;"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"     * Sets the {@code recipient} of the {@code MessageDraft} that we are building."},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"chanyikwai"},"content":"    public EmailBuilder withLoginAccount(String loginAccount) throws EmailLoginInvalidException {"},{"lineNumber":71,"author":{"gitID":"chanyikwai"},"content":"        this.loginAccount \u003d loginAccount.split(\":\");"},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":"        emailManager.loginEmailAccount(this.loginAccount);"},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":76,"author":{"gitID":"chanyikwai"},"content":"    public EmailManager build() {"},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"        return emailManager;"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":80,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":80}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"    public static final Index INDEX_FIRST_CINEMA \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"    public static final Index INDEX_SECOND_CINEMA \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"    public static final Index INDEX_THIRD_CINEMA \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"    public static final Index INDEX_FIRST_MOVIE \u003d Index.fromOneBased(1);"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"    public static final Index INDEX_SECOND_MOVIE \u003d Index.fromOneBased(2);"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"    public static final Index INDEX_THIRD_MOVIE \u003d Index.fromOneBased(3);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":3,"-":9,"qwlai":3}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"     * Returns the middle index of the cinema in the {@code model}\u0027s cinema list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"        return Index.fromOneBased(model.getMoviePlanner().getCinemaList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"     * Returns the last index of the cinema in the {@code model}\u0027s cinema list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        return Index.fromOneBased(model.getMoviePlanner().getCinemaList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"     * Returns the cinema in the {@code model}\u0027s cinema list at {@code index}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"    public static Cinema getCinema(Model model, Index index) {"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"        return model.getMoviePlanner().getCinemaList().get(index.getZeroBased());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":46,"qwlai":8}},{"path":"src/test/java/seedu/address/testutil/MoviePlannerBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.DuplicateMovieException;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":" * A utility class to help with building MoviePlanner objects."},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":" *     {@code MoviePlanner ab \u003d new MoviePlannerBuilder().withCinema(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"public class MoviePlannerBuilder {"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    private MoviePlanner moviePlanner;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    public MoviePlannerBuilder() {"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"        moviePlanner \u003d new MoviePlanner();"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    public MoviePlannerBuilder(MoviePlanner moviePlanner) {"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"        this.moviePlanner \u003d moviePlanner;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"     * Adds a new {@code Cinema} to the {@code MoviePlanner} that we are building."},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    public MoviePlannerBuilder withCinema(Cinema cinema) {"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"            moviePlanner.addCinema(cinema);"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"        } catch (DuplicateCinemaException dce) {"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"            throw new IllegalArgumentException(\"cinema is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"     * Adds a new {@code Movie} to the {@code MoviePlanner} that we are building."},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"    public MoviePlannerBuilder withMovie(Movie movie) {"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"            moviePlanner.addMovie(movie);"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"        } catch (DuplicateMovieException dce) {"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"            throw new IllegalArgumentException(\"cinema is expected to be unique.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    public MoviePlanner build() {"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"        return moviePlanner;"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"slothhy":9,"-":8,"qwlai":36}},{"path":"src/test/java/seedu/address/model/MoviePlannerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_COMEDY;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SUPERHERO;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.ALJUNIED;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.SENGKANG;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.TAMPINES;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import static seedu.address.testutil.TypicalCinemas.getTypicalMoviePlanner;"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"import static seedu.address.testutil.TypicalMovies.ABTM4;"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"import static seedu.address.testutil.TypicalMovies.BLACK_PANTHER;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"import seedu.address.testutil.MovieBuilder;"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"import seedu.address.testutil.MoviePlannerBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"public class MoviePlannerTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"    private final MoviePlanner moviePlanner \u003d new MoviePlanner();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"        assertEquals(Collections.emptyList(), moviePlanner.getCinemaList());"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"        assertEquals(Collections.emptyList(), moviePlanner.getTagList());"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        assertEquals(Collections.emptyList(), moviePlanner.getTheaterList());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"        moviePlanner.resetData(null);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    public void resetData_withValidReadOnlyMoviePlanner_replacesData() {"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"        MoviePlanner newData \u003d getTypicalMoviePlanner();"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        moviePlanner.resetData(newData);"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"        assertEquals(newData, moviePlanner);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    public void resetData_withDuplicateCinemas_throwsAssertionError() {"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        // Repeat ALJUNIED twice"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        List\u003cCinema\u003e newCinemas \u003d Arrays.asList(ALJUNIED, ALJUNIED);"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        List\u003cMovie\u003e newMovies \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(BLACK_PANTHER.getTags());"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"        List\u003cTheater\u003e newTheaters \u003d new ArrayList\u003c\u003e(ALJUNIED.getTheaters());"},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"        MoviePlannerStub newData \u003d new MoviePlannerStub(newCinemas, newTheaters, newTags, newMovies);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        moviePlanner.resetData(newData);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"    public void getCinemaList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"        moviePlanner.getCinemaList().remove(0);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"        moviePlanner.getTagList().remove(0);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"    public void updateCinema_modifyDetails_cinemaAndTagListUpdated() throws Exception {"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        MoviePlanner moviePlannerBobChangeToAmy \u003d new MoviePlannerBuilder().withCinema(TAMPINES).build();"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"        MoviePlanner moviePlannerWithAmy \u003d new MoviePlannerBuilder().withCinema(SENGKANG).build();"},{"lineNumber":90,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        moviePlannerBobChangeToAmy.updateCinema(TAMPINES, SENGKANG);"},{"lineNumber":92,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"        assertEquals(moviePlannerWithAmy, moviePlannerBobChangeToAmy);"},{"lineNumber":94,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":96,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"    public void removeTag_tagNotInUse_moviePlannerNotChanged() throws Exception {"},{"lineNumber":98,"author":{"gitID":"slothhy"},"content":"        MoviePlanner moviePlannerWithAbtm4 \u003d new MoviePlannerBuilder().withMovie(ABTM4).build();"},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":"        thrown.expect(TagNotFoundException.class);"},{"lineNumber":100,"author":{"gitID":"slothhy"},"content":"        moviePlannerWithAbtm4.removeTag(new Tag(VALID_TAG_UNUSED));"},{"lineNumber":101,"author":{"gitID":"slothhy"},"content":"        MoviePlanner expectedMoviePlanner \u003d new MoviePlannerBuilder().withMovie(ABTM4).build();"},{"lineNumber":102,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":103,"author":{"gitID":"slothhy"},"content":"        assertEquals(expectedMoviePlanner, moviePlannerWithAbtm4);"},{"lineNumber":104,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":106,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"slothhy"},"content":"    public void removeTag_tagInUseByOneMovie_tagRemoved() throws Exception {"},{"lineNumber":108,"author":{"gitID":"slothhy"},"content":"        MoviePlanner moviePlannerWithAbtm4andBp \u003d new MoviePlannerBuilder().withMovie(ABTM4)"},{"lineNumber":109,"author":{"gitID":"slothhy"},"content":"                .withMovie(BLACK_PANTHER).build();"},{"lineNumber":110,"author":{"gitID":"slothhy"},"content":"        moviePlannerWithAbtm4andBp.removeTag(new Tag(VALID_TAG_SUPERHERO));"},{"lineNumber":111,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":112,"author":{"gitID":"slothhy"},"content":"        Movie bpSuperheroTagRemoved \u003d new MovieBuilder(BLACK_PANTHER).withTags(VALID_TAG_COMEDY).build();"},{"lineNumber":113,"author":{"gitID":"slothhy"},"content":"        MoviePlanner expectedMoviePlanner \u003d new MoviePlannerBuilder().withMovie(ABTM4)"},{"lineNumber":114,"author":{"gitID":"slothhy"},"content":"                                                                  .withMovie(bpSuperheroTagRemoved).build();"},{"lineNumber":115,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":116,"author":{"gitID":"slothhy"},"content":"        assertEquals(expectedMoviePlanner, moviePlannerWithAbtm4andBp);"},{"lineNumber":117,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":119,"author":{"gitID":"tinyjy94"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"slothhy"},"content":"    public void removeTag_tagInUseByMultipleMovie_tagRemoved() throws Exception {"},{"lineNumber":121,"author":{"gitID":"slothhy"},"content":"        MoviePlanner moviePlannerWithAbtm4AndBp \u003d new MoviePlannerBuilder().withMovie(ABTM4)"},{"lineNumber":122,"author":{"gitID":"slothhy"},"content":"                .withMovie(BLACK_PANTHER).build();"},{"lineNumber":123,"author":{"gitID":"slothhy"},"content":"        moviePlannerWithAbtm4AndBp.removeTag(new Tag(VALID_TAG_COMEDY));"},{"lineNumber":124,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":125,"author":{"gitID":"slothhy"},"content":"        Movie abtm4ComedyTagRemoved \u003d new MovieBuilder(ABTM4).withTags().build();"},{"lineNumber":126,"author":{"gitID":"slothhy"},"content":"        Movie bpComedyTagRemoved \u003d new MovieBuilder(BLACK_PANTHER).withTags(VALID_TAG_SUPERHERO).build();"},{"lineNumber":127,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":128,"author":{"gitID":"slothhy"},"content":"        MoviePlanner expectedMoviePlanner \u003d new MoviePlannerBuilder().withMovie(abtm4ComedyTagRemoved)"},{"lineNumber":129,"author":{"gitID":"slothhy"},"content":"                                                                  .withMovie(bpComedyTagRemoved).build();"},{"lineNumber":130,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":131,"author":{"gitID":"slothhy"},"content":"        assertEquals(expectedMoviePlanner, moviePlannerWithAbtm4AndBp);"},{"lineNumber":132,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"     * A stub ReadOnlyMoviePlanner whose cinemas and tags lists can violate interface constraints."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"qwlai"},"content":"    private static class MoviePlannerStub implements ReadOnlyMoviePlanner {"},{"lineNumber":138,"author":{"gitID":"qwlai"},"content":"        private final ObservableList\u003cCinema\u003e cinemas \u003d FXCollections.observableArrayList();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":140,"author":{"gitID":"qwlai"},"content":"        private final ObservableList\u003cMovie\u003e movies \u003d FXCollections.observableArrayList();"},{"lineNumber":141,"author":{"gitID":"tinyjy94"},"content":"        private final ObservableList\u003cTheater\u003e theaters \u003d FXCollections.observableArrayList();"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"slothhy"},"content":"        MoviePlannerStub(Collection\u003cCinema\u003e cinemas, Collection\u003cTheater\u003e theaters,"},{"lineNumber":144,"author":{"gitID":"slothhy"},"content":"                         Collection\u003c? extends Tag\u003e tags, Collection\u003cMovie\u003e movies) {"},{"lineNumber":145,"author":{"gitID":"qwlai"},"content":"            this.cinemas.setAll(cinemas);"},{"lineNumber":146,"author":{"gitID":"qwlai"},"content":"            this.movies.setAll(movies);"},{"lineNumber":147,"author":{"gitID":"slothhy"},"content":"            this.tags.setAll(tags);"},{"lineNumber":148,"author":{"gitID":"tinyjy94"},"content":"            this.theaters.setAll(theaters);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"qwlai"},"content":"        public ObservableList\u003cCinema\u003e getCinemaList() {"},{"lineNumber":153,"author":{"gitID":"qwlai"},"content":"            return cinemas;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":161,"author":{"gitID":"qwlai"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"qwlai"},"content":"        public ObservableList\u003cMovie\u003e getMovieList() {"},{"lineNumber":163,"author":{"gitID":"qwlai"},"content":"            return movies;"},{"lineNumber":164,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"tinyjy94"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"tinyjy94"},"content":"        public ObservableList\u003cTheater\u003e getTheaterList() {"},{"lineNumber":168,"author":{"gitID":"tinyjy94"},"content":"            return theaters;"},{"lineNumber":169,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":31,"tinyjy94":32,"-":66,"qwlai":44}},{"path":"src/test/java/seedu/address/testutil/CinemaUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMOFTHEATERS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":" * A utility class for Cinema."},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"public class CinemaUtil {"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"     * Uses the add command word"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"     * Returns an add command string for adding the {@code cinema}."},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    public static String getAddCommand(Cinema cinema) {"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getCinemaDetails(cinema);"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"     * Uses the add command alias"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"     * Returns an add command string for adding the {@code cinema}."},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    public static String getAddUsingAliasCommand(Cinema cinema) {"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"        return AddCommand.COMMAND_ALIAS + \" \" + getCinemaDetails(cinema);"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"     * Returns the part of command string for the given {@code cinema}\u0027s details."},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    public static String getCinemaDetails(Cinema cinema) {"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"        sb.append(PREFIX_NAME + cinema.getName().fullName + \" \");"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        sb.append(PREFIX_PHONE + cinema.getPhone().value + \" \");"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        sb.append(PREFIX_EMAIL + cinema.getEmail().value + \" \");"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        sb.append(PREFIX_ADDRESS + cinema.getAddress().value + \" \");"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":"        sb.append(PREFIX_NUMOFTHEATERS + Integer.toString(cinema.getTheaters().size()) + \" \");"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"        return sb.toString();"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"     * Returns the part of command string for the given {@code cinema}\u0027s details."},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":"    public static String getEditedCinemaDetails(Cinema cinema) {"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"        sb.append(PREFIX_NAME + cinema.getName().fullName + \" \");"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"        sb.append(PREFIX_PHONE + cinema.getPhone().value + \" \");"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"        sb.append(PREFIX_EMAIL + cinema.getEmail().value + \" \");"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"        sb.append(PREFIX_ADDRESS + cinema.getAddress().value + \" \");"},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"        return sb.toString();"},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"tinyjy94":5,"-":7,"qwlai":45}},{"path":"src/test/java/seedu/address/testutil/TypicalCinemas.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_SENGKANG;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_TAMPINES;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_SENGKANG;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_TAMPINES;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_SENGKANG;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TAMPINES;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NUMOFTHEATERS;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_SENGKANG;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_TAMPINES;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":" * A utility class containing a list of {@code Cinema} objects to be used in tests."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"public class TypicalCinemas {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"    public static final Cinema ALJUNIED \u003d new CinemaBuilder().withName(\"Aljunied Cathay\")"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"            .withAddress(\"123, Aljunied\").withEmail(\"aljunied@cathay.com\")"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"            .withPhone(\"65355255\").withTheater(3).build();"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    public static final Cinema BEDOK  \u003d new CinemaBuilder().withName(\"Bedok Shaws\")"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"            .withAddress(\"311, Bedok\")"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"            .withEmail(\"bedok@shaw.com\").withPhone(\"68765432\")"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"            .withTheater(3).build();"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    public static final Cinema CLEMENTI \u003d new CinemaBuilder().withName(\"Clementi Cathay\").withPhone(\"65352563\")"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"            .withEmail(\"clementi@cathay.com\").withAddress(\"111, Clementi\").withTheater(3).build();"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"    public static final Cinema DOVER \u003d new CinemaBuilder().withName(\"Dover Shaws\").withPhone(\"67652533\")"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"            .withEmail(\"dover@shaw.com\").withAddress(\"10th Street\").withTheater(3).build();"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    public static final Cinema EUNOS \u003d new CinemaBuilder().withName(\"Eunos Cathay\").withPhone(\"6482224\")"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"            .withEmail(\"eunos@cathay.com\").withAddress(\"Eunos Street\").withTheater(3).build();"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"    public static final Cinema FARRER \u003d new CinemaBuilder().withName(\"Farrer Cathay\").withPhone(\"6482427\")"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"            .withEmail(\"farrer@cathay.com\").withAddress(\"Farrer Park\").withTheater(3).build();"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"    public static final Cinema GUL \u003d new CinemaBuilder().withName(\"Gul Cathay\").withPhone(\"6482442\")"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"            .withEmail(\"gul@cathay.com\").withAddress(\"Gul Circle\").withTheater(3).build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"    public static final Cinema HOUGANG \u003d new CinemaBuilder().withName(\"Hougang Shaws\").withPhone(\"6482424\")"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"            .withEmail(\"hougang@shaws.com\").withAddress(\"Hougang Avenue\").withTheater(3).build();"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"    public static final Cinema INDO \u003d new CinemaBuilder().withName(\"Indo Cathay\").withPhone(\"6482131\")"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"            .withEmail(\"indo@cathay.com\").withAddress(\"Indo Street\").withTheater(3).build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    // Manually added - Cinema\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"    public static final Cinema SENGKANG \u003d new CinemaBuilder().withName(VALID_NAME_SENGKANG)"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"            .withPhone(VALID_PHONE_SENGKANG).withEmail(VALID_EMAIL_SENGKANG)"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"            .withAddress(VALID_ADDRESS_SENGKANG).withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"    public static final Cinema TAMPINES \u003d new CinemaBuilder().withName(VALID_NAME_TAMPINES)"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"            .withPhone(VALID_PHONE_TAMPINES).withEmail(VALID_EMAIL_TAMPINES)"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"            .withAddress(VALID_ADDRESS_TAMPINES).withTheater(VALID_NUMOFTHEATERS).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"    public static final String KEYWORD_MATCHING_SHAWS \u003d \"Shaws\"; // A keyword that matches SHAWS"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"    private TypicalCinemas() {} // prevents instantiation"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"     * Returns an {@code MoviePlanner} with all the typical cinemas."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"    public static MoviePlanner getTypicalMoviePlanner() {"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"        MoviePlanner ab \u003d new MoviePlanner();"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"        for (Cinema cinema : getTypicalCinemas()) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"                ab.addCinema(cinema);"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"            } catch (DuplicateCinemaException e) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"    public static List\u003cCinema\u003e getTypicalCinemas() {"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALJUNIED, BEDOK, CLEMENTI, DOVER, EUNOS, FARRER, GUL));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":1,"tinyjy94":1,"-":28,"qwlai":50}},{"path":"src/test/java/seedu/address/testutil/MovieUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":3,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.AddMovieCommand;"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":" * A utility class for Movie."},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"public class MovieUtil {"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"     * Uses the add command word"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"     * Returns an add command string for adding the {@code movie}."},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"    public static String getAddCommand(Movie movie) {"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"        return AddMovieCommand.COMMAND_WORD + \" \" + getMovieDetails(movie);"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"     * Uses the add command alias"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"     * Returns an add command string for adding the {@code movie}."},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"    public static String getAddUsingAliasCommand(Movie movie) {"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"        return AddMovieCommand.COMMAND_ALIAS + \" \" + getMovieDetails(movie);"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"     * Returns the part of command string for the given {@code movie}\u0027s details."},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"    public static String getMovieDetails(Movie movie) {"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"        sb.append(PREFIX_NAME + movie.getName().movieName + \" \");"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"        sb.append(PREFIX_DURATION + movie.getDuration().duration + \" \");"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"        sb.append(PREFIX_RATING + movie.getRating().rating + \" \");"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"        sb.append(PREFIX_STARTDATE + movie.getStartDate().startDate + \" \");"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"        movie.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"        return sb.toString();"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":44,"-":1}},{"path":"src/test/java/seedu/address/testutil/CinemaBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":" * A utility class to help with building Cinema objects."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"public class CinemaBuilder {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    public static final String DEFAULT_NAME \u003d \"Cathay East\";"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"    public static final String DEFAULT_PHONE \u003d \"67438807\";"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    public static final String DEFAULT_EMAIL \u003d \"cathayeast@cathay.com\";"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"Cathay East, #02-03\";"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    public static final int DEFAULT_THEATERS \u003d 3;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"    private ArrayList\u003cTheater\u003e theaters;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    public CinemaBuilder() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"        theaters \u003d SampleDataUtil.getTheaterList(DEFAULT_THEATERS);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"     * Initializes the CinemaBuilder with the data of {@code cinemaToCopy}."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"    public CinemaBuilder(Cinema cinemaToCopy) {"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"        name \u003d cinemaToCopy.getName();"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"        phone \u003d cinemaToCopy.getPhone();"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"        email \u003d cinemaToCopy.getEmail();"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        address \u003d cinemaToCopy.getAddress();"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"        theaters \u003d new ArrayList\u003c\u003e(cinemaToCopy.getTheaters());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"     * Sets the {@code Name} of the {@code Cinema} that we are building."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"    public CinemaBuilder withName(String name) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"     * Sets the {@code Address} of the {@code Cinema} that we are building."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"    public CinemaBuilder withAddress(String address) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"     * Sets the {@code Phone} of the {@code Cinema} that we are building."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"    public CinemaBuilder withPhone(String phone) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"     * Sets the {@code Email} of the {@code Cinema} that we are building."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"    public CinemaBuilder withEmail(String email) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"tinyjy94"},"content":"     * Sets the {@code Theater} of the {@code Cinema} that we are building."},{"lineNumber":83,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"tinyjy94"},"content":"    public CinemaBuilder withTheater(int numOfTheater) {"},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":"        this.theaters \u003d SampleDataUtil.getTheaterList(numOfTheater);"},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":"        return this;"},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"    public Cinema build() {"},{"lineNumber":90,"author":{"gitID":"slothhy"},"content":"        return new Cinema(name, phone, email, address, theaters);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":1,"tinyjy94":12,"-":51,"qwlai":29}},{"path":"src/test/java/seedu/address/testutil/MovieBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":3,"author":{"gitID":"slothhy"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Duration;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.MovieName;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Rating;"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":" * A utility class to help with building Movie objects."},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"public class MovieBuilder {"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"    public static final String DEFAULT_MOVIENAME \u003d \"The Incredibles\";"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"    public static final String DEFAULT_DURATION \u003d \"90\";"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"    public static final String DEFAULT_RATING \u003d \"PG\";"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"    public static final String DEFAULT_STARTDATE \u003d \"13/03/2018\";"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    public static final String DEFAULT_TAGS \u003d \"superhero\";"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"    private MovieName movieName;"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"    private Duration duration;"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"    private Rating rating;"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"    private StartDate startDate;"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"    public MovieBuilder() {"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"        movieName \u003d new MovieName(DEFAULT_MOVIENAME);"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"        duration \u003d new Duration(DEFAULT_DURATION);"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"        rating \u003d new Rating(DEFAULT_RATING);"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"        startDate \u003d new StartDate(DEFAULT_STARTDATE);"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"     * Initializes the MovieBuilder with the data of {@code movieToCopy}."},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    public MovieBuilder(Movie movieToCopy) {"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"        movieName \u003d movieToCopy.getName();"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"        duration \u003d movieToCopy.getDuration();"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"        rating \u003d movieToCopy.getRating();"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"        startDate \u003d movieToCopy.getStartDate();"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"        tags \u003d new HashSet\u003c\u003e(movieToCopy.getTags());"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"     * Sets the {@code MovieName} of the {@code Movie} that we are building."},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"    public MovieBuilder withMovieName(String movieName) {"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"        this.movieName \u003d new MovieName(movieName);"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"     * Sets the {@code Duration} of the {@code Movie} that we are building."},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"    public MovieBuilder withDuration(String duration) {"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"        this.duration \u003d new Duration(duration);"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":"     * Sets the {@code Rating} of the {@code Movie} that we are building."},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"    public MovieBuilder withRating(String rating) {"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"        this.rating \u003d new Rating(rating);"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"     * Sets the {@code StartDate} of the {@code Movie} that we are building."},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":"    public MovieBuilder withStartDate(String startDate) {"},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"        this.startDate \u003d new StartDate(startDate);"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"slothhy"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Cinema} that we are building."},{"lineNumber":84,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"slothhy"},"content":"    public MovieBuilder withTags(String ... tags) {"},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":"        return this;"},{"lineNumber":88,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":90,"author":{"gitID":"slothhy"},"content":"    public Movie build() {"},{"lineNumber":91,"author":{"gitID":"slothhy"},"content":"        return new Movie(movieName, duration, rating, startDate, tags);"},{"lineNumber":92,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":94,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":92,"-":2}},{"path":"src/test/java/seedu/address/testutil/TypicalEmail.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_LOGIN_ACCOUNT;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MESSAGE;"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_RECIPIENT;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_SUBJECT;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":" * A utility class containing a list of {@code MessageDraft} objects to be used in tests."},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"public class TypicalEmail {"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"    // Manually added"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"    public static final EmailManager EMAIL_MIKE;"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"    static {"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"        EmailManager tempEmailManager \u003d null;"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"            tempEmailManager \u003d new EmailBuilder()"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"                    .withMessage(\"Hello Mike, the interview details...\")"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"                    .withSubject(\"Re: Internship Interview\")"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"                    .withRecipient(\"mikeStudent@u.nus.edu\")"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"                    .withLoginAccount(VALID_EMAIL_LOGIN_ACCOUNT)"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"                    .build();"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailLoginInvalidException e) {"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"        EMAIL_MIKE \u003d tempEmailManager;"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"    // Manually added - Email MessageDraft\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"    public static final EmailManager EMAIL_DRAFT_1;"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"    static {"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"        EmailManager tempEmailManager \u003d null;"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"            tempEmailManager \u003d new EmailBuilder()"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"                    .withMessage(VALID_EMAIL_MESSAGE)"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"                    .withSubject(VALID_EMAIL_SUBJECT)"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"                    .withRecipient(VALID_EMAIL_RECIPIENT)"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"                    .withLoginAccount(VALID_EMAIL_LOGIN_ACCOUNT)"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"                    .build();"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailLoginInvalidException e) {"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"            e.printStackTrace();"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"        EMAIL_DRAFT_1 \u003d tempEmailManager;"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"    private TypicalEmail() {} // prevents instantiation"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":53}},{"path":"src/test/java/seedu/address/testutil/EditCinemaDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.EditCommand.EditCinemaDescriptor;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":" * A utility class to help with building EditCinemaDescriptor objects."},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"public class EditCinemaDescriptorBuilder {"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"    private EditCinemaDescriptor descriptor;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"    public EditCinemaDescriptorBuilder() {"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"        descriptor \u003d new EditCinemaDescriptor();"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    public EditCinemaDescriptorBuilder(EditCinemaDescriptor descriptor) {"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"        this.descriptor \u003d new EditCinemaDescriptor(descriptor);"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"     * Returns an {@code EditCinemaDescriptor} with fields containing {@code cinema}\u0027s details"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    public EditCinemaDescriptorBuilder(Cinema cinema) {"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"        descriptor \u003d new EditCinemaDescriptor();"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"        descriptor.setName(cinema.getName());"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"        descriptor.setPhone(cinema.getPhone());"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"        descriptor.setEmail(cinema.getEmail());"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        descriptor.setAddress(cinema.getAddress());"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"     * Sets the {@code Name} of the {@code EditCinemaDescriptor} that we are building."},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"    public EditCinemaDescriptorBuilder withName(String name) {"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        return this;"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"     * Sets the {@code Phone} of the {@code EditCinemaDescriptor} that we are building."},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"    public EditCinemaDescriptorBuilder withPhone(String phone) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"     * Sets the {@code Email} of the {@code EditCinemaDescriptor} that we are building."},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    public EditCinemaDescriptorBuilder withEmail(String email) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"     * Sets the {@code Address} of the {@code EditCinemaDescriptor} that we are building."},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"    public EditCinemaDescriptorBuilder withAddress(String address) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"    public EditCinemaDescriptor build() {"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"        return descriptor;"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"-":14,"qwlai":57}},{"path":"src/test/java/seedu/address/testutil/TypicalMovies.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.DuplicateMovieException;"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":" * A utility class containing a list of {@code Movie} objects to be used in tests."},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"public class TypicalMovies {"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"    public static final Movie BLACK_PANTHER \u003d new MovieBuilder().withMovieName(\"Black Panther\")"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"            .withDuration(\"134\").withRating(\"PG\").withStartDate(\"14/02/2018\").withTags(\"comedy\", \"superhero\").build();"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"    public static final Movie ABTM4 \u003d new MovieBuilder().withMovieName(\"Ah Boys to Men 4\")"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"            .withDuration(\"143\").withRating(\"PG13\").withStartDate(\"01/05/2012\").withTags(\"comedy\").build();"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"    public static final Movie THOR_RAGNAROK \u003d new MovieBuilder().withMovieName(\"Thor Ragnarok\")"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"            .withDuration(\"130\").withRating(\"PG13\").withStartDate(\"10/10/2017\").withTags(\"superhero\").build();"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"    public static final String KEYWORD_MATCHING_GHOST \u003d \"Ghost\"; // A keyword that matches GHOST"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"    private TypicalMovies() {} // prevents instantiation"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"     * Returns an {@code MoviePlanner} with all the typical movies."},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    public static MoviePlanner getTypicalMoviePlanner() {"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"        MoviePlanner ab \u003d new MoviePlanner();"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"        for (Movie movie : getTypicalMovies()) {"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"            try {"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"                ab.addMovie(movie);"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"            } catch (DuplicateMovieException e) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"    public static List\u003cMovie\u003e getTypicalMovies() {"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(BLACK_PANTHER, ABTM4, THOR_RAGNAROK));"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":31,"-":10,"qwlai":7}},{"path":"src/test/java/seedu/address/email/EmailFunctionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"public class EmailFunctionTest {"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"    private static final String EMAIL_VALID_FUNCTION \u003d \"send\";"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"    private static final String EMAIL_INVALID_FUNCTION \u003d \"do nothing\";"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"    private EmailFunction emailFunction;"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"    @Before"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"    public void setUp() {"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"        emailFunction \u003d new EmailFunction();"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"    public void valid() {"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"        emailFunction.setEmailFunction(EMAIL_VALID_FUNCTION);"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"        assertTrue(emailFunction.isValid());"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"    public void notValid() {"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"        emailFunction.setEmailFunction(EMAIL_INVALID_FUNCTION);"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"        assertFalse(emailFunction.isValid());"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":33}},{"path":"src/test/java/seedu/address/testutil/EmailUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_LOGIN;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_MESSAGE;"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_RECIPIENT;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_SUBJECT;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":" * A utility class for Cinema."},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"public class EmailUtil {"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"     * Uses the email command word"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"     * Returns an email command string for updating the {@code messageDraft}."},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"    public static String getEmailCommand(EmailManager emailManager) {"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"        return EmailCommand.COMMAND_WORD + \" \" + getEmailDraftContent(emailManager);"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"     * Uses the add command alias"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"     * Returns an add command string for adding the {@code cinema}."},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"    public static String getEmailUsingAliasCommand(EmailManager emailManager) {"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"        return EmailCommand.COMMAND_ALIAS + \" \" + getEmailDraftContent(emailManager);"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"     * Returns the part of command string for the given {@code cinema}\u0027s details."},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"    public static String getEmailDraftContent(EmailManager emailManager) {"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"        sb.append(PREFIX_EMAIL_MESSAGE + emailManager.getEmailDraft().getMessage() + \" \");"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"        sb.append(PREFIX_EMAIL_SUBJECT + emailManager.getEmailDraft().getSubject() + \" \");"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"        sb.append(PREFIX_EMAIL_RECIPIENT + emailManager.getEmailDraft().getRecipient() + \" \");"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"        sb.append(PREFIX_EMAIL_LOGIN + \"cineManager@gmail.com:somePassword\" + \" \");"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"        return sb.toString();"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":32,"qwlai":11}},{"path":"src/test/java/seedu/address/email/EmailLoginTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":" * Handles how user logs into email"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"public class EmailLoginTest {"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"    private static final String EMAIL_VALID_LOGIN_ACCOUNT \u003d \"valid@gmail.com:123\";"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"    private static final String EMAIL_INVALID_LOGIN_ACCOUNT \u003d \"invalid@yahoo.com:123\";"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"    private EmailLogin emailLogin;"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"        emailLogin \u003d new EmailLogin();"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"    public void validAccountLogin() throws EmailLoginInvalidException {"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"        String[] validEmailLogin \u003d EMAIL_VALID_LOGIN_ACCOUNT.split(\":\");"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"        emailLogin.loginEmail(validEmailLogin);"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"        assertTrue(emailLogin.isUserLoggedIn());"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"    public void invalidAccountLogin() {"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"            String[] invalidEmailLogin \u003d EMAIL_INVALID_LOGIN_ACCOUNT.split(\":\");"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"            emailLogin.loginEmail(invalidEmailLogin);"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailLoginInvalidException e) {"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"            assertFalse(emailLogin.isUserLoggedIn());"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"    public void retrieveLoginEmail() throws EmailLoginInvalidException {"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"        String[] validEmailLogin \u003d EMAIL_VALID_LOGIN_ACCOUNT.split(\":\");"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"        emailLogin.loginEmail(validEmailLogin);"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(emailLogin.getEmailLogin(), validEmailLogin[0]);"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"    public void retrievePassword() throws EmailLoginInvalidException {"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"        String[] validEmailLogin \u003d EMAIL_VALID_LOGIN_ACCOUNT.split(\":\");"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"        emailLogin.loginEmail(validEmailLogin);"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(emailLogin.getPassword(), validEmailLogin[1]);"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"    public void logoutUserEmail() throws EmailLoginInvalidException {"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"        String[] validEmailLogin \u003d EMAIL_VALID_LOGIN_ACCOUNT.split(\":\");"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"        emailLogin.loginEmail(validEmailLogin);"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":"        emailLogin.resetData();"},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"        assertFalse(emailLogin.isUserLoggedIn());"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":70}},{"path":"src/test/java/seedu/address/email/EmailComposeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"public class EmailComposeTest {"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"    private EmailCompose emailCompose;"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"    @Before"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"    public void setUp() {"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"        emailCompose \u003d new EmailCompose();"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"    public void composeEmail() {"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"        MessageDraft validDraft \u003d new MessageDraft();"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"        final String validMessage \u003d \"This is a message body.\";"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"        final String validSubject \u003d \"This is a subject.\";"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"        final String validRecipients \u003d \"Someone@gmail.com\";"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"        final String validRelativeFilePath \u003d \"docs/images/Architecture.png\";"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"        validDraft.setMessage(validMessage);"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"        validDraft.setSubject(validSubject);"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"        validDraft.setRecipients(validRecipients);"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"        validDraft.setRelativeFilePath(validRelativeFilePath);"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"        emailCompose.composeEmail(validDraft);"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(validMessage, emailCompose.getMessage().getMessage());"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(validSubject, emailCompose.getMessage().getSubject());"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(validRecipients, emailCompose.getMessage().getRecipient());"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(validRelativeFilePath, emailCompose.getMessage().getRelativeFilePath());"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"    public void clearEmailDraft() {"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"        MessageDraft validDraft \u003d new MessageDraft();"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"        final String validMessage \u003d \"This is a message body.\";"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"        final String validSubject \u003d \"This is a subject.\";"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"        final String validRecipients \u003d \"Someone@gmail.com\";"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"        final String validRelativeFilePath \u003d \"docs/images/Architecture.png\";"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"        validDraft.setMessage(validMessage);"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        validDraft.setSubject(validSubject);"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"        validDraft.setRecipients(validRecipients);"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"        validDraft.setRelativeFilePath(validRelativeFilePath);"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"        emailCompose.composeEmail(validDraft);"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"        emailCompose.resetData();"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(\"\", emailCompose.getMessage().getMessage());"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(\"\", emailCompose.getMessage().getSubject());"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(\"\", emailCompose.getMessage().getRecipient());"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"        assertEquals(\"\", emailCompose.getMessage().getRelativeFilePath());"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":50,"-":6}},{"path":"src/test/java/seedu/address/email/EmailSendTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.AuthenticationFailedException;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailMessageEmptyException;"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailRecipientsEmptyException;"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"public class EmailSendTest {"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"    private EmailSend emailSend;"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"    @Before"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"    public void setUp() {"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"        emailSend \u003d new EmailSend();"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"    public void sendEmail() throws AuthenticationFailedException {"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"        EmailCompose emailCompose \u003d new EmailCompose();"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"        EmailLogin emailLogin \u003d new EmailLogin();"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"            emailSend.sendEmail(emailCompose, emailLogin);"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailLoginInvalidException e) {"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"            assertFalse(emailLogin.isUserLoggedIn());"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailMessageEmptyException e) {"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"            assertTrue(emailCompose.getMessage().getMessage().isEmpty());"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"            assertTrue(emailCompose.getMessage().getSubject().isEmpty());"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"            MessageDraft messageDraft \u003d new MessageDraft();"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"            messageDraft.setMessage(\"Message\");"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"            emailCompose.composeEmail(messageDraft);"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"            assertFalse(emailCompose.getMessage().getMessage().isEmpty());"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"            assertTrue(emailCompose.getMessage().getSubject().isEmpty());"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"            emailCompose.resetData();"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"            messageDraft \u003d new MessageDraft();"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"            messageDraft.setSubject(\"Subject\");"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"            emailCompose.composeEmail(messageDraft);"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"            assertTrue(emailCompose.getMessage().getMessage().isEmpty());"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"            assertFalse(emailCompose.getMessage().getSubject().isEmpty());"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"            emailCompose.resetData();"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailRecipientsEmptyException e) {"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"            MessageDraft messageDraft \u003d new MessageDraft();"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"            messageDraft.setMessage(\"Message\");"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"            messageDraft.setSubject(\"Subject\");"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"            emailCompose.composeEmail(messageDraft);"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"            assertFalse(emailCompose.getMessage().getMessage().isEmpty());"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"            assertFalse(emailCompose.getMessage().getSubject().isEmpty());"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"            assertTrue(emailCompose.getMessage().getRecipient().isEmpty());"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"            emailCompose.resetData();"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":60,"slothhy":1,"-":2}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"    private final CinemaListPanelHandle cinemaListPanel;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"    private final MovieListPanelHandle movieListPanel;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"        cinemaListPanel \u003d new CinemaListPanelHandle(getChildNode(CinemaListPanelHandle.CINEMA_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"        movieListPanel \u003d new MovieListPanelHandle(getChildNode(MovieListPanelHandle.MOVIE_LIST_VIEW_ID));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    public CinemaListPanelHandle getCinemaListPanel() {"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"        return cinemaListPanel;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"    public MovieListPanelHandle getMovieListPanel() {"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        return movieListPanel;"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":41,"qwlai":10}},{"path":"src/test/java/guitests/guihandles/MovieCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":" * Provides a handle to a movie card in the cinema list panel."},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"public class MovieCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"    private static final String NAME_FIELD_ID \u003d \"#movieName\";"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    private static final String DURATION_FIELD_ID \u003d \"#duration\";"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"    private static final String RATING_FIELD_ID \u003d \"#rating\";"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    private static final String STARTDATE_FIELD_ID \u003d \"#startDate\";"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    private final Label durationLabel;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    private final Label ratingLabel;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    private final Label startDateLabel;"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    public MovieCardHandle(Node cardNode) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"        this.durationLabel \u003d getChildNode(DURATION_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"        this.ratingLabel \u003d getChildNode(RATING_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        this.startDateLabel \u003d getChildNode(STARTDATE_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"    public String getDuration() {"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"        return durationLabel.getText();"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"    public String getRating() {"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"        return ratingLabel.getText();"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    public String getStartDate() {"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        return startDateLabel.getText();"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":76,"author":{"gitID":"chanyikwai"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"                .findFirst()"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"Tag does not exist.\"));"},{"lineNumber":80,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"slothhy":5,"chanyikwai":7,"-":38,"qwlai":31}},{"path":"src/test/java/guitests/guihandles/CinemaCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":" * Provides a handle to a cinema card in the cinema list panel."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"public class CinemaCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Label addressLabel;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    public CinemaCardHandle(Node cardNode) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getAddress() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return addressLabel.getText();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":48,"qwlai":3}},{"path":"src/test/java/guitests/guihandles/BrowserPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":" * A handler for the {@Code Browserpanel} of the UI."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"public class BrowserPanelHandle {"},{"lineNumber":7,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":5,"qwlai":2}},{"path":"src/test/java/seedu/address/email/EmailManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"public class EmailManagerTest {"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"    public void equals() {"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"        EmailManager emailManager \u003d new EmailManager();"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"        EmailManager emailManagerCopy \u003d new EmailManager();"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"        // same values -\u003e returns true"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"        assertTrue(emailManager.equals(emailManager));"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"        // null -\u003e returns false"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"        assertFalse(emailManager.equals(null));"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"        // different types -\u003e returns false"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"        assertFalse(emailManager.equals(5));"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"        // different user -\u003e returns false"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"            String loginAccount \u003d \"example@gmail.com:123\";"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"            String[] loginEmail \u003d loginAccount.split(\":\");"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"            emailManagerCopy.loginEmailAccount(loginEmail);"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"            assertFalse(emailManager.equals(emailManagerCopy));"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailLoginInvalidException e) {"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"    public void compose() {"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"        EmailManager emailManager \u003d new EmailManager();"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"        MessageDraft messageDraft \u003d new MessageDraft();"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"        String validMessage \u003d \"Message\";"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"        String validSubject \u003d \"Subject\";"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"        String validRecipients \u003d \"another@gmail.com\";"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"        messageDraft.setMessage(validMessage);"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        messageDraft.setSubject(validSubject);"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"        messageDraft.setRecipients(validRecipients);"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"        emailManager.composeEmail(messageDraft);"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"        assertTrue(emailManager.getEmailDraft().getMessage().equals(validMessage));"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"        assertTrue(emailManager.getEmailDraft().getSubject().equals(validSubject));"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"        assertTrue(emailManager.getEmailDraft().getRecipient().equals(validRecipients));"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":48,"-":6}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import javafx.geometry.Insets;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import javafx.geometry.Pos;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"import javafx.scene.text.Text;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.AddMovieCommand;"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.AddScreeningCommand;"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.AddTheaterCommand;"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.DecryptCommand;"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.DeleteMovieCommand;"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.DeleteScreeningCommand;"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.DeleteTheaterCommand;"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.EncryptCommand;"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.FindMovieCommand;"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.JumpCommand;"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"    private static final String KEYWORD_LABEL_BACKGROUND_COLOR \u003d \"rgba(128, 0, 128, 1)\";"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"    private static final String DEFAULT_KEYWORD_COLOR \u003d \"white\";"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"    private static final int KEYWORD_LABEL_FONT_SIZE \u003d 17;"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"    private static final int DEFAULT_TAG_OFFSET_VALUE \u003d 12;"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"    private static final double OFFSET_MULTIPLIER \u003d 4.65;"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"    private HashMap\u003cString, String\u003e keywordColorCode;"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":"    private String defaultFontSize \u003d \"-fx-font-size: \" + KEYWORD_LABEL_FONT_SIZE + \";\";"},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":"    private Text defaultTextSetting;"},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":"    private StackPane stackPane;"},{"lineNumber":76,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"    private Label keywordLabel;"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":84,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode \u003d initializeKeywordColorCoding();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"chanyikwai"},"content":"     * Handles the key press released event, {@code keyEvent}."},{"lineNumber":113,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":115,"author":{"gitID":"chanyikwai"},"content":"    private void handleKeyReleased(KeyEvent keyEvent) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":117,"author":{"gitID":"chanyikwai"},"content":"        default:"},{"lineNumber":118,"author":{"gitID":"chanyikwai"},"content":"            checkChangesInCommandBoxInput();"},{"lineNumber":119,"author":{"gitID":"chanyikwai"},"content":"            break;"},{"lineNumber":120,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":123,"author":{"gitID":"chanyikwai"},"content":"    //@@author chanyikwai"},{"lineNumber":124,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"chanyikwai"},"content":"     * Split text in text field into respective components for processing"},{"lineNumber":126,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"chanyikwai"},"content":"    private void checkChangesInCommandBoxInput() {"},{"lineNumber":128,"author":{"gitID":"chanyikwai"},"content":"        String textFromTextField \u003d commandTextField.getText();"},{"lineNumber":129,"author":{"gitID":"chanyikwai"},"content":"        String[] allWordsFromText \u003d textFromTextField.split(\" \");"},{"lineNumber":130,"author":{"gitID":"chanyikwai"},"content":"        String commandKeyWord \u003d \"\";"},{"lineNumber":131,"author":{"gitID":"chanyikwai"},"content":"        int index \u003d 0;"},{"lineNumber":132,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":133,"author":{"gitID":"chanyikwai"},"content":"        while (allWordsFromText.length \u003e 0 \u0026\u0026 index \u003c allWordsFromText.length \u0026\u0026 allWordsFromText[index].equals(\"\")) {"},{"lineNumber":134,"author":{"gitID":"chanyikwai"},"content":"            if (index \u003c allWordsFromText.length) {"},{"lineNumber":135,"author":{"gitID":"chanyikwai"},"content":"                index++;"},{"lineNumber":136,"author":{"gitID":"chanyikwai"},"content":"            } else {"},{"lineNumber":137,"author":{"gitID":"chanyikwai"},"content":"                break;"},{"lineNumber":138,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"chanyikwai"},"content":"            if (index \u003c allWordsFromText.length \u0026\u0026 (!allWordsFromText[index].equals(\"\"))) {"},{"lineNumber":140,"author":{"gitID":"chanyikwai"},"content":"                break;"},{"lineNumber":141,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":142,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":143,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":144,"author":{"gitID":"chanyikwai"},"content":"        if (index \u003c allWordsFromText.length \u0026\u0026 allWordsFromText.length \u003e 0) {"},{"lineNumber":145,"author":{"gitID":"chanyikwai"},"content":"            commandKeyWord \u003d allWordsFromText[index];"},{"lineNumber":146,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":148,"author":{"gitID":"chanyikwai"},"content":"        makeKeywordLabelNonVisible();"},{"lineNumber":149,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":150,"author":{"gitID":"chanyikwai"},"content":"        if (isValidCommandKeyword(commandKeyWord)) {"},{"lineNumber":151,"author":{"gitID":"chanyikwai"},"content":"            makeKeywordLabelVisible(commandKeyWord, index);"},{"lineNumber":152,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"chanyikwai"},"content":"        commandTextField.setStyle(defaultFontSize);"},{"lineNumber":154,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":156,"author":{"gitID":"chanyikwai"},"content":"    //@@author chanyikwai"},{"lineNumber":157,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"chanyikwai"},"content":"     * Creates a label to replace the command keyword"},{"lineNumber":159,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"chanyikwai"},"content":"    private void makeKeywordLabelVisible(String commandKeyword, int offset) {"},{"lineNumber":161,"author":{"gitID":"chanyikwai"},"content":"        keywordLabel.setId(\"commandKeywordLabel\");"},{"lineNumber":162,"author":{"gitID":"chanyikwai"},"content":"        keywordLabel.setText(commandKeyword);"},{"lineNumber":163,"author":{"gitID":"chanyikwai"},"content":"        keywordLabel.setVisible(true);"},{"lineNumber":164,"author":{"gitID":"chanyikwai"},"content":"        keywordLabel.getStyleClass().clear();"},{"lineNumber":165,"author":{"gitID":"chanyikwai"},"content":"        Insets textFieldOffsets \u003d new Insets(0, 0, 0, (offset * OFFSET_MULTIPLIER) + DEFAULT_TAG_OFFSET_VALUE);"},{"lineNumber":166,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":167,"author":{"gitID":"chanyikwai"},"content":"        stackPane.setAlignment(keywordLabel, Pos.CENTER_LEFT);"},{"lineNumber":168,"author":{"gitID":"chanyikwai"},"content":"        stackPane.setMargin(keywordLabel, textFieldOffsets);"},{"lineNumber":169,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":170,"author":{"gitID":"chanyikwai"},"content":"        String keywordTextColor \u003d keywordColorCode.get(commandKeyword);"},{"lineNumber":171,"author":{"gitID":"chanyikwai"},"content":"        keywordLabel.setStyle(\"-fx-text-fill: \" + keywordTextColor + \";\\n\""},{"lineNumber":172,"author":{"gitID":"chanyikwai"},"content":"            + \"-fx-background-radius: 2;\\n\""},{"lineNumber":173,"author":{"gitID":"chanyikwai"},"content":"            + \"-fx-font-size: \" + KEYWORD_LABEL_FONT_SIZE + \";\\n\""},{"lineNumber":174,"author":{"gitID":"chanyikwai"},"content":"            + \"-fx-background-color: \" + KEYWORD_LABEL_BACKGROUND_COLOR + \";\");"},{"lineNumber":175,"author":{"gitID":"chanyikwai"},"content":"        keywordLabel.toFront();"},{"lineNumber":176,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":178,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"chanyikwai"},"content":"     * Set the keyword label to be non-visible"},{"lineNumber":180,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"chanyikwai"},"content":"    private void makeKeywordLabelNonVisible() {"},{"lineNumber":182,"author":{"gitID":"chanyikwai"},"content":"        keywordLabel.setVisible(false);"},{"lineNumber":183,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":185,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":186,"author":{"gitID":"chanyikwai"},"content":"     * Check if input keyword is a valid command keyword"},{"lineNumber":187,"author":{"gitID":"chanyikwai"},"content":"     * @param commandKeyword"},{"lineNumber":188,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"chanyikwai"},"content":"    private boolean isValidCommandKeyword(String commandKeyword) {"},{"lineNumber":190,"author":{"gitID":"chanyikwai"},"content":"        return keywordColorCode.containsKey(commandKeyword);"},{"lineNumber":191,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":193,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"chanyikwai"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":195,"author":{"gitID":"chanyikwai"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":196,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"chanyikwai"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":198,"author":{"gitID":"chanyikwai"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":199,"author":{"gitID":"chanyikwai"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":200,"author":{"gitID":"chanyikwai"},"content":"            return;"},{"lineNumber":201,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":203,"author":{"gitID":"chanyikwai"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":204,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":206,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"chanyikwai"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":208,"author":{"gitID":"chanyikwai"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":209,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"chanyikwai"},"content":"    private void navigateToNextInput() {"},{"lineNumber":211,"author":{"gitID":"chanyikwai"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":212,"author":{"gitID":"chanyikwai"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":213,"author":{"gitID":"chanyikwai"},"content":"            return;"},{"lineNumber":214,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":216,"author":{"gitID":"chanyikwai"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":217,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":219,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"chanyikwai"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":221,"author":{"gitID":"chanyikwai"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":222,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"chanyikwai"},"content":"    private void replaceText(String text) {"},{"lineNumber":224,"author":{"gitID":"chanyikwai"},"content":"        commandTextField.setText(text);"},{"lineNumber":225,"author":{"gitID":"chanyikwai"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":226,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":228,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"chanyikwai"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":230,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":232,"author":{"gitID":"chanyikwai"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":233,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":234,"author":{"gitID":"chanyikwai"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":235,"author":{"gitID":"chanyikwai"},"content":"            initHistory();"},{"lineNumber":236,"author":{"gitID":"chanyikwai"},"content":"            historySnapshot.next();"},{"lineNumber":237,"author":{"gitID":"chanyikwai"},"content":"            // process result of the command"},{"lineNumber":238,"author":{"gitID":"chanyikwai"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":239,"author":{"gitID":"chanyikwai"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":240,"author":{"gitID":"chanyikwai"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":241,"author":{"gitID":"chanyikwai"},"content":"            makeKeywordLabelNonVisible();"},{"lineNumber":242,"author":{"gitID":"chanyikwai"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":243,"author":{"gitID":"chanyikwai"},"content":"            initHistory();"},{"lineNumber":244,"author":{"gitID":"chanyikwai"},"content":"            // handle command failure"},{"lineNumber":245,"author":{"gitID":"chanyikwai"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":246,"author":{"gitID":"chanyikwai"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":247,"author":{"gitID":"chanyikwai"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":248,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":251,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":252,"author":{"gitID":"chanyikwai"},"content":"     * Initializes the history snapshot."},{"lineNumber":253,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":254,"author":{"gitID":"chanyikwai"},"content":"    private void initHistory() {"},{"lineNumber":255,"author":{"gitID":"chanyikwai"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":256,"author":{"gitID":"chanyikwai"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":257,"author":{"gitID":"chanyikwai"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":258,"author":{"gitID":"chanyikwai"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":259,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":261,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"chanyikwai"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":263,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"chanyikwai"},"content":"    private void setStyleToDefault() {"},{"lineNumber":265,"author":{"gitID":"chanyikwai"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":266,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":268,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":269,"author":{"gitID":"chanyikwai"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":270,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"chanyikwai"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":272,"author":{"gitID":"chanyikwai"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":273,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":274,"author":{"gitID":"chanyikwai"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":275,"author":{"gitID":"chanyikwai"},"content":"            return;"},{"lineNumber":276,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":277,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":278,"author":{"gitID":"chanyikwai"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":279,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":281,"author":{"gitID":"chanyikwai"},"content":"    //@@author chanyikwai"},{"lineNumber":282,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"chanyikwai"},"content":"     * Assign keywords with color coding"},{"lineNumber":284,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"chanyikwai"},"content":"    public HashMap\u003cString, String\u003e initializeKeywordColorCoding() {"},{"lineNumber":286,"author":{"gitID":"chanyikwai"},"content":"        HashMap\u003cString, String\u003e keywordColorCode \u003d new HashMap\u003c\u003e();"},{"lineNumber":287,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(AddCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":288,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(AddCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":289,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(AddMovieCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":290,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(AddMovieCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":291,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(AddTheaterCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":292,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(AddTheaterCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":293,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(AddScreeningCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":294,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(AddScreeningCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":295,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(ClearCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":296,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(ClearCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":297,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(DecryptCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":298,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(DecryptCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":299,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(DeleteCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":300,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(DeleteCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":301,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(DeleteMovieCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":302,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(DeleteMovieCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":303,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(DeleteTheaterCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":304,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(DeleteTheaterCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":305,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(DeleteScreeningCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":306,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(DeleteScreeningCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":307,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(EditCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":308,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(EditCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":309,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(EmailCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":310,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(EmailCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":311,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(EncryptCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":312,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(EncryptCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":313,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(ExitCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":314,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(FindCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":315,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(FindCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":316,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(FindMovieCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":317,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(FindMovieCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":318,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(HelpCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":319,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(HelpCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":320,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(HistoryCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":321,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(HistoryCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":322,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(JumpCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":323,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(JumpCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":324,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(ListCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":325,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(ListCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":326,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(RedoCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":327,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(RedoCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":328,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(SelectCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":329,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(SelectCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":330,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(UndoCommand.COMMAND_WORD, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":331,"author":{"gitID":"chanyikwai"},"content":"        keywordColorCode.put(UndoCommand.COMMAND_ALIAS, DEFAULT_KEYWORD_COLOR);"},{"lineNumber":332,"author":{"gitID":"chanyikwai"},"content":"        return keywordColorCode;"},{"lineNumber":333,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":334,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":335,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":271,"-":63,"qwlai":1}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import com.calendarfx.model.Calendar;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import com.calendarfx.model.CalendarSource;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import com.calendarfx.model.Entry;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import com.calendarfx.view.DateControl;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import com.calendarfx.view.DetailedDayView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import javafx.geometry.Insets;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import javafx.scene.control.Label;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.ui.CinemaPanelSelectionChangedEvent;"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.ui.JumpToDateRequestEvent;"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.ui.ReloadBrowserPanelEvent;"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.screening.Screening;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":" * The Browser Panel of the App."},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"    private static final String DATE_FORMAT \u003d \"dd/MM/uu\";"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    private static final String TIME_FORMAT \u003d \"HH:mm\";"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"    private static final String SCREENING_DISPLAY_FORMAT \u003d \"%s\\n%s - %s\";"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"    private StackPane browserPane;"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"    private Label date;"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    private Label cinema;"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    private Cinema currentCinema \u003d null;"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"    private LocalDate currentDate \u003d null;"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"    public BrowserPanel() {"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"        super(FXML);"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"     * Loads the schedule of the provided cinema"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"     * @param cinema"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"    private void loadCinemaSchedule(Cinema cinema, LocalDate providedDate) {"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"        DetailedDayView detailedDayView \u003d new DetailedDayView();"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        setUpDayView(detailedDayView, providedDate);"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"        ArrayList\u003cTheater\u003e theaterList \u003d cinema.getTheaters();"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"        CalendarSource theatersSchedule \u003d new CalendarSource(\"Theaters\");"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        int count \u003d 1;"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        for (Theater t : theaterList) {"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"            Calendar c \u003d new Calendar(Integer.toString(t.getTheaterNumber()));"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"            c.setShortName(Integer.toString(t.getTheaterNumber()));"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"            setColorStyle(c, count);"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"            c.setReadOnly(true);"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"            theatersSchedule.getCalendars().add(c);"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"            ArrayList\u003cScreening\u003e screeningList \u003d t.getScreeningList();"},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"            // add entry"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"            for (Screening s : screeningList) {"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"                Entry\u003cString\u003e movieScreening \u003d new Entry\u003c\u003e(s.getMovieName());"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"                String startTime \u003d s.getScreeningDateTime().format(DateTimeFormatter.ofPattern(TIME_FORMAT));"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"                String endTime \u003d s.getScreeningEndDateTime().format(DateTimeFormatter.ofPattern(TIME_FORMAT));"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"                movieScreening.setInterval(s.getScreeningDateTime(), s.getScreeningEndDateTime());"},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"                movieScreening.setTitle(String.format(SCREENING_DISPLAY_FORMAT, s.getMovieName(), startTime, endTime));"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"                c.addEntry(movieScreening);"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"            count++;"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"        detailedDayView.getCalendarSources().setAll(theatersSchedule);"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"        addNodesToBrowserPane(detailedDayView);"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"     * Adds node objects into browser pane"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"    private void addNodesToBrowserPane(DetailedDayView detailedDayView) {"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"        browserPane.getChildren().add(detailedDayView);"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"        browserPane.setMargin(detailedDayView, new Insets(30, 0, 0, 0));"},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"        browserPane.getChildren().add(this.cinema);"},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"        browserPane.getChildren().add(this.date);"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"qwlai"},"content":"     * Sets the color style for the provided calendar"},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"    private void setColorStyle(Calendar c, int count) {"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"        switch (count % 7) {"},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":"        case 1:"},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":"            c.setStyle(Calendar.Style.STYLE1);"},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"            break;"},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"        case 2:"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"            c.setStyle(Calendar.Style.STYLE2);"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"            break;"},{"lineNumber":124,"author":{"gitID":"qwlai"},"content":"        case 3:"},{"lineNumber":125,"author":{"gitID":"qwlai"},"content":"            c.setStyle(Calendar.Style.STYLE3);"},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":"            break;"},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":"        case 4:"},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"            c.setStyle(Calendar.Style.STYLE4);"},{"lineNumber":129,"author":{"gitID":"qwlai"},"content":"            break;"},{"lineNumber":130,"author":{"gitID":"qwlai"},"content":"        case 5:"},{"lineNumber":131,"author":{"gitID":"qwlai"},"content":"            c.setStyle(Calendar.Style.STYLE5);"},{"lineNumber":132,"author":{"gitID":"qwlai"},"content":"            break;"},{"lineNumber":133,"author":{"gitID":"qwlai"},"content":"        case 6:"},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":"            c.setStyle(Calendar.Style.STYLE6);"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"            break;"},{"lineNumber":136,"author":{"gitID":"qwlai"},"content":"        case 7:"},{"lineNumber":137,"author":{"gitID":"qwlai"},"content":"            c.setStyle(Calendar.Style.STYLE7);"},{"lineNumber":138,"author":{"gitID":"qwlai"},"content":"            break;"},{"lineNumber":139,"author":{"gitID":"qwlai"},"content":"        default:"},{"lineNumber":140,"author":{"gitID":"qwlai"},"content":"            c.setStyle(Calendar.Style.STYLE1);"},{"lineNumber":141,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":144,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"qwlai"},"content":"     * Sets up the day view for scheduler"},{"lineNumber":146,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"qwlai"},"content":"    private void setUpDayView(DetailedDayView detailedDayView, LocalDate providedDate) {"},{"lineNumber":148,"author":{"gitID":"qwlai"},"content":"        date.setText(providedDate.format(DateTimeFormatter.ofPattern(DATE_FORMAT)));"},{"lineNumber":149,"author":{"gitID":"qwlai"},"content":"        cinema.setText(currentCinema.getName().toString());"},{"lineNumber":150,"author":{"gitID":"qwlai"},"content":"        detailedDayView.setLayoutY(200);"},{"lineNumber":151,"author":{"gitID":"qwlai"},"content":"        detailedDayView.setLayout(DateControl.Layout.SWIMLANE);"},{"lineNumber":152,"author":{"gitID":"qwlai"},"content":"        detailedDayView.setEnableCurrentTimeMarker(false);"},{"lineNumber":153,"author":{"gitID":"qwlai"},"content":"        detailedDayView.setDate(providedDate);"},{"lineNumber":154,"author":{"gitID":"qwlai"},"content":"        detailedDayView.setMouseTransparent(true);"},{"lineNumber":155,"author":{"gitID":"qwlai"},"content":"        detailedDayView.setShowAllDayView(false);"},{"lineNumber":156,"author":{"gitID":"qwlai"},"content":"        detailedDayView.setShowScrollBar(false);"},{"lineNumber":157,"author":{"gitID":"qwlai"},"content":"        detailedDayView.setVisibleHours(24);"},{"lineNumber":158,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":159,"author":{"gitID":"qwlai"},"content":"        detailedDayView.setBackground(new Background(new BackgroundFill(Color.web(\"#ffffff\"),"},{"lineNumber":160,"author":{"gitID":"qwlai"},"content":"                CornerRadii.EMPTY, Insets.EMPTY)));"},{"lineNumber":161,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":163,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"qwlai"},"content":"     * Checks if a cinema exist in a given list of cinemas"},{"lineNumber":165,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"qwlai"},"content":"    private boolean hasCinema(ObservableList\u003cCinema\u003e cinemas) {"},{"lineNumber":167,"author":{"gitID":"qwlai"},"content":"        for (Cinema c : cinemas) {"},{"lineNumber":168,"author":{"gitID":"qwlai"},"content":"            if (c.getName().equals(currentCinema.getName())) {"},{"lineNumber":169,"author":{"gitID":"qwlai"},"content":"                currentCinema \u003d c;"},{"lineNumber":170,"author":{"gitID":"qwlai"},"content":"                return true;"},{"lineNumber":171,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":172,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"qwlai"},"content":"        return false;"},{"lineNumber":174,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":176,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"qwlai"},"content":"     * Handles CinemaPanelSelectionChangedEvent"},{"lineNumber":178,"author":{"gitID":"qwlai"},"content":"     * Reloads the schedule of newly selected cinema"},{"lineNumber":179,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"qwlai"},"content":"    @Subscribe"},{"lineNumber":181,"author":{"gitID":"qwlai"},"content":"    private void handleCinemaPanelSelectionChangedEvent(CinemaPanelSelectionChangedEvent event) {"},{"lineNumber":182,"author":{"gitID":"qwlai"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":183,"author":{"gitID":"qwlai"},"content":"        browserPane.getChildren().clear();"},{"lineNumber":184,"author":{"gitID":"qwlai"},"content":"        currentDate \u003d LocalDate.now();"},{"lineNumber":185,"author":{"gitID":"qwlai"},"content":"        currentCinema \u003d event.getNewSelection().cinema;"},{"lineNumber":186,"author":{"gitID":"qwlai"},"content":"        loadCinemaSchedule(currentCinema, currentDate);"},{"lineNumber":187,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":189,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"qwlai"},"content":"     * Reloads the schedule of the cinema provided"},{"lineNumber":191,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"qwlai"},"content":"    @Subscribe"},{"lineNumber":193,"author":{"gitID":"qwlai"},"content":"    private void handleReloadBrowserPanelEvent(ReloadBrowserPanelEvent event) {"},{"lineNumber":194,"author":{"gitID":"qwlai"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, refreshing browser view\"));"},{"lineNumber":195,"author":{"gitID":"qwlai"},"content":"        browserPane.getChildren().clear();"},{"lineNumber":196,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":197,"author":{"gitID":"qwlai"},"content":"        if (event.getMoviePlanner() !\u003d null) { // handling undo, redo, clear all"},{"lineNumber":198,"author":{"gitID":"qwlai"},"content":"            try {"},{"lineNumber":199,"author":{"gitID":"qwlai"},"content":"                if (hasCinema(event.getMoviePlanner().getCinemaList())) {"},{"lineNumber":200,"author":{"gitID":"qwlai"},"content":"                    loadCinemaSchedule(currentCinema, currentDate);"},{"lineNumber":201,"author":{"gitID":"qwlai"},"content":"                }"},{"lineNumber":202,"author":{"gitID":"qwlai"},"content":"            } catch (NullPointerException npe) {"},{"lineNumber":203,"author":{"gitID":"qwlai"},"content":"                // catches npe when no schedule is being showed, do nothing as undo, redo and clear will work as normal"},{"lineNumber":204,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":205,"author":{"gitID":"qwlai"},"content":"        } else { // handling new screening"},{"lineNumber":206,"author":{"gitID":"qwlai"},"content":"            currentCinema \u003d event.getCinema();"},{"lineNumber":207,"author":{"gitID":"qwlai"},"content":"            currentDate \u003d event.getDate().toLocalDate();"},{"lineNumber":208,"author":{"gitID":"qwlai"},"content":"            loadCinemaSchedule(currentCinema, currentDate);"},{"lineNumber":209,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":212,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"qwlai"},"content":"     * Handles JumpToDateRequestEvent"},{"lineNumber":214,"author":{"gitID":"qwlai"},"content":"     * Jumps to specified date in the scheduler"},{"lineNumber":215,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"qwlai"},"content":"    @Subscribe"},{"lineNumber":217,"author":{"gitID":"qwlai"},"content":"    private void handleJumpCommandEvent(JumpToDateRequestEvent event) {"},{"lineNumber":218,"author":{"gitID":"qwlai"},"content":"        try {"},{"lineNumber":219,"author":{"gitID":"qwlai"},"content":"            logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Jumping to date: \" + event.getDate()));"},{"lineNumber":220,"author":{"gitID":"qwlai"},"content":"            currentDate \u003d event.getDate();"},{"lineNumber":221,"author":{"gitID":"qwlai"},"content":"            browserPane.getChildren().clear();"},{"lineNumber":222,"author":{"gitID":"qwlai"},"content":"            loadCinemaSchedule(currentCinema, currentDate);"},{"lineNumber":223,"author":{"gitID":"qwlai"},"content":"        } catch (NullPointerException npe) {"},{"lineNumber":224,"author":{"gitID":"qwlai"},"content":"            logger.severe(LogsCenter.getEventHandlingLogMessage(event, \"Null cinema card.\"));"},{"lineNumber":225,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"-":11,"qwlai":216}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/calendar.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":90,"author":{"gitID":"chanyikwai"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/ModernTheme.css\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":1,"-":116,"qwlai":1}},{"path":"src/main/java/seedu/address/ui/CinemaListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.ui.CinemaPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":" * Panel containing the list of cinemas."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"public class CinemaListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    private static final String FXML \u003d \"CinemaListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CinemaListPanel.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    private ListView\u003cCinemaCard\u003e cinemaListView;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    public CinemaListPanel(ObservableList\u003cCinema\u003e cinemaList) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"        setConnections(cinemaList);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    private void setConnections(ObservableList\u003cCinema\u003e cinemaList) {"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"        ObservableList\u003cCinemaCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"                cinemaList, (cinema) -\u003e new CinemaCard(cinema, cinemaList.indexOf(cinema) + 1));"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        cinemaListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        cinemaListView.setCellFactory(listView -\u003e new CinemaListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        cinemaListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"                        logger.fine(\"Selection in cinema list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"                        raise(new CinemaPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"     * Scrolls to the {@code CinemaCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"            cinemaListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"            cinemaListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code CinemaCard}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"    class CinemaListViewCell extends ListCell\u003cCinemaCard\u003e {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        protected void updateItem(CinemaCard cinema, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"            super.updateItem(cinema, empty);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"            if (empty || cinema \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"                setGraphic(cinema.getRoot());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":62,"qwlai":26}},{"path":"src/test/java/guitests/guihandles/CinemaListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import seedu.address.ui.CinemaCard;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":" * Provides a handle for {@code CinemaListPanel} containing the list of {@code CinemaCard}."},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"public class CinemaListPanelHandle extends NodeHandle\u003cListView\u003cCinemaCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"    public static final String CINEMA_LIST_VIEW_ID \u003d \"#cinemaListView\";"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    private Optional\u003cCinemaCard\u003e lastRememberedSelectedCinemaCard;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    public CinemaListPanelHandle(ListView\u003cCinemaCard\u003e cinemaListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"        super(cinemaListPanelNode);"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"     * Returns a handle to the selected {@code CinemaCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    public CinemaCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"        List\u003cCinemaCard\u003e cinemaList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"        if (cinemaList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"            throw new AssertionError(\"Cinema list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"        return new CinemaCardHandle(cinemaList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"        List\u003cCinemaCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"     * Navigates the listview to display and select the cinema."},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"    public void navigateToCard(Cinema cinema) {"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        List\u003cCinemaCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        Optional\u003cCinemaCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.cinema.equals(cinema)).findFirst();"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"            throw new IllegalArgumentException(\"Cinema does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"     * Returns the cinema card handle of a cinema associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"    public CinemaCardHandle getCinemaCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        return getCinemaCardHandle(getRootNode().getItems().get(index).cinema);"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"     * Returns the {@code CinemaCardHandle} of the specified {@code cinema} in the list."},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"    public CinemaCardHandle getCinemaCardHandle(Cinema cinema) {"},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":"        Optional\u003cCinemaCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"                .filter(card -\u003e card.cinema.equals(cinema))"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"                .map(card -\u003e new CinemaCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Cinema does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"     * Selects the {@code CinemaCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"     * Remembers the selected {@code CinemaCard} in the list."},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"    public void rememberSelectedCinemaCard() {"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"        List\u003cCinemaCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"            lastRememberedSelectedCinemaCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"            lastRememberedSelectedCinemaCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"qwlai"},"content":"     * Returns true if the selected {@code CinemaCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"     * {@code rememberSelectedCinemaCard()} call."},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"    public boolean isSelectedCinemaCardChanged() {"},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":"        List\u003cCinemaCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"            return lastRememberedSelectedCinemaCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"            return !lastRememberedSelectedCinemaCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"qwlai"},"content":"                    || !lastRememberedSelectedCinemaCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"qwlai":77}},{"path":"src/main/java/seedu/address/ui/CinemaCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":" * An UI component that displays information of a {@code Cinema}."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"public class CinemaCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"    private static final String FXML \u003d \"CinemaListCard.fxml\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    public final Cinema cinema;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    public CinemaCard(Cinema cinema, int displayedIndex) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        this.cinema \u003d cinema;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"        name.setText(cinema.getName().fullName);"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        phone.setText(cinema.getPhone().value);"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"        address.setText(cinema.getAddress().value);"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"        email.setText(cinema.getEmail().value);"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"        if (!(other instanceof CinemaCard)) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"        CinemaCard card \u003d (CinemaCard) other;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 cinema.equals(card.cinema);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":2,"-":43,"qwlai":14}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.model.MoviePlannerChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"    public void handleMoviePlannerChangedEvent(MoviePlannerChangedEvent abce) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":79,"qwlai":2}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"    private static final int TOGGLE_TO_NEXT_TAB \u003d -1;"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"    private MovieListPanel movieListPanel;"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"    private TabsPanel tabsPanel;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":"    private MenuItem undoMenuItem;"},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":"    private MenuItem redoMenuItem;"},{"lineNumber":70,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":71,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":"    private MenuItem clearMenuItem;"},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":"    private MenuItem listMenuItem;"},{"lineNumber":76,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"    private MenuItem historyMenuItem;"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":80,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":81,"author":{"gitID":"chanyikwai"},"content":"    private MenuItem toggleTabMenuItem;"},{"lineNumber":82,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":83,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":84,"author":{"gitID":"chanyikwai"},"content":"    private StackPane tabsPanelPlaceholder;"},{"lineNumber":85,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"    private StackPane cinemaListPanelPlaceholder;"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"    private StackPane movieListPanelPlaceholder;"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":121,"author":{"gitID":"chanyikwai"},"content":"        setAccelerator(undoMenuItem, KeyCombination.valueOf(\"Shortcut + Z\"));"},{"lineNumber":122,"author":{"gitID":"chanyikwai"},"content":"        setAccelerator(redoMenuItem, KeyCombination.valueOf(\"Shortcut + Y\"));"},{"lineNumber":123,"author":{"gitID":"chanyikwai"},"content":"        setAccelerator(clearMenuItem, KeyCombination.valueOf(\"Alt + Shift + C\"));"},{"lineNumber":124,"author":{"gitID":"chanyikwai"},"content":"        setAccelerator(listMenuItem, KeyCombination.valueOf(\"Shortcut + L\"));"},{"lineNumber":125,"author":{"gitID":"chanyikwai"},"content":"        setAccelerator(historyMenuItem, KeyCombination.valueOf(\"Shortcut + H\"));"},{"lineNumber":126,"author":{"gitID":"chanyikwai"},"content":"        setAccelerator(toggleTabMenuItem, KeyCombination.valueOf(\"Shift + Tab\"));"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":137,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":138,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":139,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":140,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":141,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":142,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":143,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":144,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":145,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":146,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":147,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":148,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":149,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":150,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"chanyikwai"},"content":"        tabsPanel \u003d new TabsPanel(logic.getFilteredCinemaList());"},{"lineNumber":167,"author":{"gitID":"chanyikwai"},"content":"        tabsPanelPlaceholder.getChildren().add(tabsPanel.getRoot());"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"qwlai"},"content":"        movieListPanel \u003d new MovieListPanel(logic.getFilteredMovieList());"},{"lineNumber":170,"author":{"gitID":"qwlai"},"content":"        movieListPanelPlaceholder.getChildren().add(movieListPanel.getRoot());"},{"lineNumber":171,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"qwlai"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getMoviePlannerFilePath());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":204,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":207,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"chanyikwai"},"content":"     * Undo command."},{"lineNumber":221,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":223,"author":{"gitID":"chanyikwai"},"content":"    public void handleUndo() {"},{"lineNumber":224,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":225,"author":{"gitID":"chanyikwai"},"content":"            CommandResult commandResult \u003d logic.execute(UndoCommand.COMMAND_WORD);"},{"lineNumber":226,"author":{"gitID":"chanyikwai"},"content":"            initHistory();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":232,"author":{"gitID":"chanyikwai"},"content":"            logger.info(\"Invalid command: \" + UndoCommand.COMMAND_WORD);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":239,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":245,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"chanyikwai"},"content":"     * Redo previous command."},{"lineNumber":250,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":252,"author":{"gitID":"chanyikwai"},"content":"    public void handleRedo() {"},{"lineNumber":253,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":254,"author":{"gitID":"chanyikwai"},"content":"            CommandResult commandResult \u003d logic.execute(RedoCommand.COMMAND_WORD);"},{"lineNumber":255,"author":{"gitID":"chanyikwai"},"content":"            initHistory();"},{"lineNumber":256,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":257,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":261,"author":{"gitID":"chanyikwai"},"content":"            logger.info(\"Invalid command: \" + RedoCommand.COMMAND_WORD);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"chanyikwai"},"content":"     * Clear cinema list."},{"lineNumber":268,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":270,"author":{"gitID":"chanyikwai"},"content":"    public void handleClear() {"},{"lineNumber":271,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":272,"author":{"gitID":"chanyikwai"},"content":"            CommandResult commandResult \u003d logic.execute(ClearCommand.COMMAND_WORD);"},{"lineNumber":273,"author":{"gitID":"chanyikwai"},"content":"            initHistory();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":279,"author":{"gitID":"chanyikwai"},"content":"            logger.info(\"Invalid command: \" + ClearCommand.COMMAND_WORD);"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":285,"author":{"gitID":"chanyikwai"},"content":"     * List all cinemas."},{"lineNumber":286,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":287,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":288,"author":{"gitID":"chanyikwai"},"content":"    public void handleList() {"},{"lineNumber":289,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":290,"author":{"gitID":"chanyikwai"},"content":"            CommandResult commandResult \u003d logic.execute(ListCommand.COMMAND_WORD);"},{"lineNumber":291,"author":{"gitID":"chanyikwai"},"content":"            initHistory();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":297,"author":{"gitID":"chanyikwai"},"content":"            logger.info(\"Invalid command: \" + ListCommand.COMMAND_WORD);"},{"lineNumber":298,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":299,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":303,"author":{"gitID":"chanyikwai"},"content":"     * List all cinemas."},{"lineNumber":304,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":305,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":306,"author":{"gitID":"chanyikwai"},"content":"    public void handleHistory() {"},{"lineNumber":307,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":308,"author":{"gitID":"chanyikwai"},"content":"            CommandResult commandResult \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":309,"author":{"gitID":"chanyikwai"},"content":"            initHistory();"},{"lineNumber":310,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":311,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":314,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":315,"author":{"gitID":"chanyikwai"},"content":"            logger.info(\"Invalid command: \" + HistoryCommand.COMMAND_WORD);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":317,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"chanyikwai"},"content":"    //@@author chanyikwai"},{"lineNumber":321,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":322,"author":{"gitID":"chanyikwai"},"content":"     * Toggle to next tab in Main Window."},{"lineNumber":323,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":324,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":325,"author":{"gitID":"chanyikwai"},"content":"    public void handleToggleNextTab() {"},{"lineNumber":326,"author":{"gitID":"chanyikwai"},"content":"        tabsPanel.toggleTabs(TOGGLE_TO_NEXT_TAB);"},{"lineNumber":327,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":328,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":329,"author":{"gitID":"chanyikwai"},"content":"    void show() {"},{"lineNumber":330,"author":{"gitID":"chanyikwai"},"content":"        primaryStage.show();"},{"lineNumber":331,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":333,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":334,"author":{"gitID":"chanyikwai"},"content":"     * Closes the application."},{"lineNumber":335,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":336,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":337,"author":{"gitID":"chanyikwai"},"content":"    private void handleExit() {"},{"lineNumber":338,"author":{"gitID":"chanyikwai"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":339,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":341,"author":{"gitID":"chanyikwai"},"content":"    @Subscribe"},{"lineNumber":342,"author":{"gitID":"chanyikwai"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":343,"author":{"gitID":"chanyikwai"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":344,"author":{"gitID":"chanyikwai"},"content":"        handleHelp();"},{"lineNumber":345,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":108,"-":229,"qwlai":9}},{"path":"src/main/java/seedu/address/ui/TabsPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"import javafx.scene.control.Tab;"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":" * Left Tab Panel containing cinemaListPanel and EmailDraftPanel"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"public class TabsPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"    private static final String FXML \u003d \"TabsPanel.fxml\";"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TabsPanel.class);"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"    private CinemaListPanel cinemaListPanel;"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"    private EmailMessagePanel emailMessageDisplay;"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"    private int tabIndex;"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"    private TabPane tabsPane;"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"    private Tab cinemaListTab;"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"    private Tab emailDraftTab;"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"    private StackPane cinemaListPanelPlaceholder;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"    private StackPane messageDraftPanelPlaceholder;"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"    public TabsPanel(ObservableList\u003cCinema\u003e cinemaList) {"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"        cinemaListPanel \u003d new CinemaListPanel(cinemaList);"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"        cinemaListPanelPlaceholder.getChildren().add(cinemaListPanel.getRoot());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        emailMessageDisplay \u003d new EmailMessagePanel();"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"        messageDraftPanelPlaceholder.getChildren().add(emailMessageDisplay.getRoot());"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"        tabIndex \u003d 0;"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"     * Toggles Tabs in Main Window by referencing index"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"    public void toggleTabs(int index) {"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"        if (index \u003e\u003d 0) {"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"            tabIndex \u003d index;"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"        } else {"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"            tabIndex \u003d (tabIndex + 1) % 2;"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"        switch (tabIndex) {"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"        case 0:"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"            tabsPane.getSelectionModel().select(cinemaListTab);"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"            break;"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":"        case 1:"},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":"            tabsPane.getSelectionModel().select(emailDraftTab);"},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"            break;"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":"        default:"},{"lineNumber":70,"author":{"gitID":"chanyikwai"},"content":"            assert false : \"It should not be possible to reach here.\";"},{"lineNumber":71,"author":{"gitID":"chanyikwai"},"content":"            break;"},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"    public CinemaListPanel getCinemaListPanel() {"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        return this.cinemaListPanel;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":62,"-":11,"qwlai":5}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX \u003d \"The cinema index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_INVALID_MOVIE_DISPLAYED_INDEX \u003d \"The movie index provided is invalid\";"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_CINEMAS_LISTED_OVERVIEW \u003d \"%1$d cinemas listed!\";"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_MOVIES_LISTED_OVERVIEW \u003d \"%1$d movies listed!\";"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_INVALID_THEATER_NUMBER \u003d \"The theater number provided is invalid\";"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_INVALID_SCREEN_DATE_TIME \u003d \"Please provide a valid date and time\""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"            + \" in the form DD/MM/YYYY HH/mm. With the minutes being in 5 minutes interval. E.g. 05/05/2015 23:05\";"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_INVALID_YEAR \u003d \"Please provide a valid year. The year provided should be between\""},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"            + \" 2000 and 2030, inclusive of year 2000 and 2030.\";"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_INVALID_SCREENING \u003d \"Please ensure that there is no conflict of screening\""},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"            + \" before and after this. \\nPlease also make sure the screening date is after the movie release date.\";"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_INVALID_DELETE_SCREENING_DATE_TIME \u003d \"Please ensure that the screening exist in \""},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"            + \"the given cinema. \\nPlease also ensure that the time given is the exact time when the screening starts.\";"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_ENCRYPTED_FILE_NOT_FOUND \u003d \"Encrypted file not found! Nothing to decrypt.\";"},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"movieplanner.xml not found. No file to encrypt!\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":1,"tinyjy94":2,"-":10,"qwlai":12}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"    private String appTitle \u003d \"MoVie Planner\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":71,"qwlai":1}},{"path":"src/main/java/seedu/address/ui/MovieListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":" * Panel containing the list of movies."},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"public class MovieListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    private static final String FXML \u003d \"MovieListPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(MovieListPanel.class);"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    private ListView\u003cMovieCard\u003e movieListView;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    public MovieListPanel(ObservableList\u003cMovie\u003e movieList) {"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"        setConnections(movieList);"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    private void setConnections(ObservableList\u003cMovie\u003e movieList) {"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"        ObservableList\u003cMovieCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"                movieList, (movie) -\u003e new MovieCard(movie, movieList.indexOf(movie) + 1));"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        movieListView.setItems(mappedList);"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"        movieListView.setCellFactory(listView -\u003e new MovieListViewCell());"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"     * Scrolls to the {@code MovieCard} at the {@code index} and selects it."},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    private void scrollTo(int index) {"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"            movieListView.scrollTo(index);"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"            movieListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        });"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code MovieCard}."},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    class MovieListViewCell extends ListCell\u003cMovieCard\u003e {"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"        @Override"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"        protected void updateItem(MovieCard movie, boolean empty) {"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"            super.updateItem(movie, empty);"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"            if (empty || movie \u003d\u003d null) {"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"                setGraphic(null);"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"                setText(null);"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"            } else {"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"                setGraphic(movie.getRoot());"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"-":13,"qwlai":54}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Handler;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":17,"author":{"gitID":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":18,"author":{"gitID":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogsCenter {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    private static final String LOG_FILE \u003d \"movieplanner.log\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Handler[] handlers \u003d logger.getHandlers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        for (Handler handler : handlers) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            logger.removeHandler(handler);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return fileHandler;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return consoleHandler;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Decorates the given string to create a log message suitable for logging event handling methods."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return \"---[Event handled][\" + e + \"]\" + message;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @see #getEventHandlingLogMessage(BaseEvent, String)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return getEventHandlingLogMessage(e, \"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":129,"qwlai":1}},{"path":"src/test/java/guitests/guihandles/MovieListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import seedu.address.ui.MovieCard;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":" * Provides a handle for {@code MovieListPanel} containing the list of {@code MovieCard}."},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"public class MovieListPanelHandle extends NodeHandle\u003cListView\u003cMovieCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"    public static final String MOVIE_LIST_VIEW_ID \u003d \"#movieListView\";"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    private Optional\u003cMovieCard\u003e lastRememberedSelectedMovieCard;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    public MovieListPanelHandle(ListView\u003cMovieCard\u003e movieListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"        super(movieListPanelNode);"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"     * Returns a handle to the selected {@code MovieCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    public MovieCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"        List\u003cMovieCard\u003e movieList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"        if (movieList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"            throw new AssertionError(\"Movie list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"        return new MovieCardHandle(movieList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"        List\u003cMovieCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"     * Navigates the listview to display and select the movie."},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"    public void navigateToCard(Movie movie) {"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        List\u003cMovieCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        Optional\u003cMovieCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.movie.equals(movie)).findFirst();"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"            throw new IllegalArgumentException(\"Movie does not exist.\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"     * Returns the movie card handle of a movie associated with the {@code index} in the list."},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"    public MovieCardHandle getMovieCardHandle(int index) {"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        return getMovieCardHandle(getRootNode().getItems().get(index).movie);"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"     * Returns the {@code MovieCardHandle} of the specified {@code movie} in the list."},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"    public MovieCardHandle getMovieCardHandle(Movie movie) {"},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":"        Optional\u003cMovieCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"                .filter(card -\u003e card.movie.equals(movie))"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"                .map(card -\u003e new MovieCardHandle(card.getRoot()))"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"                .findFirst();"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Movie does not exist.\"));"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"     * Selects the {@code MovieCard} at {@code index} in the list."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"     * Remembers the selected {@code MovieCard} in the list."},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"    public void rememberSelectedMovieCard() {"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"        List\u003cMovieCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"            lastRememberedSelectedMovieCard \u003d Optional.empty();"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"        } else {"},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"            lastRememberedSelectedMovieCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"qwlai"},"content":"     * Returns true if the selected {@code MovieCard} is different from the value remembered by the most recent"},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"     * {@code rememberSelectedMovieCard()} call."},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"    public boolean isSelectedMovieCardChanged() {"},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":"        List\u003cMovieCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"            return lastRememberedSelectedMovieCard.isPresent();"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"            return !lastRememberedSelectedMovieCard.isPresent()"},{"lineNumber":124,"author":{"gitID":"qwlai"},"content":"                    || !lastRememberedSelectedMovieCard.get().equals(selectedItems.get(0));"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":57,"qwlai":77}},{"path":"src/main/java/seedu/address/ui/MovieCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":" * An UI component that displays information of a {@code Movie}."},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"public class MovieCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    private static final String FXML \u003d \"MovieListCard.fxml\";"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"    private static final String[] TAG_COLORS \u003d {\"red\", \"blue\", \"orange\", \"green\", \"yellow\", \"grey\", \"white\", \"black\","},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"        \"pink\", \"brown\"};"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    public final Movie movie;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    private HBox cardPane;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    private Label movieName;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    private Label id;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    private Label duration;"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    private Label rating;"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    private Label startDate;"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"    private FlowPane tags;"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    public MovieCard(Movie movie, int displayedIndex) {"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        this.movie \u003d movie;"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        movieName.setText(movie.getName().toString());"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"        duration.setText((movie.getDuration().toString()));"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"        rating.setText((movie.getRating().toString()));"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"        startDate.setText((movie.getStartDate().toString()));"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        initializeTags(movie);"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"     * Returns color for {@code tagName} label"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"    private String getTagColor(String tagName) {"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"        return TAG_COLORS[Math.abs(tagName.hashCode()) % TAG_COLORS.length];"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"     * Create tag labels for {@code movie}"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"    private void initializeTags(Movie movie) {"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"        movie.getTags().forEach(tag -\u003e {"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"            tagLabel.getStyleClass().add(getTagColor(tag.tagName));"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        });"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"        // short circuit if same object"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"            return true;"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"        // instanceof handles nulls"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"        if (!(other instanceof MovieCard)) {"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"            return false;"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        // state check"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        MovieCard card \u003d (MovieCard) other;"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 movie.equals(card.movie);"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"slothhy":1,"-":6,"qwlai":76}},{"path":"src/main/java/seedu/address/ui/EmailMessagePanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.commons.events.ui.EmailDraftChangedEvent;"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":" * A ui for the display of the current email draft"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"public class EmailMessagePanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"    private static final String FXML \u003d \"EmailMessagePanel.fxml\";"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"    private final StringProperty messageDisplay \u003d new SimpleStringProperty(\"\");"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"    private final StringProperty recipientsDisplay \u003d new SimpleStringProperty(\"\");"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"    private final StringProperty subjectDisplay \u003d new SimpleStringProperty(\"\");"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"    private TextArea messageArea;"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"    private TextArea recipientsArea;"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"    private TextArea subjectArea;"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"    public EmailMessagePanel() {"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"        messageArea.setWrapText(true);"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"        recipientsArea.setWrapText(true);"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"        subjectArea.setWrapText(true);"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"        messageArea.textProperty().bind(messageDisplay);"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"        recipientsArea.textProperty().bind(recipientsDisplay);"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"        subjectArea.textProperty().bind(subjectDisplay);"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"    @Subscribe"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"    private void handleEmailDraftChangedEvent(EmailDraftChangedEvent event) {"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"        Platform.runLater(new Runnable() {"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"            @Override"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"            public void run() {"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"                messageDisplay.setValue(event.message.getMessage());"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"                recipientsDisplay.setValue(event.message.getRecipient());"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"                subjectDisplay.setValue(event.message.getSubject());"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"        });"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":48,"-":13}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":" * Indicates a request to jump to the list of cinemas"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class JumpToListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public JumpToListRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":21,"qwlai":1}},{"path":"src/main/java/seedu/address/commons/events/ui/CinemaPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import seedu.address.ui.CinemaCard;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":" * Represents a selection change in the Cinema List Panel"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"public class CinemaPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"    private final CinemaCard newSelection;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"    public CinemaPanelSelectionChangedEvent(CinemaCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    public CinemaCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"-":11,"qwlai":15}},{"path":"src/main/java/seedu/address/commons/events/ui/EmailDraftChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.ReadOnlyMessageDraft;"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":" * Indicates that the email draft have changed"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"public class EmailDraftChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"    public final ReadOnlyMessageDraft message;"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"    public EmailDraftChangedEvent(ReadOnlyMessageDraft message) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":10,"-":12}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToDateRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":" * Indicates a request to jump a to specified date"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"public class JumpToDateRequestEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"    private LocalDate date;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"    public JumpToDateRequestEvent(LocalDate date) {"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    public LocalDate getDate() {"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"        return date;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"-":2,"qwlai":25}},{"path":"src/main/java/seedu/address/commons/events/model/MoviePlannerChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"/** Indicates the MoviePlanner in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"public class MoviePlannerChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"    public final ReadOnlyMoviePlanner data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"    public MoviePlannerChangedEvent(ReadOnlyMoviePlanner data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"        return \"number of cinemas \" + data.getCinemaList().size() + \", number of tags \" + data.getTagList().size()"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"                + \", number of movies \" + data.getMovieList().size();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":13,"qwlai":7}},{"path":"src/main/java/seedu/address/commons/events/storage/EncryptionRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":" * Indicates a request for encryption"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":"public class EncryptionRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"    private final String password;"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":"    public EncryptionRequestEvent(String password) {"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"        this.password \u003d password;"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"        return password;"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"    public String getPassword() {"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"        return password;"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":20,"-":3}},{"path":"src/main/java/seedu/address/commons/events/storage/DecryptionRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":" * Indicates a request for decryption"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":"public class DecryptionRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"    private final String password;"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":"    public DecryptionRequestEvent(String password) {"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"        this.password \u003d password;"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"        return password;"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"    public String getPassword() {"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"        return password;"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":20,"-":3}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    /** Returns an unmodifiable view of the filtered list of cinemas */"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    ObservableList\u003cCinema\u003e getFilteredCinemaList();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"    /** Returns an unmodifiable view of the filtered list of movies */"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    ObservableList\u003cMovie\u003e getFilteredMovieList();"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":24,"qwlai":7}},{"path":"src/main/java/seedu/address/commons/util/SecurityUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"tinyjy94"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":3,"author":{"gitID":"tinyjy94"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":"import java.io.FileInputStream;"},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import java.io.FileOutputStream;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"import java.security.InvalidKeyException;"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":"import java.security.Key;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":"import java.security.spec.InvalidKeySpecException;"},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":"import java.security.spec.KeySpec;"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"import java.util.logging.Logger;"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"import javax.crypto.BadPaddingException;"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"import javax.crypto.Cipher;"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"import javax.crypto.IllegalBlockSizeException;"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"import javax.crypto.NoSuchPaddingException;"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"import javax.crypto.SecretKey;"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"import javax.crypto.SecretKeyFactory;"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"import javax.crypto.spec.PBEKeySpec;"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"import javax.crypto.spec.SecretKeySpec;"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.events.storage.DecryptionRequestEvent;"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.events.storage.EncryptionRequestEvent;"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":" * Contains encryption and decryption functions"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"public class SecurityUtil {"},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"    private static final int AES_Key_Size \u003d 128;"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":"    private static final int iteration \u003d 65536;"},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":"    public static void encrypt(String filepath, String encryptedFilePath, String password) {"},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"        encrypt(new File(filepath), new File(encryptedFilePath), password);"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":"     * Encrypts the given file using AES key using Key given."},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"    public static void encrypt(File inputFile, File outputFile, String password) {"},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":"            Key pw \u003d generateKey(password);"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":"            Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5Padding\");"},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"            cipher.init(Cipher.ENCRYPT_MODE, pw);"},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":"            processFile(cipher, inputFile, outputFile);"},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":"        } catch (InvalidKeyException ike) {"},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"            logger.severe(\"Invalid key length provided \" + StringUtil.getDetails(ike));"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":"            throw new AssertionError(\"Invalid key length.\");"},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"        } catch (NoSuchAlgorithmException nsae) {"},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":"            logger.severe(\"Invalid algorithm provided \" + StringUtil.getDetails(nsae));"},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":"            throw new AssertionError(\"Invalid algorithm.\");"},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":"        } catch (NoSuchPaddingException bpe) {"},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":"            logger.severe(\"Invalid padding provided \" + StringUtil.getDetails(bpe));"},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":"            throw new AssertionError(\"Invalid padding.\");"},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":"        } catch (IOException e) {"},{"lineNumber":62,"author":{"gitID":"tinyjy94"},"content":"            logger.severe(\"File does not exist \" + StringUtil.getDetails(e));"},{"lineNumber":63,"author":{"gitID":"tinyjy94"},"content":"            throw new AssertionError(\"Invalid file provided.\");"},{"lineNumber":64,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":"    public static void decrypt(String filepath, String encryptedFilePath, String password) throws IOException {"},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":"        decrypt(new File(encryptedFilePath), new File(filepath), password);"},{"lineNumber":69,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":71,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"tinyjy94"},"content":"     * Decrypts the given file using AES key using Key given."},{"lineNumber":73,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"tinyjy94"},"content":"    public static void decrypt(File inputFile, File outputFile, String password) throws IOException {"},{"lineNumber":75,"author":{"gitID":"tinyjy94"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":"            Key pw \u003d generateKey(password);"},{"lineNumber":77,"author":{"gitID":"tinyjy94"},"content":"            Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5Padding\");"},{"lineNumber":78,"author":{"gitID":"tinyjy94"},"content":"            cipher.init(Cipher.DECRYPT_MODE, pw);"},{"lineNumber":79,"author":{"gitID":"tinyjy94"},"content":"            processFile(cipher, inputFile, outputFile); //decrypt takes in encrypted file as input"},{"lineNumber":80,"author":{"gitID":"tinyjy94"},"content":"        } catch (InvalidKeyException ike) {"},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":"            logger.severe(\"Invalid key length provided \" + StringUtil.getDetails(ike));"},{"lineNumber":82,"author":{"gitID":"tinyjy94"},"content":"            throw new AssertionError(\"Invalid key length.\");"},{"lineNumber":83,"author":{"gitID":"tinyjy94"},"content":"        } catch (NoSuchAlgorithmException nsae) {"},{"lineNumber":84,"author":{"gitID":"tinyjy94"},"content":"            logger.severe(\"Invalid algorithm provided \" + StringUtil.getDetails(nsae));"},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":"            throw new AssertionError(\"Invalid algorithm.\");"},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":"        } catch (NoSuchPaddingException bpe) {"},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"            logger.severe(\"Invalid padding provided \" + StringUtil.getDetails(bpe));"},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":"            throw new AssertionError(\"Invalid padding.\");"},{"lineNumber":89,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":92,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"tinyjy94"},"content":"     * Encrypts or decrypts the {@code inputFile} and write out into the same {@code inputFile} based on cipher given."},{"lineNumber":94,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"tinyjy94"},"content":"    private static void processFile(Cipher cipher, File inputFile, File outputFile) throws IOException {"},{"lineNumber":96,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":97,"author":{"gitID":"tinyjy94"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"tinyjy94"},"content":"            byte[] inputByteArray \u003d new byte[(int) inputFile.length()];"},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":"            FileInputStream fis \u003d new FileInputStream(inputFile); //create file input stream"},{"lineNumber":100,"author":{"gitID":"tinyjy94"},"content":"            fis.read(inputByteArray); //reads from fis to byte[]"},{"lineNumber":101,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":102,"author":{"gitID":"tinyjy94"},"content":"            byte[] outputBytes \u003d cipher.doFinal(inputByteArray); //encrypt or decrypt the byte[]"},{"lineNumber":103,"author":{"gitID":"tinyjy94"},"content":"            FileOutputStream fos \u003d new FileOutputStream(outputFile);"},{"lineNumber":104,"author":{"gitID":"tinyjy94"},"content":"            fos.write(outputBytes);"},{"lineNumber":105,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":106,"author":{"gitID":"tinyjy94"},"content":"            fis.close();"},{"lineNumber":107,"author":{"gitID":"tinyjy94"},"content":"            fos.close();"},{"lineNumber":108,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":109,"author":{"gitID":"tinyjy94"},"content":"        } catch (BadPaddingException bpe) {"},{"lineNumber":110,"author":{"gitID":"tinyjy94"},"content":"            logger.severe(\"Bad padding provided\" + StringUtil.getDetails(bpe));"},{"lineNumber":111,"author":{"gitID":"tinyjy94"},"content":"            throw new AssertionError(\"Bad padding provided\");"},{"lineNumber":112,"author":{"gitID":"tinyjy94"},"content":"        } catch (IllegalBlockSizeException ibse) {"},{"lineNumber":113,"author":{"gitID":"tinyjy94"},"content":"            // user decrypt from plaintext"},{"lineNumber":114,"author":{"gitID":"tinyjy94"},"content":"            logger.info(\"File is in plain text, no decryption required.\" + StringUtil.getDetails(ibse));"},{"lineNumber":115,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":118,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"tinyjy94"},"content":"     * Generate a secret AES key"},{"lineNumber":120,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"tinyjy94"},"content":"    public static Key generateKey(String password) {"},{"lineNumber":122,"author":{"gitID":"tinyjy94"},"content":"        try {"},{"lineNumber":123,"author":{"gitID":"tinyjy94"},"content":"            byte[] inputByte \u003d new byte[16];"},{"lineNumber":124,"author":{"gitID":"tinyjy94"},"content":"            KeySpec spec \u003d new PBEKeySpec(password.toCharArray(), inputByte, iteration, AES_Key_Size);"},{"lineNumber":125,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":126,"author":{"gitID":"tinyjy94"},"content":"            SecretKeyFactory factory \u003d SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");"},{"lineNumber":127,"author":{"gitID":"tinyjy94"},"content":"            SecretKey secretkey \u003d factory.generateSecret(spec);"},{"lineNumber":128,"author":{"gitID":"tinyjy94"},"content":"            return new SecretKeySpec(secretkey.getEncoded(), \"AES\");"},{"lineNumber":129,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":130,"author":{"gitID":"tinyjy94"},"content":"        } catch (NoSuchAlgorithmException nsae) {"},{"lineNumber":131,"author":{"gitID":"tinyjy94"},"content":"            logger.severe(\"Invalid algorithm provided \" + StringUtil.getDetails(nsae));"},{"lineNumber":132,"author":{"gitID":"tinyjy94"},"content":"            throw new AssertionError(\"Invalid algorithm.\");"},{"lineNumber":133,"author":{"gitID":"tinyjy94"},"content":"        } catch (InvalidKeySpecException ikse) {"},{"lineNumber":134,"author":{"gitID":"tinyjy94"},"content":"            logger.severe(\"Invalid key specifications provided \" + StringUtil.getDetails(ikse));"},{"lineNumber":135,"author":{"gitID":"tinyjy94"},"content":"            throw new AssertionError(\"Invalid key specifications.\");"},{"lineNumber":136,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":139,"author":{"gitID":"tinyjy94"},"content":"    @Subscribe"},{"lineNumber":140,"author":{"gitID":"tinyjy94"},"content":"    public void handleEncryptionRequestEvent(EncryptionRequestEvent event) {"},{"lineNumber":141,"author":{"gitID":"tinyjy94"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":142,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":144,"author":{"gitID":"tinyjy94"},"content":"    @Subscribe"},{"lineNumber":145,"author":{"gitID":"tinyjy94"},"content":"    public void handleDecryptionRequestEvent(DecryptionRequestEvent event) {"},{"lineNumber":146,"author":{"gitID":"tinyjy94"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":147,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":149,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":147,"-":2}},{"path":"src/main/java/seedu/address/commons/events/ui/ReloadBrowserPanelEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":" * Indicates that there is a need to reload browser panel"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"public class ReloadBrowserPanelEvent extends BaseEvent {"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"    private Cinema cinema;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"    private LocalDateTime date;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    private ReadOnlyMoviePlanner moviePlanner;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    public ReloadBrowserPanelEvent(ReadOnlyMoviePlanner moviePlanner) {"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"        this.moviePlanner \u003d moviePlanner;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    public ReloadBrowserPanelEvent(Cinema cinema, LocalDateTime date) {"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"        this.cinema \u003d cinema;"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    public Cinema getCinema() {"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"        return cinema;"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"    public LocalDateTime getDate() {"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        return date;"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"    public ReadOnlyMoviePlanner getMoviePlanner() {"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        return moviePlanner;"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"-":2,"qwlai":40}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMOFTHEATERS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":"                                           PREFIX_ADDRESS, PREFIX_TAG, PREFIX_NUMOFTHEATERS);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS,"},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_NUMOFTHEATERS)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"            ArrayList\u003cTheater\u003e theaterList \u003d ParserUtil.parseTheaters(argMultimap.getValue(PREFIX_NUMOFTHEATERS)).get();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"            Cinema cinema \u003d new Cinema(name, phone, email, address, theaterList);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"            return new AddCommand(cinema);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":1,"tinyjy94":8,"-":53,"qwlai":6}},{"path":"src/main/java/seedu/address/logic/parser/AddTheaterCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"tinyjy94"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":3,"author":{"gitID":"tinyjy94"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMOFTHEATERS;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.logic.commands.AddTheaterCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":" * Parses input arguments and creates a new AddTheaterCommand object"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"public class AddTheaterCommandParser implements Parser\u003cAddTheaterCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"     * Parses the given {@code String} of arguments in the context of the AddTheaterCommand"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":"     * and returns an AddTheaterCommand object for execution."},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":"    public AddTheaterCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NUMOFTHEATERS);"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NUMOFTHEATERS)) {"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTheaterCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":"        Index index;"},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e newTheaters;"},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTheaterCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":"            newTheaters \u003d ParserUtil.parseTheaters(argMultimap.getValue(PREFIX_NUMOFTHEATERS)).get();"},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":"        return new AddTheaterCommand(index, newTheaters.size());"},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"      * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":"      * {@code ArgumentMultimap}."},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"      */"},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":56,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":32,"qwlai":1}},{"path":"src/main/java/seedu/address/logic/parser/AddMovieCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.AddMovieCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Duration;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.MovieName;"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Rating;"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDate;"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":" * Parses input arguments and creates a new AddMovieCommand object"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"public class AddMovieCommandParser implements Parser\u003cAddMovieCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"     * Parses the given {@code String} of arguments in the context of the AddMovieCommand"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"     * and returns an AddMovieCommand object for execution."},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"    public AddMovieCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DURATION, PREFIX_RATING, PREFIX_STARTDATE,"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"                        PREFIX_TAG);"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DURATION, PREFIX_RATING, PREFIX_STARTDATE,"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"                PREFIX_TAG)"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddMovieCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"            MovieName name \u003d ParserUtil.parseMovieName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"            Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"            Rating rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get());"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"            StartDate startDate \u003d ParserUtil.parseStartDate(argMultimap.getValue(PREFIX_STARTDATE).get());"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"            Movie movie \u003d new Movie(name, duration, rating, startDate, tagList);"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"            return new AddMovieCommand(movie);"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":60,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/DeleteMovieCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.DeleteMovieCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"public class DeleteMovieCommandParser implements Parser\u003cDeleteMovieCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"    public DeleteMovieCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"            return new DeleteMovieCommand(index);"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteMovieCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":23,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/DeleteTheaterCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMOFTHEATERS;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.logic.commands.DeleteTheaterCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":" * Parses input arguments and creates a new DeleteTheaterCommand object"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"public class DeleteTheaterCommandParser implements Parser\u003cDeleteTheaterCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteTheaterCommand"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":"     * and returns a {@code DeleteTheaterCommand} object for execution."},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"    public DeleteTheaterCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"        requireNonNull(args);"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NUMOFTHEATERS);"},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"        Index index;"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e newTheaters;"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NUMOFTHEATERS)) {"},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTheaterCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTheaterCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"            newTheaters \u003d ParserUtil.parseTheaters(argMultimap.getValue(PREFIX_NUMOFTHEATERS)).get();"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"        return new DeleteTheaterCommand(index, newTheaters.size());"},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":54,"-":7}},{"path":"src/main/java/seedu/address/logic/parser/AddScreeningCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SCREEN_DATE_TIME;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CINEMA_INDEX;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MOVIE_INDEX;"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMOFTHEATERS;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCREENING_DATE_TIME;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.AddScreeningCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":" * Parses input arguments and creates a new AddScreeningCommand object"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"public class AddScreeningCommandParser implements Parser\u003cAddScreeningCommand\u003e {"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"     * Parses the given {@code String} of arguments in the context of the AddScreeningCommand"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"     * and returns an AddScreeningCommand object for execution."},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    public AddScreeningCommand parse(String args) throws ParseException {"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MOVIE_INDEX, PREFIX_CINEMA_INDEX,"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"                        PREFIX_NUMOFTHEATERS, PREFIX_SCREENING_DATE_TIME);"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_MOVIE_INDEX, PREFIX_CINEMA_INDEX, PREFIX_NUMOFTHEATERS,"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"                PREFIX_SCREENING_DATE_TIME) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddScreeningCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"            Index cinemaIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CINEMA_INDEX).get());"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"            Index movieIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_MOVIE_INDEX).get());"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"            int theaterNumber \u003d ParserUtil.parseTheaterNumber(argMultimap.getValue(PREFIX_NUMOFTHEATERS).get());"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"            LocalDateTime screeningDateTime \u003d ParserUtil.parseScreeningDateTime("},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"                    argMultimap.getValue(PREFIX_SCREENING_DATE_TIME).get());"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"            return new AddScreeningCommand(movieIndex, cinemaIndex, theaterNumber, screeningDateTime);"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"            throw new ParseException(MESSAGE_INVALID_SCREEN_DATE_TIME, dtpe);"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"tinyjy94":1,"-":7,"qwlai":55}},{"path":"src/main/java/seedu/address/logic/parser/EncryptCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_FILE_NOT_FOUND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.logic.commands.EncryptCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":" * Parses input arguments and creates a new EncryptCommand object"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"public class EncryptCommandParser implements Parser\u003cEncryptCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"     * Parses the given {@code String} of arguments in the context of the EncryptCommand"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"     * and returns an EncryptCommand object for execution."},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"    public EncryptCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":"        requireNonNull(args);"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PASSWORD);"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PASSWORD)) {"},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EncryptCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"        String password \u003d args.trim();"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"        UserPrefs pref \u003d new UserPrefs();"},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":"        File filePath \u003d new File(pref.getMoviePlannerFilePath());"},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"        if (!filePath.exists()) {"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":"            throw new ParseException(String.format(MESSAGE_FILE_NOT_FOUND, EncryptCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"        return new EncryptCommand(password);"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":45,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"d/\");"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"    public static final Prefix PREFIX_STARTDATE \u003d new Prefix(\"sd/\");"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"    public static final Prefix PREFIX_NUMOFTHEATERS \u003d new Prefix(\"th/\");"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    public static final Prefix PREFIX_CINEMA_INDEX \u003d new Prefix(\"c/\");"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"    public static final Prefix PREFIX_MOVIE_INDEX \u003d new Prefix(\"m/\");"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    public static final Prefix PREFIX_SCREENING_DATE_TIME \u003d new Prefix(\"h/\");"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"    public static final Prefix PREFIX_EMAIL_MESSAGE \u003d new Prefix(\"msg/\");"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"    public static final Prefix PREFIX_EMAIL_SUBJECT \u003d new Prefix(\"subj/\");"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"    public static final Prefix PREFIX_EMAIL_LOGIN \u003d new Prefix(\"lgn/\");"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"    public static final Prefix PREFIX_EMAIL_FUNCTION \u003d new Prefix(\"func/\");"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"    public static final Prefix PREFIX_EMAIL_RECIPIENT \u003d new Prefix(\"recp/\");"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"    public static final Prefix PREFIX_EMAIL_ATTACHMENT \u003d new Prefix(\"attc/\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pw/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":3,"chanyikwai":6,"tinyjy94":1,"-":15,"qwlai":3}},{"path":"src/main/java/seedu/address/logic/parser/MoviePlannerParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.AddMovieCommand;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.AddScreeningCommand;"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.logic.commands.AddTheaterCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.logic.commands.DecryptCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.DeleteMovieCommand;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.DeleteScreeningCommand;"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.logic.commands.DeleteTheaterCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.logic.commands.EncryptCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.FindMovieCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.JumpCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"public class MoviePlannerParser {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":"        case AddMovieCommand.COMMAND_ALIAS:"},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"        case AddMovieCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"            return new AddMovieCommandParser().parse(arguments);"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        case AddScreeningCommand.COMMAND_ALIAS:"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        case AddScreeningCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"            return new AddScreeningCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":75,"author":{"gitID":"tinyjy94"},"content":"        case AddTheaterCommand.COMMAND_ALIAS:"},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":"        case AddTheaterCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitID":"tinyjy94"},"content":"            return new AddTheaterCommandParser().parse(arguments);"},{"lineNumber":78,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        case EditCommand.COMMAND_ALIAS:"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"chanyikwai"},"content":"        case EmailCommand.COMMAND_ALIAS:"},{"lineNumber":84,"author":{"gitID":"chanyikwai"},"content":"        case EmailCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"chanyikwai"},"content":"            return new EmailCommandParser().parse(arguments);"},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"        case SelectCommand.COMMAND_ALIAS:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        case DeleteCommand.COMMAND_ALIAS:"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"slothhy"},"content":"        case DeleteMovieCommand.COMMAND_ALIAS:"},{"lineNumber":96,"author":{"gitID":"slothhy"},"content":"        case DeleteMovieCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"slothhy"},"content":"            return new DeleteMovieCommandParser().parse(arguments);"},{"lineNumber":98,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"        case DeleteScreeningCommand.COMMAND_ALIAS:"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"        case DeleteScreeningCommand.COMMAND_WORD:"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"            return new DeleteScreeningCommandParser().parse(arguments);"},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":103,"author":{"gitID":"tinyjy94"},"content":"        case DeleteTheaterCommand.COMMAND_ALIAS:"},{"lineNumber":104,"author":{"gitID":"tinyjy94"},"content":"        case DeleteTheaterCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"tinyjy94"},"content":"            return new DeleteTheaterCommandParser().parse(arguments);"},{"lineNumber":106,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"        case ClearCommand.COMMAND_ALIAS:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"        case FindCommand.COMMAND_ALIAS:"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"        case JumpCommand.COMMAND_ALIAS:"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"        case JumpCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"            return new JumpCommandParser().parse(arguments);"},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":119,"author":{"gitID":"slothhy"},"content":"        case FindMovieCommand.COMMAND_ALIAS:"},{"lineNumber":120,"author":{"gitID":"slothhy"},"content":"        case FindMovieCommand.COMMAND_WORD:"},{"lineNumber":121,"author":{"gitID":"slothhy"},"content":"            return new FindMovieCommandParser().parse(arguments);"},{"lineNumber":122,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":123,"author":{"gitID":"tinyjy94"},"content":"        case EncryptCommand.COMMAND_ALIAS:"},{"lineNumber":124,"author":{"gitID":"tinyjy94"},"content":"        case EncryptCommand.COMMAND_WORD:"},{"lineNumber":125,"author":{"gitID":"tinyjy94"},"content":"            return new EncryptCommandParser().parse(arguments);"},{"lineNumber":126,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":127,"author":{"gitID":"tinyjy94"},"content":"        case DecryptCommand.COMMAND_ALIAS:"},{"lineNumber":128,"author":{"gitID":"tinyjy94"},"content":"        case DecryptCommand.COMMAND_WORD:"},{"lineNumber":129,"author":{"gitID":"tinyjy94"},"content":"            return new DecryptCommandParser().parse(arguments);"},{"lineNumber":130,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":131,"author":{"gitID":"qwlai"},"content":"        case ListCommand.COMMAND_ALIAS:"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"        case HistoryCommand.COMMAND_ALIAS:"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"qwlai"},"content":"        case HelpCommand.COMMAND_ALIAS:"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"qwlai"},"content":"        case UndoCommand.COMMAND_ALIAS:"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"qwlai"},"content":"        case RedoCommand.COMMAND_ALIAS:"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":16,"chanyikwai":5,"tinyjy94":20,"-":91,"qwlai":27}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Duration;"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.MovieName;"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Rating;"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDate;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":37,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":38,"author":{"gitID":"-"},"content":" */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"    private static final int MINUTES_USED_IN_ROUNDING_OFF \u003d 5;"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    private static final String DATE_TIME_FORMAT \u003d \"dd/MM/uuuu HH:mm\";"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"    private static final int START_YEAR_LIMIT \u003d 2000;"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"    private static final int END_YEAR_LIMIT \u003d 2030;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":183,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":184,"author":{"gitID":"qwlai"},"content":"     * Parses a {@code String movieName} into a {@code MovieName}."},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":187,"author":{"gitID":"qwlai"},"content":"     * @throws IllegalValueException if the given {@code movieName} is invalid."},{"lineNumber":188,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"qwlai"},"content":"    public static MovieName parseMovieName(String movieName) throws IllegalValueException {"},{"lineNumber":190,"author":{"gitID":"qwlai"},"content":"        requireNonNull(movieName);"},{"lineNumber":191,"author":{"gitID":"qwlai"},"content":"        String trimmedMovieName \u003d movieName.trim();"},{"lineNumber":192,"author":{"gitID":"slothhy"},"content":"        if (!MovieName.isValidName(trimmedMovieName)) {"},{"lineNumber":193,"author":{"gitID":"slothhy"},"content":"            throw new IllegalValueException(MovieName.MESSAGE_MOVIENAME_CONSTRAINTS);"},{"lineNumber":194,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"slothhy"},"content":"        return new MovieName(trimmedMovieName);"},{"lineNumber":196,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":198,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"qwlai"},"content":"     * Parses a {@code Optional\u003cString\u003e movieName} into an {@code Optional\u003cMovieName\u003e} if {@code movieName} is present."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"qwlai"},"content":"    public static Optional\u003cMovieName\u003e parseMovieName(Optional\u003cString\u003e movieName) throws IllegalValueException {"},{"lineNumber":203,"author":{"gitID":"qwlai"},"content":"        requireNonNull(movieName);"},{"lineNumber":204,"author":{"gitID":"qwlai"},"content":"        return movieName.isPresent() ? Optional.of(parseMovieName(movieName.get())) : Optional.empty();"},{"lineNumber":205,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":207,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"slothhy"},"content":"     * Parses a {@code String duration} into a {@code Duration}."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":211,"author":{"gitID":"slothhy"},"content":"     * @throws IllegalValueException if the given {@code duration} is invalid."},{"lineNumber":212,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"slothhy"},"content":"    public static Duration parseDuration(String duration) throws IllegalValueException {"},{"lineNumber":214,"author":{"gitID":"slothhy"},"content":"        requireNonNull(duration);"},{"lineNumber":215,"author":{"gitID":"slothhy"},"content":"        String trimmedDuration \u003d duration.trim();"},{"lineNumber":216,"author":{"gitID":"slothhy"},"content":"        if (!Duration.isValidDuration(trimmedDuration)) {"},{"lineNumber":217,"author":{"gitID":"slothhy"},"content":"            throw new IllegalValueException(Duration.MESSAGE_DURATION_CONSTRAINTS);"},{"lineNumber":218,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"slothhy"},"content":"        return new Duration(trimmedDuration);"},{"lineNumber":220,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":222,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":223,"author":{"gitID":"slothhy"},"content":"     * Parses a {@code Optional\u003cString\u003e duration} into an {@code Optional\u003cDuration\u003e} if {@code duration} is present."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"slothhy"},"content":"    public static Optional\u003cDuration\u003e parseDuration(Optional\u003cString\u003e duration) throws IllegalValueException {"},{"lineNumber":227,"author":{"gitID":"slothhy"},"content":"        requireNonNull(duration);"},{"lineNumber":228,"author":{"gitID":"slothhy"},"content":"        return duration.isPresent() ? Optional.of(parseDuration(duration.get())) : Optional.empty();"},{"lineNumber":229,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":231,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"slothhy"},"content":"     * Parses a {@code String rating} into a {@code Rating}."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":234,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":235,"author":{"gitID":"slothhy"},"content":"     * @throws IllegalValueException if the given {@code rating} is invalid."},{"lineNumber":236,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"slothhy"},"content":"    public static Rating parseRating(String rating) throws IllegalValueException {"},{"lineNumber":238,"author":{"gitID":"slothhy"},"content":"        requireNonNull(rating);"},{"lineNumber":239,"author":{"gitID":"slothhy"},"content":"        String trimmedRating \u003d rating.trim();"},{"lineNumber":240,"author":{"gitID":"slothhy"},"content":"        if (!Rating.isValidRating(trimmedRating)) {"},{"lineNumber":241,"author":{"gitID":"slothhy"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":242,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"slothhy"},"content":"        return new Rating(trimmedRating);"},{"lineNumber":244,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":246,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"slothhy"},"content":"     * Parses a {@code Optional\u003cString\u003e rating} into an {@code Optional\u003cRating\u003e} if {@code rating} is present."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"slothhy"},"content":"    public static Optional\u003cRating\u003e parseRating(Optional\u003cString\u003e rating) throws IllegalValueException {"},{"lineNumber":251,"author":{"gitID":"slothhy"},"content":"        requireNonNull(rating);"},{"lineNumber":252,"author":{"gitID":"slothhy"},"content":"        return rating.isPresent() ? Optional.of(parseRating(rating.get())) : Optional.empty();"},{"lineNumber":253,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":255,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"slothhy"},"content":"     * Parses a {@code String startDate} into a {@code StartDate}."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":258,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":259,"author":{"gitID":"slothhy"},"content":"     * @throws IllegalValueException if the given {@code startDate} is invalid."},{"lineNumber":260,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"slothhy"},"content":"    public static StartDate parseStartDate(String startDate) throws IllegalValueException {"},{"lineNumber":262,"author":{"gitID":"slothhy"},"content":"        requireNonNull(startDate);"},{"lineNumber":263,"author":{"gitID":"slothhy"},"content":"        String trimmedStartDate \u003d startDate.trim();"},{"lineNumber":264,"author":{"gitID":"slothhy"},"content":"        if (!StartDate.isValidStartDate(trimmedStartDate)) {"},{"lineNumber":265,"author":{"gitID":"slothhy"},"content":"            throw new IllegalValueException(StartDate.MESSAGE_STARTDATE_CONSTRAINTS);"},{"lineNumber":266,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":267,"author":{"gitID":"slothhy"},"content":"        return new StartDate(trimmedStartDate);"},{"lineNumber":268,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":270,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"slothhy"},"content":"     * Parses a {@code Optional\u003cString\u003e startDate} into an {@code Optional\u003cStartDate\u003e} if {@code startDate} is present."},{"lineNumber":272,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":273,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"slothhy"},"content":"    public static Optional\u003cStartDate\u003e parseStartDate(Optional\u003cString\u003e startDate) throws IllegalValueException {"},{"lineNumber":275,"author":{"gitID":"slothhy"},"content":"        requireNonNull(startDate);"},{"lineNumber":276,"author":{"gitID":"slothhy"},"content":"        return startDate.isPresent() ? Optional.of(parseStartDate(startDate.get())) : Optional.empty();"},{"lineNumber":277,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"tinyjy94"},"content":"     * Parses a {@code Optional\u003cString\u003e theaters} into an {@code Optional\u003cArrayList\u003cTheater\u003e\u003e}"},{"lineNumber":280,"author":{"gitID":"tinyjy94"},"content":"     * if {@code theaters} is present."},{"lineNumber":281,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":282,"author":{"gitID":"tinyjy94"},"content":"    public static Optional\u003cArrayList\u003cTheater\u003e\u003e parseTheaters(Optional\u003cString\u003e theaters) throws IllegalValueException {"},{"lineNumber":283,"author":{"gitID":"tinyjy94"},"content":"        requireNonNull(theaters);"},{"lineNumber":284,"author":{"gitID":"tinyjy94"},"content":"        return theaters.isPresent() ? Optional.of(parseTheaters(theaters.get())) : Optional.empty();"},{"lineNumber":285,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":286,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":287,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"tinyjy94"},"content":"     * Parses {@code String theaters} into a {@code ArrayList\u003cTheater\u003e}."},{"lineNumber":289,"author":{"gitID":"tinyjy94"},"content":"     *"},{"lineNumber":290,"author":{"gitID":"tinyjy94"},"content":"     * @throws IllegalValueException if the given {@code theaters} is invalid."},{"lineNumber":291,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"tinyjy94"},"content":"    public static ArrayList\u003cTheater\u003e parseTheaters(String theaters) throws IllegalValueException {"},{"lineNumber":293,"author":{"gitID":"tinyjy94"},"content":"        requireNonNull(theaters);"},{"lineNumber":294,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e theaterList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":295,"author":{"gitID":"tinyjy94"},"content":"        if (!Theater.isValidTheater(theaters)) {"},{"lineNumber":296,"author":{"gitID":"tinyjy94"},"content":"            throw new IllegalValueException(Theater.MESSAGE_THEATER_CONSTRAINTS);"},{"lineNumber":297,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":298,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":299,"author":{"gitID":"tinyjy94"},"content":"        int numOfTheaters \u003d Integer.parseInt(theaters);"},{"lineNumber":300,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":301,"author":{"gitID":"tinyjy94"},"content":"        if (numOfTheaters \u003e 20) {"},{"lineNumber":302,"author":{"gitID":"tinyjy94"},"content":"            throw new IllegalValueException(Theater.MESSAGE_THEATERSIZE_CONSTRAINTS);"},{"lineNumber":303,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":304,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":305,"author":{"gitID":"tinyjy94"},"content":"        for (int i \u003d 1; i \u003c\u003d numOfTheaters; i++) {"},{"lineNumber":306,"author":{"gitID":"tinyjy94"},"content":"            theaterList.add(new Theater(i));"},{"lineNumber":307,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":308,"author":{"gitID":"tinyjy94"},"content":"        return theaterList;"},{"lineNumber":309,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":311,"author":{"gitID":"qwlai"},"content":"    //@@author qwlai"},{"lineNumber":312,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":313,"author":{"gitID":"qwlai"},"content":"     * Parses {@code String theater} into a {@code int theaterNumber}."},{"lineNumber":314,"author":{"gitID":"qwlai"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":315,"author":{"gitID":"qwlai"},"content":"     * @throws IllegalValueException if the given {@code String theater} is invalid."},{"lineNumber":316,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":317,"author":{"gitID":"qwlai"},"content":"    public static int parseTheaterNumber(String theater) throws IllegalValueException {"},{"lineNumber":318,"author":{"gitID":"qwlai"},"content":"        requireNonNull(theater);"},{"lineNumber":319,"author":{"gitID":"qwlai"},"content":"        String trimmedTheaterNumber \u003d theater.trim();"},{"lineNumber":320,"author":{"gitID":"qwlai"},"content":"        try {"},{"lineNumber":321,"author":{"gitID":"qwlai"},"content":"            int theaterNumber \u003d Integer.parseInt(trimmedTheaterNumber);"},{"lineNumber":322,"author":{"gitID":"qwlai"},"content":"            if (theaterNumber \u003c\u003d 0) {"},{"lineNumber":323,"author":{"gitID":"qwlai"},"content":"                throw new IllegalValueException(Theater.MESSAGE_THEATER_CONSTRAINTS);"},{"lineNumber":324,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":325,"author":{"gitID":"qwlai"},"content":"            return theaterNumber;"},{"lineNumber":326,"author":{"gitID":"qwlai"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":327,"author":{"gitID":"qwlai"},"content":"            throw new IllegalValueException(Theater.MESSAGE_THEATER_CONSTRAINTS);"},{"lineNumber":328,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":329,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":331,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":332,"author":{"gitID":"qwlai"},"content":"     * Parses {@code String dateTime} into a {@code LocalDateTime screeningDateTime}."},{"lineNumber":333,"author":{"gitID":"qwlai"},"content":"     * @throws DateTimeParseException if the given {@code String dateTime} is invalid."},{"lineNumber":334,"author":{"gitID":"qwlai"},"content":"     * @throws IllegalValueException if the given Time is not divisible by 5."},{"lineNumber":335,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":336,"author":{"gitID":"qwlai"},"content":"    public static LocalDateTime parseScreeningDateTime(String dateTime)"},{"lineNumber":337,"author":{"gitID":"qwlai"},"content":"            throws IllegalValueException, DateTimeParseException {"},{"lineNumber":338,"author":{"gitID":"qwlai"},"content":"        requireNonNull(dateTime);"},{"lineNumber":339,"author":{"gitID":"qwlai"},"content":"        String trimmedDateTime \u003d dateTime.trim();"},{"lineNumber":340,"author":{"gitID":"qwlai"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT).withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":341,"author":{"gitID":"qwlai"},"content":"        LocalDateTime screeningDateTime \u003d LocalDateTime.parse(trimmedDateTime, dtf);"},{"lineNumber":342,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":343,"author":{"gitID":"qwlai"},"content":"        if (screeningDateTime.getYear() \u003e END_YEAR_LIMIT || screeningDateTime.getYear() \u003c START_YEAR_LIMIT) {"},{"lineNumber":344,"author":{"gitID":"qwlai"},"content":"            throw new IllegalValueException(Messages.MESSAGE_INVALID_YEAR);"},{"lineNumber":345,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":346,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":347,"author":{"gitID":"qwlai"},"content":"        if (screeningDateTime.getMinute() % MINUTES_USED_IN_ROUNDING_OFF !\u003d 0) {"},{"lineNumber":348,"author":{"gitID":"qwlai"},"content":"            throw new IllegalValueException(Messages.MESSAGE_INVALID_SCREEN_DATE_TIME);"},{"lineNumber":349,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":350,"author":{"gitID":"qwlai"},"content":"        return screeningDateTime;"},{"lineNumber":351,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":352,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":353,"author":{"gitID":"qwlai"},"content":"    //@@author"},{"lineNumber":354,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":355,"author":{"gitID":"chanyikwai"},"content":"     * Parses a {@code Optional\u003cString\u003e emailMessage} into an {@code String}"},{"lineNumber":356,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":357,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":358,"author":{"gitID":"chanyikwai"},"content":"    public static String parseEmailMessage(Optional\u003cString\u003e emailMessage) throws IllegalValueException {"},{"lineNumber":359,"author":{"gitID":"chanyikwai"},"content":"        requireNonNull(emailMessage);"},{"lineNumber":360,"author":{"gitID":"chanyikwai"},"content":"        return emailMessage.isPresent() ? emailMessage.get() : \"\";"},{"lineNumber":361,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":362,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":363,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":364,"author":{"gitID":"chanyikwai"},"content":"     * Parses a {@code Optional\u003cString\u003e emailSubject} into an {@code String}"},{"lineNumber":365,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":366,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":367,"author":{"gitID":"chanyikwai"},"content":"    public static String parseEmailSubject(Optional\u003cString\u003e emailSubject) throws IllegalValueException {"},{"lineNumber":368,"author":{"gitID":"chanyikwai"},"content":"        requireNonNull(emailSubject);"},{"lineNumber":369,"author":{"gitID":"chanyikwai"},"content":"        return emailSubject.isPresent() ? emailSubject.get() : \"\";"},{"lineNumber":370,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":371,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":372,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":373,"author":{"gitID":"chanyikwai"},"content":"     * Parses a {@code Optional\u003cString\u003e emailLoginDetails} into an {@code String}"},{"lineNumber":374,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":375,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":376,"author":{"gitID":"chanyikwai"},"content":"    public static String parseEmailLoginDetails(Optional\u003cString\u003e emailLoginDetails) throws IllegalValueException {"},{"lineNumber":377,"author":{"gitID":"chanyikwai"},"content":"        requireNonNull(emailLoginDetails);"},{"lineNumber":378,"author":{"gitID":"chanyikwai"},"content":"        return emailLoginDetails.isPresent() ? emailLoginDetails.get() : \"\";"},{"lineNumber":379,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":380,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":381,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":382,"author":{"gitID":"chanyikwai"},"content":"     * Parses a {@code Optional\u003cString\u003e emailTask} into an {@code String}"},{"lineNumber":383,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":384,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":385,"author":{"gitID":"chanyikwai"},"content":"    public static String parseEmailTask(Optional\u003cString\u003e emailTask) throws IllegalValueException {"},{"lineNumber":386,"author":{"gitID":"chanyikwai"},"content":"        requireNonNull(emailTask);"},{"lineNumber":387,"author":{"gitID":"chanyikwai"},"content":"        return emailTask.isPresent() ? emailTask.get() : \"\";"},{"lineNumber":388,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":389,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":76,"chanyikwai":27,"tinyjy94":34,"-":187,"qwlai":65}},{"path":"src/main/java/seedu/address/logic/parser/DeleteScreeningCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":2,"author":{"gitID":"qwlai"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SCREEN_DATE_TIME;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CINEMA_INDEX;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMOFTHEATERS;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCREENING_DATE_TIME;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.DeleteScreeningCommand;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":" * Parses input arguments and creates a new DeleteScreeningCommand object"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"public class DeleteScreeningCommandParser implements Parser\u003cDeleteScreeningCommand\u003e {"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteScreeningCommand"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"     * and returns an DeleteScreeningCommand object for execution."},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    public DeleteScreeningCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_CINEMA_INDEX,"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"                        PREFIX_NUMOFTHEATERS, PREFIX_SCREENING_DATE_TIME);"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_CINEMA_INDEX, PREFIX_NUMOFTHEATERS,"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"                PREFIX_SCREENING_DATE_TIME) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"                    DeleteScreeningCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"            Index cinemaIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CINEMA_INDEX).get());"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"            int theaterNumber \u003d ParserUtil.parseTheaterNumber(argMultimap.getValue(PREFIX_NUMOFTHEATERS).get());"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"            LocalDateTime screeningDateTime \u003d ParserUtil.parseScreeningDateTime("},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"                    argMultimap.getValue(PREFIX_SCREENING_DATE_TIME).get());"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"            return new DeleteScreeningCommand(cinemaIndex, theaterNumber, screeningDateTime);"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"            throw new ParseException(MESSAGE_INVALID_SCREEN_DATE_TIME, dtpe);"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"qwlai":62}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.EditCommand.EditCinemaDescriptor;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"                                           PREFIX_ADDRESS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        EditCinemaDescriptor editCinemaDescriptor \u003d new EditCinemaDescriptor();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editCinemaDescriptor::setName);"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editCinemaDescriptor::setPhone);"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editCinemaDescriptor::setEmail);"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editCinemaDescriptor::setAddress);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"        if (!editCinemaDescriptor.isAnyFieldEdited()) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"        return new EditCommand(index, editCinemaDescriptor);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tinyjy94":2,"-":46,"qwlai":8}},{"path":"src/main/java/seedu/address/logic/parser/JumpCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_YEAR;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.commands.JumpCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"public class JumpCommandParser implements Parser\u003cJumpCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    public static final String DATE_FORMAT \u003d \"dd/MM/uuuu\";"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    private static final int START_YEAR_LIMIT \u003d 2000;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    private static final int END_YEAR_LIMIT \u003d 2030;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"     * Parses the given {@code String} of arguments in the context of the JumpCommand"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"     * and returns an JumpCommand object for execution."},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    public JumpCommand parse(String args) throws ParseException {"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"        requireNonNull(args);"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(DATE_FORMAT).withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"        String trimmedDate \u003d args.trim();"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"            LocalDate dateProvided \u003d LocalDate.parse(trimmedDate, dtf);"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"            if (dateProvided.getYear() \u003e END_YEAR_LIMIT || dateProvided.getYear() \u003c START_YEAR_LIMIT) {"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_YEAR);"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"            return new JumpCommand(dateProvided);"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"            throw new ParseException ("},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, JumpCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"-":6,"qwlai":42}},{"path":"src/main/java/seedu/address/logic/parser/FindMovieCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"import seedu.address.logic.commands.FindMovieCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.NameAndStartDateAndTagContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.NameAndStartDateContainsKeywordsPredicate;"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.NameAndTagContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.NameContainsKeywordsPredicate;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDateAndTagContainsKeywordsPredicate;"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDateContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.TagContainsKeywordsPredicate;"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":" * Parses input arguments and creates a new FindMovieCommand object"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"public class FindMovieCommandParser implements Parser\u003cFindMovieCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"     * Parses the given {@code String} of arguments in the context of the FindMovieCommand"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"     * and returns an FindMovieCommand object for execution."},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"    public FindMovieCommand parse(String args) throws ParseException {"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_STARTDATE, PREFIX_TAG);"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"        if ((!arePrefixesPresent(argMultimap, PREFIX_NAME) \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_STARTDATE)"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_TAG))"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindMovieCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"        String nameValues;"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"        String startDateValues;"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"        String tagValues;"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"        String[] nameKeywords;"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"        String[] startDateKeywords;"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"        String[] tagKeywords;"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"            throw new ParseException("},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindMovieCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"        } else {"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"            if (!argMultimap.getAllValues(PREFIX_NAME).isEmpty()"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"                    \u0026\u0026 !argMultimap.getAllValues(PREFIX_STARTDATE).isEmpty()"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"                    \u0026\u0026 !argMultimap.getAllValues(PREFIX_TAG).isEmpty()) {"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"                //name, startDate, tag present"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"                nameValues \u003d argMultimap.getValue(PREFIX_NAME).get();"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"                startDateValues \u003d argMultimap.getValue(PREFIX_STARTDATE).get();"},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"                tagValues \u003d argMultimap.getValue(PREFIX_TAG).get();"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"                nameKeywords \u003d nameValues.split(\"\\\\s+\");"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"                startDateKeywords \u003d startDateValues.split(\"\\\\s+\");"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"                tagKeywords \u003d tagValues.split(\"\\\\s+\");"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"                return new FindMovieCommand(new NameAndStartDateAndTagContainsKeywordsPredicate("},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"                        Arrays.asList(nameKeywords), Arrays.asList(startDateKeywords), Arrays.asList(tagKeywords)));"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"            } else if (!argMultimap.getAllValues(PREFIX_NAME).isEmpty()"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":"                    \u0026\u0026 !argMultimap.getAllValues(PREFIX_STARTDATE).isEmpty()) {"},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"                //name and startDate present"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"                nameValues \u003d argMultimap.getValue(PREFIX_NAME).get();"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"                startDateValues \u003d argMultimap.getValue(PREFIX_STARTDATE).get();"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":"                nameKeywords \u003d nameValues.split(\"\\\\s+\");"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"                startDateKeywords \u003d startDateValues.split(\"\\\\s+\");"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"                return new FindMovieCommand(new NameAndStartDateContainsKeywordsPredicate("},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":"                        Arrays.asList(nameKeywords), Arrays.asList(startDateKeywords)));"},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"            } else if (!argMultimap.getAllValues(PREFIX_NAME).isEmpty()"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"                    \u0026\u0026 !argMultimap.getAllValues(PREFIX_TAG).isEmpty()) {"},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":"                //name and tag present"},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"                nameValues \u003d argMultimap.getValue(PREFIX_NAME).get();"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"                tagValues \u003d argMultimap.getValue(PREFIX_TAG).get();"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"                nameKeywords \u003d nameValues.split(\"\\\\s+\");"},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":"                tagKeywords \u003d tagValues.split(\"\\\\s+\");"},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"                return new FindMovieCommand(new NameAndTagContainsKeywordsPredicate("},{"lineNumber":83,"author":{"gitID":"slothhy"},"content":"                        Arrays.asList(nameKeywords), Arrays.asList(tagKeywords)));"},{"lineNumber":84,"author":{"gitID":"slothhy"},"content":"            } else if (!argMultimap.getAllValues(PREFIX_STARTDATE).isEmpty()"},{"lineNumber":85,"author":{"gitID":"slothhy"},"content":"                    \u0026\u0026 !argMultimap.getAllValues(PREFIX_TAG).isEmpty()) {"},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"                //startDate and tag present"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":"                startDateValues \u003d argMultimap.getValue(PREFIX_STARTDATE).get();"},{"lineNumber":88,"author":{"gitID":"slothhy"},"content":"                tagValues \u003d argMultimap.getValue(PREFIX_TAG).get();"},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":"                startDateKeywords \u003d startDateValues.split(\"\\\\s+\");"},{"lineNumber":90,"author":{"gitID":"slothhy"},"content":"                tagKeywords \u003d tagValues.split(\"\\\\s+\");"},{"lineNumber":91,"author":{"gitID":"slothhy"},"content":"                return new FindMovieCommand(new StartDateAndTagContainsKeywordsPredicate("},{"lineNumber":92,"author":{"gitID":"slothhy"},"content":"                        Arrays.asList(startDateKeywords), Arrays.asList(tagKeywords)));"},{"lineNumber":93,"author":{"gitID":"slothhy"},"content":"            } else if (!argMultimap.getAllValues(PREFIX_NAME).isEmpty()) {"},{"lineNumber":94,"author":{"gitID":"slothhy"},"content":"                //name present only"},{"lineNumber":95,"author":{"gitID":"slothhy"},"content":"                nameValues \u003d argMultimap.getValue(PREFIX_NAME).get();"},{"lineNumber":96,"author":{"gitID":"slothhy"},"content":"                nameKeywords \u003d nameValues.split(\"\\\\s+\");"},{"lineNumber":97,"author":{"gitID":"slothhy"},"content":"                return new FindMovieCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":98,"author":{"gitID":"slothhy"},"content":"            } else if (!argMultimap.getAllValues(PREFIX_STARTDATE).isEmpty()) {"},{"lineNumber":99,"author":{"gitID":"slothhy"},"content":"                //startDate present only"},{"lineNumber":100,"author":{"gitID":"slothhy"},"content":"                startDateValues \u003d argMultimap.getValue(PREFIX_STARTDATE).get();"},{"lineNumber":101,"author":{"gitID":"slothhy"},"content":"                startDateKeywords \u003d startDateValues.split(\"\\\\s+\");"},{"lineNumber":102,"author":{"gitID":"slothhy"},"content":"                return new FindMovieCommand(new StartDateContainsKeywordsPredicate(Arrays.asList(startDateKeywords)));"},{"lineNumber":103,"author":{"gitID":"slothhy"},"content":"            } else if (!argMultimap.getAllValues(PREFIX_TAG).isEmpty()) {"},{"lineNumber":104,"author":{"gitID":"slothhy"},"content":"                //tag present only"},{"lineNumber":105,"author":{"gitID":"slothhy"},"content":"                tagValues \u003d argMultimap.getValue(PREFIX_TAG).get();"},{"lineNumber":106,"author":{"gitID":"slothhy"},"content":"                tagKeywords \u003d tagValues.split(\"\\\\s+\");"},{"lineNumber":107,"author":{"gitID":"slothhy"},"content":"                return new FindMovieCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"},{"lineNumber":108,"author":{"gitID":"slothhy"},"content":"            } else {"},{"lineNumber":109,"author":{"gitID":"slothhy"},"content":"                throw new ParseException(\"Wrong format\");"},{"lineNumber":110,"author":{"gitID":"slothhy"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":114,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"slothhy"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":116,"author":{"gitID":"slothhy"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":117,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"slothhy"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":119,"author":{"gitID":"slothhy"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":120,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":122,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":118,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/DecryptCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_ENCRYPTED_FILE_NOT_FOUND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"import java.io.FileInputStream;"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":"import java.security.GeneralSecurityException;"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"import java.security.Key;"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":"import java.security.NoSuchAlgorithmException;"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"import javax.crypto.Cipher;"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.logic.commands.DecryptCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":" * Parses input arguments and creates a new DecryptCommand object"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":"public class DecryptCommandParser implements Parser\u003cDecryptCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"     * Parses the given {@code String} of arguments in the context of the DecryptCommand"},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"     * and returns an DecryptCommand object for execution."},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"    public DecryptCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PASSWORD);"},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"        String password \u003d args.trim();"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PASSWORD)) {"},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DecryptCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"        } else {"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"            try {"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":"                Key pw \u003d SecurityUtil.generateKey(password);"},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":"                UserPrefs pref \u003d new UserPrefs();"},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"                Cipher cipher \u003d Cipher.getInstance(\"AES/ECB/PKCS5Padding\");"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"                cipher.init(Cipher.DECRYPT_MODE, pw);"},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"                File inputFile \u003d new File(pref.getEncryptedMoviePlannerFilePath());"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":"                byte[] inputByteArray \u003d new byte[(int) inputFile.length()];"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":"                FileInputStream fis \u003d new FileInputStream(inputFile); //create file input stream"},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"                fis.read(inputByteArray);"},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":"                cipher.doFinal(inputByteArray);"},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"            } catch (NoSuchAlgorithmException e) {"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":"                e.printStackTrace();"},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"            } catch (GeneralSecurityException e) {"},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":"                throw new ParseException(String.format(DecryptCommand.MESSAGE_WRONGPASSWORD,"},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":"                        DecryptCommand.MESSAGE_USAGE));"},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":"            } catch (IOException e) {"},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":"                throw new ParseException(String.format(MESSAGE_ENCRYPTED_FILE_NOT_FOUND, DecryptCommand.MESSAGE_USAGE));"},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":63,"author":{"gitID":"tinyjy94"},"content":"        return new DecryptCommand(password);"},{"lineNumber":64,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":69,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"tinyjy94"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":71,"author":{"gitID":"tinyjy94"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":72,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":68,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":" * Deletes a cinema identified using it\u0027s last displayed index from the movie planner."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"d\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"            + \": Deletes the cinema identified by the index number used in the last cinema listing.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_DELETE_CINEMA_SUCCESS \u003d \"Deleted Cinema: %1$s\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    private Cinema cinemaToDelete;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        requireNonNull(cinemaToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"            model.deleteCinema(cinemaToDelete);"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"        } catch (CinemaNotFoundException cnfe) {"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"            throw new AssertionError(\"The target cinema cannot be missing\");"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_CINEMA_SUCCESS, cinemaToDelete));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"        List\u003cCinema\u003e lastShownList \u003d model.getFilteredCinemaList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"        cinemaToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(this.cinemaToDelete, ((DeleteCommand) other).cinemaToDelete));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":52,"qwlai":16}},{"path":"src/main/java/seedu/address/logic/parser/EmailCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_ATTACHMENT;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_FUNCTION;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_LOGIN;"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_MESSAGE;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_RECIPIENT;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL_SUBJECT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailFunction;"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":" * Parses input arguments and creates a new EmailCommand object"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"public class EmailCommandParser implements Parser\u003cEmailCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"     * Parses the given {@code String} of arguments in the context of the EmailCommand"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"     * and returns an EmailCommand object for execution."},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"    public EmailCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"        requireNonNull(args);"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EMAIL_MESSAGE, PREFIX_EMAIL_SUBJECT, PREFIX_EMAIL_LOGIN,"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"                        PREFIX_EMAIL_FUNCTION, PREFIX_EMAIL_RECIPIENT, PREFIX_EMAIL_ATTACHMENT);"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"        EmailFunction emailFunction \u003d new EmailFunction();"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"        String message;"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"        String subject;"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"        String recipient;"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"        String fileRelativePath;"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"        String[] loginDetails;"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"            message \u003d getArgumentMessage(argMultimap);"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"            subject \u003d getArgumentSubject(argMultimap);"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"            recipient \u003d getArgumentRecipient(argMultimap);"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"            fileRelativePath \u003d getArgumentFileRelativePath(argMultimap);"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"            loginDetails \u003d getArgumentLoginDetails(argMultimap);"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"            emailFunction \u003d getArgumentEmailFunction(argMultimap, emailFunction);"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"            if (message.isEmpty() \u0026\u0026 subject.isEmpty() \u0026\u0026 recipient.isEmpty() \u0026\u0026  ("},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"                    loginDetails.length \u003d\u003d 0) \u0026\u0026 !emailFunction.isValid()) {"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"            throw new ParseException(e.getMessage(), e);"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"        return new EmailCommand(message, subject, recipient, fileRelativePath, loginDetails, emailFunction);"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"     * Returns argument message values if available"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"     * @param argMultimap"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":"     * @return argument message values"},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":"     * @throws IllegalValueException if value is empty"},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":"    private String getArgumentMessage(ArgumentMultimap argMultimap) throws IllegalValueException {"},{"lineNumber":70,"author":{"gitID":"chanyikwai"},"content":"        String message \u003d \"\";"},{"lineNumber":71,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL_MESSAGE).isPresent()) {"},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":"            message \u003d ParserUtil.parseEmailMessage(argMultimap.getValue(PREFIX_EMAIL_MESSAGE)).trim();"},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":"            if (message.isEmpty()) {"},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"},{"lineNumber":76,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"        return message;"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":81,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"chanyikwai"},"content":"     * Returns argument subject values if available"},{"lineNumber":83,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"chanyikwai"},"content":"     * @param argMultimap"},{"lineNumber":85,"author":{"gitID":"chanyikwai"},"content":"     * @return argument subject values"},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":"     * @throws IllegalValueException if value is empty"},{"lineNumber":87,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"chanyikwai"},"content":"    private String getArgumentSubject(ArgumentMultimap argMultimap) throws IllegalValueException {"},{"lineNumber":89,"author":{"gitID":"chanyikwai"},"content":"        String subject \u003d \"\";"},{"lineNumber":90,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":91,"author":{"gitID":"chanyikwai"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL_SUBJECT).isPresent()) {"},{"lineNumber":92,"author":{"gitID":"chanyikwai"},"content":"            subject \u003d ParserUtil.parseEmailMessage(argMultimap.getValue(PREFIX_EMAIL_SUBJECT)).trim();"},{"lineNumber":93,"author":{"gitID":"chanyikwai"},"content":"            if (subject.isEmpty()) {"},{"lineNumber":94,"author":{"gitID":"chanyikwai"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"},{"lineNumber":95,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"chanyikwai"},"content":"        return subject;"},{"lineNumber":98,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":100,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"chanyikwai"},"content":"     * Returns argument fileRelativePath values if available"},{"lineNumber":102,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":103,"author":{"gitID":"chanyikwai"},"content":"     * @param argMultimap"},{"lineNumber":104,"author":{"gitID":"chanyikwai"},"content":"     * @return argument fileRelativePath values"},{"lineNumber":105,"author":{"gitID":"chanyikwai"},"content":"     * @throws IllegalValueException if value is empty"},{"lineNumber":106,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"chanyikwai"},"content":"    private String getArgumentFileRelativePath(ArgumentMultimap argMultimap) throws IllegalValueException {"},{"lineNumber":108,"author":{"gitID":"chanyikwai"},"content":"        String fileRelativePath \u003d \"\";"},{"lineNumber":109,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":110,"author":{"gitID":"chanyikwai"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL_ATTACHMENT).isPresent()) {"},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":"            fileRelativePath \u003d ParserUtil.parseEmailMessage(argMultimap.getValue(PREFIX_EMAIL_ATTACHMENT)).trim();"},{"lineNumber":112,"author":{"gitID":"chanyikwai"},"content":"            if (fileRelativePath.isEmpty()) {"},{"lineNumber":113,"author":{"gitID":"chanyikwai"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"},{"lineNumber":114,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":115,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"chanyikwai"},"content":"        return fileRelativePath;"},{"lineNumber":117,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":119,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"chanyikwai"},"content":"     * Returns argument login values if available"},{"lineNumber":121,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":122,"author":{"gitID":"chanyikwai"},"content":"     * @param argMultimap"},{"lineNumber":123,"author":{"gitID":"chanyikwai"},"content":"     * @return argument login values"},{"lineNumber":124,"author":{"gitID":"chanyikwai"},"content":"     * @throws IllegalValueException if value is empty"},{"lineNumber":125,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"chanyikwai"},"content":"    private String [] getArgumentLoginDetails(ArgumentMultimap argMultimap) throws IllegalValueException {"},{"lineNumber":127,"author":{"gitID":"chanyikwai"},"content":"        String login \u003d \"\";"},{"lineNumber":128,"author":{"gitID":"chanyikwai"},"content":"        String [] loginDetails \u003d new String[0];"},{"lineNumber":129,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":130,"author":{"gitID":"chanyikwai"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL_LOGIN).isPresent()) {"},{"lineNumber":131,"author":{"gitID":"chanyikwai"},"content":"            login \u003d ParserUtil.parseEmailLoginDetails(argMultimap.getValue(PREFIX_EMAIL_LOGIN)).trim();"},{"lineNumber":132,"author":{"gitID":"chanyikwai"},"content":"            loginDetails \u003d login.split(\":\");"},{"lineNumber":133,"author":{"gitID":"chanyikwai"},"content":"            if (loginDetails.length !\u003d 2) {"},{"lineNumber":134,"author":{"gitID":"chanyikwai"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"},{"lineNumber":135,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":136,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"chanyikwai"},"content":"        return loginDetails;"},{"lineNumber":138,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":140,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"chanyikwai"},"content":"     * Returns argument emailFunction values if available"},{"lineNumber":142,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":143,"author":{"gitID":"chanyikwai"},"content":"     * @param argMultimap"},{"lineNumber":144,"author":{"gitID":"chanyikwai"},"content":"     * @param emailFunction new EmailFunction object"},{"lineNumber":145,"author":{"gitID":"chanyikwai"},"content":"     * @return emailFunction with argument emailFunction values"},{"lineNumber":146,"author":{"gitID":"chanyikwai"},"content":"     * @throws IllegalValueException if emailFunction is not \"send\" or \"clear\""},{"lineNumber":147,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":148,"author":{"gitID":"chanyikwai"},"content":"    private EmailFunction getArgumentEmailFunction("},{"lineNumber":149,"author":{"gitID":"chanyikwai"},"content":"            ArgumentMultimap argMultimap, EmailFunction emailFunction) throws IllegalValueException {"},{"lineNumber":150,"author":{"gitID":"chanyikwai"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL_FUNCTION).isPresent()) {"},{"lineNumber":151,"author":{"gitID":"chanyikwai"},"content":"            emailFunction.setEmailFunction("},{"lineNumber":152,"author":{"gitID":"chanyikwai"},"content":"                    ParserUtil.parseEmailTask(argMultimap.getValue(PREFIX_EMAIL_FUNCTION)).trim());"},{"lineNumber":153,"author":{"gitID":"chanyikwai"},"content":"            if (!emailFunction.isValid()) {"},{"lineNumber":154,"author":{"gitID":"chanyikwai"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":156,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"chanyikwai"},"content":"        return emailFunction;"},{"lineNumber":158,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":160,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"chanyikwai"},"content":"     * Returns argument recipient values if available"},{"lineNumber":162,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":163,"author":{"gitID":"chanyikwai"},"content":"     * @param argMultimap"},{"lineNumber":164,"author":{"gitID":"chanyikwai"},"content":"     * @return argument recipient values"},{"lineNumber":165,"author":{"gitID":"chanyikwai"},"content":"     * @throws IllegalValueException if value is empty"},{"lineNumber":166,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"chanyikwai"},"content":"    private String getArgumentRecipient(ArgumentMultimap argMultimap) throws IllegalValueException {"},{"lineNumber":168,"author":{"gitID":"chanyikwai"},"content":"        String recipient \u003d \"\";"},{"lineNumber":169,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":170,"author":{"gitID":"chanyikwai"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL_RECIPIENT).isPresent()) {"},{"lineNumber":171,"author":{"gitID":"chanyikwai"},"content":"            recipient \u003d ParserUtil.parseEmailMessage(argMultimap.getValue(PREFIX_EMAIL_RECIPIENT)).trim();"},{"lineNumber":172,"author":{"gitID":"chanyikwai"},"content":"            if (recipient.isEmpty()) {"},{"lineNumber":173,"author":{"gitID":"chanyikwai"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"},{"lineNumber":174,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":175,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"chanyikwai"},"content":"        return recipient;"},{"lineNumber":177,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":171,"-":7}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CINEMAS;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MOVIES;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":" * Lists all cinemas in the movie planner to the user."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"l\";"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all cinemas and movies.\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"        model.updateFilteredCinemaList(PREDICATE_SHOW_ALL_CINEMAS);"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"        model.updateFilteredMovieList(PREDICATE_SHOW_ALL_MOVIES);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":15,"qwlai":7}},{"path":"src/main/java/seedu/address/logic/commands/DecryptCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"tinyjy94"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":3,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.events.storage.DecryptionRequestEvent;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":" * Decrypts data found in encryptedmovieplanner file."},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":"public class DecryptCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":"    public static final String COMMAND_WORD \u003d \"decrypt\";"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"    public static final String COMMAND_ALIAS \u003d \"dec\";"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"MoviePlanner Decrypted! \""},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"            + \"Please restart the application to see the changes.\";"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_WRONGPASSWORD \u003d \"Password is wrong!\";"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Decrypts MoviePlanner file to view contents.\\n \""},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"            + \"Parameters: \" + PREFIX_PASSWORD + \" PASSWORD\\n\""},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"            + PREFIX_PASSWORD + \"dummypass \";"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"    private String password;"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"    public DecryptCommand(String password) {"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"        this.password \u003d password;"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"        //user request to decrypt"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"        raise(new DecryptionRequestEvent(password));"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":34}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"r\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":36,"qwlai":1}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":" * Clears the movie planner."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"c\";"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Movie planner has been cleared!\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"        model.resetData(new MoviePlanner());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":18,"qwlai":5}},{"path":"src/main/java/seedu/address/logic/commands/EncryptCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"tinyjy94"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":3,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.events.storage.EncryptionRequestEvent;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":" * Encrypts data stored in movieplanner file."},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":"public class EncryptCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"    public static final String COMMAND_WORD \u003d \"encrypt\";"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":"    public static final String COMMAND_ALIAS \u003d \"enc\";"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"MoviePlanner Encrypted!\";"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Encrypts MoviePlanner file to prevent data leak. \""},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"            + \"Ensure that movieplanner.xml exists in data folder.\\n\""},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"            + \"Parameters: \" + PREFIX_PASSWORD + \" PASSWORD\\n\""},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"            + PREFIX_PASSWORD + \"dummypass \";"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"    private String password;"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"    public EncryptCommand(String password) {"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"        this.password \u003d password;"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"    public CommandResult execute() {"},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"        //user request to encrypt"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"        raise(new EncryptionRequestEvent(password));"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":34}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of cinemas."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"     * @return summary message for cinemas displayed"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    public static String getMessageForCinemaListShownSummary(int displaySize) {"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"        return String.format(Messages.MESSAGE_CINEMAS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of movies."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"     * @return summary message for movies displayed"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"    public static String getMessageForMovieListShownSummary(int displaySize) {"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"        return String.format(Messages.MESSAGE_MOVIES_LISTED_OVERVIEW, displaySize);"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public abstract CommandResult execute() throws CommandException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"     * Raises the event via {@link EventsCenter#post(BaseEvent)}"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"     * @param event"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"    protected void raise(BaseEvent event) {"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        EventsCenter.getInstance().post(event);"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":8,"-":41,"qwlai":14}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMOFTHEATERS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":" * Adds a cinema to the movie planner."},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"a\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a cinema to the movie planner. \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"            + PREFIX_NUMOFTHEATERS + \"THEATER\\n\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"            + PREFIX_NAME + \"Cathay \""},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"            + PREFIX_PHONE + \"61231205 \""},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"            + PREFIX_EMAIL + \"cathayd@cathay.com \""},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #01-25 \""},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"            + PREFIX_NUMOFTHEATERS + \"3\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New cinema added: %1$s\";"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_DUPLICATE_CINEMA \u003d \"This cinema already exists in the movie planner\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"    private final Cinema toAdd;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"     * Creates an AddCommand to add the specified {@code Cinema}"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"    public AddCommand(Cinema cinema) {"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"        requireNonNull(cinema);"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        toAdd \u003d cinema;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"            model.addCinema(toAdd);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"        } catch (DuplicateCinemaException e) {"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CINEMA);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":4,"tinyjy94":4,"-":44,"qwlai":15}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"h\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":23,"qwlai":1}},{"path":"src/main/java/seedu/address/logic/commands/EmailCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.AuthenticationFailedException;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.internet.AddressException;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.internet.InternetAddress;"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailFunction;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailMessageEmptyException;"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailRecipientsEmptyException;"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":" * Composes an email draft or sends the draft out using gmail account"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"public class EmailCommand extends Command {"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"    public static final String COMMAND_WORD \u003d \"email\";"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"    public static final String COMMAND_ALIAS \u003d \"eml\";"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Emails all contacts in the last displayed list\\n\""},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"            + \"email msg/MESSAGE subj/SUBJECT lgn/cineManager@gmail.com:password \""},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"            + \"recp/recipient@gmail.com func/\u003csend|clear\u003e [ attc/docs/example/file.txt ]\\n\""},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"            + \"Examples:\\n\""},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"            + \"email msg/message subj/subject lgn/test@gmail.com:password recp/contacts@gv.com \""},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"            + \"attc/docs/images/Architecture.png func/send\";"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Email have been %1$s\";"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"    public static final String MESSAGE_LOGIN_INVALID \u003d \"You must be logged in with a gmail account to send an email.\\n\""},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"            + \"Command: email lgn/\u003cusername@gmail.com\u003e:\u003cpassword\u003e\";"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"    public static final String MESSAGE_EMPTY_INVALID \u003d \"Your message and subject fields must not be empty when \""},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"            + \"sending an email.\\n\""},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"            + \"Command: email msg/\u003cmessages\u003e sub/\u003csubjects\u003e\";"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"    public static final String MESSAGE_RECIPIENT_INVALID \u003d \"You must have at least 1 recipient to send the email to.\";"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"    public static final String MESSAGE_AUTHENTICATION_FAIL \u003d \"MVP is unable to log in to your gmail account. Please \""},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"            + \"check the following:\\n\""},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"            + \"1) You have entered the correct email address and password.\\n\""},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"            + \"2) You have enabled \u0027Allow less secure app\u0027 in your gmail account settings.\";"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"    public static final String MESSAGE_FAIL_UNKNOWN \u003d \"An unexpected error have occurred. Please try again later.\";"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"    private final MessageDraft messageDraft;"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"    private final String[] emailLoginDetails;"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"    private final EmailFunction emailFunction;"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"    public EmailCommand("},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"            String message, String subject, String recipient, String fileRelativePath,"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"            String [] emailLoginDetails, EmailFunction emailFunction) {"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"        this.messageDraft \u003d new MessageDraft(message, subject, recipient, fileRelativePath);"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"        this.emailFunction \u003d emailFunction;"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"        this.emailLoginDetails \u003d emailLoginDetails;"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"     * Identifies the Email Command Execution Task purpose"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailLoginInvalidException if email login details is empty"},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailMessageEmptyException if email message is empty"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailRecipientsEmptyException if recipients list is empty"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"     * @throws AuthenticationFailedException if gmail account can\u0027t be logged in"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":"    private void identifyEmailTask() throws EmailLoginInvalidException, EmailMessageEmptyException,"},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":"            EmailRecipientsEmptyException, AuthenticationFailedException {"},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"        switch (emailFunction.getEmailFunction()) {"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":"        case EmailFunction.EMAIL_FUNCTION_SEND:"},{"lineNumber":70,"author":{"gitID":"chanyikwai"},"content":"            model.sendEmail(messageDraft);"},{"lineNumber":71,"author":{"gitID":"chanyikwai"},"content":"            break;"},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":"        case EmailFunction.EMAIL_FUNCTION_CLEAR:"},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":"            model.clearEmailDraft();"},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":"            break;"},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":"        default:"},{"lineNumber":76,"author":{"gitID":"chanyikwai"},"content":"            model.draftEmail(messageDraft);"},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"            break;"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":81,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"chanyikwai"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":83,"author":{"gitID":"chanyikwai"},"content":"        requireNonNull(model);"},{"lineNumber":84,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":85,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":"            model.loginEmailAccount(emailLoginDetails);"},{"lineNumber":87,"author":{"gitID":"chanyikwai"},"content":"            identifyEmailTask();"},{"lineNumber":88,"author":{"gitID":"chanyikwai"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, model.getEmailStatus()));"},{"lineNumber":89,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailLoginInvalidException e) {"},{"lineNumber":90,"author":{"gitID":"chanyikwai"},"content":"            throw new CommandException(MESSAGE_LOGIN_INVALID);"},{"lineNumber":91,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailMessageEmptyException e) {"},{"lineNumber":92,"author":{"gitID":"chanyikwai"},"content":"            throw new CommandException(MESSAGE_EMPTY_INVALID);"},{"lineNumber":93,"author":{"gitID":"chanyikwai"},"content":"        } catch (EmailRecipientsEmptyException e) {"},{"lineNumber":94,"author":{"gitID":"chanyikwai"},"content":"            throw new CommandException(MESSAGE_RECIPIENT_INVALID);"},{"lineNumber":95,"author":{"gitID":"chanyikwai"},"content":"        } catch (AuthenticationFailedException e) {"},{"lineNumber":96,"author":{"gitID":"chanyikwai"},"content":"            throw new CommandException(MESSAGE_AUTHENTICATION_FAIL);"},{"lineNumber":97,"author":{"gitID":"chanyikwai"},"content":"        } catch (RuntimeException e) {"},{"lineNumber":98,"author":{"gitID":"chanyikwai"},"content":"            throw new CommandException(MESSAGE_FAIL_UNKNOWN);"},{"lineNumber":99,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":102,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"chanyikwai"},"content":"     * Extracts Email from input recipient {@code recipient} into an InternetAddresss[] for sending email"},{"lineNumber":104,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"chanyikwai"},"content":"     * @param: recipient"},{"lineNumber":106,"author":{"gitID":"chanyikwai"},"content":"     * @return: list of internet email address"},{"lineNumber":107,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"chanyikwai"},"content":"    public InternetAddress[] extractEmailFromContacts(String recipient) throws AddressException {"},{"lineNumber":109,"author":{"gitID":"chanyikwai"},"content":"        InternetAddress[] recipientsEmail \u003d new InternetAddress[1];"},{"lineNumber":110,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":"            recipientsEmail[0] \u003d new InternetAddress(recipient);"},{"lineNumber":112,"author":{"gitID":"chanyikwai"},"content":"        } catch (AddressException e) {"},{"lineNumber":113,"author":{"gitID":"chanyikwai"},"content":"            throw new AddressException();"},{"lineNumber":114,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"chanyikwai"},"content":"        return recipientsEmail;"},{"lineNumber":116,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":118,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"chanyikwai"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitID":"chanyikwai"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":121,"author":{"gitID":"chanyikwai"},"content":"                || (other instanceof EmailCommand // instanceof handles nulls"},{"lineNumber":122,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 ((EmailCommand) other).messageDraft.equals(this.messageDraft)"},{"lineNumber":123,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 ((EmailCommand) other).loginDetailsEquals(this.emailLoginDetails)"},{"lineNumber":124,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 ((EmailCommand) other).emailFunction.equals(this.emailFunction));"},{"lineNumber":125,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":127,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"chanyikwai"},"content":"     * Returns true for correct login details."},{"lineNumber":129,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"chanyikwai"},"content":"    private boolean loginDetailsEquals(String [] other) {"},{"lineNumber":131,"author":{"gitID":"chanyikwai"},"content":"        if (this.emailLoginDetails.length \u003d\u003d other.length) {"},{"lineNumber":132,"author":{"gitID":"chanyikwai"},"content":"            for (int i \u003d 0; i \u003c this.emailLoginDetails.length; i++) {"},{"lineNumber":133,"author":{"gitID":"chanyikwai"},"content":"                if (this.emailLoginDetails[i] !\u003d other[i]) {"},{"lineNumber":134,"author":{"gitID":"chanyikwai"},"content":"                    return false;"},{"lineNumber":135,"author":{"gitID":"chanyikwai"},"content":"                }"},{"lineNumber":136,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":137,"author":{"gitID":"chanyikwai"},"content":"            return true;"},{"lineNumber":138,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"chanyikwai"},"content":"        return false;"},{"lineNumber":140,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":137,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CINEMAS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"    private ReadOnlyMoviePlanner previousMoviePlanner;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"     * Stores the current state of {@code model#moviePlanner}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    private void saveMoviePlannerSnapshot() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"        this.previousMoviePlanner \u003d new MoviePlanner(model.getMoviePlanner());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"     * Reverts the MoviePlanner to the state before this command"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"     * was executed and updates the filtered cinema list to"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"     * show all cinemas."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"        requireAllNonNull(model, previousMoviePlanner);"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"        model.resetData(previousMoviePlanner);"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        model.updateFilteredCinemaList(PREDICATE_SHOW_ALL_CINEMAS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"     * Executes the command and updates the filtered cinema"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"     * list to show all cinemas."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"        model.updateFilteredCinemaList(PREDICATE_SHOW_ALL_CINEMAS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        saveMoviePlannerSnapshot();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":48,"qwlai":17}},{"path":"src/main/java/seedu/address/logic/commands/AddTheaterCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMOFTHEATERS;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CINEMAS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":" * Adds theaters to existing cinema"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"public class AddTheaterCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"    public static final String COMMAND_WORD \u003d \"addtheater\";"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"    public static final String COMMAND_ALIAS \u003d \"at\";"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": add theaters to cinema \""},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"            + \"by the index number used in the last cinema listing. \""},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"            + \"Existing number of theaters will be added with input value.\\n\""},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"            + PREFIX_NUMOFTHEATERS + \"THEATERS\\n\""},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"            + PREFIX_NUMOFTHEATERS + \"3 \";"},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_RESIZE_CINEMA_SUCCESS \u003d \"Resized Cinema: %1$s\";"},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_DUPLICATE_CINEMA \u003d \"This cinema already exists in the movie planner.\";"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_INVALID_THEATERSIZE \u003d \"You can only have up to 20 theaters per cinema!\";"},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":"    private final Index index;"},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"    private final int newTheaters;"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":"    private Cinema cinemaToResize;"},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":"    private Cinema resizedCinema;"},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"     * @param index of the cinema in the filtered cinema list to resize"},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"     * @param newTheaters to resize the cinema with"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":"    public AddTheaterCommand(Index index, int newTheaters) {"},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"        requireNonNull(index);"},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":"        this.index \u003d index;"},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":"        this.newTheaters \u003d newTheaters;"},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":"            if (resizedCinema.getTheaters().size() \u003e 20) {"},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":"                throw new CommandException(MESSAGE_INVALID_THEATERSIZE);"},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":"            model.updateCinema(cinemaToResize, resizedCinema);"},{"lineNumber":62,"author":{"gitID":"tinyjy94"},"content":"        } catch (DuplicateCinemaException dce) {"},{"lineNumber":63,"author":{"gitID":"tinyjy94"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CINEMA);"},{"lineNumber":64,"author":{"gitID":"tinyjy94"},"content":"        } catch (CinemaNotFoundException cnfe) {"},{"lineNumber":65,"author":{"gitID":"tinyjy94"},"content":"            throw new AssertionError(\"The target cinema cannot be missing\");"},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":"        model.updateFilteredCinemaList(PREDICATE_SHOW_ALL_CINEMAS);"},{"lineNumber":69,"author":{"gitID":"tinyjy94"},"content":"        return new CommandResult(String.format(MESSAGE_RESIZE_CINEMA_SUCCESS, resizedCinema));"},{"lineNumber":70,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":72,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"tinyjy94"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":74,"author":{"gitID":"tinyjy94"},"content":"        List\u003cCinema\u003e lastShownList \u003d model.getFilteredCinemaList();"},{"lineNumber":75,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":77,"author":{"gitID":"tinyjy94"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":80,"author":{"gitID":"tinyjy94"},"content":"        cinemaToResize \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":"        resizedCinema \u003d createResizedCinema(cinemaToResize, newTheaters);"},{"lineNumber":82,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":84,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":"     * Creates and returns a {@code Cinema} with the details of existing cinema and user input"},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"    private Cinema createResizedCinema(Cinema cinemaToResize, int newTheaters) {"},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":"        assert cinemaToResize !\u003d null;"},{"lineNumber":89,"author":{"gitID":"tinyjy94"},"content":"        int oldTheaterSize \u003d cinemaToResize.getTheaters().size();"},{"lineNumber":90,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e updatedTheaterList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"tinyjy94"},"content":"        for (Theater theaters : cinemaToResize.getTheaters()) {"},{"lineNumber":92,"author":{"gitID":"tinyjy94"},"content":"            updatedTheaterList.add(theaters);"},{"lineNumber":93,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"tinyjy94"},"content":"        int newSize \u003d newTheaters + oldTheaterSize;"},{"lineNumber":95,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":96,"author":{"gitID":"tinyjy94"},"content":"        for (int i \u003d oldTheaterSize + 1; i \u003c\u003d newSize; i++) {"},{"lineNumber":97,"author":{"gitID":"tinyjy94"},"content":"            updatedTheaterList.add(new Theater(i));"},{"lineNumber":98,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":100,"author":{"gitID":"tinyjy94"},"content":"        return new Cinema(cinemaToResize.getName(), cinemaToResize.getPhone(), cinemaToResize.getEmail(),"},{"lineNumber":101,"author":{"gitID":"tinyjy94"},"content":"                cinemaToResize.getAddress(), updatedTheaterList);"},{"lineNumber":102,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":104,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"tinyjy94"},"content":"    public boolean equals(Object other) {"},{"lineNumber":106,"author":{"gitID":"tinyjy94"},"content":"        // short circuit if same object"},{"lineNumber":107,"author":{"gitID":"tinyjy94"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":108,"author":{"gitID":"tinyjy94"},"content":"            return true;"},{"lineNumber":109,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":111,"author":{"gitID":"tinyjy94"},"content":"        // instanceof handles nulls"},{"lineNumber":112,"author":{"gitID":"tinyjy94"},"content":"        if (!(other instanceof AddTheaterCommand)) {"},{"lineNumber":113,"author":{"gitID":"tinyjy94"},"content":"            return false;"},{"lineNumber":114,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":116,"author":{"gitID":"tinyjy94"},"content":"        // state check"},{"lineNumber":117,"author":{"gitID":"tinyjy94"},"content":"        AddTheaterCommand e \u003d (AddTheaterCommand) other;"},{"lineNumber":118,"author":{"gitID":"tinyjy94"},"content":"        return index.equals(e.index)"},{"lineNumber":119,"author":{"gitID":"tinyjy94"},"content":"                \u0026\u0026 Objects.equals(cinemaToResize, e.cinemaToResize);"},{"lineNumber":120,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":109,"-":8,"qwlai":4}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"hist\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":38,"qwlai":1}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CINEMAS;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":" * Edits the details of an existing cinema in the movie planner."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"e\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the cinema identified \""},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"            + \"by the index number used in the last cinema listing. \""},{"lineNumber":38,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":39,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS]\\n \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"            + PREFIX_EMAIL + \"johndoe@cathay.com \";"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_EDIT_CINEMA_SUCCESS \u003d \"Edited Cinema: %1$s\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_DUPLICATE_CINEMA \u003d \"This cinema already exists in the movie planner.\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    private final EditCinemaDescriptor editCinemaDescriptor;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    private Cinema cinemaToEdit;"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"    private Cinema editedCinema;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"     * @param index of the cinema in the filtered cinema list to edit"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"     * @param editCinemaDescriptor details to edit the cinema with"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    public EditCommand(Index index, EditCinemaDescriptor editCinemaDescriptor) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        requireNonNull(editCinemaDescriptor);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"        this.editCinemaDescriptor \u003d new EditCinemaDescriptor(editCinemaDescriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"            model.updateCinema(cinemaToEdit, editedCinema);"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"        } catch (DuplicateCinemaException dce) {"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CINEMA);"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        } catch (CinemaNotFoundException cnfe) {"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"            throw new AssertionError(\"The target cinema cannot be missing\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        model.updateFilteredCinemaList(PREDICATE_SHOW_ALL_CINEMAS);"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_CINEMA_SUCCESS, editedCinema));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"        List\u003cCinema\u003e lastShownList \u003d model.getFilteredCinemaList();"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        cinemaToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"        editedCinema \u003d createEditedCinema(cinemaToEdit, editCinemaDescriptor);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"     * Creates and returns a {@code Cinema} with the details of {@code cinemaToEdit}"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"     * edited with {@code editCinemaDescriptor}."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"    private static Cinema createEditedCinema(Cinema cinemaToEdit, EditCinemaDescriptor editCinemaDescriptor) {"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"        assert cinemaToEdit !\u003d null;"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"        Name updatedName \u003d editCinemaDescriptor.getName().orElse(cinemaToEdit.getName());"},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"        Phone updatedPhone \u003d editCinemaDescriptor.getPhone().orElse(cinemaToEdit.getPhone());"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"        Email updatedEmail \u003d editCinemaDescriptor.getEmail().orElse(cinemaToEdit.getEmail());"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"        Address updatedAddress \u003d editCinemaDescriptor.getAddress().orElse(cinemaToEdit.getAddress());"},{"lineNumber":106,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e theaterList \u003d cinemaToEdit.getTheaters();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"tinyjy94"},"content":"        return new Cinema(updatedName, updatedPhone, updatedEmail, updatedAddress, theaterList);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 editCinemaDescriptor.equals(e.editCinemaDescriptor)"},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(cinemaToEdit, e.cinemaToEdit);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"qwlai"},"content":"     * Stores the details to edit the cinema with. Each non-empty field value will replace the"},{"lineNumber":132,"author":{"gitID":"qwlai"},"content":"     * corresponding field value of the cinema."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":"    public static class EditCinemaDescriptor {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"qwlai"},"content":"        public EditCinemaDescriptor() {}"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":144,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":145,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":146,"author":{"gitID":"qwlai"},"content":"        public EditCinemaDescriptor(EditCinemaDescriptor toCopy) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":154,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":155,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":157,"author":{"gitID":"tinyjy94"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email,"},{"lineNumber":158,"author":{"gitID":"tinyjy94"},"content":"                                                     this.address);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":201,"author":{"gitID":"qwlai"},"content":"            if (!(other instanceof EditCinemaDescriptor)) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":206,"author":{"gitID":"qwlai"},"content":"            EditCinemaDescriptor e \u003d (EditCinemaDescriptor) other;"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":211,"author":{"gitID":"tinyjy94"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tinyjy94":9,"-":155,"qwlai":50}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":" * Selects a cinema identified using it\u0027s last displayed index from the movie planner."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"s\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"            + \": Selects the cinema identified by the index number used in the last cinema listing.\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_SELECT_CINEMA_SUCCESS \u003d \"Selected Cinema: %1$s\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        List\u003cCinema\u003e lastShownList \u003d model.getFilteredCinemaList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_CINEMA_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":45,"qwlai":8}},{"path":"src/main/java/seedu/address/logic/commands/AddScreeningCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CINEMA_INDEX;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MOVIE_INDEX;"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMOFTHEATERS;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCREENING_DATE_TIME;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import java.time.LocalTime;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.ui.ReloadBrowserPanelEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.screening.Screening;"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"//@author qwlai"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":" * Adds a movie screening to a cinema theater."},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"public class AddScreeningCommand extends UndoableCommand {"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_WORD \u003d \"addscreening\";"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"as\";"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a movie screening to a cinema theater. \""},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"            + \"Parameters: \""},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"            + PREFIX_MOVIE_INDEX + \"MOVIE_INDEX \""},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"            + PREFIX_CINEMA_INDEX + \"CINEMA_INDEX \""},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"            + PREFIX_NUMOFTHEATERS + \"THEATER_NUMBER \""},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"            + PREFIX_SCREENING_DATE_TIME + \"SCREEN_DATE_TIME \\n\""},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"            + PREFIX_MOVIE_INDEX + \"1 \""},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"            + PREFIX_CINEMA_INDEX + \"2 \""},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"            + PREFIX_NUMOFTHEATERS + \"3 \""},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"            + PREFIX_SCREENING_DATE_TIME + \"13/03/2018 13:35\";"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New screening added: %1$s\";"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"    // Constants for calculations"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"    private static final int PREPARATION_DELAY \u003d 15;"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    private static final int MINUTES_USED_IN_ROUNDING_OFF \u003d 5;"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"    private static final int MINUTES_ENSURE_POSITIVE \u003d 65;"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"    private final Index movieIndex;"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"    private final Index cinemaIndex;"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"    private final int theaterNumber;"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"    private final LocalDateTime toAddScreeningDateTime;"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"    private LocalDateTime toAddScreeningEndDateTime;"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    private Screening toAdd;"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"    private Cinema cinema;"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"    private Cinema updatedCinema;"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"    private Movie movie;"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"    private Theater theater;"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"     * Creates an AddScreeningCommand to add the specified {@code Screening}"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"    public AddScreeningCommand(Index movieIndex, Index cinemaIndex,"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"                               int theaterNumber, LocalDateTime toAddScreeningDateTime) {"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"        requireNonNull(movieIndex);"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"        requireNonNull(cinemaIndex);"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"        requireNonNull(theaterNumber);"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        requireNonNull(toAddScreeningDateTime);"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"        this.movieIndex \u003d movieIndex;"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        this.cinemaIndex \u003d cinemaIndex;"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        this.theaterNumber \u003d theaterNumber;"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"        this.toAddScreeningDateTime \u003d toAddScreeningDateTime;"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"     * Adds a screening to a cinema and updates the cinema"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"     * @return CommandResult on successful add screening"},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"            model.updateCinema(cinema, updatedCinema);"},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"            EventsCenter.getInstance().post(new ReloadBrowserPanelEvent(updatedCinema, toAddScreeningEndDateTime));"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"        } catch (DuplicateCinemaException dce) {"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(AddCommand.MESSAGE_DUPLICATE_CINEMA);"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        } catch (CinemaNotFoundException cnfe) {"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"            throw new AssertionError(\"The target cinema cannot be missing\");"},{"lineNumber":98,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"     * Checks that a screening entry is valid and adds it to the updated cinema"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"     * @throws CommandException if screening is invalid"},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"        if (isValidScreening()) {"},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"            String movieName \u003d movie.getName().toString();"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"            toAdd \u003d new Screening(movieName, theater, toAddScreeningDateTime, toAddScreeningEndDateTime);"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"            updatedCinema \u003d generateUpdatedCinema(toAdd);"},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"        } else {"},{"lineNumber":114,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_SCREENING);"},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":"     * Creates and returns a {@code Cinema} with the new screening"},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"    private Cinema generateUpdatedCinema(Screening newScreening) {"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"        ArrayList\u003cTheater\u003e updatedTheaterList \u003d generateUpdatedTheaterList(newScreening);"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"        return new Cinema(cinema.getName(), cinema.getPhone(), cinema.getEmail(),"},{"lineNumber":124,"author":{"gitID":"qwlai"},"content":"                cinema.getAddress(), updatedTheaterList);"},{"lineNumber":125,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"qwlai"},"content":"     * Generates and returns an updated list of theaters"},{"lineNumber":130,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"qwlai"},"content":"    public ArrayList\u003cTheater\u003e generateUpdatedTheaterList(Screening newScreening) {"},{"lineNumber":132,"author":{"gitID":"qwlai"},"content":"        ArrayList\u003cTheater\u003e updatedTheaterList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":"        for (Theater t : cinema.getTheaters()) {"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"            // adding screening to this theater"},{"lineNumber":136,"author":{"gitID":"qwlai"},"content":"            if (t.equals(theater)) {"},{"lineNumber":137,"author":{"gitID":"qwlai"},"content":"                Theater theaterToBeUpdated \u003d new Theater(t.getTheaterNumber());"},{"lineNumber":138,"author":{"gitID":"qwlai"},"content":"                ArrayList\u003cScreening\u003e updatedScreeningList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":139,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":140,"author":{"gitID":"qwlai"},"content":"                addScreeningsToExistingTheater(t, theaterToBeUpdated, updatedScreeningList, newScreening);"},{"lineNumber":141,"author":{"gitID":"qwlai"},"content":"                updatedTheaterList.add(theaterToBeUpdated);"},{"lineNumber":142,"author":{"gitID":"qwlai"},"content":"            } else {"},{"lineNumber":143,"author":{"gitID":"qwlai"},"content":"                updatedTheaterList.add(t);"},{"lineNumber":144,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":145,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"qwlai"},"content":"        return updatedTheaterList;"},{"lineNumber":147,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":149,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"qwlai"},"content":"     * Populates the list of screenings in a theater in the given list with new Screening"},{"lineNumber":151,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"qwlai"},"content":"    private void addScreeningsToExistingTheater(Theater theater, Theater updatedTheater,"},{"lineNumber":153,"author":{"gitID":"qwlai"},"content":"                                                ArrayList\u003cScreening\u003e screeningList, Screening newScreening) {"},{"lineNumber":154,"author":{"gitID":"qwlai"},"content":"        for (Screening s : theater.getScreeningList()) {"},{"lineNumber":155,"author":{"gitID":"qwlai"},"content":"            screeningList.add(s);"},{"lineNumber":156,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":158,"author":{"gitID":"qwlai"},"content":"        newScreening.setTheater(updatedTheater);"},{"lineNumber":159,"author":{"gitID":"qwlai"},"content":"        screeningList.add(newScreening);"},{"lineNumber":160,"author":{"gitID":"qwlai"},"content":"        updatedTheater.setScreeningList(screeningList);"},{"lineNumber":161,"author":{"gitID":"qwlai"},"content":"        updatedTheater.sortScreeningList();"},{"lineNumber":162,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":164,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"qwlai"},"content":"     * Checks that a screening is valid"},{"lineNumber":166,"author":{"gitID":"qwlai"},"content":"     * @return true if screening is valid"},{"lineNumber":167,"author":{"gitID":"qwlai"},"content":"     * @throws CommandException"},{"lineNumber":168,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"qwlai"},"content":"    private boolean isValidScreening() throws CommandException {"},{"lineNumber":170,"author":{"gitID":"qwlai"},"content":"        movie \u003d getValidMovie();"},{"lineNumber":171,"author":{"gitID":"qwlai"},"content":"        cinema \u003d getValidCinema();"},{"lineNumber":172,"author":{"gitID":"qwlai"},"content":"        theater \u003d getValidTheater(cinema);"},{"lineNumber":173,"author":{"gitID":"qwlai"},"content":"        ArrayList\u003cScreening\u003e screeningList \u003d theater.getScreeningList();"},{"lineNumber":174,"author":{"gitID":"qwlai"},"content":"        toAddScreeningEndDateTime \u003d getEndTime();"},{"lineNumber":175,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":176,"author":{"gitID":"qwlai"},"content":"        return isSlotAvailable(screeningList) \u0026\u0026 canAddMovie(movie);"},{"lineNumber":177,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":179,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"qwlai"},"content":"     * Gets a valid movie based on the movie index"},{"lineNumber":181,"author":{"gitID":"qwlai"},"content":"     * @return a valid movie based on the movie index"},{"lineNumber":182,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"qwlai"},"content":"    private Movie getValidMovie() throws CommandException {"},{"lineNumber":184,"author":{"gitID":"qwlai"},"content":"        List\u003cMovie\u003e lastShownMovieList \u003d model.getFilteredMovieList();"},{"lineNumber":185,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":186,"author":{"gitID":"qwlai"},"content":"        if (movieIndex.getZeroBased() \u003e\u003d lastShownMovieList.size()) {"},{"lineNumber":187,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MOVIE_DISPLAYED_INDEX);"},{"lineNumber":188,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":190,"author":{"gitID":"qwlai"},"content":"        Movie movie \u003d lastShownMovieList.get(movieIndex.getZeroBased());"},{"lineNumber":191,"author":{"gitID":"qwlai"},"content":"        return movie;"},{"lineNumber":192,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":194,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"qwlai"},"content":"     * Gets a valid cinema based on the cinema index"},{"lineNumber":196,"author":{"gitID":"qwlai"},"content":"     * @return a valid cinema based on the cinema index"},{"lineNumber":197,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"qwlai"},"content":"    private Cinema getValidCinema() throws CommandException {"},{"lineNumber":199,"author":{"gitID":"qwlai"},"content":"        List\u003cCinema\u003e lastShownCinemaList \u003d model.getFilteredCinemaList();"},{"lineNumber":200,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":201,"author":{"gitID":"qwlai"},"content":"        if (cinemaIndex.getZeroBased() \u003e\u003d lastShownCinemaList.size()) {"},{"lineNumber":202,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"qwlai"},"content":"        Cinema cinema \u003d lastShownCinemaList.get(cinemaIndex.getZeroBased());"},{"lineNumber":206,"author":{"gitID":"qwlai"},"content":"        return cinema;"},{"lineNumber":207,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":209,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"qwlai"},"content":"     * Gets a valid theater based on the cinema provided"},{"lineNumber":211,"author":{"gitID":"qwlai"},"content":"     * @return a valid theater based on the cinema provided and theater number"},{"lineNumber":212,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":213,"author":{"gitID":"qwlai"},"content":"    private Theater getValidTheater(Cinema cinema) throws CommandException {"},{"lineNumber":214,"author":{"gitID":"qwlai"},"content":"        int theaterIndex \u003d theaterNumber - 1;"},{"lineNumber":215,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":216,"author":{"gitID":"qwlai"},"content":"        if (theaterIndex \u003e\u003d cinema.getTheaters().size()) {"},{"lineNumber":217,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_THEATER_NUMBER);"},{"lineNumber":218,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":220,"author":{"gitID":"qwlai"},"content":"        Theater theater \u003d cinema.getTheaters().get(theaterIndex);"},{"lineNumber":221,"author":{"gitID":"qwlai"},"content":"        return theater;"},{"lineNumber":222,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":224,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":225,"author":{"gitID":"qwlai"},"content":"     * Checks that the screening date of the movie is on or after the release date of the movie"},{"lineNumber":226,"author":{"gitID":"qwlai"},"content":"     * @return true if screening date is"},{"lineNumber":227,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"qwlai"},"content":"    private boolean canAddMovie(Movie movie) {"},{"lineNumber":229,"author":{"gitID":"qwlai"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":230,"author":{"gitID":"qwlai"},"content":"        LocalDate toAddDate \u003d toAddScreeningDateTime.toLocalDate();"},{"lineNumber":231,"author":{"gitID":"qwlai"},"content":"        LocalDate releaseDate \u003d LocalDate.parse(movie.getStartDate().toString(), dtf);"},{"lineNumber":232,"author":{"gitID":"qwlai"},"content":"        return toAddDate.equals(releaseDate) || toAddDate.isAfter(releaseDate);"},{"lineNumber":233,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":235,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"qwlai"},"content":"     * Checks that the screening can fit into the schedule of the theater."},{"lineNumber":237,"author":{"gitID":"qwlai"},"content":"     * @param screeningList list of screenings"},{"lineNumber":238,"author":{"gitID":"qwlai"},"content":"     * @return true if the screening can fit into the schedule"},{"lineNumber":239,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"qwlai"},"content":"    private boolean isSlotAvailable(ArrayList\u003cScreening\u003e screeningList) {"},{"lineNumber":241,"author":{"gitID":"qwlai"},"content":"        int totalScreeningsWithSameDate \u003d getTotalScreeningsWithSameDate(screeningList);"},{"lineNumber":242,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":243,"author":{"gitID":"qwlai"},"content":"        if (totalScreeningsWithSameDate \u003d\u003d 0) {"},{"lineNumber":244,"author":{"gitID":"qwlai"},"content":"            return true;"},{"lineNumber":245,"author":{"gitID":"qwlai"},"content":"        } else if (totalScreeningsWithSameDate \u003d\u003d 1) {"},{"lineNumber":246,"author":{"gitID":"qwlai"},"content":"            return hasNoConflictWithOneOtherScreening(screeningList);"},{"lineNumber":247,"author":{"gitID":"qwlai"},"content":"        } else {"},{"lineNumber":248,"author":{"gitID":"qwlai"},"content":"            return hasNoConflictWithBeforeAndAfter(totalScreeningsWithSameDate, screeningList);"},{"lineNumber":249,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":250,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":252,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":253,"author":{"gitID":"qwlai"},"content":"     * Checks that the screening does not conflict with one other screening"},{"lineNumber":254,"author":{"gitID":"qwlai"},"content":"     * @param screeningList list of screenings"},{"lineNumber":255,"author":{"gitID":"qwlai"},"content":"     * @return true if no conflict"},{"lineNumber":256,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"qwlai"},"content":"    private boolean hasNoConflictWithOneOtherScreening(ArrayList\u003cScreening\u003e screeningList) {"},{"lineNumber":258,"author":{"gitID":"qwlai"},"content":"        for (Screening s: screeningList) {"},{"lineNumber":259,"author":{"gitID":"qwlai"},"content":"            if (isSameScreeningDate(toAddScreeningDateTime, s)) {"},{"lineNumber":260,"author":{"gitID":"qwlai"},"content":"                return isScreenTimeOnOrBefore(s) || isScreenTimeOnOrAfter(s);"},{"lineNumber":261,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":262,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"qwlai"},"content":"        return false;"},{"lineNumber":264,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":266,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"qwlai"},"content":"     * Checks that the screening does not conflict with the screening before or screening after it"},{"lineNumber":268,"author":{"gitID":"qwlai"},"content":"     * @param totalScreenings number of screenings with the same date"},{"lineNumber":269,"author":{"gitID":"qwlai"},"content":"     * @param screeningList list of screenings"},{"lineNumber":270,"author":{"gitID":"qwlai"},"content":"     * @return true if no conflict"},{"lineNumber":271,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"qwlai"},"content":"    private boolean hasNoConflictWithBeforeAndAfter(int totalScreenings, ArrayList\u003cScreening\u003e screeningList) {"},{"lineNumber":273,"author":{"gitID":"qwlai"},"content":"        int count \u003d 0;"},{"lineNumber":274,"author":{"gitID":"qwlai"},"content":"        boolean hasNoConflict \u003d false;"},{"lineNumber":275,"author":{"gitID":"qwlai"},"content":"        Screening screeningBefore \u003d screeningList.get(0);"},{"lineNumber":276,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":277,"author":{"gitID":"qwlai"},"content":"        if (isSameScreeningDate(toAddScreeningDateTime, screeningBefore)) {"},{"lineNumber":278,"author":{"gitID":"qwlai"},"content":"            count++;"},{"lineNumber":279,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":281,"author":{"gitID":"qwlai"},"content":"        for (int i \u003d 1; i \u003c screeningList.size(); i++) {"},{"lineNumber":282,"author":{"gitID":"qwlai"},"content":"            Screening currentScreening \u003d screeningList.get(i);"},{"lineNumber":283,"author":{"gitID":"qwlai"},"content":"            if (hasNoConflict \u003d\u003d true) {"},{"lineNumber":284,"author":{"gitID":"qwlai"},"content":"                break;"},{"lineNumber":285,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":286,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":287,"author":{"gitID":"qwlai"},"content":"            //first screening"},{"lineNumber":288,"author":{"gitID":"qwlai"},"content":"            if (count \u003d\u003d 1 \u0026\u0026 isScreenTimeOnOrBefore(screeningBefore)) {"},{"lineNumber":289,"author":{"gitID":"qwlai"},"content":"                return true;"},{"lineNumber":290,"author":{"gitID":"qwlai"},"content":"            } else if (isSameScreeningDate(toAddScreeningDateTime, currentScreening)) {"},{"lineNumber":291,"author":{"gitID":"qwlai"},"content":"                count++;"},{"lineNumber":292,"author":{"gitID":"qwlai"},"content":"                // last screening"},{"lineNumber":293,"author":{"gitID":"qwlai"},"content":"                if (count \u003d\u003d totalScreenings \u0026\u0026 isScreenTimeOnOrAfter(currentScreening)) {"},{"lineNumber":294,"author":{"gitID":"qwlai"},"content":"                    return true;"},{"lineNumber":295,"author":{"gitID":"qwlai"},"content":"                // screening in between"},{"lineNumber":296,"author":{"gitID":"qwlai"},"content":"                } else {"},{"lineNumber":297,"author":{"gitID":"qwlai"},"content":"                    hasNoConflict \u003d isScreenTimeOnOrAfter(screeningBefore)"},{"lineNumber":298,"author":{"gitID":"qwlai"},"content":"                            \u0026\u0026 isScreenTimeOnOrBefore(currentScreening);"},{"lineNumber":299,"author":{"gitID":"qwlai"},"content":"                }"},{"lineNumber":300,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":301,"author":{"gitID":"qwlai"},"content":"            screeningBefore \u003d currentScreening;"},{"lineNumber":302,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":303,"author":{"gitID":"qwlai"},"content":"        return hasNoConflict;"},{"lineNumber":304,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":305,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":306,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":307,"author":{"gitID":"qwlai"},"content":"     * Checks that the start time of the screening toAdd is on or after the end time of the screening before it"},{"lineNumber":308,"author":{"gitID":"qwlai"},"content":"     * @return true if the start time of the screening is on or after the end time of the screening before it"},{"lineNumber":309,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":310,"author":{"gitID":"qwlai"},"content":"    private boolean isScreenTimeOnOrAfter(Screening screeningBefore) {"},{"lineNumber":311,"author":{"gitID":"qwlai"},"content":"        LocalTime toAddTime \u003d toAddScreeningDateTime.toLocalTime();"},{"lineNumber":312,"author":{"gitID":"qwlai"},"content":"        LocalTime screeningBeforeTime \u003d screeningBefore.getScreeningEndDateTime().toLocalTime();"},{"lineNumber":313,"author":{"gitID":"qwlai"},"content":"        return toAddTime.isAfter(screeningBeforeTime) || toAddTime.equals(screeningBeforeTime);"},{"lineNumber":314,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":315,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":316,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":317,"author":{"gitID":"qwlai"},"content":"     * Checks that the end time of the screening toAdd is on or before the start time of the screening after it"},{"lineNumber":318,"author":{"gitID":"qwlai"},"content":"     * @return true if the end time of the screening is before the start time of the screening after it"},{"lineNumber":319,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":320,"author":{"gitID":"qwlai"},"content":"    private boolean isScreenTimeOnOrBefore(Screening screeningAfter) {"},{"lineNumber":321,"author":{"gitID":"qwlai"},"content":"        LocalTime toAddTime \u003d toAddScreeningEndDateTime.toLocalTime();"},{"lineNumber":322,"author":{"gitID":"qwlai"},"content":"        LocalTime screeningAfterTime \u003d screeningAfter.getScreeningDateTime().toLocalTime();"},{"lineNumber":323,"author":{"gitID":"qwlai"},"content":"        return toAddTime.isBefore(screeningAfterTime) || toAddTime.equals(screeningAfterTime);"},{"lineNumber":324,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":325,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":326,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":327,"author":{"gitID":"qwlai"},"content":"     * Checks if two screenings have the same date"},{"lineNumber":328,"author":{"gitID":"qwlai"},"content":"     * @return true if both screenings have the same date"},{"lineNumber":329,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":330,"author":{"gitID":"qwlai"},"content":"    private boolean isSameScreeningDate(LocalDateTime screeningDateTime, Screening s2) {"},{"lineNumber":331,"author":{"gitID":"qwlai"},"content":"        return screeningDateTime.toLocalDate().equals(s2.getScreeningDateTime().toLocalDate());"},{"lineNumber":332,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":333,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":334,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":335,"author":{"gitID":"qwlai"},"content":"     * Calculates the total number of screenings with the same screening date"},{"lineNumber":336,"author":{"gitID":"qwlai"},"content":"     * @param screeningList list of screenings"},{"lineNumber":337,"author":{"gitID":"qwlai"},"content":"     * @return total number of screenings"},{"lineNumber":338,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":339,"author":{"gitID":"qwlai"},"content":"    private int getTotalScreeningsWithSameDate(ArrayList\u003cScreening\u003e screeningList) {"},{"lineNumber":340,"author":{"gitID":"qwlai"},"content":"        int count \u003d 0;"},{"lineNumber":341,"author":{"gitID":"qwlai"},"content":"        for (Screening s: screeningList) {"},{"lineNumber":342,"author":{"gitID":"qwlai"},"content":"            if (isSameScreeningDate(toAddScreeningDateTime, s)) {"},{"lineNumber":343,"author":{"gitID":"qwlai"},"content":"                count++;"},{"lineNumber":344,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":345,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":346,"author":{"gitID":"qwlai"},"content":"        return count;"},{"lineNumber":347,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":348,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":349,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":350,"author":{"gitID":"qwlai"},"content":"     * Calculates the time needed to screen a movie."},{"lineNumber":351,"author":{"gitID":"qwlai"},"content":"     * Elements used in calculations are movie\u0027s duration, preparation delay and rounding off to nearest 5 minutes"},{"lineNumber":352,"author":{"gitID":"qwlai"},"content":"     * @return endTime time where the screening will end"},{"lineNumber":353,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":354,"author":{"gitID":"qwlai"},"content":"    private LocalDateTime getEndTime() {"},{"lineNumber":355,"author":{"gitID":"qwlai"},"content":"        int movieDuration \u003d Integer.parseInt(movie.getDuration().toString());"},{"lineNumber":356,"author":{"gitID":"qwlai"},"content":"        LocalDateTime endTime \u003d toAddScreeningDateTime.plusMinutes(movieDuration).plusMinutes(PREPARATION_DELAY);"},{"lineNumber":357,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":358,"author":{"gitID":"qwlai"},"content":"        if (endTime.getMinute() % MINUTES_USED_IN_ROUNDING_OFF !\u003d 0) {"},{"lineNumber":359,"author":{"gitID":"qwlai"},"content":"            LocalDateTime roundedTime \u003d endTime;"},{"lineNumber":360,"author":{"gitID":"qwlai"},"content":"            roundedTime \u003d roundedTime.withSecond(0).withNano(0).plusMinutes(("},{"lineNumber":361,"author":{"gitID":"qwlai"},"content":"                    MINUTES_ENSURE_POSITIVE - roundedTime.getMinute()) % MINUTES_USED_IN_ROUNDING_OFF);"},{"lineNumber":362,"author":{"gitID":"qwlai"},"content":"            return roundedTime;"},{"lineNumber":363,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":364,"author":{"gitID":"qwlai"},"content":"        return endTime;"},{"lineNumber":365,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":366,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":368,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":369,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":370,"author":{"gitID":"qwlai"},"content":"                || (other instanceof AddScreeningCommand // instanceof handles nulls"},{"lineNumber":371,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 toAdd.equals(((AddScreeningCommand) other).toAdd));"},{"lineNumber":372,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":373,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"slothhy":1,"tinyjy94":1,"-":14,"qwlai":357}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Undo the previous {@code UndoableCommand}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"u\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canUndo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popUndo().undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":36,"qwlai":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteMovieCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.MovieNotFoundException;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.screening.Screening;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":" * Deletes a movie identified using it\u0027s last displayed index from the movie planner."},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"public class DeleteMovieCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    public static final String COMMAND_WORD \u003d \"deletemovie\";"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"    public static final String COMMAND_ALIAS \u003d \"dm\";"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"            + \": Deletes the movie identified by the index number used in the last movie listing.\\n\""},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_DELETE_MOVIE_SUCCESS \u003d \"Deleted Movie: %1$s\";"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"    private final Index targetIndex;"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"    private Movie movieToDelete;"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"    public DeleteMovieCommand(Index targetIndex) {"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"     * Delete screenings associated with the movie"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"    private void deleteScreenings() {"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"        for (Cinema c : model.getFilteredCinemaList()) {"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"            for (Theater t : c.getTheaters()) {"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"                ArrayList\u003cScreening\u003e deleteList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"                for (Screening s : t.getScreeningList()) {"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"                    if (s.getMovieName().equals(movieToDelete.getName().toString())) {"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"                        deleteList.add(s);"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"                }"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"                for (int i \u003d 0; i \u003c deleteList.size(); i++) {"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"                    t.deleteScreening(deleteList.get(i));"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"                }"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"        requireNonNull(movieToDelete);"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"        try {"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"            deleteScreenings();"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"            model.deleteMovie(movieToDelete);"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"        } catch (MovieNotFoundException mnfe) {"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":"            throw new AssertionError(\"The target movie cannot be missing\");"},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_MOVIE_SUCCESS, movieToDelete));"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"        List\u003cMovie\u003e lastShownList \u003d model.getFilteredMovieList();"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_MOVIE_DISPLAYED_INDEX);"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":"        movieToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":84,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":"                || (other instanceof DeleteMovieCommand // instanceof handles nulls"},{"lineNumber":88,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteMovieCommand) other).targetIndex) // state check"},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 Objects.equals(this.movieToDelete, ((DeleteMovieCommand) other).movieToDelete));"},{"lineNumber":90,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":79,"tinyjy94":1,"-":9,"qwlai":2}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.NameContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":" * Finds and lists all cinemas in movie planner whose name contains any of the argument keywords."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"f\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all cinemas whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"        model.updateFilteredCinemaList(predicate);"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"        return new CommandResult(getMessageForCinemaListShownSummary(model.getFilteredCinemaList().size()));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":31,"qwlai":6}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Movie Planner as requested ...\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":20,"qwlai":1}},{"path":"src/main/java/seedu/address/logic/commands/FindMovieCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":3,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.NameAndStartDateAndTagContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.NameAndStartDateContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.NameAndTagContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDateAndTagContainsKeywordsPredicate;"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDateContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.TagContainsKeywordsPredicate;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":" * Finds and lists all movies in movie planner whose name contains any of the argument keywords."},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":" * Keyword matching is case sensitive."},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"public class FindMovieCommand extends Command {"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"    public static final String COMMAND_WORD \u003d \"findmovie\";"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"    public static final String COMMAND_ALIAS \u003d \"fm\";"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all movies whose names contain any of \""},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"            + \"parameters specified and their specified keywords (case-insensitive).\\n\""},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"            + \"Parameters: \""},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"            + \"[\" + PREFIX_NAME + \"KEYWORDS] \""},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"            + \"[\" + PREFIX_STARTDATE + \"STARTDATE] \""},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"            + \"[\" + PREFIX_TAG + \"TAG] \""},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"            + PREFIX_NAME + \"avenger horror nemo \""},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"            + PREFIX_STARTDATE + \"20/10/2015 \""},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"            + PREFIX_TAG + \"superhero\";"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"    private final Predicate\u003cMovie\u003e predicate;"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"    public  FindMovieCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"    public FindMovieCommand(NameAndStartDateContainsKeywordsPredicate predicate) {"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"    public FindMovieCommand(NameAndStartDateAndTagContainsKeywordsPredicate predicate) {"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"    public FindMovieCommand(NameAndTagContainsKeywordsPredicate predicate) {"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"    public  FindMovieCommand(StartDateContainsKeywordsPredicate predicate) {"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"    public FindMovieCommand(StartDateAndTagContainsKeywordsPredicate predicate) {"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"    public FindMovieCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"    public CommandResult execute() {"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":"        model.updateFilteredMovieList(predicate);"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"        return new CommandResult(getMessageForMovieListShownSummary(model.getFilteredMovieList().size()));"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"                || (other instanceof FindMovieCommand // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.predicate.equals(((FindMovieCommand) other).predicate)); // state check"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":82}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.parser.MoviePlannerParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"    private final MoviePlannerParser moviePlannerParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"        moviePlannerParser \u003d new MoviePlannerParser();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"            Command command \u003d moviePlannerParser.parseCommand(commandText);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    public ObservableList\u003cCinema\u003e getFilteredCinemaList() {"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"        return model.getFilteredCinemaList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    public ObservableList\u003cMovie\u003e getFilteredMovieList() {"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"        return model.getFilteredMovieList();"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":50,"qwlai":13}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.model.MoviePlannerChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"public interface Storage extends MoviePlannerStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    String getMoviePlannerFilePath();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"    String getEncryptedMoviePlannerFilePath();"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    Optional\u003cReadOnlyMoviePlanner\u003e readMoviePlanner() throws DataConversionException, IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    void saveMoviePlanner(ReadOnlyMoviePlanner moviePlanner) throws IOException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"     * Saves the current version of the Movie Planner to the hard disk."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"    void handleMoviePlannerChangedEvent(MoviePlannerChangedEvent abce);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tinyjy94":3,"-":30,"qwlai":8}},{"path":"src/main/java/seedu/address/logic/commands/AddMovieCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTDATE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.DuplicateMovieException;"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":" * Adds a movie to the movie planner."},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"public class AddMovieCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"    public static final String COMMAND_WORD \u003d \"addmovie\";"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"    public static final String COMMAND_ALIAS \u003d \"am\";"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a movie to the movie planner. \""},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"            + PREFIX_DURATION + \"DURATION \""},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"            + PREFIX_RATING + \"RATING \""},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"            + PREFIX_STARTDATE + \"STARTDATE \""},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"            + PREFIX_TAG + \"TAG \""},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"            + PREFIX_NAME + \"The Incredibles \""},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"            + PREFIX_DURATION + \"90 \""},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"            + PREFIX_RATING + \"PG \""},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"            + PREFIX_STARTDATE + \"13/03/2018 \""},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"            + PREFIX_TAG + \"comedy\";"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New movie added: %1$s\";"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_DUPLICATE_MOVIE \u003d \"This movie already exists in the movie planner\";"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_INVALID_MOVIEDURATION \u003d \"Movie duration cannot exceed 360 minutes\";"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"    private final Movie toAdd;"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"     * Creates an AddCommand to add the specified {@code Movie}"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"    public AddMovieCommand(Movie movie) {"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"        requireNonNull(movie);"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"        toAdd \u003d movie;"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"        requireNonNull(model);"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"            if (Integer.parseInt(toAdd.getDuration().duration) \u003e 360) {"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"                throw new CommandException(MESSAGE_INVALID_MOVIEDURATION);"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"            model.addMovie(toAdd);"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"        } catch (DuplicateMovieException e) {"},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_MOVIE);"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":"                || (other instanceof AddMovieCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 toAdd.equals(((AddMovieCommand) other).toAdd));"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":65,"-":5}},{"path":"src/main/java/seedu/address/logic/commands/JumpCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.ui.JumpToDateRequestEvent;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.parser.JumpCommandParser;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":" * Jumps to a specified date as specified by the user"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"public class JumpCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_WORD \u003d \"jump\";"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"j\";"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    private static final String MESSAGE_JUMP \u003d \"Jumping to \";"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"    private static final String MESSAGE_WARNING \u003d \", please select a cinema \""},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"            + \"if you do not see any schedule on the right.\";"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"            + \": Jumps to a date for the cinema\u0027s schedule. Please remember to input a valid date.\\n\""},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"            + \"Parameters: dd/MM/yyyy\\n\""},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"            + \"Example: \" + COMMAND_WORD + \" 05/01/2018\";"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    private LocalDate date;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    public JumpCommand(LocalDate date) {"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"        this.date \u003d date;"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    public CommandResult execute() {"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"        String dateToJump \u003d date.format(DateTimeFormatter.ofPattern(JumpCommandParser.DATE_FORMAT));"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        EventsCenter.getInstance().post(new JumpToDateRequestEvent(date));"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"        return new CommandResult(MESSAGE_JUMP + dateToJump + MESSAGE_WARNING);"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"-":1,"qwlai":38}},{"path":"src/main/java/seedu/address/storage/MoviePlannerStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":" * Represents a storage for {@link seedu.address.model.MoviePlanner}."},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"public interface MoviePlannerStorage {"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"     * Returns the file path of the data file."},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"    String getMoviePlannerFilePath();"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"     * Returns the file path of the encrypted data file"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"    String getEncryptedMoviePlannerFilePath();"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"     * Returns MoviePlanner data as a {@link ReadOnlyMoviePlanner}."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * @throws IOException             if there was any problem when reading from the storage."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    Optional\u003cReadOnlyMoviePlanner\u003e readMoviePlanner() throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"     * @see #getMoviePlannerFilePath()"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    Optional\u003cReadOnlyMoviePlanner\u003e readMoviePlanner(String filePath) throws DataConversionException, IOException;"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"     * @see #getMoviePlannerFilePath()"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"    Optional\u003cReadOnlyMoviePlanner\u003e readMoviePlanner(String filePath, String encryptedFilePath)"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":"            throws DataConversionException, IOException;"},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"     * Saves the given {@link ReadOnlyMoviePlanner} to the storage."},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"     * @param moviePlanner cannot be null."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    void saveMoviePlanner(ReadOnlyMoviePlanner moviePlanner) throws IOException;"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"     * @see #saveMoviePlanner(ReadOnlyMoviePlanner)"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    void saveMoviePlanner(ReadOnlyMoviePlanner moviePlanner, String filePath) throws IOException;"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"     * Saves the given (@link ReadOnlyMoviePlanner) to a fixed temporary location."},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"    void backupMoviePlanner(ReadOnlyMoviePlanner moviePlanner) throws IOException;"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"tinyjy94":10,"-":12,"qwlai":40}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted movie"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":1,"-":61}},{"path":"src/main/java/seedu/address/logic/commands/DeleteTheaterCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMOFTHEATERS;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CINEMAS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"tinyjy94"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"tinyjy94"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":" * Deletes theater from existing cinema"},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"public class DeleteTheaterCommand extends UndoableCommand {"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"    public static final String COMMAND_WORD \u003d \"deletetheater\";"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"    public static final String COMMAND_ALIAS \u003d \"dt\";"},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": delete theaters from cinema \""},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"            + \"by the index number used in the last cinema listing. \""},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"            + \"Existing number of theaters will be deducted by the input value.\\n\""},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"            + \"Value provided must be less than current number of theaters.\\n\""},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"            + PREFIX_NUMOFTHEATERS + \"THEATERS\\n\""},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":"            + PREFIX_NUMOFTHEATERS + \"3 \";"},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_RESIZE_CINEMA_SUCCESS \u003d \"Resized Cinema: %1$s\";"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_DUPLICATE_CINEMA \u003d \"This cinema already exists in the movie planner.\";"},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_RESIZE_CINEMA_FAIL \u003d \"Cinema cannot have 0 or negative number of theaters!\";"},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"    private final Index index;"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"    private final int newTheaters;"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":"    private Cinema cinemaToResize;"},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":"    private Cinema resizedCinema;"},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"     * @param index       of the cinema in the filtered cinema list to resize"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":"     * @param newTheaters to resize the cinema with"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"    public DeleteTheaterCommand(Index index, int newTheaters) {"},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":"        requireNonNull(index);"},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":"        this.index \u003d index;"},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"        this.newTheaters \u003d newTheaters;"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":"        try {"},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":"            model.updateCinema(cinemaToResize, resizedCinema);"},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":"        } catch (DuplicateCinemaException dce) {"},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CINEMA);"},{"lineNumber":62,"author":{"gitID":"tinyjy94"},"content":"        } catch (CinemaNotFoundException cnfe) {"},{"lineNumber":63,"author":{"gitID":"tinyjy94"},"content":"            throw new AssertionError(\"The target cinema cannot be missing\");"},{"lineNumber":64,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":"        model.updateFilteredCinemaList(PREDICATE_SHOW_ALL_CINEMAS);"},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":"        return new CommandResult(String.format(MESSAGE_RESIZE_CINEMA_SUCCESS, resizedCinema));"},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":70,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"tinyjy94"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":72,"author":{"gitID":"tinyjy94"},"content":"        List\u003cCinema\u003e lastShownList \u003d model.getFilteredCinemaList();"},{"lineNumber":73,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":74,"author":{"gitID":"tinyjy94"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":75,"author":{"gitID":"tinyjy94"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":78,"author":{"gitID":"tinyjy94"},"content":"        cinemaToResize \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":79,"author":{"gitID":"tinyjy94"},"content":"        resizedCinema \u003d createResizedCinema(cinemaToResize, newTheaters);"},{"lineNumber":80,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":82,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"tinyjy94"},"content":"     * Creates and returns a {@code Cinema} with the details of existing cinema and user input"},{"lineNumber":84,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":"    private Cinema createResizedCinema(Cinema cinemaToResize, int newTheaters) throws CommandException {"},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":"        assert cinemaToResize !\u003d null;"},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"        int oldTheaterSize \u003d cinemaToResize.getTheaters().size();"},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":89,"author":{"gitID":"tinyjy94"},"content":"        if (newTheaters \u003e\u003d oldTheaterSize) {"},{"lineNumber":90,"author":{"gitID":"tinyjy94"},"content":"            throw new CommandException(String.format(MESSAGE_RESIZE_CINEMA_FAIL, resizedCinema));"},{"lineNumber":91,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":93,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e updatedTheaterList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":95,"author":{"gitID":"tinyjy94"},"content":"        for (Theater theaters : cinemaToResize.getTheaters()) {"},{"lineNumber":96,"author":{"gitID":"tinyjy94"},"content":"            updatedTheaterList.add(theaters);"},{"lineNumber":97,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":"        for (int i \u003d oldTheaterSize; i \u003e oldTheaterSize - newTheaters; i--) {"},{"lineNumber":100,"author":{"gitID":"tinyjy94"},"content":"            updatedTheaterList.remove(updatedTheaterList.size() - 1);"},{"lineNumber":101,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":103,"author":{"gitID":"tinyjy94"},"content":"        return new Cinema(cinemaToResize.getName(), cinemaToResize.getPhone(), cinemaToResize.getEmail(),"},{"lineNumber":104,"author":{"gitID":"tinyjy94"},"content":"                cinemaToResize.getAddress(), updatedTheaterList);"},{"lineNumber":105,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":107,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":108,"author":{"gitID":"tinyjy94"},"content":"    public boolean equals(Object other) {"},{"lineNumber":109,"author":{"gitID":"tinyjy94"},"content":"        // short circuit if same object"},{"lineNumber":110,"author":{"gitID":"tinyjy94"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":111,"author":{"gitID":"tinyjy94"},"content":"            return true;"},{"lineNumber":112,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":114,"author":{"gitID":"tinyjy94"},"content":"        // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"tinyjy94"},"content":"        if (!(other instanceof DeleteTheaterCommand)) {"},{"lineNumber":116,"author":{"gitID":"tinyjy94"},"content":"            return false;"},{"lineNumber":117,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":119,"author":{"gitID":"tinyjy94"},"content":"        // state check"},{"lineNumber":120,"author":{"gitID":"tinyjy94"},"content":"        DeleteTheaterCommand e \u003d (DeleteTheaterCommand) other;"},{"lineNumber":121,"author":{"gitID":"tinyjy94"},"content":"        return index.equals(e.index)"},{"lineNumber":122,"author":{"gitID":"tinyjy94"},"content":"                \u0026\u0026 Objects.equals(cinemaToResize, e.cinemaToResize);"},{"lineNumber":123,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":112,"-":8,"qwlai":4}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.model.MoviePlannerChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.events.storage.DecryptionRequestEvent;"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.events.storage.EncryptionRequestEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.commons.util.SecurityUtil;"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.logic.commands.DecryptCommand;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":" * Manages storage of MoviePlanner data in local storage."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    private MoviePlannerStorage moviePlannerStorage;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    public StorageManager(MoviePlannerStorage moviePlannerStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        this.moviePlannerStorage \u003d moviePlannerStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MoviePlanner methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"    public String getMoviePlannerFilePath() {"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"        return moviePlannerStorage.getMoviePlannerFilePath();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":"    //@@author tinyjy94"},{"lineNumber":62,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"tinyjy94"},"content":"    public String getEncryptedMoviePlannerFilePath() {"},{"lineNumber":64,"author":{"gitID":"tinyjy94"},"content":"        return moviePlannerStorage.getEncryptedMoviePlannerFilePath();"},{"lineNumber":65,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":"    public Optional\u003cReadOnlyMoviePlanner\u003e readMoviePlanner() throws DataConversionException, IOException {"},{"lineNumber":69,"author":{"gitID":"tinyjy94"},"content":"        return readMoviePlanner(moviePlannerStorage.getMoviePlannerFilePath(),"},{"lineNumber":70,"author":{"gitID":"tinyjy94"},"content":"                moviePlannerStorage.getEncryptedMoviePlannerFilePath());"},{"lineNumber":71,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"tinyjy94"},"content":"    //@@author"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"    public Optional\u003cReadOnlyMoviePlanner\u003e readMoviePlanner(String filePath)"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"            throws DataConversionException, IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"        return moviePlannerStorage.readMoviePlanner(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"tinyjy94"},"content":"    //@@author tinyjy94"},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"tinyjy94"},"content":"    public Optional\u003cReadOnlyMoviePlanner\u003e readMoviePlanner(String filePath, String encryptedFilePath)"},{"lineNumber":83,"author":{"gitID":"tinyjy94"},"content":"            throws DataConversionException, IOException {"},{"lineNumber":84,"author":{"gitID":"tinyjy94"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":"        return moviePlannerStorage.readMoviePlanner(filePath, encryptedFilePath);"},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"    //@@author"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"    public void saveMoviePlanner(ReadOnlyMoviePlanner moviePlanner) throws IOException {"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"        saveMoviePlanner(moviePlanner, moviePlannerStorage.getMoviePlannerFilePath());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"    public void saveMoviePlanner(ReadOnlyMoviePlanner moviePlanner, String filePath) throws IOException {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        moviePlannerStorage.saveMoviePlanner(moviePlanner, filePath);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"    public void handleMoviePlannerChangedEvent(MoviePlannerChangedEvent event) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"            saveMoviePlanner(event.data);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":111,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"    public void backupMoviePlanner(ReadOnlyMoviePlanner moviePlanner) throws IOException {"},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"        moviePlannerStorage.backupMoviePlanner(moviePlanner);"},{"lineNumber":114,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":116,"author":{"gitID":"tinyjy94"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Security methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":117,"author":{"gitID":"tinyjy94"},"content":"    //@@author tinyjy94"},{"lineNumber":118,"author":{"gitID":"tinyjy94"},"content":"    @Subscribe"},{"lineNumber":119,"author":{"gitID":"tinyjy94"},"content":"    public void handleEncryptionRequestEvent(EncryptionRequestEvent event) {"},{"lineNumber":120,"author":{"gitID":"tinyjy94"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Encrypted and saving to file\"));"},{"lineNumber":121,"author":{"gitID":"tinyjy94"},"content":"        SecurityUtil.encrypt(moviePlannerStorage.getMoviePlannerFilePath(),"},{"lineNumber":122,"author":{"gitID":"tinyjy94"},"content":"                moviePlannerStorage.getEncryptedMoviePlannerFilePath(), event.getPassword());"},{"lineNumber":123,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":124,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":126,"author":{"gitID":"tinyjy94"},"content":"    @Subscribe"},{"lineNumber":127,"author":{"gitID":"tinyjy94"},"content":"    public void handleDecryptionRequestEvent(DecryptionRequestEvent event) {"},{"lineNumber":128,"author":{"gitID":"tinyjy94"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Decrypted and saving to file\"));"},{"lineNumber":129,"author":{"gitID":"tinyjy94"},"content":"        try {"},{"lineNumber":130,"author":{"gitID":"tinyjy94"},"content":"            SecurityUtil.decrypt(moviePlannerStorage.getMoviePlannerFilePath(),"},{"lineNumber":131,"author":{"gitID":"tinyjy94"},"content":"                    moviePlannerStorage.getEncryptedMoviePlannerFilePath(), event.getPassword());"},{"lineNumber":132,"author":{"gitID":"tinyjy94"},"content":"        } catch (IOException e) {"},{"lineNumber":133,"author":{"gitID":"tinyjy94"},"content":"            System.out.println(DecryptCommand.MESSAGE_WRONGPASSWORD);"},{"lineNumber":134,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"tinyjy94"},"content":"    //@@author"},{"lineNumber":137,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":3,"tinyjy94":46,"-":68,"qwlai":20}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedScreening.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SCREEN_DATE_TIME;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import java.util.HashMap;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.MovieName;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.screening.Screening;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":" * JAXB-friendly adapted version of the Screening."},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"public class XmlAdaptedScreening {"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    private static final int MINUTES_USED_IN_ROUNDING_OFF \u003d 5;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    private static final String DATE_TIME_FORMAT \u003d \"dd/MM/uuuu HH:mm\";"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    @XmlElement(required \u003d true, name \u003d \"movie\")"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    private String movieName;"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"    @XmlElement(required \u003d true, name \u003d \"startDateTime\")"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    private String screeningDateTime;"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    @XmlElement(required \u003d true, name \u003d \"endDateTime\")"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"    private String screeningEndDateTime;"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"     * Constructs an XmlAdaptedScreening."},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"    public XmlAdaptedScreening() {}"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"     * Constructs a {@code XmlAdaptedScreening} with the given {@code theaternum}."},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"    public XmlAdaptedScreening(String movieName, String screeningDateTime, String screeningEndDateTime) {"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        this.movieName \u003d movieName;"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"        this.screeningDateTime \u003d screeningDateTime;"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"        this.screeningEndDateTime \u003d screeningEndDateTime;"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"     * Converts a given Screening into this class for JAXB use."},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"    public XmlAdaptedScreening(Screening source) {"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"        movieName \u003d source.getMovieName();"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"        screeningDateTime \u003d source.getScreeningDateTime().format(dtf);"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        screeningEndDateTime \u003d source.getScreeningEndDateTime().format(dtf);"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"     * Returns a hashmap containing movieName as the key"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"     * startDateTime and endDateTime is stored in the arrayList and put as the value in the hashmap"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted screening"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"    public HashMap\u003cString, ArrayList\u003cLocalDateTime\u003e\u003e toScreening() throws IllegalValueException {"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"        HashMap\u003cString, ArrayList\u003cLocalDateTime\u003e\u003e screeningMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        if (!MovieName.isValidName(movieName)) {"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"            throw new IllegalValueException(MovieName.MESSAGE_MOVIENAME_CONSTRAINTS);"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        if (getValidDateTime().size() \u003d\u003d 2) {"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"            screeningMap.put(movieName, getValidDateTime());"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"        return screeningMap;"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"     * Returns an ArrayList of LocalDateTime consisting of the startDateTime and endDateTime"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"     * @throws IllegalValueException if the date time given is not in the right format"},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"    private ArrayList\u003cLocalDateTime\u003e getValidDateTime() throws IllegalValueException {"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"        ArrayList\u003cLocalDateTime\u003e dateTimeDetailsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT).withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(screeningDateTime, dtf);"},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"            LocalDateTime endDateTime \u003d LocalDateTime.parse(screeningEndDateTime, dtf);"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"            if (dateTime.getMinute() % MINUTES_USED_IN_ROUNDING_OFF !\u003d 0"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"                    || endDateTime.getMinute() % MINUTES_USED_IN_ROUNDING_OFF !\u003d 0) {"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"                throw new IllegalValueException(Messages.MESSAGE_INVALID_SCREEN_DATE_TIME);"},{"lineNumber":98,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"            dateTimeDetailsList.add(dateTime);"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":"            dateTimeDetailsList.add(endDateTime);"},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"            throw new ParseException(MESSAGE_INVALID_SCREEN_DATE_TIME, dtpe);"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"        return dateTimeDetailsList;"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"            return true;"},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"        if (!(other instanceof XmlAdaptedScreening)) {"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"            return false;"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedScreening otherScreening \u003d (XmlAdaptedScreening) other;"},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"        return Objects.equals(movieName, otherScreening.movieName)"},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(screeningDateTime, otherScreening.screeningDateTime)"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(screeningEndDateTime, otherScreening.screeningEndDateTime);"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"-":1,"qwlai":123}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedCinema.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":" * JAXB-friendly version of the Cinema."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"public class XmlAdaptedCinema {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Cinema\u0027s %s field is missing!\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    @XmlElement(name \u003d \"theater\")"},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"    private ArrayList\u003cXmlAdaptedTheater\u003e theaters \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"     * Constructs an XmlAdaptedCinema."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"    public XmlAdaptedCinema() {}"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"     * Constructs an {@code XmlAdaptedCinema} with the given cinema details."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"    public XmlAdaptedCinema(String name, String phone, String email, String address,"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"                             ArrayList\u003cXmlAdaptedTheater\u003e theaters) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":"        if (theaters !\u003d null) {"},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"            this.theaters \u003d new ArrayList\u003c\u003e(theaters);"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"     * Converts a given Cinema into this class for JAXB use."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedCinema"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    public XmlAdaptedCinema(Cinema source) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":"        for (Theater theater : source.getTheaters()) {"},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":"            theaters.add(new XmlAdaptedTheater(theater));"},{"lineNumber":69,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"     * Converts this jaxb-friendly adapted cinema object into the model\u0027s Cinema object."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted cinema"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"    public Cinema toModelType() throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"tinyjy94"},"content":"        final List\u003cTheater\u003e cinemaTheater \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitID":"tinyjy94"},"content":"        for (XmlAdaptedTheater theater : theaters) {"},{"lineNumber":80,"author":{"gitID":"tinyjy94"},"content":"            cinemaTheater.add(theater.toModelType());"},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"tinyjy94"},"content":"        if (this.theaters \u003d\u003d null) {"},{"lineNumber":116,"author":{"gitID":"tinyjy94"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Theater.class.getSimpleName()));"},{"lineNumber":117,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":119,"author":{"gitID":"tinyjy94"},"content":"        if (!Theater.isValidTheater(String.valueOf(this.theaters.size()))) {"},{"lineNumber":120,"author":{"gitID":"tinyjy94"},"content":"            throw new IllegalValueException(Theater.MESSAGE_THEATER_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":123,"author":{"gitID":"tinyjy94"},"content":"        final ArrayList\u003cTheater\u003e theaters \u003d new ArrayList\u003c\u003e(cinemaTheater);"},{"lineNumber":124,"author":{"gitID":"slothhy"},"content":"        return new Cinema(name, phone, email, address, theaters);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"qwlai"},"content":"        if (!(other instanceof XmlAdaptedCinema)) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedCinema otherCinema \u003d (XmlAdaptedCinema) other;"},{"lineNumber":138,"author":{"gitID":"qwlai"},"content":"        return Objects.equals(name, otherCinema.name)"},{"lineNumber":139,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(phone, otherCinema.phone)"},{"lineNumber":140,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(email, otherCinema.email)"},{"lineNumber":141,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(address, otherCinema.address)"},{"lineNumber":142,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 theaters.equals(otherCinema.theaters);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":3,"tinyjy94":23,"-":93,"qwlai":25}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedMovie.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Duration;"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.MovieName;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Rating;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDate;"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":" * JAXB-friendly version of the Movie."},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"public class XmlAdaptedMovie {"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Movie\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"    private String movieName;"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"    private String duration;"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"    private String rating;"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"    private String startDate;"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"    @XmlElement"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"     * Constructs an XmlAdaptedMovie."},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"    public XmlAdaptedMovie() {}"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"     * Constructs an {@code XmlAdaptedMovie} with the given movie details."},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"    public XmlAdaptedMovie(String movieName, String duration, String rating, String startDate,"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"                           List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"        this.movieName \u003d movieName;"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"        this.duration \u003d duration;"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"        this.rating \u003d rating;"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"     * Converts a given Movie into this class for JAXB use."},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedMovie"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"    public XmlAdaptedMovie(Movie source) {"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"        movieName \u003d source.getName().movieName;"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"        duration \u003d source.getDuration().duration;"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":"        rating \u003d source.getRating().rating;"},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"        startDate \u003d source.getStartDate().startDate;"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"     * Converts this jaxb-friendly adapted movie object into the model\u0027s Movie object."},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted movie"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"    public Movie toModelType() throws IllegalValueException {"},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":"        final List\u003cTag\u003e movieTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":83,"author":{"gitID":"slothhy"},"content":"            movieTags.add(tag.toModelType());"},{"lineNumber":84,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"        if (this.movieName \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":88,"author":{"gitID":"slothhy"},"content":"                    MovieName.class.getSimpleName()));"},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"slothhy"},"content":"        if (!MovieName.isValidName(this.movieName)) {"},{"lineNumber":91,"author":{"gitID":"slothhy"},"content":"            throw new IllegalValueException(MovieName.MESSAGE_MOVIENAME_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"slothhy"},"content":"        final MovieName movieName \u003d new MovieName(this.movieName);"},{"lineNumber":94,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":95,"author":{"gitID":"slothhy"},"content":"        if (this.duration \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitID":"slothhy"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":97,"author":{"gitID":"slothhy"},"content":"                    Duration.class.getSimpleName()));"},{"lineNumber":98,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"slothhy"},"content":"        if (!Duration.isValidDuration(this.duration)) {"},{"lineNumber":100,"author":{"gitID":"slothhy"},"content":"            throw new IllegalValueException(Duration.MESSAGE_DURATION_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"slothhy"},"content":"        final Duration duration \u003d new Duration(this.duration);"},{"lineNumber":103,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":104,"author":{"gitID":"slothhy"},"content":"        if (this.rating \u003d\u003d null) {"},{"lineNumber":105,"author":{"gitID":"slothhy"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"},{"lineNumber":106,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"slothhy"},"content":"        if (!Rating.isValidRating(this.rating)) {"},{"lineNumber":108,"author":{"gitID":"slothhy"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"slothhy"},"content":"        final Rating rating \u003d new Rating(this.rating);"},{"lineNumber":111,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":112,"author":{"gitID":"slothhy"},"content":"        if (this.startDate \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitID":"slothhy"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":114,"author":{"gitID":"slothhy"},"content":"                    StartDate.class.getSimpleName()));"},{"lineNumber":115,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"slothhy"},"content":"        if (!StartDate.isValidStartDate(this.startDate)) {"},{"lineNumber":117,"author":{"gitID":"slothhy"},"content":"            throw new IllegalValueException(StartDate.MESSAGE_STARTDATE_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"slothhy"},"content":"        final StartDate startDate \u003d new StartDate(this.startDate);"},{"lineNumber":120,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":121,"author":{"gitID":"slothhy"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(movieTags);"},{"lineNumber":122,"author":{"gitID":"slothhy"},"content":"        return new Movie(movieName, duration, rating, startDate, tags);"},{"lineNumber":123,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":125,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":127,"author":{"gitID":"slothhy"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":128,"author":{"gitID":"slothhy"},"content":"            return true;"},{"lineNumber":129,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":131,"author":{"gitID":"slothhy"},"content":"        if (!(other instanceof XmlAdaptedMovie)) {"},{"lineNumber":132,"author":{"gitID":"slothhy"},"content":"            return false;"},{"lineNumber":133,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":135,"author":{"gitID":"slothhy"},"content":"        XmlAdaptedMovie otherMovie \u003d (XmlAdaptedMovie) other;"},{"lineNumber":136,"author":{"gitID":"slothhy"},"content":"        return Objects.equals(movieName, otherMovie.movieName)"},{"lineNumber":137,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 Objects.equals(duration, otherMovie.duration)"},{"lineNumber":138,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 Objects.equals(rating, otherMovie.rating)"},{"lineNumber":139,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 Objects.equals(startDate, otherMovie.startDate)"},{"lineNumber":140,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 tagged.equals(otherMovie.tagged);"},{"lineNumber":141,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":136,"-":6}},{"path":"src/main/java/seedu/address/storage/XmlSerializableMoviePlanner.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":" * An Immutable MoviePlanner that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"@XmlRootElement(name \u003d \"movieplanner\")"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"public class XmlSerializableMoviePlanner {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    private List\u003cXmlAdaptedCinema\u003e cinemas;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"    @XmlElement"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"    private List\u003cXmlAdaptedMovie\u003e movies;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"     * Creates an empty XmlSerializableMoviePlanner."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    public XmlSerializableMoviePlanner() {"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"        cinemas \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"        movies \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"    public XmlSerializableMoviePlanner(ReadOnlyMoviePlanner src) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"        cinemas.addAll(src.getCinemaList().stream().map(XmlAdaptedCinema::new).collect(Collectors.toList()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"        movies.addAll(src.getMovieList().stream().map(XmlAdaptedMovie::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"     * Converts this movieplanner into the model\u0027s {@code MoviePlanner} object."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"     * {@code XmlAdaptedCinema} or {@code XmlAdaptedTag}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    public MoviePlanner toModelType() throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"        MoviePlanner moviePlanner \u003d new MoviePlanner();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"            moviePlanner.addTag(t.toModelType());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"        for (XmlAdaptedCinema c : cinemas) {"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"            moviePlanner.addCinema(c.toModelType());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"        for (XmlAdaptedMovie m : movies) {"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"            moviePlanner.addMovie(m.toModelType());"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"        return moviePlanner;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"        if (!(other instanceof XmlSerializableMoviePlanner)) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        XmlSerializableMoviePlanner otherAb \u003d (XmlSerializableMoviePlanner) other;"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"        return cinemas.equals(otherAb.cinemas)"},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 movies.equals(otherAb.movies);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":9,"-":53,"qwlai":22}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTheater.java","lines":[{"lineNumber":1,"author":{"gitID":"tinyjy94"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import javax.xml.bind.annotation.XmlAttribute;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.screening.Screening;"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":" * JAXB-friendly adapted version of the Theater."},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"public class XmlAdaptedTheater {"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"    @XmlAttribute(name \u003d \"number\")"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    private int theaterNumber;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    @XmlElement(name \u003d \"screening\")"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"    private ArrayList\u003cXmlAdaptedScreening\u003e screenings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":"     * Constructs an XmlAdaptedTheater."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":"    public XmlAdaptedTheater() {}"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    //@@author qwlai"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"     * Constructs a {@code XmlAdaptedTheater} with the given {@code theaterNumber}."},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    public XmlAdaptedTheater(int theaterNumber, ArrayList\u003cXmlAdaptedScreening\u003e screenings) {"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"        this.theaterNumber \u003d theaterNumber;"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        if (screenings !\u003d null) {"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"            this.screenings \u003d new ArrayList\u003c\u003e(screenings);"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"     * Converts a given Theater into this class for JAXB use."},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"    public XmlAdaptedTheater(Theater source) {"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        this.theaterNumber \u003d source.getTheaterNumber();"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"        for (Screening screening : source.getScreeningList()) {"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"            screenings.add(new XmlAdaptedScreening(screening));"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"     * Converts this jaxb-friendly adapted theater object into the model\u0027s Theater object."},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"     *"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted theater"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"    public Theater toModelType() throws IllegalValueException {"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        if (!Theater.isValidTheater(String.valueOf(theaterNumber))) {"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"            throw new IllegalValueException(Theater.MESSAGE_THEATER_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        Theater theater \u003d new Theater(theaterNumber);"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"        for (XmlAdaptedScreening s : screenings) {"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"            String movieName \u003d s.toScreening().keySet().stream().findFirst().get();"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"            if (movieName !\u003d null) {"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"                LocalDateTime startDateTime \u003d s.toScreening().get(movieName).get(0);"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"                LocalDateTime endDateTime \u003d s.toScreening().get(movieName).get(1);"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"                Screening screening \u003d new Screening(movieName, theater, startDateTime, endDateTime);"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"                theater.addScreeningToTheater(screening);"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"        return theater;"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"    //@@author"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":"        if (!(other instanceof XmlAdaptedTheater)) {"},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"            return false;"},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"        XmlAdaptedTheater otherTheater \u003d (XmlAdaptedTheater) other;"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        return Objects.equals(theaterNumber, otherTheater.theaterNumber)"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(screenings, otherTheater.screenings);"},{"lineNumber":93,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":20,"-":10,"qwlai":64}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":" * Stores movieplanner data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"     * Saves the given movieplanner data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    public static void saveDataToFile(File file, XmlSerializableMoviePlanner moviePlanner)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"            XmlUtil.saveDataToFile(file, moviePlanner);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"     * Returns movie planner in the file or an empty movie planner"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    public static XmlSerializableMoviePlanner loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableMoviePlanner.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":32,"qwlai":7}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.Email;"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"import seedu.address.storage.MoviePlannerStorage;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"import seedu.address.storage.XmlMoviePlannerStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":41,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":42,"author":{"gitID":"-"},"content":" */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"    public static final Version VERSION \u003d new Version(1, 4, 1, true);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"    protected Email email;"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MoviePlanner ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":"        MoviePlannerStorage moviePlannerStorage \u003d new XmlMoviePlannerStorage(userPrefs.getMoviePlannerFilePath(),"},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":"                userPrefs.getEncryptedMoviePlannerFilePath());"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"        storage \u003d new StorageManager(moviePlannerStorage, userPrefsStorage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":"        email \u003d new EmailManager();"},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":"        model \u003d initModelManager(storage, userPrefs, email);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s movie planner and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"     * The data from the sample movie planner will be used instead if {@code storage}\u0027s movie planner is not found,"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"     * or an empty movie planner will be used instead if errors occur when reading {@code storage}\u0027s movie planner."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"chanyikwai"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs, Email email) {"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"        Optional\u003cReadOnlyMoviePlanner\u003e moviePlannerOptional;"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        ReadOnlyMoviePlanner initialData;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":98,"author":{"gitID":"qwlai"},"content":"            moviePlannerOptional \u003d storage.readMoviePlanner();"},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"            if (!moviePlannerOptional.isPresent()) {"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"                logger.info(\"Data file not found. Will be starting with a sample MoviePlanner\");"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"            initialData \u003d moviePlannerOptional.orElseGet(SampleDataUtil::getSampleMoviePlanner);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty MoviePlanner\");"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"            initialData \u003d new MoviePlanner();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty MoviePlanner\");"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"            initialData \u003d new MoviePlanner();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":"        return new ModelManager(initialData, userPrefs, email);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":141,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":169,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":172,"author":{"gitID":"qwlai"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty MoviePlanner\");"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":192,"author":{"gitID":"qwlai"},"content":"        logger.info(\"Starting MoviePlanner \" + MainApp.VERSION);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":198,"author":{"gitID":"qwlai"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Movie Planner ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":8,"slothhy":1,"tinyjy94":2,"-":185,"qwlai":22}},{"path":"src/main/java/seedu/address/storage/XmlMoviePlannerStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":" * A class to access MoviePlanner data stored as an xml file on the hard disk."},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"public class XmlMoviePlannerStorage implements MoviePlannerStorage {"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlMoviePlannerStorage.class);"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"    private String filePath;"},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"    private String encryptedFilePath;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"    public XmlMoviePlannerStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"    //@@author tinyjy94"},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"    public XmlMoviePlannerStorage(String filePath, String encryptedFilePath) {"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"        this.encryptedFilePath \u003d encryptedFilePath;"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":"    //@@author"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"    public String getMoviePlannerFilePath() {"},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"        return filePath;"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":"    public String getEncryptedMoviePlannerFilePath() {"},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"        return encryptedFilePath;"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"    public Optional\u003cReadOnlyMoviePlanner\u003e readMoviePlanner() throws DataConversionException, IOException {"},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"        return readMoviePlanner(filePath, encryptedFilePath);"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"     * Similar to {@link #readMoviePlanner()}"},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":53,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"    public Optional\u003cReadOnlyMoviePlanner\u003e readMoviePlanner(String filePath) throws DataConversionException,"},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"            IOException {"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"        requireNonNull(filePath);"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"        File moviePlannerFile \u003d new File(filePath);"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"        if (!moviePlannerFile.exists()) {"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"            logger.info(\"MoviePlanner file \" + moviePlannerFile + \" not found\");"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"            return Optional.empty();"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        XmlSerializableMoviePlanner xmlMoviePlanner \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"        try {"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"            return Optional.of(xmlMoviePlanner.toModelType());"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"            logger.info(\"Illegal values found in \" + moviePlannerFile + \": \" + ive.getMessage());"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"tinyjy94"},"content":"    //@@author tinyjy94"},{"lineNumber":74,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"tinyjy94"},"content":"     * Similar to {@link #readMoviePlanner()}"},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"tinyjy94"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":78,"author":{"gitID":"tinyjy94"},"content":"     * @param encryptedFilePath location of the encrypted data. Returns empty String if null"},{"lineNumber":79,"author":{"gitID":"tinyjy94"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":80,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":"    public Optional\u003cReadOnlyMoviePlanner\u003e readMoviePlanner(String filePath, String encryptedFilePath)"},{"lineNumber":82,"author":{"gitID":"tinyjy94"},"content":"            throws DataConversionException, IOException {"},{"lineNumber":83,"author":{"gitID":"tinyjy94"},"content":"        requireNonNull(filePath);"},{"lineNumber":84,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":"        File moviePlannerFile \u003d new File(filePath);"},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":"        if (encryptedFilePath \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"            encryptedFilePath \u003d \"\";"},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"tinyjy94"},"content":"        File moviePlannerEncryptedFile \u003d new File(encryptedFilePath);"},{"lineNumber":90,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":91,"author":{"gitID":"tinyjy94"},"content":"        if (!moviePlannerFile.exists()) {"},{"lineNumber":92,"author":{"gitID":"tinyjy94"},"content":"            if (!moviePlannerEncryptedFile.exists()) {"},{"lineNumber":93,"author":{"gitID":"tinyjy94"},"content":"                logger.info(\"MoviePlanner file \" + moviePlannerFile + \" not found\");"},{"lineNumber":94,"author":{"gitID":"tinyjy94"},"content":"                return Optional.empty();"},{"lineNumber":95,"author":{"gitID":"tinyjy94"},"content":"            } else {"},{"lineNumber":96,"author":{"gitID":"tinyjy94"},"content":"                return Optional.empty();"},{"lineNumber":97,"author":{"gitID":"tinyjy94"},"content":"            }"},{"lineNumber":98,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":100,"author":{"gitID":"tinyjy94"},"content":"        XmlSerializableMoviePlanner xmlMoviePlanner \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":101,"author":{"gitID":"tinyjy94"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"tinyjy94"},"content":"            return Optional.of(xmlMoviePlanner.toModelType());"},{"lineNumber":103,"author":{"gitID":"tinyjy94"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":104,"author":{"gitID":"tinyjy94"},"content":"            logger.info(\"Illegal values found in \" + moviePlannerFile + \": \" + ive.getMessage());"},{"lineNumber":105,"author":{"gitID":"tinyjy94"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":106,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"tinyjy94"},"content":"    //@@author"},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"    public void saveMoviePlanner(ReadOnlyMoviePlanner moviePlanner) throws IOException {"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"        saveMoviePlanner(moviePlanner, filePath);"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":114,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"     * Similar to {@link #saveMoviePlanner(ReadOnlyMoviePlanner)}"},{"lineNumber":116,"author":{"gitID":"tinyjy94"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":"    public void saveMoviePlanner(ReadOnlyMoviePlanner moviePlanner, String filePath) throws IOException {"},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"        requireNonNull(moviePlanner);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":125,"author":{"gitID":"qwlai"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableMoviePlanner(moviePlanner));"},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"qwlai"},"content":"    public void backupMoviePlanner(ReadOnlyMoviePlanner moviePlanner) throws IOException {"},{"lineNumber":130,"author":{"gitID":"qwlai"},"content":"        saveMoviePlanner(moviePlanner, filePath + \".backup\");"},{"lineNumber":131,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":133,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"tinyjy94":52,"-":21,"qwlai":60}},{"path":"src/main/java/seedu/address/model/movie/MovieName.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":" * Represents a Movie\u0027s name in the movie planner."},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"public class MovieName {"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_MOVIENAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"            \" names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"    public final String movieName;"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"     * @param movieName A valid name."},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"    public MovieName(String movieName) {"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"        requireNonNull(movieName);"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"        checkArgument(isValidName(movieName), MESSAGE_MOVIENAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"        this.movieName \u003d movieName;"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"     * Returns true if a given string is a valid movie name."},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"        return movieName;"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"                || (other instanceof seedu.address.model.movie.MovieName // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.movieName.equals(((MovieName) other).movieName)); // state check"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"        return movieName.hashCode();"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":55,"-":3}},{"path":"src/main/java/seedu/address/model/movie/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":3,"author":{"gitID":"slothhy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":" * Tests that a {@code Movie}\u0027s {@code Tag} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cMovie\u003e {"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"    public boolean containsCaseInsensitive(String s, List\u003cString\u003e l) {"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"        return l.stream().anyMatch(x -\u003e x.equalsIgnoreCase(s));"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"    public boolean test(Movie movie) {"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"        ArrayList\u003cString\u003e tags \u003d new ArrayList();"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"        for (Tag tag : movie.getTags()) {"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"            tags.add(tag.tagName);"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"        return keywords.stream()"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"                .allMatch(keyword -\u003e containsCaseInsensitive(keyword, tags));"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":37,"-":3}},{"path":"src/main/java/seedu/address/model/movie/Duration.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":" * Represents a Movie\u0027s duration in the movie planner."},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDuration(String)}"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"public class Duration {"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_DURATION_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"            \"Duration can only contain numbers\";"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"    public static final String DURATION_VALIDATION_REGEX \u003d \"^[1-9]\\\\d*$\";"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"    public final String duration;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"     * Constructs a {@code Duration}."},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"     * @param duration A valid duration."},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    public Duration(String duration) {"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"        requireNonNull(duration);"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"        checkArgument(isValidDuration(duration), MESSAGE_DURATION_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"        this.duration \u003d duration;"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"     * Returns true if a given string is a valid movie duration."},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"    public static boolean isValidDuration(String test) {"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"        return test.matches(DURATION_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"        return duration;"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"                || (other instanceof Duration // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.duration.equals(((Duration) other).duration)); // state check"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"        return duration.hashCode();"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":50,"-":3}},{"path":"src/main/java/seedu/address/model/movie/exceptions/DuplicateMovieException.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie.exceptions;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":" * Signals that the operation will result in duplicate Movie objects."},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"public class DuplicateMovieException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"    public DuplicateMovieException() {"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"        super(\"Operation would result in duplicate movies\");"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":11,"-":1}},{"path":"src/main/java/seedu/address/model/movie/exceptions/MovieNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie.exceptions;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":3,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"slothhy"},"content":" * Signals that the operation is unable to find the specified movie."},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"public class MovieNotFoundException extends Exception {}"}],"authorContributionMap":{"slothhy":6}},{"path":"src/main/java/seedu/address/model/movie/StartDate.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"import java.time.format.ResolverStyle;"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":" * Represents a Movie\u0027s startDate in the movie planner."},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidStartDate(String)}"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"public class StartDate {"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_STARTDATE_CONSTRAINTS \u003d"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"            \"StartDate must be in this format: DD/MM/YYYY\";"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"    private static final String DATE_TIME_FORMAT \u003d \"dd/MM/uuuu\";"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"    private static final DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT)"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"            .withResolverStyle(ResolverStyle.STRICT);"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"    public final String startDate;"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"     * Constructs a {@code StartDate}."},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"     * @param startDate A valid startDate."},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"    public StartDate(String startDate) {"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"        requireNonNull(startDate);"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"        checkArgument(isValidStartDate(startDate), MESSAGE_STARTDATE_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"     * Returns true if a given string is a valid movie startDate."},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"    public static boolean isValidStartDate(String test) {"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"            LocalDate.parse(test, dtf);"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"            return true;"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"        } catch (DateTimeParseException dtpe) {"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"            System.out.println(dtpe);"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"        return false;"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"        return startDate;"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"                || (other instanceof StartDate // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.startDate.equals(((StartDate) other).startDate)); // state check"},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"        return startDate.hashCode();"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":64,"-":3}},{"path":"src/main/java/seedu/address/model/movie/StartDateAndTagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":3,"author":{"gitID":"slothhy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":" * Tests that a {@code Movie}\u0027s {@code MovieName} matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"public class StartDateAndTagContainsKeywordsPredicate implements Predicate\u003cMovie\u003e {"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"    private final List\u003cString\u003e startDateKeywords;"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"    private final List\u003cString\u003e tagKeywords;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"    public StartDateAndTagContainsKeywordsPredicate(List\u003cString\u003e startDateKeywords, List\u003cString\u003e tagKeywords) {"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"        this.startDateKeywords \u003d startDateKeywords;"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"        this.tagKeywords \u003d tagKeywords;"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    public boolean containsCaseInsensitive(String s, List\u003cString\u003e l) {"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"        return l.stream().anyMatch(x -\u003e x.equalsIgnoreCase(s));"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"    public boolean test(Movie movie) {"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"        ArrayList\u003cString\u003e tags \u003d new ArrayList();"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"        for (Tag tag : movie.getTags()) {"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"            tags.add(tag.tagName);"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"        return startDateKeywords.stream().allMatch"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"                (keyword -\u003e StringUtil.containsWordIgnoreCase(movie.getStartDate().startDate, keyword))"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 tagKeywords.stream().allMatch(keyword -\u003e containsCaseInsensitive(keyword, tags));"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"                || (other instanceof NameAndStartDateContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.startDateKeywords.equals(((StartDateAndTagContainsKeywordsPredicate) other).startDateKeywords)"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.tagKeywords.equals(((StartDateAndTagContainsKeywordsPredicate) other)"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"                .tagKeywords)); // state check"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":44,"-":3}},{"path":"src/main/java/seedu/address/model/movie/NameAndStartDateContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":" * Tests that a {@code Movie}\u0027s {@code MovieName} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"public class NameAndStartDateContainsKeywordsPredicate implements Predicate\u003cMovie\u003e {"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"    private final List\u003cString\u003e nameKeywords;"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"    private final List\u003cString\u003e startDateKeywords;"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"    public NameAndStartDateContainsKeywordsPredicate(List\u003cString\u003e nameKeywords, List\u003cString\u003e startDateKeywords) {"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"        this.nameKeywords \u003d nameKeywords;"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"        this.startDateKeywords \u003d startDateKeywords;"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"    public boolean test(Movie movie) {"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"        return nameKeywords.stream().allMatch"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"                (keyword -\u003e StringUtil.containsWordIgnoreCase(movie.getName().movieName, keyword))"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 startDateKeywords.stream().allMatch"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"                (keyword -\u003e StringUtil.containsWordIgnoreCase(movie.getStartDate().startDate, keyword));"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"                || (other instanceof NameAndStartDateContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.nameKeywords.equals(((NameAndStartDateContainsKeywordsPredicate) other).nameKeywords)"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.startDateKeywords.equals(((NameAndStartDateContainsKeywordsPredicate) other)"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"                .startDateKeywords)); // state check"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":33,"-":5}},{"path":"src/main/java/seedu/address/model/movie/StartDateContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":" * Tests that a {@code Movie}\u0027s {@code StartDate} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"public class StartDateContainsKeywordsPredicate implements Predicate\u003cMovie\u003e {"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"    public StartDateContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"    public boolean test(Movie movie) {"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(movie.getStartDate().startDate, keyword));"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"                || (other instanceof StartDateContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.keywords.equals(((StartDateContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":26,"-":5}},{"path":"src/main/java/seedu/address/model/movie/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":" * Tests that a {@code Movie}\u0027s {@code MovieName} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cMovie\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"    public boolean test(Movie movie) {"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"                .allMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(movie.getName().movieName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":7,"-":24}},{"path":"src/main/java/seedu/address/logic/commands/DeleteScreeningCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CINEMA_INDEX;"},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMOFTHEATERS;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCREENING_DATE_TIME;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.ui.ReloadBrowserPanelEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.screening.Screening;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":" * Delete a movie screening from a cinema theater."},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"public class DeleteScreeningCommand extends UndoableCommand {"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_WORD \u003d \"deletescreening\";"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    public static final String COMMAND_ALIAS \u003d \"ds\";"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a movie screening from a cinema theater. \""},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"            + \"Parameters: \""},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"            + PREFIX_CINEMA_INDEX + \"CINEMA_INDEX \""},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"            + PREFIX_NUMOFTHEATERS + \"THEATER_NUMBER \""},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"            + PREFIX_SCREENING_DATE_TIME + \"SCREEN_DATE_TIME \\n\""},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"            + PREFIX_CINEMA_INDEX + \"2 \""},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"            + PREFIX_NUMOFTHEATERS + \"3 \""},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"            + PREFIX_SCREENING_DATE_TIME + \"13/03/2018 13:35\";"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Screening deleted: %1$s\";"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"    private final Index cinemaIndex;"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"    private final int theaterNumber;"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"    private final LocalDateTime toDeleteScreeningDateTime;"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"    private Cinema cinema;"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    private Cinema updatedCinema;"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"    private Screening toDelete;"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"     * Creates an DeleteScreeningCommand to add the specified {@code Screening}"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"    public DeleteScreeningCommand(Index cinemaIndex, int theaterNumber, LocalDateTime toDeleteScreeningDateTime) {"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        requireNonNull(cinemaIndex);"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"        requireNonNull(theaterNumber);"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"        requireNonNull(toDeleteScreeningDateTime);"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"        this.cinemaIndex \u003d cinemaIndex;"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"        this.theaterNumber \u003d theaterNumber;"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        this.toDeleteScreeningDateTime \u003d toDeleteScreeningDateTime;"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"     * Adds a screening to a cinema and updates the cinema"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"     * @return CommandResult on successful add screening"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        requireNonNull(model);"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"        requireNonNull(cinema);"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"        requireNonNull(updatedCinema);"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"            model.updateCinema(cinema, updatedCinema);"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"            EventsCenter.getInstance().post(new ReloadBrowserPanelEvent(updatedCinema, toDeleteScreeningDateTime));"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        } catch (CinemaNotFoundException cnfe) {"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"            throw new AssertionError(\"The target cinema cannot be missing\");"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"        } catch (DuplicateCinemaException dce) {"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(AddCommand.MESSAGE_DUPLICATE_CINEMA);"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toDelete));"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":87,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"     * Checks that a screening entry is valid and adds it to the updated cinema"},{"lineNumber":89,"author":{"gitID":"qwlai"},"content":"     * @throws CommandException if screening is invalid"},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"        cinema \u003d getValidCinema();"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"        Theater theater \u003d getValidTheater(cinema);"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"        toDelete \u003d getValidScreening(theater);"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        if (toDelete \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_DELETE_SCREENING_DATE_TIME);"},{"lineNumber":98,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"qwlai"},"content":"        updatedCinema \u003d generateUpdatedCinema(theater);"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"qwlai"},"content":"     * Returns a valid screening if it\u0027s found"},{"lineNumber":104,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"qwlai"},"content":"    private Screening getValidScreening(Theater theater) throws CommandException {"},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"        Screening screening \u003d null;"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"        for (Screening s : theater.getScreeningList()) {"},{"lineNumber":108,"author":{"gitID":"qwlai"},"content":"            if (s.getScreeningDateTime().equals(toDeleteScreeningDateTime)) {"},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"                screening \u003d s;"},{"lineNumber":110,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"qwlai"},"content":"        return screening;"},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"qwlai"},"content":"     * Creates and returns a {@code Cinema} with the screening removed"},{"lineNumber":117,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":"    private Cinema generateUpdatedCinema(Theater theater) {"},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":"        ArrayList\u003cTheater\u003e updatedTheaterList \u003d generateUpdatedTheaterList(theater);"},{"lineNumber":120,"author":{"gitID":"qwlai"},"content":"        return new Cinema(cinema.getName(), cinema.getPhone(), cinema.getEmail(),"},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"                cinema.getAddress(), updatedTheaterList);"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":124,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"qwlai"},"content":"     * Generates and returns an updated list of theaters, with the screening removed"},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":"    public ArrayList\u003cTheater\u003e generateUpdatedTheaterList(Theater theater) {"},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"        ArrayList\u003cTheater\u003e updatedTheaterList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":129,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":130,"author":{"gitID":"qwlai"},"content":"        for (Theater t : cinema.getTheaters()) {"},{"lineNumber":131,"author":{"gitID":"qwlai"},"content":"            if (t.equals(theater)) {"},{"lineNumber":132,"author":{"gitID":"qwlai"},"content":"                Theater theaterToBeUpdated \u003d new Theater(t.getTheaterNumber());"},{"lineNumber":133,"author":{"gitID":"qwlai"},"content":"                ArrayList\u003cScreening\u003e updatedScreeningList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"                addScreeningsToExistingTheater(t, theaterToBeUpdated, updatedScreeningList);"},{"lineNumber":136,"author":{"gitID":"qwlai"},"content":"                updatedTheaterList.add(theaterToBeUpdated);"},{"lineNumber":137,"author":{"gitID":"qwlai"},"content":"            } else {"},{"lineNumber":138,"author":{"gitID":"qwlai"},"content":"                updatedTheaterList.add(t);"},{"lineNumber":139,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":140,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"qwlai"},"content":"        return updatedTheaterList;"},{"lineNumber":142,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":144,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"qwlai"},"content":"     * Populates the list of screenings in a theater in the given list"},{"lineNumber":146,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"qwlai"},"content":"    private void addScreeningsToExistingTheater(Theater theater, Theater updatedTheater,"},{"lineNumber":148,"author":{"gitID":"qwlai"},"content":"                                                ArrayList\u003cScreening\u003e screeningList) {"},{"lineNumber":149,"author":{"gitID":"qwlai"},"content":"        for (Screening s : theater.getScreeningList()) {"},{"lineNumber":150,"author":{"gitID":"qwlai"},"content":"            if (!s.equals(toDelete)) {"},{"lineNumber":151,"author":{"gitID":"qwlai"},"content":"                screeningList.add(s);"},{"lineNumber":152,"author":{"gitID":"qwlai"},"content":"            }"},{"lineNumber":153,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"qwlai"},"content":"        updatedTheater.setScreeningList(screeningList);"},{"lineNumber":155,"author":{"gitID":"qwlai"},"content":"        updatedTheater.sortScreeningList();"},{"lineNumber":156,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":158,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"qwlai"},"content":"     * Gets a valid cinema based on the cinema index"},{"lineNumber":160,"author":{"gitID":"qwlai"},"content":"     * @return a valid cinema based on the cinema index"},{"lineNumber":161,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"qwlai"},"content":"    private Cinema getValidCinema() throws CommandException {"},{"lineNumber":163,"author":{"gitID":"qwlai"},"content":"        List\u003cCinema\u003e lastShownCinemaList \u003d model.getFilteredCinemaList();"},{"lineNumber":164,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":165,"author":{"gitID":"qwlai"},"content":"        if (cinemaIndex.getZeroBased() \u003e\u003d lastShownCinemaList.size()) {"},{"lineNumber":166,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CINEMA_DISPLAYED_INDEX);"},{"lineNumber":167,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":169,"author":{"gitID":"qwlai"},"content":"        Cinema cinema \u003d lastShownCinemaList.get(cinemaIndex.getZeroBased());"},{"lineNumber":170,"author":{"gitID":"qwlai"},"content":"        return cinema;"},{"lineNumber":171,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":173,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"qwlai"},"content":"     * Gets a valid theater based on the cinema provided"},{"lineNumber":175,"author":{"gitID":"qwlai"},"content":"     * @return a valid theater based on the cinema provided and theater number"},{"lineNumber":176,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"qwlai"},"content":"    private Theater getValidTheater(Cinema cinema) throws CommandException {"},{"lineNumber":178,"author":{"gitID":"qwlai"},"content":"        int theaterIndex \u003d theaterNumber - 1;"},{"lineNumber":179,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":180,"author":{"gitID":"qwlai"},"content":"        if (theaterIndex \u003e\u003d cinema.getTheaters().size()) {"},{"lineNumber":181,"author":{"gitID":"qwlai"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_THEATER_NUMBER);"},{"lineNumber":182,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":184,"author":{"gitID":"qwlai"},"content":"        Theater theater \u003d cinema.getTheaters().get(theaterIndex);"},{"lineNumber":185,"author":{"gitID":"qwlai"},"content":"        return theater;"},{"lineNumber":186,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":188,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":189,"author":{"gitID":"qwlai"},"content":"    public boolean equals(Object other) {"},{"lineNumber":190,"author":{"gitID":"qwlai"},"content":"        DeleteScreeningCommand ds \u003d (DeleteScreeningCommand) other;"},{"lineNumber":191,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":192,"author":{"gitID":"qwlai"},"content":"        // short circuit if same object"},{"lineNumber":193,"author":{"gitID":"qwlai"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":194,"author":{"gitID":"qwlai"},"content":"            return true;"},{"lineNumber":195,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":197,"author":{"gitID":"qwlai"},"content":"        // instanceof handles nulls"},{"lineNumber":198,"author":{"gitID":"qwlai"},"content":"        if (!(other instanceof DeleteScreeningCommand)) {"},{"lineNumber":199,"author":{"gitID":"qwlai"},"content":"            return false;"},{"lineNumber":200,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":202,"author":{"gitID":"qwlai"},"content":"        return  this.cinemaIndex.equals(ds.cinemaIndex)"},{"lineNumber":203,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 this.theaterNumber \u003d\u003d ds.theaterNumber"},{"lineNumber":204,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(this.cinema, ds.cinema)"},{"lineNumber":205,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(this.updatedCinema, ds.updatedCinema)"},{"lineNumber":206,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(this.toDelete, ds.toDelete)"},{"lineNumber":207,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(this.toDeleteScreeningDateTime, ds.toDeleteScreeningDateTime);"},{"lineNumber":208,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"tinyjy94":1,"-":10,"qwlai":198}},{"path":"src/main/java/seedu/address/model/movie/Rating.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":" * Represents a Movie\u0027s duration in the movie planner."},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"public class Rating {"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"    public static final String MESSAGE_RATING_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"            \"Rating can only contain alphanumeric characters from 2 to 4 characters\";"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"    public static final String RATING_VALIDATION_REGEX \u003d \"^\\\\w{1,4}$\";"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"    public final String rating;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"     * Constructs a {@code Rating}."},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"     * @param rating A valid rating."},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    public Rating(String rating) {"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"        requireNonNull(rating);"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"        checkArgument(isValidRating(rating), MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"        this.rating \u003d rating;"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"     * Returns true if a given string is a valid movie rating."},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"    public static boolean isValidRating(String test) {"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"        return test.matches(RATING_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"        return rating;"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"                || (other instanceof Rating // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.rating.equals(((Rating) other).rating)); // state check"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"        return rating.hashCode();"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":50,"-":3}},{"path":"src/main/java/seedu/address/model/cinema/Cinema.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":" * Represents a Cinema in the movie planner."},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"public class Cinema {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"    private final ArrayList\u003cTheater\u003e theaters;"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    public Cinema(Name name, Phone phone, Email email, Address address, ArrayList\u003cTheater\u003e theaters) {"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"        requireAllNonNull(name, phone, email, address, theaters);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"        this.theaters \u003d theaters;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":"    public ArrayList\u003cTheater\u003e getTheaters() {"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":"        return theaters;"},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"        if (!(other instanceof Cinema)) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        Cinema otherCinema \u003d (Cinema) other;"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        return otherCinema.getName().equals(this.getName())"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 otherCinema.getPhone().equals(this.getPhone())"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 otherCinema.getEmail().equals(this.getEmail())"},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":"                \u0026\u0026 otherCinema.getAddress().equals(this.getAddress());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"        return Objects.hash(name, phone, email, address, theaters);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":84,"author":{"gitID":"tinyjy94"},"content":"                .append(getAddress())"},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":"                .append(\" Theaters: \")"},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":"                .append(getTheaters().size());"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":3,"tinyjy94":12,"-":67,"qwlai":8}},{"path":"src/main/java/seedu/address/model/cinema/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":" * Represents a Cinema\u0027s phone number in the movie planner."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long \""},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"                    + \"with the maximum being 20 digits long.\";"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,20}\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"     * Returns true if a given string is a valid cinema phone number."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":48,"qwlai":6}},{"path":"src/main/java/seedu/address/model/movie/Movie.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"slothhy"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":" * Represents a Movie in the movie planner."},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"public class Movie {"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"    private final MovieName movieName;"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"    private final Duration duration;"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"    private final Rating rating;"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"    private final StartDate startDate;"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"    private final UniqueTagList tags;"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"    public Movie(MovieName movieName, Duration duration, Rating rating, StartDate startDate, Set\u003cTag\u003e tags) {"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"        requireAllNonNull(movieName, duration, rating, startDate);"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"        this.movieName \u003d movieName;"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"        this.duration \u003d duration;"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"        this.rating \u003d rating;"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"    public MovieName getName() {"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"        return movieName;"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"    public Duration getDuration() {"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"        return duration;"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    public Rating getRating() {"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"        return rating;"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"    public StartDate getStartDate() {"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"        return startDate;"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"     * if modification is attempted."},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"            return true;"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"        if (!(other instanceof Movie)) {"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"        Movie otherMovie \u003d (Movie) other;"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"        return otherMovie.getName().equals(this.getName());"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"    public int hashCode() {"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"        return Objects.hash(movieName, duration, rating, startDate, tags);"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"    public String toString() {"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":"        builder.append(getName())"},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"                .append(\" Duration: \")"},{"lineNumber":83,"author":{"gitID":"slothhy"},"content":"                .append(getDuration())"},{"lineNumber":84,"author":{"gitID":"slothhy"},"content":"                .append(\" Rating: \")"},{"lineNumber":85,"author":{"gitID":"slothhy"},"content":"                .append(getRating())"},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"                .append(\" StartDate: \")"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":"                .append(getStartDate())"},{"lineNumber":88,"author":{"gitID":"slothhy"},"content":"                .append(\" Tags: \");"},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":90,"author":{"gitID":"slothhy"},"content":"        return builder.toString();"},{"lineNumber":91,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":88,"-":4}},{"path":"src/main/java/seedu/address/model/movie/NameAndTagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":3,"author":{"gitID":"slothhy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":" * Tests that a {@code Movie}\u0027s {@code MovieName} matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"public class NameAndTagContainsKeywordsPredicate implements Predicate\u003cMovie\u003e {"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"    private final List\u003cString\u003e nameKeywords;"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"    private final List\u003cString\u003e tagKeywords;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"    public NameAndTagContainsKeywordsPredicate(List\u003cString\u003e nameKeywords, List\u003cString\u003e tagKeywords) {"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"        this.nameKeywords \u003d nameKeywords;"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"        this.tagKeywords \u003d tagKeywords;"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"    public boolean containsCaseInsensitive(String s, List\u003cString\u003e l) {"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"        return l.stream().anyMatch(x -\u003e x.equalsIgnoreCase(s));"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"    public boolean test(Movie movie) {"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"        ArrayList\u003cString\u003e tags \u003d new ArrayList();"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"        for (Tag tag : movie.getTags()) {"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"            tags.add(tag.tagName);"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"        return nameKeywords.stream().allMatch"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"                (keyword -\u003e StringUtil.containsWordIgnoreCase(movie.getName().movieName, keyword))"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 tagKeywords.stream().allMatch(keyword -\u003e containsCaseInsensitive(keyword, tags));"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"                || (other instanceof NameAndStartDateContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.nameKeywords.equals(((NameAndTagContainsKeywordsPredicate) other).nameKeywords)"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.tagKeywords.equals(((NameAndTagContainsKeywordsPredicate) other).tagKeywords)); // state check"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":43,"-":3}},{"path":"src/main/java/seedu/address/model/cinema/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":" * Represents a Cinema\u0027s email in the movie planner."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Cinema emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * @param email A valid email address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.value \u003d email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"     * Returns if a given string is a valid cinema email."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":63,"qwlai":4}},{"path":"src/main/java/seedu/address/model/cinema/Theater.java","lines":[{"lineNumber":1,"author":{"gitID":"tinyjy94"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.screening.Screening;"},{"lineNumber":11,"author":{"gitID":"tinyjy94"},"content":"//@@author tinyjy94"},{"lineNumber":12,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"tinyjy94"},"content":" * Represents a theater in cinema"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":15,"author":{"gitID":"tinyjy94"},"content":"public class Theater {"},{"lineNumber":16,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_THEATER_CONSTRAINTS \u003d \"Theater number given should be a positive integer!\";"},{"lineNumber":18,"author":{"gitID":"tinyjy94"},"content":"    public static final String MESSAGE_THEATERSIZE_CONSTRAINTS \u003d \" Theater number given should be less than\""},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"            + \" or equals to 20.\";"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":21,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"tinyjy94"},"content":"     * Theater number must be positive"},{"lineNumber":23,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"tinyjy94"},"content":"    public static final String THEATER_VALIDATION_REGEX \u003d \"^[1-9]\\\\d*$\";"},{"lineNumber":25,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":26,"author":{"gitID":"tinyjy94"},"content":"    private int theaterNumber;"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"    private ArrayList\u003cScreening\u003e screeningList;"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":29,"author":{"gitID":"tinyjy94"},"content":"    public Theater(int theaterNumber) {"},{"lineNumber":30,"author":{"gitID":"tinyjy94"},"content":"        requireNonNull(theaterNumber);"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"        checkArgument(isValidTheater(String.valueOf(theaterNumber)), MESSAGE_THEATER_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"        this.theaterNumber \u003d theaterNumber;"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"        this.screeningList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":"     * Returns true if a given string is a valid theater number."},{"lineNumber":38,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":"    public static boolean isValidTheater(String test) {"},{"lineNumber":40,"author":{"gitID":"tinyjy94"},"content":"        return test.matches(THEATER_VALIDATION_REGEX);"},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":"    public int getTheaterNumber() {"},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":"        return theaterNumber;"},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"    public void setTheaterNumber(int theaterNumber) {"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":"        this.theaterNumber \u003d theaterNumber;"},{"lineNumber":49,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":51,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"tinyjy94"},"content":"     * Adds a screening to the sorted screening list of the theater"},{"lineNumber":53,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"tinyjy94"},"content":"    public void addScreeningToTheater(Screening screening) {"},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"        screeningList.add(screening);"},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"tinyjy94"},"content":"     * Adds a screening to the sorted screening list of the theater"},{"lineNumber":60,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"tinyjy94"},"content":"    public void setScreeningList(ArrayList\u003cScreening\u003e screeningList) {"},{"lineNumber":62,"author":{"gitID":"tinyjy94"},"content":"        this.screeningList \u003d screeningList;"},{"lineNumber":63,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":65,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"tinyjy94"},"content":"     * Sorts the screening list by screening date time"},{"lineNumber":67,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"tinyjy94"},"content":"    public void sortScreeningList() {"},{"lineNumber":69,"author":{"gitID":"tinyjy94"},"content":"        screeningList.sort(Comparator.comparing(Screening::getScreeningDateTime));"},{"lineNumber":70,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":72,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"tinyjy94"},"content":"     * Returns a list of screenings in the theater"},{"lineNumber":74,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"tinyjy94"},"content":"    public ArrayList\u003cScreening\u003e getScreeningList() {"},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":"        return screeningList;"},{"lineNumber":77,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":79,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"tinyjy94"},"content":"     * Delete a screening given in the theater"},{"lineNumber":81,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"tinyjy94"},"content":"    public void deleteScreening(Screening screeningToBeDeleted) {"},{"lineNumber":83,"author":{"gitID":"tinyjy94"},"content":"        screeningList.remove(screeningToBeDeleted);"},{"lineNumber":84,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":86,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":87,"author":{"gitID":"tinyjy94"},"content":"    public boolean equals(Object other) {"},{"lineNumber":88,"author":{"gitID":"tinyjy94"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":89,"author":{"gitID":"tinyjy94"},"content":"            return true;"},{"lineNumber":90,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":92,"author":{"gitID":"tinyjy94"},"content":"        if (!(other instanceof Theater)) {"},{"lineNumber":93,"author":{"gitID":"tinyjy94"},"content":"            return false;"},{"lineNumber":94,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":96,"author":{"gitID":"tinyjy94"},"content":"        Theater otherTheater \u003d (Theater) other;"},{"lineNumber":97,"author":{"gitID":"tinyjy94"},"content":"        return otherTheater.getTheaterNumber() \u003d\u003d this.getTheaterNumber();"},{"lineNumber":98,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":100,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"tinyjy94"},"content":"    public int hashCode() {"},{"lineNumber":102,"author":{"gitID":"tinyjy94"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":103,"author":{"gitID":"tinyjy94"},"content":"        return Objects.hash(theaterNumber, screeningList);"},{"lineNumber":104,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"tinyjy94"},"content":"}"}],"authorContributionMap":{"tinyjy94":98,"-":1,"qwlai":6}},{"path":"src/main/java/seedu/address/model/cinema/exceptions/CinemaNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema.exceptions;"},{"lineNumber":2,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":" * Signals that the operation is unable to find the specified cinema."},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"public class CinemaNotFoundException extends Exception {}"}],"authorContributionMap":{"qwlai":6}},{"path":"src/main/java/seedu/address/model/cinema/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":" * Represents a Cinema\u0027s address in the movie planner."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"            \"Cinema addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"     * Returns true if a given string is a valid cinema email."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":54,"qwlai":4}},{"path":"src/main/java/seedu/address/model/cinema/exceptions/DuplicateCinemaException.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema.exceptions;"},{"lineNumber":2,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":" * Signals that the operation will result in duplicate Cinema objects."},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"public class DuplicateCinemaException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"    public DuplicateCinemaException() {"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"        super(\"Operation would result in duplicate cinemas\");"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"-":1,"qwlai":11}},{"path":"src/main/java/seedu/address/model/cinema/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":" * Represents a Cinema\u0027s name in the movie planner."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"            \"Cinema names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":"     * Returns true if a given string is a valid cinema name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":55,"qwlai":4}},{"path":"src/main/java/seedu/address/model/cinema/NameContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":" * Tests that a {@code Cinema}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cCinema\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"    public boolean test(Cinema cinema) {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(cinema.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":26,"qwlai":5}},{"path":"src/main/java/seedu/address/model/movie/NameAndStartDateAndTagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":3,"author":{"gitID":"slothhy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"slothhy"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":10,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"slothhy"},"content":" * Tests that a {@code Movie}\u0027s {@code MovieName} matches any of the keywords given."},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"public class NameAndStartDateAndTagContainsKeywordsPredicate implements Predicate\u003cMovie\u003e {"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"    private final List\u003cString\u003e nameKeywords;"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"    private final List\u003cString\u003e startDateKeywords;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"    private final List\u003cString\u003e tagKeywords;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"    public NameAndStartDateAndTagContainsKeywordsPredicate(List\u003cString\u003e nameKeywords, List\u003cString\u003e startDateKeywords,"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"                                                    List\u003cString\u003e tagKeywords) {"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"        this.nameKeywords \u003d nameKeywords;"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"        this.startDateKeywords \u003d startDateKeywords;"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"        this.tagKeywords \u003d tagKeywords;"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"    public boolean containsCaseInsensitive(String s, List\u003cString\u003e l) {"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":"        return l.stream().anyMatch(x -\u003e x.equalsIgnoreCase(s));"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"    public boolean test(Movie movie) {"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"        ArrayList\u003cString\u003e tags \u003d new ArrayList();"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"        for (Tag tag : movie.getTags()) {"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"            tags.add(tag.tagName);"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"        return nameKeywords.stream().allMatch"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"                (keyword -\u003e StringUtil.containsWordIgnoreCase(movie.getName().movieName, keyword))"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 startDateKeywords.stream().allMatch"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"                (keyword -\u003e StringUtil.containsWordIgnoreCase(movie.getStartDate().startDate, keyword))"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 tagKeywords.stream().allMatch"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"                (keyword -\u003e containsCaseInsensitive(keyword, tags));"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"                || (other instanceof NameAndStartDateContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.nameKeywords"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"                .equals(((NameAndStartDateAndTagContainsKeywordsPredicate) other).nameKeywords)"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.startDateKeywords"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"                .equals(((NameAndStartDateAndTagContainsKeywordsPredicate) other).startDateKeywords)"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.tagKeywords"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"                .equals(((NameAndStartDateAndTagContainsKeywordsPredicate) other).tagKeywords)); // state check"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":53,"-":3}},{"path":"src/main/java/seedu/address/model/ReadOnlyMoviePlanner.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":" * Unmodifiable view of an movie planner"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"public interface ReadOnlyMoviePlanner {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"     * Returns an unmodifiable view of the cinemas list."},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"     * This list will not contain any duplicate cinemas."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    ObservableList\u003cCinema\u003e getCinemaList();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"     * Returns an unmodifiable view of the movie list"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"     * This list will not contain any duplicate movies."},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"    ObservableList\u003cMovie\u003e getMovieList();"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"tinyjy94"},"content":"     * Returns an unmodifiable view of the theaters list."},{"lineNumber":34,"author":{"gitID":"tinyjy94"},"content":"     * This list will not contain any duplicate theaters."},{"lineNumber":35,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"tinyjy94"},"content":"    ObservableList\u003cTheater\u003e getTheaterList();"},{"lineNumber":37,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":1,"tinyjy94":6,"-":18,"qwlai":13}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"    private String moviePlannerFilePath \u003d \"data/movieplanner.xml\";"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"    private String encryptedMoviePlannerFilePath \u003d \"data/encryptedmovieplanner.xml\";"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"    private String moviePlannerName \u003d \"MyMoviePlanner\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    public String getMoviePlannerFilePath() {"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"        return moviePlannerFilePath;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"    public void setMoviePlannerFilePath(String moviePlannerFilePath) {"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"        this.moviePlannerFilePath \u003d moviePlannerFilePath;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"tinyjy94"},"content":"    public String getEncryptedMoviePlannerFilePath() {"},{"lineNumber":42,"author":{"gitID":"tinyjy94"},"content":"        return encryptedMoviePlannerFilePath;"},{"lineNumber":43,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":45,"author":{"gitID":"tinyjy94"},"content":"    public void setEncryptedMoviePlannerFilePath(String encryptedMoviePlannerFilePath) {"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"        this.encryptedMoviePlannerFilePath \u003d encryptedMoviePlannerFilePath;"},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"    public String getMoviePlannerName() {"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"        return moviePlannerName;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"    public void setMoviePlannerName(String moviePlannerName) {"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"        this.moviePlannerName \u003d moviePlannerName;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":63,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(moviePlannerFilePath, o.moviePlannerFilePath)"},{"lineNumber":70,"author":{"gitID":"tinyjy94"},"content":"                \u0026\u0026 Objects.equals(encryptedMoviePlannerFilePath, o.encryptedMoviePlannerFilePath)"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 Objects.equals(moviePlannerName, o.moviePlannerName);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":"        return Objects.hash(guiSettings, moviePlannerFilePath, encryptedMoviePlannerFilePath, moviePlannerName);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"        sb.append(\"\\nLocal data file location : \" + moviePlannerFilePath);"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"        sb.append(\"\\nMoviePlanner name : \" + moviePlannerName);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"tinyjy94":12,"-":62,"qwlai":14}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.MoviePlanner;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.ReadOnlyMoviePlanner;"},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Address;"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Email;"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Name;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Phone;"},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Duration;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.MovieName;"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Rating;"},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.StartDate;"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.DuplicateMovieException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":" * Contains utility methods for populating {@code MoviePlanner} with sample data."},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    public static Cinema[] getSampleCinemas() {"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"        return new Cinema[] {"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"            new Cinema(new Name(\"Cathay East\"), new Phone(\"67438807\"), new Email(\"cathayeast@cathay.com\"),"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"                new Address(\"Cathay East, #02-03\"),"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"                getTheaterList(3)),"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"            new Cinema(new Name(\"Cathay West\"), new Phone(\"69272758\"), new Email(\"cathaywest@cathay.com\"),"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"                new Address(\"Cathay West, #07-18\"),"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":"                getTheaterList(5)),"},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"            new Cinema(new Name(\"Shaws 1\"), new Phone(\"63210283\"), new Email(\"shaw1@shaw.com\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"                getTheaterList(4)),"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"            new Cinema(new Name(\"Golden Village Jurong\"), new Phone(\"61031282\"), new Email(\"gvj@gv.com\"),"},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #05-43\"),"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"                getTheaterList(3)),"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"            new Cinema(new Name(\"Cathay Cineleisure\"), new Phone(\"62492021\"), new Email(\"cathaycine@cathay.com\"),"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"                new Address(\"6 Orchard, #05-35\"),"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"                getTheaterList(3)),"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"            new Cinema(new Name(\"Cathay North\"), new Phone(\"62624417\"), new Email(\"cathaynorth@cathay.com\"),"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"                new Address(\"45 Woodlands Street 85, #03-31\"),"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"                getTheaterList(7))"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":"        };"},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"    public static Movie[] getSampleMovies() {"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"        return new Movie[] {new Movie(new MovieName(\"Spiderman 1\"), new Duration(\"120\"), new Rating(\"G\"),"},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"                        new StartDate(\"01/02/2000\"), getTagSet(\"superhero\")),"},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"            new Movie(new MovieName(\"Batman\"), new Duration(\"100\"), new Rating(\"PG\"),"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"                        new StartDate(\"06/12/2017\"), getTagSet(\"superhero\", \"thriller\")),"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"            new Movie(new MovieName(\"Insidious\"), new Duration(\"100\"), new Rating(\"NC16\"),"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"                        new StartDate(\"05/05/2012\"), getTagSet(\"horror\", \"ghost\")),"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":"            new Movie(new MovieName(\"Hungry Good\"), new Duration(\"150\"), new Rating(\"M18\"),"},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"                        new StartDate(\"12/11/2015\"), getTagSet(\"comedy\")),"},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"            new Movie(new MovieName(\"Ah Boys to Men 4\"), new Duration(\"80\"), new Rating(\"PG\"),"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"                        new StartDate(\"15/03/2017\"), getTagSet(\"comedy\")),"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"            new Movie(new MovieName(\"Jaws\"), new Duration(\"60\"), new Rating(\"PG\"),"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":"                        new StartDate(\"08/02/2000\"), getTagSet(\"animal\")),"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"    public static ReadOnlyMoviePlanner getSampleMoviePlanner() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"            MoviePlanner sampleAb \u003d new MoviePlanner();"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"            for (Cinema sampleCinema : getSampleCinemas()) {"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"                sampleAb.addCinema(sampleCinema);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"            for (Movie sampleMovie : getSampleMovies()) {"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":"                sampleAb.addMovie(sampleMovie);"},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"            }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"        } catch (DuplicateCinemaException e) {"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate cinemas\", e);"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"        } catch (DuplicateMovieException e) {"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate movies\", e);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"tinyjy94"},"content":"    public static ArrayList\u003cTheater\u003e getTheaterList(int numOfTheaters) {"},{"lineNumber":97,"author":{"gitID":"tinyjy94"},"content":"        ArrayList\u003cTheater\u003e theaters \u003d new ArrayList\u003c\u003e();"},{"lineNumber":98,"author":{"gitID":"tinyjy94"},"content":"        for (int i \u003d 1; i \u003c\u003d numOfTheaters; i++) {"},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":"            theaters.add(new Theater(i));"},{"lineNumber":100,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"tinyjy94"},"content":"        return theaters;"},{"lineNumber":102,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":44,"tinyjy94":10,"-":33,"qwlai":17}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":" * Represents a Tag in the movie planner."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":53,"qwlai":1}},{"path":"src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"tinyjy94"},"content":"package seedu.address.model.tag.exceptions;"},{"lineNumber":2,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":3,"author":{"gitID":"tinyjy94"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"tinyjy94"},"content":" * Signals that the operation is unable to find the specified tag."},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":" */"},{"lineNumber":6,"author":{"gitID":"tinyjy94"},"content":"public class TagNotFoundException extends Exception {}"}],"authorContributionMap":{"tinyjy94":6}},{"path":"src/main/java/seedu/address/model/movie/UniqueMovieList.java","lines":[{"lineNumber":1,"author":{"gitID":"slothhy"},"content":"package seedu.address.model.movie;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.DuplicateMovieException;"},{"lineNumber":14,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.MovieNotFoundException;"},{"lineNumber":15,"author":{"gitID":"slothhy"},"content":"//@@author slothhy"},{"lineNumber":16,"author":{"gitID":"slothhy"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":" * A list of movies that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":" *"},{"lineNumber":19,"author":{"gitID":"slothhy"},"content":" * Supports a minimal set of list operations."},{"lineNumber":20,"author":{"gitID":"slothhy"},"content":" *"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":" * @see Movie#equals(Object)"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":" */"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"public class UniqueMovieList implements Iterable\u003cMovie\u003e {"},{"lineNumber":25,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":26,"author":{"gitID":"slothhy"},"content":"    private final ObservableList\u003cMovie\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"     * Returns true if the list contains an equivalent movie as the given argument."},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"slothhy"},"content":"    public boolean contains(Movie toCheck) {"},{"lineNumber":32,"author":{"gitID":"slothhy"},"content":"        requireNonNull(toCheck);"},{"lineNumber":33,"author":{"gitID":"slothhy"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":34,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":36,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"     * Adds a movie to the list."},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"slothhy"},"content":"     * @throws DuplicateMovieException if the movie to add is a duplicate of an existing movie in the list."},{"lineNumber":40,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"slothhy"},"content":"    public void add(Movie toAdd) throws DuplicateMovieException {"},{"lineNumber":42,"author":{"gitID":"slothhy"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"slothhy"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"slothhy"},"content":"            throw new DuplicateMovieException();"},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"slothhy"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":49,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"slothhy"},"content":"     * Replaces the movie {@code target} in the list with {@code editedMovie}."},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"slothhy"},"content":"     * @throws DuplicateMovieException if the replacement is equivalent to another existing movie in the list."},{"lineNumber":53,"author":{"gitID":"slothhy"},"content":"     * @throws MovieNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"slothhy"},"content":"    public void setMovie(Movie target, Movie editedMovie)"},{"lineNumber":56,"author":{"gitID":"slothhy"},"content":"            throws DuplicateMovieException, MovieNotFoundException {"},{"lineNumber":57,"author":{"gitID":"slothhy"},"content":"        requireNonNull(editedMovie);"},{"lineNumber":58,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":59,"author":{"gitID":"slothhy"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"slothhy"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"slothhy"},"content":"            throw new MovieNotFoundException();"},{"lineNumber":62,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":64,"author":{"gitID":"slothhy"},"content":"        if (!target.equals(editedMovie) \u0026\u0026 internalList.contains(editedMovie)) {"},{"lineNumber":65,"author":{"gitID":"slothhy"},"content":"            throw new DuplicateMovieException();"},{"lineNumber":66,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":68,"author":{"gitID":"slothhy"},"content":"        internalList.set(index, editedMovie);"},{"lineNumber":69,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"     * Removes the equivalent movie from the list."},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":"     * @throws MovieNotFoundException if no such movie could be found in the list."},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"    public boolean remove(Movie toRemove) throws MovieNotFoundException {"},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"        final boolean movieFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"        if (!movieFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"            throw new MovieNotFoundException();"},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"        return movieFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":85,"author":{"gitID":"slothhy"},"content":"    public void setMovies(UniqueMovieList replacement) {"},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":"    public void setMovies(List\u003cMovie\u003e movies) throws DuplicateMovieException {"},{"lineNumber":90,"author":{"gitID":"slothhy"},"content":"        requireAllNonNull(movies);"},{"lineNumber":91,"author":{"gitID":"slothhy"},"content":"        final UniqueMovieList replacement \u003d new UniqueMovieList();"},{"lineNumber":92,"author":{"gitID":"slothhy"},"content":"        for (final Movie movie : movies) {"},{"lineNumber":93,"author":{"gitID":"slothhy"},"content":"            replacement.add(movie);"},{"lineNumber":94,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"slothhy"},"content":"        setMovies(replacement);"},{"lineNumber":96,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":98,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"slothhy"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"slothhy"},"content":"    public ObservableList\u003cMovie\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"slothhy"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":105,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"slothhy"},"content":"    public Iterator\u003cMovie\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"slothhy"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":110,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"slothhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"slothhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"slothhy"},"content":"                || (other instanceof UniqueMovieList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueMovieList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":117,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"slothhy"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"slothhy"},"content":"        return internalList.hashCode();"},{"lineNumber":120,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"slothhy"},"content":"}"}],"authorContributionMap":{"slothhy":111,"-":10}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.AuthenticationFailedException;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.model.MoviePlannerChangedEvent;"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.commons.events.ui.EmailDraftChangedEvent;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.commons.events.ui.ReloadBrowserPanelEvent;"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.Email;"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.EmailManager;"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailMessageEmptyException;"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailRecipientsEmptyException;"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":29,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.DuplicateMovieException;"},{"lineNumber":30,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.MovieNotFoundException;"},{"lineNumber":31,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":" * Represents the in-memory model of the movie planner data."},{"lineNumber":36,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"    private final Email email;"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"    private final MoviePlanner moviePlanner;"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    private final FilteredList\u003cCinema\u003e filteredCinemas;"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"    private final FilteredList\u003cMovie\u003e filteredMovies;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"     * Initializes a ModelManager with the given moviePlanner and userPrefs."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"    public ModelManager(ReadOnlyMoviePlanner moviePlanner, UserPrefs userPrefs, Email email) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"        requireAllNonNull(moviePlanner, userPrefs);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"        logger.fine(\"Initializing with movie planner: \" + moviePlanner + \" and user prefs \" + userPrefs);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"        this.moviePlanner \u003d new MoviePlanner(moviePlanner);"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"        this.email \u003d email;"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        filteredCinemas \u003d new FilteredList\u003c\u003e(this.moviePlanner.getCinemaList());"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"        filteredMovies \u003d new FilteredList\u003c\u003e(this.moviePlanner.getMovieList());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"        this(new MoviePlanner(), new UserPrefs(), new EmailManager());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"    public void resetData(ReadOnlyMoviePlanner newData) {"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"        moviePlanner.resetData(newData);"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"        indicateMoviePlannerChanged();"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"        raise(new ReloadBrowserPanelEvent(moviePlanner));"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"    public ReadOnlyMoviePlanner getMoviePlanner() {"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"        return moviePlanner;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"    public Email getEmailManager() {"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":"        return email;"},{"lineNumber":80,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"    private void indicateMoviePlannerChanged() {"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"        raise(new MoviePlannerChangedEvent(moviePlanner));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":88,"author":{"gitID":"chanyikwai"},"content":"    public void loginEmailAccount(String [] emailLoginDetails) throws EmailLoginInvalidException {"},{"lineNumber":89,"author":{"gitID":"chanyikwai"},"content":"        email.loginEmailAccount(emailLoginDetails);"},{"lineNumber":90,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":92,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"chanyikwai"},"content":"    public void sendEmail(MessageDraft messageDraft) throws EmailLoginInvalidException, EmailMessageEmptyException,"},{"lineNumber":94,"author":{"gitID":"chanyikwai"},"content":"            EmailRecipientsEmptyException, AuthenticationFailedException {"},{"lineNumber":95,"author":{"gitID":"chanyikwai"},"content":"        email.composeEmail(messageDraft);"},{"lineNumber":96,"author":{"gitID":"chanyikwai"},"content":"        email.sendEmail();"},{"lineNumber":97,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":98,"author":{"gitID":"chanyikwai"},"content":"        raise(new EmailDraftChangedEvent(email.getEmailDraft()));"},{"lineNumber":99,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":101,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"chanyikwai"},"content":"    public String getEmailStatus() {"},{"lineNumber":103,"author":{"gitID":"chanyikwai"},"content":"        return email.getEmailStatus();"},{"lineNumber":104,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":106,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"chanyikwai"},"content":"    public void clearEmailDraft() {"},{"lineNumber":108,"author":{"gitID":"chanyikwai"},"content":"        email.clearEmailDraft();"},{"lineNumber":109,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":110,"author":{"gitID":"chanyikwai"},"content":"        raise(new EmailDraftChangedEvent(email.getEmailDraft()));"},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":113,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"chanyikwai"},"content":"    public void draftEmail(MessageDraft message) {"},{"lineNumber":115,"author":{"gitID":"chanyikwai"},"content":"        email.composeEmail(message);"},{"lineNumber":116,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":117,"author":{"gitID":"chanyikwai"},"content":"        raise(new EmailDraftChangedEvent(email.getEmailDraft()));"},{"lineNumber":118,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"    public synchronized void deleteCinema(Cinema target) throws CinemaNotFoundException {"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"        moviePlanner.removeCinema(target);"},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"        indicateMoviePlannerChanged();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":"    public synchronized void addCinema(Cinema cinema) throws DuplicateCinemaException {"},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"        moviePlanner.addCinema(cinema);"},{"lineNumber":129,"author":{"gitID":"qwlai"},"content":"        updateFilteredCinemaList(PREDICATE_SHOW_ALL_CINEMAS);"},{"lineNumber":130,"author":{"gitID":"qwlai"},"content":"        indicateMoviePlannerChanged();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitID":"qwlai"},"content":"    public void updateCinema(Cinema target, Cinema editedCinema)"},{"lineNumber":135,"author":{"gitID":"qwlai"},"content":"            throws DuplicateCinemaException, CinemaNotFoundException {"},{"lineNumber":136,"author":{"gitID":"qwlai"},"content":"        requireAllNonNull(target, editedCinema);"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"qwlai"},"content":"        moviePlanner.updateCinema(target, editedCinema);"},{"lineNumber":139,"author":{"gitID":"qwlai"},"content":"        indicateMoviePlannerChanged();"},{"lineNumber":140,"author":{"gitID":"qwlai"},"content":"        raise(new ReloadBrowserPanelEvent(moviePlanner));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"tinyjy94"},"content":"    public void deleteTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":145,"author":{"gitID":"qwlai"},"content":"        moviePlanner.removeTag(tag);"},{"lineNumber":146,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":148,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"slothhy"},"content":"    public synchronized void deleteMovie(Movie target) throws MovieNotFoundException {"},{"lineNumber":150,"author":{"gitID":"slothhy"},"content":"        moviePlanner.removeMovie(target);"},{"lineNumber":151,"author":{"gitID":"qwlai"},"content":"        indicateMoviePlannerChanged();"},{"lineNumber":152,"author":{"gitID":"qwlai"},"content":"        raise(new ReloadBrowserPanelEvent(moviePlanner));"},{"lineNumber":153,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":155,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":156,"author":{"gitID":"slothhy"},"content":"    public synchronized void addMovie(Movie movie) throws DuplicateMovieException {"},{"lineNumber":157,"author":{"gitID":"qwlai"},"content":"        moviePlanner.addMovie(movie);"},{"lineNumber":158,"author":{"gitID":"slothhy"},"content":"        updateFilteredMovieList(PREDICATE_SHOW_ALL_MOVIES);"},{"lineNumber":159,"author":{"gitID":"qwlai"},"content":"        indicateMoviePlannerChanged();"},{"lineNumber":160,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":162,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"slothhy"},"content":"    public void updateMovie(Movie target, Movie editedMovie)"},{"lineNumber":164,"author":{"gitID":"slothhy"},"content":"            throws DuplicateMovieException, MovieNotFoundException {"},{"lineNumber":165,"author":{"gitID":"slothhy"},"content":"        requireAllNonNull(target, editedMovie);"},{"lineNumber":166,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":167,"author":{"gitID":"slothhy"},"content":"        moviePlanner.updateMovie(target, editedMovie);"},{"lineNumber":168,"author":{"gitID":"qwlai"},"content":"        indicateMoviePlannerChanged();"},{"lineNumber":169,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":171,"author":{"gitID":"qwlai"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Cinema List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"qwlai"},"content":"     * Returns an unmodifiable view of the list of {@code Cinema} backed by the internal list of"},{"lineNumber":175,"author":{"gitID":"qwlai"},"content":"     * {@code moviePlanner}"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":178,"author":{"gitID":"qwlai"},"content":"    public ObservableList\u003cCinema\u003e getFilteredCinemaList() {"},{"lineNumber":179,"author":{"gitID":"qwlai"},"content":"        return FXCollections.unmodifiableObservableList(filteredCinemas);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":183,"author":{"gitID":"qwlai"},"content":"    public void updateFilteredCinemaList(Predicate\u003cCinema\u003e predicate) {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":185,"author":{"gitID":"qwlai"},"content":"        filteredCinemas.setPredicate(predicate);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":202,"author":{"gitID":"qwlai"},"content":"        return moviePlanner.equals(other.moviePlanner)"},{"lineNumber":203,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 filteredCinemas.equals(other.filteredCinemas);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"qwlai"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Movie List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":207,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":208,"author":{"gitID":"qwlai"},"content":"    public ObservableList\u003cMovie\u003e getFilteredMovieList() {"},{"lineNumber":209,"author":{"gitID":"qwlai"},"content":"        return FXCollections.unmodifiableObservableList(filteredMovies);"},{"lineNumber":210,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"slothhy"},"content":"    @Override"},{"lineNumber":213,"author":{"gitID":"slothhy"},"content":"    public void updateFilteredMovieList(Predicate\u003cMovie\u003e predicate) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":215,"author":{"gitID":"slothhy"},"content":"        filteredMovies.setPredicate(predicate);"},{"lineNumber":216,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":51,"slothhy":24,"tinyjy94":6,"-":79,"qwlai":57}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.AuthenticationFailedException;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.Email;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailMessageEmptyException;"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailRecipientsEmptyException;"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":17,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.DuplicateMovieException;"},{"lineNumber":18,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.MovieNotFoundException;"},{"lineNumber":19,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    Predicate\u003cCinema\u003e PREDICATE_SHOW_ALL_CINEMAS \u003d unused -\u003e true;"},{"lineNumber":28,"author":{"gitID":"slothhy"},"content":"    Predicate\u003cMovie\u003e PREDICATE_SHOW_ALL_MOVIES \u003d unused -\u003e true;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"    void resetData(ReadOnlyMoviePlanner newData);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"    /** Returns the MoviePlanner */"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    ReadOnlyMoviePlanner getMoviePlanner();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"    /** Returns the email Manager Component */"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"    Email getEmailManager();"},{"lineNumber":38,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"    /** Deletes the given cinema. */"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"    void deleteCinema(Cinema target) throws CinemaNotFoundException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"    /** Adds the given cinema */"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"    void addCinema(Cinema cinema) throws DuplicateCinemaException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"slothhy"},"content":"    /** Deletes {@code tag} from all {@code Movie}. */"},{"lineNumber":46,"author":{"gitID":"tinyjy94"},"content":"    void deleteTag(Tag tag) throws TagNotFoundException;"},{"lineNumber":47,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"     * Replaces the given cinema {@code target} with {@code editedCinema}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"     * @throws DuplicateCinemaException if updating the cinema\u0027s details causes the cinema to be equivalent to"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"     *      another existing cinema in the list."},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"     * @throws CinemaNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"    void updateCinema(Cinema target, Cinema editedCinema)"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"            throws DuplicateCinemaException, CinemaNotFoundException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"    /** Returns an unmodifiable view of the filtered cinema list */"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":"    ObservableList\u003cCinema\u003e getFilteredCinemaList();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"    /** Returns an unmodifiable view of the filtered movie list */"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    ObservableList\u003cMovie\u003e getFilteredMovieList();"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"     * Updates the filter of the filtered cinema list to filter by the given {@code predicate}."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"    void updateFilteredCinemaList(Predicate\u003cCinema\u003e predicate);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"slothhy"},"content":"    /**Movie Section */"},{"lineNumber":71,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":72,"author":{"gitID":"slothhy"},"content":"    /** Deletes the given movie. */"},{"lineNumber":73,"author":{"gitID":"slothhy"},"content":"    void deleteMovie(Movie target) throws MovieNotFoundException;"},{"lineNumber":74,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":75,"author":{"gitID":"slothhy"},"content":"    /** Adds the given movie */"},{"lineNumber":76,"author":{"gitID":"slothhy"},"content":"    void addMovie(Movie movie) throws DuplicateMovieException;"},{"lineNumber":77,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":78,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"slothhy"},"content":"     * Replaces the given movie {@code target} with {@code editedMovie}."},{"lineNumber":80,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":81,"author":{"gitID":"slothhy"},"content":"     * @throws DuplicateMovieException if updating the movie\u0027s details causes the cinema to be equivalent to"},{"lineNumber":82,"author":{"gitID":"slothhy"},"content":"     *      another existing movie in the list."},{"lineNumber":83,"author":{"gitID":"slothhy"},"content":"     * @throws MovieNotFoundException if {@code target} could not be found in the list."},{"lineNumber":84,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"slothhy"},"content":"    void updateMovie(Movie target, Movie editedMovie)"},{"lineNumber":86,"author":{"gitID":"slothhy"},"content":"            throws DuplicateMovieException, MovieNotFoundException;"},{"lineNumber":87,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":88,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"slothhy"},"content":"     * Updates the filter of the filtered movie list to filter by the given {@code predicate}."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"slothhy"},"content":"    void updateFilteredMovieList(Predicate\u003cMovie\u003e predicate);"},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":94,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"chanyikwai"},"content":"     * Sends email based on input recipient"},{"lineNumber":96,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":97,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailLoginInvalidException if login details is empty"},{"lineNumber":98,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailMessageEmptyException if message is empty"},{"lineNumber":99,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailRecipientsEmptyException if recipients list is empty"},{"lineNumber":100,"author":{"gitID":"chanyikwai"},"content":"     * @throws AuthenticationFailedException if gmail account can\u0027t be logged in"},{"lineNumber":101,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"chanyikwai"},"content":"    void sendEmail(MessageDraft message) throws EmailLoginInvalidException, EmailMessageEmptyException,"},{"lineNumber":103,"author":{"gitID":"chanyikwai"},"content":"            EmailRecipientsEmptyException, AuthenticationFailedException;"},{"lineNumber":104,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":105,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":106,"author":{"gitID":"chanyikwai"},"content":"     * Sets login credentials for sending emails"},{"lineNumber":107,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":108,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailLoginInvalidException if login details is invalid"},{"lineNumber":109,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"chanyikwai"},"content":"    void loginEmailAccount(String [] loginDetails) throws EmailLoginInvalidException;"},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":112,"author":{"gitID":"chanyikwai"},"content":"    /** Returns Email Sent status **/"},{"lineNumber":113,"author":{"gitID":"chanyikwai"},"content":"    String getEmailStatus();"},{"lineNumber":114,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":115,"author":{"gitID":"chanyikwai"},"content":"    /** Clears Email Draft Content **/"},{"lineNumber":116,"author":{"gitID":"chanyikwai"},"content":"    void clearEmailDraft();"},{"lineNumber":117,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":118,"author":{"gitID":"chanyikwai"},"content":"    /** Updates Email draft with given message **/"},{"lineNumber":119,"author":{"gitID":"chanyikwai"},"content":"    void draftEmail(MessageDraft message);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"chanyikwai":35,"slothhy":26,"tinyjy94":4,"-":29,"qwlai":26}},{"path":"src/main/java/seedu/address/email/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.AuthenticationFailedException;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailMessageEmptyException;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailRecipientsEmptyException;"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.ReadOnlyMessageDraft;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":" * Email component and relevant API"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"public interface Email {"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"     * Logins to Email Component with given login information"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailLoginInvalidException when login fails"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"    void loginEmailAccount(String[] loginInformation) throws EmailLoginInvalidException;"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"     * Returns true if user is logged in"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"    boolean isUserLoggedIn();"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"     * Creates a draft email template with a given message"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"    void composeEmail(MessageDraft messageDraft);"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"     * Views Email Draft"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"    ReadOnlyMessageDraft getEmailDraft();"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"     * Views the Email Sent Status"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"    String getEmailStatus();"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"     * Clears the Email Draft content"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"    void clearEmailDraft();"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"     * Sends the Email Draft to all users"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailLoginInvalidException if login details is empty"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailMessageEmptyException if message is empty"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailRecipientsEmptyException if recipients list is empty"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"     * @throws AuthenticationFailedException if gmail account can\u0027t be logged in"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"    void sendEmail() throws EmailLoginInvalidException, EmailMessageEmptyException,"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"            EmailRecipientsEmptyException, AuthenticationFailedException;"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":59}},{"path":"src/main/java/seedu/address/email/EmailCompose.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.DraftList;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.ReadOnlyMessageDraft;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":" * Holds a list of messageDraft"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":" * Handles how messageDraft are created and edited"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"public class EmailCompose {"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"    private DraftList emailDraftsList;"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"    /** Creates an EmailCompose with an empty draft list **/"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"    public EmailCompose() {"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"        emailDraftsList \u003d new DraftList();"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"     * Compose an Email or edit the current one"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"     * @param message"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"    public void composeEmail(MessageDraft message) {"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"        emailDraftsList.composeEmail(message);"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"    public ReadOnlyMessageDraft getMessage() {"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"        return emailDraftsList.getMessage(0);"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"     * Resets the existing data of this {@code emailDraftsList} with an empty draft list"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"    public void resetData() {"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"        emailDraftsList \u003d new DraftList();"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"                || (other instanceof EmailCompose // instanceof handles nulls"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 this.emailDraftsList.equals(((EmailCompose) other).emailDraftsList));"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":46}},{"path":"src/main/java/seedu/address/email/EmailLogin.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":" * Handles how user logs into email"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"public class EmailLogin {"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"    private static final Pattern GMAIL_FORMAT \u003d Pattern.compile(\"^[A-Za-z0-9]+(\\\\.[A-Za-z0-9]+)*(@gmail.com)$\");"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"    private String[] loginDetails;"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"    /** Creates an EmailLogin with an empty login detail */"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"    public EmailLogin() {"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"        loginDetails \u003d new String[0];"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"     * Saves user\u0027s login details"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"     * @param loginDetails login email and password"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailLoginInvalidException if loginDetails is in wrong format"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"    public void loginEmail(String[] loginDetails) throws EmailLoginInvalidException {"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"        //replace login details and ignore if login details is omitted."},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"        if (loginDetails.length !\u003d 0 \u0026\u0026 loginDetails.length \u003d\u003d 2) {"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"            if (wrongUserEmailFormat(loginDetails)) {"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"                throw new EmailLoginInvalidException();"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"            } else {"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"                this.loginDetails \u003d loginDetails;"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"     * Checks if user\u0027s login details have been stored"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"     * @return true if loginDetails is available"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"    public boolean isUserLoggedIn() {"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"        if (loginDetails.length !\u003d 2) {"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"            return false;"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"        } else {"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"            return true;"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"     * Verifies if the user is using a gmail account"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"     * @return true if gmail account, false for everything else"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"    private boolean wrongUserEmailFormat(String [] loginDetails) {"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"        if (loginDetails.length \u003d\u003d 2) {"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"            final Matcher matcher \u003d GMAIL_FORMAT.matcher(loginDetails[0].trim());"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"            if (!matcher.matches()) {"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":"                return true;"},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"        return false;"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":"    /** Returns user\u0027s login email */"},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"    public String getEmailLogin() {"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":"        if (loginDetails.length \u003d\u003d 2) {"},{"lineNumber":70,"author":{"gitID":"chanyikwai"},"content":"            return loginDetails[0];"},{"lineNumber":71,"author":{"gitID":"chanyikwai"},"content":"        } else {"},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":"            return \"\";"},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":76,"author":{"gitID":"chanyikwai"},"content":"    /** Returns user\u0027s login password */"},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"    public String getPassword() {"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"        if (loginDetails.length \u003d\u003d 2) {"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":"            return loginDetails[1];"},{"lineNumber":80,"author":{"gitID":"chanyikwai"},"content":"        } else {"},{"lineNumber":81,"author":{"gitID":"chanyikwai"},"content":"            return \"\";"},{"lineNumber":82,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":85,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":"     * Resets the existing data of this {@code loginDetails} with an empty login"},{"lineNumber":87,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"chanyikwai"},"content":"    public void resetData() {"},{"lineNumber":89,"author":{"gitID":"chanyikwai"},"content":"        loginDetails \u003d new String[0];"},{"lineNumber":90,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":92,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":93,"author":{"gitID":"chanyikwai"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitID":"chanyikwai"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":95,"author":{"gitID":"chanyikwai"},"content":"                || (other instanceof EmailLogin // instanceof handles nulls"},{"lineNumber":96,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 this.loginDetailsEquals(((EmailLogin) other).loginDetails));"},{"lineNumber":97,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":99,"author":{"gitID":"chanyikwai"},"content":"    /** Returns true if both have the same loginDetails */"},{"lineNumber":100,"author":{"gitID":"chanyikwai"},"content":"    private boolean loginDetailsEquals(String [] other) {"},{"lineNumber":101,"author":{"gitID":"chanyikwai"},"content":"        if (loginDetails.length \u003d\u003d other.length) {"},{"lineNumber":102,"author":{"gitID":"chanyikwai"},"content":"            for (int i \u003d 0; i \u003c loginDetails.length; i++) {"},{"lineNumber":103,"author":{"gitID":"chanyikwai"},"content":"                if (loginDetails[i] !\u003d other[i]) {"},{"lineNumber":104,"author":{"gitID":"chanyikwai"},"content":"                    return false;"},{"lineNumber":105,"author":{"gitID":"chanyikwai"},"content":"                }"},{"lineNumber":106,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":107,"author":{"gitID":"chanyikwai"},"content":"            return true;"},{"lineNumber":108,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"chanyikwai"},"content":"        return false;"},{"lineNumber":110,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":107,"-":4}},{"path":"src/main/java/seedu/address/email/EmailManager.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.AuthenticationFailedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailMessageEmptyException;"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailRecipientsEmptyException;"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.MessageDraft;"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.ReadOnlyMessageDraft;"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":" * Handles the process of sending out email via MVP"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"public class EmailManager extends ComponentManager implements Email {"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(EmailManager.class);"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"    private static final String STATUS_CLEARED \u003d \"cleared.\";"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"    private static final String STATUS_DRAFTED \u003d \"drafted.\\n\";"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"    private static final String STATUS_SENT \u003d \"sent \";"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"    private static final String STATUS_LOGIN_FAIL \u003d \"You are not logged in to a Gmail account.\";"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"    private static final String STATUS_LOGIN_SENT \u003d \"using %1$s\";"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"    private static final String STATUS_LOGIN_SUCCESS \u003d \"You are logged in to %1$s\";"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"    private final EmailLogin emailLogin;"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"    private final EmailCompose emailCompose;"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"    private final EmailSend emailSend;"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"    private String emailStatus;"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"    private String emailLoginStatus;"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"     * Initialize EmailManager with EmailLogin, EmailCompose and EmailSend"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"    public EmailManager() {"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"        logger.fine(\"Initializing Default Email component\");"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"        emailLogin \u003d new EmailLogin();"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"        emailCompose \u003d new EmailCompose();"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"        emailSend \u003d new EmailSend();"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"        emailStatus \u003d \"\";"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        emailLoginStatus \u003d STATUS_LOGIN_FAIL;"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"    public void composeEmail(MessageDraft message) {"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"        emailCompose.composeEmail(message);"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"        emailStatus \u003d STATUS_DRAFTED;"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"    public ReadOnlyMessageDraft getEmailDraft() {"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"        return emailCompose.getMessage();"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":"    public String getEmailStatus() {"},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"        return emailStatus + emailLoginStatus;"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":"    public void sendEmail() throws EmailLoginInvalidException, EmailMessageEmptyException,"},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":"            EmailRecipientsEmptyException, AuthenticationFailedException {"},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"        logger.info(\"-------------------[Sending Email] \");"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":70,"author":{"gitID":"chanyikwai"},"content":"        emailSend.sendEmail(emailCompose, emailLogin);"},{"lineNumber":71,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":"        //reset the email draft after email have been sent"},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":"        emailStatus \u003d STATUS_SENT;"},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":"        emailLoginStatus \u003d String.format(STATUS_LOGIN_SENT, emailLogin.getEmailLogin());"},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":"        resetData();"},{"lineNumber":76,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":"    public void loginEmailAccount(String [] emailLoginDetails) throws EmailLoginInvalidException {"},{"lineNumber":80,"author":{"gitID":"chanyikwai"},"content":"        emailLogin.loginEmail(emailLoginDetails);"},{"lineNumber":81,"author":{"gitID":"chanyikwai"},"content":"        if (emailLogin.isUserLoggedIn()) {"},{"lineNumber":82,"author":{"gitID":"chanyikwai"},"content":"            emailLoginStatus \u003d String.format(STATUS_LOGIN_SUCCESS, emailLogin.getEmailLogin());"},{"lineNumber":83,"author":{"gitID":"chanyikwai"},"content":"        } else {"},{"lineNumber":84,"author":{"gitID":"chanyikwai"},"content":"            emailLoginStatus \u003d STATUS_LOGIN_FAIL;"},{"lineNumber":85,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":88,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"chanyikwai"},"content":"     * Returns true if the emailLogin contains user\u0027s login details"},{"lineNumber":90,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"chanyikwai"},"content":"    public boolean isUserLoggedIn() {"},{"lineNumber":93,"author":{"gitID":"chanyikwai"},"content":"        return emailLogin.isUserLoggedIn();"},{"lineNumber":94,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":96,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":97,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"chanyikwai"},"content":"    public void clearEmailDraft() {"},{"lineNumber":99,"author":{"gitID":"chanyikwai"},"content":"        resetData();"},{"lineNumber":100,"author":{"gitID":"chanyikwai"},"content":"        emailStatus \u003d STATUS_CLEARED;"},{"lineNumber":101,"author":{"gitID":"chanyikwai"},"content":"        emailLoginStatus \u003d \"\";"},{"lineNumber":102,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":104,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"chanyikwai"},"content":"     * Resets the existing data of this {@code emailCompose} and this {@code emailLogin}"},{"lineNumber":106,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"chanyikwai"},"content":"    private void resetData() {"},{"lineNumber":108,"author":{"gitID":"chanyikwai"},"content":"        emailCompose.resetData();"},{"lineNumber":109,"author":{"gitID":"chanyikwai"},"content":"        emailLogin.resetData();"},{"lineNumber":110,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":112,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"chanyikwai"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":114,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":115,"author":{"gitID":"chanyikwai"},"content":"        // short circuit if same object"},{"lineNumber":116,"author":{"gitID":"chanyikwai"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":117,"author":{"gitID":"chanyikwai"},"content":"            return true;"},{"lineNumber":118,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":120,"author":{"gitID":"chanyikwai"},"content":"        // instanceof handles nulls"},{"lineNumber":121,"author":{"gitID":"chanyikwai"},"content":"        if (!(obj instanceof EmailManager)) {"},{"lineNumber":122,"author":{"gitID":"chanyikwai"},"content":"            return false;"},{"lineNumber":123,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":125,"author":{"gitID":"chanyikwai"},"content":"        // state check"},{"lineNumber":126,"author":{"gitID":"chanyikwai"},"content":"        EmailManager other \u003d (EmailManager) obj;"},{"lineNumber":127,"author":{"gitID":"chanyikwai"},"content":"        return this.emailCompose.equals(((EmailManager) obj).emailCompose)"},{"lineNumber":128,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 this.emailLogin.equals(((EmailManager) obj).emailLogin);"},{"lineNumber":129,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":127,"-":3}},{"path":"src/main/java/seedu/address/model/screening/Screening.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.screening;"},{"lineNumber":2,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":3,"author":{"gitID":"qwlai"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitID":"qwlai"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitID":"qwlai"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":7,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":8,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":9,"author":{"gitID":"qwlai"},"content":"//@@author qwlai"},{"lineNumber":10,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"qwlai"},"content":" * Represents a movie screening in a cinema theater"},{"lineNumber":12,"author":{"gitID":"qwlai"},"content":" */"},{"lineNumber":13,"author":{"gitID":"qwlai"},"content":"public class Screening {"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"    private final String movieName;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"    private Theater theater;"},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"    private final LocalDateTime screeningDateTime;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"    private final LocalDateTime screeningEndDateTime;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"    public Screening(String movieName, Theater theater, LocalDateTime screeningDateTime,"},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":"                     LocalDateTime screeningEndDateTime) {"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":"        this.movieName \u003d movieName;"},{"lineNumber":23,"author":{"gitID":"qwlai"},"content":"        this.theater \u003d theater;"},{"lineNumber":24,"author":{"gitID":"qwlai"},"content":"        this.screeningDateTime \u003d screeningDateTime;"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"        this.screeningEndDateTime \u003d screeningEndDateTime;"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":"    public String getMovieName() {"},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"        return movieName;"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"    public Theater getTheater() {"},{"lineNumber":33,"author":{"gitID":"qwlai"},"content":"        return theater;"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    public LocalDateTime getScreeningDateTime() {"},{"lineNumber":37,"author":{"gitID":"qwlai"},"content":"        return screeningDateTime;"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"    public LocalDateTime getScreeningEndDateTime() {"},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"        return screeningEndDateTime;"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"    public void setTheater(Theater t) {"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"        this.theater \u003d t;"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"        builder.append(\"Movie: \")"},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"                .append(getMovieName())"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"                .append(\" Theater: \")"},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"                .append(theater.getTheaterNumber())"},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"                .append(\" Date: \")"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"                .append(screeningDateTime.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\")));"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"        return builder.toString();"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"qwlai"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"            return true;"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"        if (!(other instanceof Screening)) {"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"            return false;"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"        Screening otherScreening \u003d (Screening) other;"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":"        return otherScreening.getMovieName().equals(this.getMovieName())"},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 otherScreening.getScreeningDateTime().equals(this.getScreeningDateTime())"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 otherScreening.getScreeningEndDateTime().equals(this.getScreeningEndDateTime());"},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"    public int hashCode() {"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        return Objects.hash(movieName, theater, screeningDateTime, screeningEndDateTime);"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"}"}],"authorContributionMap":{"qwlai":81}},{"path":"src/main/java/seedu/address/model/MoviePlanner.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"tinyjy94"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"tinyjy94"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.Cinema;"},{"lineNumber":17,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.cinema.Theater;"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.UniqueCinemaList;"},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":21,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.Movie;"},{"lineNumber":22,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.UniqueMovieList;"},{"lineNumber":23,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.DuplicateMovieException;"},{"lineNumber":24,"author":{"gitID":"slothhy"},"content":"import seedu.address.model.movie.exceptions.MovieNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":27,"author":{"gitID":"tinyjy94"},"content":"import seedu.address.model.tag.exceptions.TagNotFoundException;"},{"lineNumber":28,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":" * Wraps all data at the movie-planner level"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"qwlai"},"content":"public class MoviePlanner implements ReadOnlyMoviePlanner {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"qwlai"},"content":"    private final UniqueCinemaList cinemas;"},{"lineNumber":37,"author":{"gitID":"slothhy"},"content":"    private final UniqueMovieList movies;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":39,"author":{"gitID":"tinyjy94"},"content":"    private ArrayList\u003cTheater\u003e theaters;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":"        cinemas \u003d new UniqueCinemaList();"},{"lineNumber":50,"author":{"gitID":"tinyjy94"},"content":"        theaters \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"slothhy"},"content":"        movies \u003d new UniqueMovieList();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"tinyjy94"},"content":"    public MoviePlanner() {"},{"lineNumber":56,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":57,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"qwlai"},"content":"     * Creates an MoviePlanner using the Cinemas, Tags and Movies in the {@code toBeCopied}"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"    public MoviePlanner(ReadOnlyMoviePlanner toBeCopied) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"    public void setCinemas(List\u003cCinema\u003e cinemas) throws DuplicateCinemaException {"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"        this.cinemas.setCinemas(cinemas);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"tinyjy94"},"content":"    public void setTheaters(ArrayList\u003cTheater\u003e theaters) {"},{"lineNumber":74,"author":{"gitID":"tinyjy94"},"content":"        this.theaters \u003d theaters;"},{"lineNumber":75,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"    public void setMovies(List\u003cMovie\u003e movies) throws DuplicateMovieException {"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        this.movies.setMovies(movies);"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":"     * Resets the existing data of this {@code MoviePlanner} with {@code newData}."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"qwlai"},"content":"    public void resetData(ReadOnlyMoviePlanner newData) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":91,"author":{"gitID":"tinyjy94"},"content":"        setTheaters(new ArrayList\u003c\u003e(newData.getTheaterList()));"},{"lineNumber":92,"author":{"gitID":"slothhy"},"content":"        List\u003cCinema\u003e syncedCinemaList \u003d newData.getCinemaList();"},{"lineNumber":93,"author":{"gitID":"slothhy"},"content":"        List\u003cMovie\u003e syncedMovieList \u003d newData.getMovieList().stream()"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"qwlai"},"content":"            setCinemas(syncedCinemaList);"},{"lineNumber":98,"author":{"gitID":"slothhy"},"content":"            setMovies(syncedMovieList);"},{"lineNumber":99,"author":{"gitID":"tinyjy94"},"content":"        } catch (DuplicateCinemaException dce) {"},{"lineNumber":100,"author":{"gitID":"qwlai"},"content":"            throw new AssertionError(\"MoviePlanners should not have duplicate Cinemas\");"},{"lineNumber":101,"author":{"gitID":"slothhy"},"content":"        } catch (DuplicateMovieException dme) {"},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"            throw new AssertionError(\"MoviePlanners should not have duplicate Movies\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"qwlai"},"content":"    //// Cinema-level operations"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"qwlai"},"content":"     * Adds a Cinema to the movie planner."},{"lineNumber":110,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":111,"author":{"gitID":"qwlai"},"content":"     * @throws DuplicateCinemaException if an equivalent Cinema already exists."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"qwlai"},"content":"    public void addCinema(Cinema c) throws DuplicateCinemaException {"},{"lineNumber":114,"author":{"gitID":"slothhy"},"content":"        cinemas.add(c);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"qwlai"},"content":"     * Replaces the given Cinema {@code target} in the list with {@code editedCinema}."},{"lineNumber":119,"author":{"gitID":"qwlai"},"content":"     * {@code MoviePlanner}\u0027s tag list will be updated with the tags of {@code editedCinema}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":121,"author":{"gitID":"qwlai"},"content":"     * @throws DuplicateCinemaException if updating the Cinema\u0027s details causes the Cinema to be equivalent to"},{"lineNumber":122,"author":{"gitID":"qwlai"},"content":"     *      another existing Cinema in the list."},{"lineNumber":123,"author":{"gitID":"qwlai"},"content":"     * @throws CinemaNotFoundException if {@code target} could not be found in the list."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitID":"qwlai"},"content":"    public void updateCinema(Cinema target, Cinema editedCinema)"},{"lineNumber":127,"author":{"gitID":"qwlai"},"content":"            throws DuplicateCinemaException, CinemaNotFoundException {"},{"lineNumber":128,"author":{"gitID":"qwlai"},"content":"        requireNonNull(editedCinema);"},{"lineNumber":129,"author":{"gitID":"slothhy"},"content":"        cinemas.setCinema(target, editedCinema);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"slothhy"},"content":"     *  Updates the master tag list to include tags in {@code Movie} that are not in the list."},{"lineNumber":134,"author":{"gitID":"slothhy"},"content":"     *  @return a copy of this {@code Movie} such that every tag in this Movie points to a Tag object in the master"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"slothhy"},"content":"    private Movie syncWithMasterTagList(Movie movie) {"},{"lineNumber":138,"author":{"gitID":"slothhy"},"content":"        final UniqueTagList movieTags \u003d new UniqueTagList(movie.getTags());"},{"lineNumber":139,"author":{"gitID":"slothhy"},"content":"        tags.mergeFrom(movieTags);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":142,"author":{"gitID":"slothhy"},"content":"        // used for checking Movie tag references"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"slothhy"},"content":"        // Rebuild the list of Movie tags to point to the relevant tags in the master tag list."},{"lineNumber":147,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":148,"author":{"gitID":"slothhy"},"content":"        movieTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":149,"author":{"gitID":"slothhy"},"content":"        return new Movie("},{"lineNumber":150,"author":{"gitID":"slothhy"},"content":"                movie.getName(), movie.getDuration(), movie.getRating(),"},{"lineNumber":151,"author":{"gitID":"slothhy"},"content":"                movie.getStartDate(), correctTagReferences);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"qwlai"},"content":"     * Removes {@code key} from this {@code MoviePlanner}."},{"lineNumber":156,"author":{"gitID":"qwlai"},"content":"     * @throws CinemaNotFoundException if the {@code key} is not in this {@code MoviePlanner}."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"qwlai"},"content":"    public boolean removeCinema(Cinema key) throws CinemaNotFoundException {"},{"lineNumber":159,"author":{"gitID":"qwlai"},"content":"        if (cinemas.remove(key)) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":162,"author":{"gitID":"qwlai"},"content":"            throw new CinemaNotFoundException();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"qwlai"},"content":"    * Adds a Theater to the movie planner"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    */"},{"lineNumber":169,"author":{"gitID":"tinyjy94"},"content":"    public void addTheater(Theater t) {"},{"lineNumber":170,"author":{"gitID":"tinyjy94"},"content":"        theaters.add(t);"},{"lineNumber":171,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":173,"author":{"gitID":"qwlai"},"content":"    //// Tag-level operations"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"qwlai"},"content":"     * Removes {@code tag} from this {@code MoviePlanner}"},{"lineNumber":181,"author":{"gitID":"qwlai"},"content":"     * @throws TagNotFoundException if the {@code tag} is not found in this {@code MoviePlanner}."},{"lineNumber":182,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"tinyjy94"},"content":"    public void removeTag(Tag tag) throws TagNotFoundException {"},{"lineNumber":184,"author":{"gitID":"tinyjy94"},"content":"        if (tags.contains(tag)) {"},{"lineNumber":185,"author":{"gitID":"slothhy"},"content":"            for (Movie movie : movies) {"},{"lineNumber":186,"author":{"gitID":"slothhy"},"content":"                removeTagFromMovie(tag, movie);"},{"lineNumber":187,"author":{"gitID":"tinyjy94"},"content":"            }"},{"lineNumber":188,"author":{"gitID":"tinyjy94"},"content":"        } else {"},{"lineNumber":189,"author":{"gitID":"tinyjy94"},"content":"            throw new TagNotFoundException();"},{"lineNumber":190,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":193,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"tinyjy94"},"content":"     * Removes {@code tag} from {@code cinema} if tag is found."},{"lineNumber":195,"author":{"gitID":"tinyjy94"},"content":"     *"},{"lineNumber":196,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"slothhy"},"content":"    public void removeTagFromMovie(Tag tag, Movie movie) {"},{"lineNumber":198,"author":{"gitID":"slothhy"},"content":"        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(movie.getTags());"},{"lineNumber":199,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":200,"author":{"gitID":"tinyjy94"},"content":"        if (newTags.remove(tag)) {"},{"lineNumber":201,"author":{"gitID":"slothhy"},"content":"            Movie newMovie \u003d new Movie(movie.getName(), movie.getDuration(), movie.getRating(),"},{"lineNumber":202,"author":{"gitID":"slothhy"},"content":"                                          movie.getStartDate(), newTags);"},{"lineNumber":203,"author":{"gitID":"tinyjy94"},"content":"            try {"},{"lineNumber":204,"author":{"gitID":"slothhy"},"content":"                updateMovie(movie, newMovie);"},{"lineNumber":205,"author":{"gitID":"slothhy"},"content":"            } catch (MovieNotFoundException mnfe) {"},{"lineNumber":206,"author":{"gitID":"slothhy"},"content":"                throw new AssertionError(\"Movie should not be missing\");"},{"lineNumber":207,"author":{"gitID":"slothhy"},"content":"            } catch (DuplicateMovieException dme) {"},{"lineNumber":208,"author":{"gitID":"slothhy"},"content":"                throw new AssertionError(\"Removing tag should not result in duplicate movies\");"},{"lineNumber":209,"author":{"gitID":"tinyjy94"},"content":"            }"},{"lineNumber":210,"author":{"gitID":"tinyjy94"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":213,"author":{"gitID":"tinyjy94"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"tinyjy94"},"content":"     * Removes {@code tag} if tag is not used"},{"lineNumber":215,"author":{"gitID":"tinyjy94"},"content":"     *"},{"lineNumber":216,"author":{"gitID":"tinyjy94"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"tinyjy94"},"content":"    public void removeUnusedTags() {"},{"lineNumber":218,"author":{"gitID":"slothhy"},"content":"        Set\u003cTag\u003e tagsOfMovies \u003d movies.asObservableList()"},{"lineNumber":219,"author":{"gitID":"tinyjy94"},"content":"                                        .stream()"},{"lineNumber":220,"author":{"gitID":"slothhy"},"content":"                                        .flatMap(movie -\u003e movie.getTags().stream())"},{"lineNumber":221,"author":{"gitID":"tinyjy94"},"content":"                                        .collect(Collectors.toSet());"},{"lineNumber":222,"author":{"gitID":"slothhy"},"content":"        tags.setTags(tagsOfMovies);"},{"lineNumber":223,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":225,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":226,"author":{"gitID":"qwlai"},"content":"    //// Movie-level operations"},{"lineNumber":227,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":228,"author":{"gitID":"qwlai"},"content":"     * Adds a Movie to the movie planner."},{"lineNumber":229,"author":{"gitID":"slothhy"},"content":"     * Also checks the new Movie\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":230,"author":{"gitID":"slothhy"},"content":"     * and updates the Tag objects in the Movie to point to those in {@link #tags}."},{"lineNumber":231,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":232,"author":{"gitID":"slothhy"},"content":"     * @throws DuplicateMovieException if an equivalent Movie already exists."},{"lineNumber":233,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"slothhy"},"content":"    public void addMovie(Movie m) throws DuplicateMovieException {"},{"lineNumber":235,"author":{"gitID":"slothhy"},"content":"        Movie movie \u003d syncWithMasterTagList(m);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":237,"author":{"gitID":"qwlai"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any Cinema"},{"lineNumber":238,"author":{"gitID":"qwlai"},"content":"        // in the Cinema list."},{"lineNumber":239,"author":{"gitID":"slothhy"},"content":"        movies.add(movie);"},{"lineNumber":240,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"qwlai"},"content":"     * Removes {@code key} from this {@code MoviePlanner}."},{"lineNumber":244,"author":{"gitID":"slothhy"},"content":"     * @throws MovieNotFoundException if the {@code key} is not in this {@code MoviePlanner}."},{"lineNumber":245,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":246,"author":{"gitID":"slothhy"},"content":"    public boolean removeMovie(Movie key) throws MovieNotFoundException {"},{"lineNumber":247,"author":{"gitID":"slothhy"},"content":"        if (movies.remove(key)) {"},{"lineNumber":248,"author":{"gitID":"slothhy"},"content":"            return true;"},{"lineNumber":249,"author":{"gitID":"slothhy"},"content":"        } else {"},{"lineNumber":250,"author":{"gitID":"slothhy"},"content":"            throw new MovieNotFoundException();"},{"lineNumber":251,"author":{"gitID":"slothhy"},"content":"        }"},{"lineNumber":252,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":254,"author":{"gitID":"slothhy"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"slothhy"},"content":"     * Replaces the given Movie {@code target} in the list with {@code editedMovie}."},{"lineNumber":256,"author":{"gitID":"slothhy"},"content":"     * {@code MoviePlanner}\u0027s tag list will be updated with the tags of {@code editedMovie}."},{"lineNumber":257,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":258,"author":{"gitID":"slothhy"},"content":"     * @throws DuplicateMovieException if updating the Movie\u0027s details causes the Movie to be equivalent to"},{"lineNumber":259,"author":{"gitID":"slothhy"},"content":"     *      another existing Movie in the list."},{"lineNumber":260,"author":{"gitID":"slothhy"},"content":"     * @throws MovieNotFoundException if {@code target} could not be found in the list."},{"lineNumber":261,"author":{"gitID":"slothhy"},"content":"     *"},{"lineNumber":262,"author":{"gitID":"slothhy"},"content":"     * @see #syncWithMasterTagList(Movie)"},{"lineNumber":263,"author":{"gitID":"slothhy"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"slothhy"},"content":"    public void updateMovie(Movie target, Movie editedMovie)"},{"lineNumber":265,"author":{"gitID":"slothhy"},"content":"            throws DuplicateMovieException, MovieNotFoundException {"},{"lineNumber":266,"author":{"gitID":"slothhy"},"content":"        requireNonNull(editedMovie);"},{"lineNumber":267,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":268,"author":{"gitID":"slothhy"},"content":"        Movie syncedEditedMovie \u003d syncWithMasterTagList(editedMovie);"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":270,"author":{"gitID":"qwlai"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any Cinema"},{"lineNumber":271,"author":{"gitID":"qwlai"},"content":"        // in the Cinema list."},{"lineNumber":272,"author":{"gitID":"slothhy"},"content":"        movies.setMovie(target, syncedEditedMovie);"},{"lineNumber":273,"author":{"gitID":"slothhy"},"content":"        removeUnusedTags();"},{"lineNumber":274,"author":{"gitID":"slothhy"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":276,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":277,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":279,"author":{"gitID":"slothhy"},"content":"        return cinemas.asObservableList().size() + \" Cinemas, \" + movies.asObservableList().size() + \" movies, \""},{"lineNumber":280,"author":{"gitID":"slothhy"},"content":"                + tags.asObservableList().size() +  \" tags, \";"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"-"},"content":""},{"lineNumber":284,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":285,"author":{"gitID":"qwlai"},"content":"    public ObservableList\u003cCinema\u003e getCinemaList() {"},{"lineNumber":286,"author":{"gitID":"qwlai"},"content":"        return cinemas.asObservableList();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"qwlai"},"content":"    @Override"},{"lineNumber":290,"author":{"gitID":"qwlai"},"content":"    public ObservableList\u003cMovie\u003e getMovieList() {"},{"lineNumber":291,"author":{"gitID":"qwlai"},"content":"        return movies.asObservableList();"},{"lineNumber":292,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":293,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":294,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":297,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"tinyjy94"},"content":"    @Override"},{"lineNumber":300,"author":{"gitID":"tinyjy94"},"content":"    public ObservableList\u003cTheater\u003e getTheaterList() {"},{"lineNumber":301,"author":{"gitID":"tinyjy94"},"content":"        return FXCollections.observableList(theaters);"},{"lineNumber":302,"author":{"gitID":"tinyjy94"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"tinyjy94"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":307,"author":{"gitID":"qwlai"},"content":"                || (other instanceof MoviePlanner // instanceof handles nulls"},{"lineNumber":308,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 this.cinemas.equals(((MoviePlanner) other).cinemas)"},{"lineNumber":309,"author":{"gitID":"slothhy"},"content":"                \u0026\u0026 this.movies.equals(((MoviePlanner) other).movies)"},{"lineNumber":310,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((MoviePlanner) other).tags)"},{"lineNumber":311,"author":{"gitID":"qwlai"},"content":"                \u0026\u0026 this.theaters.equals(((MoviePlanner) other).theaters));"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":317,"author":{"gitID":"slothhy"},"content":"        return Objects.hash(cinemas, movies, tags, theaters);"},{"lineNumber":318,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":319,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":80,"tinyjy94":55,"-":120,"qwlai":64}},{"path":"src/main/java/seedu/address/email/message/ReadOnlyMessageDraft.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email.message;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":" * A read-only immutable interface for a email message in the addressbook."},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":" * Implementations should guarantee: details are present and not null, field values are validated."},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"public interface ReadOnlyMessageDraft {"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"    String getMessage();"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"    String getSubject();"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"    String getRecipient();"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"    String getRelativeFilePath();"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"     * Returns true if message and subject is not empty"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"    boolean containsContent();"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"     * Returns true if both have the same state. (interfaces cannot override .equals)"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"    default boolean isSameStateAs(ReadOnlyMessageDraft other) {"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"                || (other !\u003d null // this is first to avoid NPE below"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 other.getMessage().equals(this.getMessage()) // state checks here onwards"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 other.getSubject().equals(this.getSubject())"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 other.getRecipient().equals(this.getRecipient())"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 other.getRelativeFilePath().equals(this.getRelativeFilePath()));"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":31}},{"path":"src/main/java/seedu/address/email/EmailSend.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"import java.util.Properties;"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":"import javax.activation.DataHandler;"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"import javax.activation.DataSource;"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"import javax.activation.FileDataSource;"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.AuthenticationFailedException;"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.BodyPart;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.Message;"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.MessagingException;"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.Multipart;"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.PasswordAuthentication;"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.Session;"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.Transport;"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.internet.InternetAddress;"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.internet.MimeBodyPart;"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.internet.MimeMessage;"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"import javax.mail.internet.MimeMultipart;"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailLoginInvalidException;"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailMessageEmptyException;"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.exceptions.EmailRecipientsEmptyException;"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"import seedu.address.email.message.ReadOnlyMessageDraft;"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":" * Handles the process of sending email via JavaAPI"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"public class EmailSend {"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"    private Properties props;"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"     * Creates an EmailSend with an default properties"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"    public EmailSend() {"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"        setUpEmailProperties();"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"     * Sets up the default email properties"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"    private void setUpEmailProperties() {"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"        props \u003d new Properties();"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"        props.put(\"mail.smtp.auth\", \"true\");"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        props.put(\"mail.smtp.host\", \"smtp.gmail.com\");"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"        props.put(\"mail.smtp.socketFactory.port\", \"465\");"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"        props.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\");"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"        props.put(\"mail.smtp.port\", \"465\");"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"     * Handles sending email process"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"     * @param emailCompose contains message to be send"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"     * @param emailLogin contains login details of user"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailLoginInvalidException if login details is empty"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailMessageEmptyException if message is empty"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"     * @throws EmailRecipientsEmptyException if recipients list is empty"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"     * @throws AuthenticationFailedException if gmail account can\u0027t be logged in"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"    public void sendEmail(EmailCompose emailCompose, EmailLogin emailLogin) throws EmailLoginInvalidException,"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"            EmailMessageEmptyException, EmailRecipientsEmptyException, AuthenticationFailedException {"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"        // Verify that the email draft consists of message and subject"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":"        if (!emailCompose.getMessage().containsContent()) {"},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":"            throw new EmailMessageEmptyException();"},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":70,"author":{"gitID":"chanyikwai"},"content":"        // Verify that the user is logged in strictly using only Gmail account."},{"lineNumber":71,"author":{"gitID":"chanyikwai"},"content":"        if (!emailLogin.isUserLoggedIn()) {"},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":"            throw new EmailLoginInvalidException();"},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":"        // Verify that Recipient field is not empty"},{"lineNumber":76,"author":{"gitID":"chanyikwai"},"content":"        if (emailCompose.getMessage().getRecipient().isEmpty()) {"},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"            throw new EmailRecipientsEmptyException();"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":80,"author":{"gitID":"chanyikwai"},"content":"        // Send out email using JavaMail API"},{"lineNumber":81,"author":{"gitID":"chanyikwai"},"content":"        sendingEmail(emailLogin.getEmailLogin(), emailLogin.getPassword(), emailCompose.getMessage());"},{"lineNumber":82,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":84,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"chanyikwai"},"content":"     * Sends email out using JavaMail API"},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":87,"author":{"gitID":"chanyikwai"},"content":"     * @param login email login account"},{"lineNumber":88,"author":{"gitID":"chanyikwai"},"content":"     * @param pass email login password"},{"lineNumber":89,"author":{"gitID":"chanyikwai"},"content":"     * @param message message to send"},{"lineNumber":90,"author":{"gitID":"chanyikwai"},"content":"     * @throws AuthenticationFailedException if gmail account can\u0027t be logged in"},{"lineNumber":91,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"chanyikwai"},"content":"    private void sendingEmail(String login, String pass, ReadOnlyMessageDraft message)"},{"lineNumber":93,"author":{"gitID":"chanyikwai"},"content":"            throws AuthenticationFailedException {"},{"lineNumber":94,"author":{"gitID":"chanyikwai"},"content":"        final String username \u003d login;"},{"lineNumber":95,"author":{"gitID":"chanyikwai"},"content":"        final String password \u003d pass;"},{"lineNumber":96,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":97,"author":{"gitID":"chanyikwai"},"content":"        Session session \u003d Session.getInstance(props, new javax.mail.Authenticator() {"},{"lineNumber":98,"author":{"gitID":"chanyikwai"},"content":"            @Override"},{"lineNumber":99,"author":{"gitID":"chanyikwai"},"content":"            protected PasswordAuthentication getPasswordAuthentication() {"},{"lineNumber":100,"author":{"gitID":"chanyikwai"},"content":"                return new PasswordAuthentication(username, password);"},{"lineNumber":101,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":102,"author":{"gitID":"chanyikwai"},"content":"        });"},{"lineNumber":103,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":104,"author":{"gitID":"chanyikwai"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"chanyikwai"},"content":"            Message newMessage \u003d new MimeMessage(session);"},{"lineNumber":106,"author":{"gitID":"chanyikwai"},"content":"            newMessage.setFrom(new InternetAddress(username));"},{"lineNumber":107,"author":{"gitID":"chanyikwai"},"content":"            InternetAddress recipientEmail \u003d new InternetAddress(message.getRecipient());"},{"lineNumber":108,"author":{"gitID":"chanyikwai"},"content":"            newMessage.setRecipient(Message.RecipientType.TO, recipientEmail);"},{"lineNumber":109,"author":{"gitID":"chanyikwai"},"content":"            newMessage.setSubject(message.getSubject());"},{"lineNumber":110,"author":{"gitID":"chanyikwai"},"content":"            if (message.getRelativeFilePath().isEmpty()) {"},{"lineNumber":111,"author":{"gitID":"chanyikwai"},"content":"                newMessage.setText(message.getMessage());"},{"lineNumber":112,"author":{"gitID":"chanyikwai"},"content":"            } else {"},{"lineNumber":113,"author":{"gitID":"chanyikwai"},"content":"                BodyPart messageBodyPart \u003d new MimeBodyPart();"},{"lineNumber":114,"author":{"gitID":"chanyikwai"},"content":"                messageBodyPart.setText(message.getMessage());"},{"lineNumber":115,"author":{"gitID":"chanyikwai"},"content":"                Multipart multipart \u003d new MimeMultipart();"},{"lineNumber":116,"author":{"gitID":"chanyikwai"},"content":"                multipart.addBodyPart(messageBodyPart);"},{"lineNumber":117,"author":{"gitID":"chanyikwai"},"content":"                messageBodyPart \u003d new MimeBodyPart();"},{"lineNumber":118,"author":{"gitID":"chanyikwai"},"content":"                DataSource source \u003d new FileDataSource(message.getRelativeFilePath());"},{"lineNumber":119,"author":{"gitID":"chanyikwai"},"content":"                messageBodyPart.setDataHandler(new DataHandler(source));"},{"lineNumber":120,"author":{"gitID":"chanyikwai"},"content":"                messageBodyPart.setFileName(message.getRelativeFilePath());"},{"lineNumber":121,"author":{"gitID":"chanyikwai"},"content":"                multipart.addBodyPart(messageBodyPart);"},{"lineNumber":122,"author":{"gitID":"chanyikwai"},"content":"                newMessage.setContent(multipart);"},{"lineNumber":123,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":124,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":125,"author":{"gitID":"chanyikwai"},"content":"            Transport.send(newMessage);"},{"lineNumber":126,"author":{"gitID":"chanyikwai"},"content":"        } catch (AuthenticationFailedException e) {"},{"lineNumber":127,"author":{"gitID":"chanyikwai"},"content":"            throw new AuthenticationFailedException();"},{"lineNumber":128,"author":{"gitID":"chanyikwai"},"content":"        } catch (MessagingException e) {"},{"lineNumber":129,"author":{"gitID":"chanyikwai"},"content":"            throw new RuntimeException(e);"},{"lineNumber":130,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":132}},{"path":"src/main/java/seedu/address/model/cinema/UniqueCinemaList.java","lines":[{"lineNumber":1,"author":{"gitID":"qwlai"},"content":"package seedu.address.model.cinema;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"slothhy"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"slothhy"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.CinemaNotFoundException;"},{"lineNumber":15,"author":{"gitID":"qwlai"},"content":"import seedu.address.model.cinema.exceptions.DuplicateCinemaException;"},{"lineNumber":16,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":17,"author":{"gitID":"qwlai"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"qwlai"},"content":" * A list of cinemas that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":19,"author":{"gitID":"qwlai"},"content":" *"},{"lineNumber":20,"author":{"gitID":"qwlai"},"content":" * Supports a minimal set of list operations."},{"lineNumber":21,"author":{"gitID":"qwlai"},"content":" *"},{"lineNumber":22,"author":{"gitID":"qwlai"},"content":" * @see Cinema#equals(Object)"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"qwlai"},"content":"public class UniqueCinemaList implements Iterable\u003cCinema\u003e {"},{"lineNumber":26,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":27,"author":{"gitID":"qwlai"},"content":"    private final ObservableList\u003cCinema\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":29,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"qwlai"},"content":"     * Returns true if the list contains an equivalent cinema as the given argument."},{"lineNumber":31,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"qwlai"},"content":"    public boolean contains(Cinema toCheck) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"qwlai"},"content":"     * Adds a cinema to the list."},{"lineNumber":39,"author":{"gitID":"qwlai"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"qwlai"},"content":"     * @throws DuplicateCinemaException if the cinema to add is a duplicate of an existing cinema in the list."},{"lineNumber":41,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"qwlai"},"content":"    public void add(Cinema toAdd) throws DuplicateCinemaException {"},{"lineNumber":43,"author":{"gitID":"qwlai"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"qwlai"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"qwlai"},"content":"            throw new DuplicateCinemaException();"},{"lineNumber":46,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"qwlai"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":50,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"qwlai"},"content":"     * Replaces the cinema {@code target} in the list with {@code editedCinema}."},{"lineNumber":52,"author":{"gitID":"qwlai"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"qwlai"},"content":"     * @throws DuplicateCinemaException if the replacement is equivalent to another existing cinema in the list."},{"lineNumber":54,"author":{"gitID":"qwlai"},"content":"     * @throws CinemaNotFoundException if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"qwlai"},"content":"    public void setCinema(Cinema target, Cinema editedCinema)"},{"lineNumber":57,"author":{"gitID":"qwlai"},"content":"            throws DuplicateCinemaException, CinemaNotFoundException {"},{"lineNumber":58,"author":{"gitID":"qwlai"},"content":"        requireNonNull(editedCinema);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitID":"qwlai"},"content":"            throw new CinemaNotFoundException();"},{"lineNumber":63,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":65,"author":{"gitID":"qwlai"},"content":"        if (!target.equals(editedCinema) \u0026\u0026 internalList.contains(editedCinema)) {"},{"lineNumber":66,"author":{"gitID":"qwlai"},"content":"            throw new DuplicateCinemaException();"},{"lineNumber":67,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":69,"author":{"gitID":"qwlai"},"content":"        internalList.set(index, editedCinema);"},{"lineNumber":70,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":72,"author":{"gitID":"qwlai"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"qwlai"},"content":"     * Removes the equivalent cinema from the list."},{"lineNumber":74,"author":{"gitID":"qwlai"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"qwlai"},"content":"     * @throws CinemaNotFoundException if no such cinema could be found in the list."},{"lineNumber":76,"author":{"gitID":"qwlai"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"qwlai"},"content":"    public boolean remove(Cinema toRemove) throws CinemaNotFoundException {"},{"lineNumber":78,"author":{"gitID":"qwlai"},"content":"        requireNonNull(toRemove);"},{"lineNumber":79,"author":{"gitID":"qwlai"},"content":"        final boolean cinemaFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":80,"author":{"gitID":"qwlai"},"content":"        if (!cinemaFoundAndDeleted) {"},{"lineNumber":81,"author":{"gitID":"qwlai"},"content":"            throw new CinemaNotFoundException();"},{"lineNumber":82,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"qwlai"},"content":"        return cinemaFoundAndDeleted;"},{"lineNumber":84,"author":{"gitID":"qwlai"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"qwlai"},"content":""},{"lineNumber":86,"author":{"gitID":"qwlai"},"content":"    public void setCinemas(UniqueCinemaList replacement) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"qwlai"},"content":"    public void setCinemas(List\u003cCinema\u003e cinemas) throws DuplicateCinemaException {"},{"lineNumber":91,"author":{"gitID":"qwlai"},"content":"        requireAllNonNull(cinemas);"},{"lineNumber":92,"author":{"gitID":"qwlai"},"content":"        final UniqueCinemaList replacement \u003d new UniqueCinemaList();"},{"lineNumber":93,"author":{"gitID":"qwlai"},"content":"        for (final Cinema cinema : cinemas) {"},{"lineNumber":94,"author":{"gitID":"qwlai"},"content":"            replacement.add(cinema);"},{"lineNumber":95,"author":{"gitID":"qwlai"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"qwlai"},"content":"        setCinemas(replacement);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"qwlai"},"content":"    public ObservableList\u003cCinema\u003e asObservableList() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"qwlai"},"content":"    public Iterator\u003cCinema\u003e iterator() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"qwlai"},"content":"                || (other instanceof UniqueCinemaList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"qwlai"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueCinemaList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"slothhy":3,"-":44,"qwlai":75}},{"path":"src/main/java/seedu/address/email/exceptions/EmailLoginInvalidException.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email.exceptions;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":" * Prompts user that email failed to send due to invalid login information"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"public class EmailLoginInvalidException extends Exception{"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":8}},{"path":"src/main/java/seedu/address/email/exceptions/EmailMessageEmptyException.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email.exceptions;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":" * Prompts user that email failed to send due to empty message or subject fields"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"public class EmailMessageEmptyException extends Exception{"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":7}},{"path":"src/main/java/seedu/address/email/exceptions/EmailRecipientsEmptyException.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email.exceptions;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":" * Prompts user that email failed to send due to empty recipient fields"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":"public class EmailRecipientsEmptyException extends Exception{"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":7}},{"path":"src/main/java/seedu/address/email/message/DraftList.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email.message;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":" * Contains a list of Email Message Drafts"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"public class DraftList {"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"    private MessageDraft[] messages \u003d new MessageDraft[1];"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"    public DraftList() {"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"        messages[0] \u003d new MessageDraft();"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"     * Compose a new email or edit the current one"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"     * @param newMessage new email"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"    public void composeEmail(MessageDraft newMessage) {"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":"        MessageDraft message \u003d messages[0];"},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"        if (newMessage.getSubject().isEmpty()) {"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"            newMessage.setSubject(message.getSubject());"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"        if (newMessage.getMessage().isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"            newMessage.setMessage(message.getMessage());"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"        if (newMessage.getRecipient().isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"            newMessage.setRecipients(message.getRecipient());"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"        if (newMessage.getRelativeFilePath().isEmpty()) {"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"            newMessage.setRelativeFilePath(message.getRelativeFilePath());"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"        messages[0] \u003d newMessage;"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"     * Returns draft at requested index"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"     *"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"     * @param i index of message in draftlist"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"     * @return Unmodifiable message draft"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"    public ReadOnlyMessageDraft getMessage(int i) {"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"        return messages[i];"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"                || (other instanceof DraftList // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 this.draftListEquals(((DraftList) other).messages));"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"    /** Returns true if both have the same draft list */"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"    private boolean draftListEquals(MessageDraft [] other) {"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"        if (other.length \u003d\u003d this.messages.length) {"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"            for (int i \u003d 0; i \u003c this.messages.length; i++) {"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":"                if (!this.messages[i].equals(other[i])) {"},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"                    return false;"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"                }"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":"            return true;"},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"        return false;"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":65}},{"path":"src/main/java/seedu/address/email/message/MessageDraft.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email.message;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":" * Represents a Email Draft Message in MVP."},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"public class MessageDraft implements ReadOnlyMessageDraft {"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"    private String message;"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":"    private String subject;"},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"    private String recipient;"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":"    private String relativeFilePath;"},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"    public MessageDraft() {"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"        message \u003d \"\";"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":"        subject \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"        recipient \u003d \"\";"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"        relativeFilePath \u003d \"\";"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"    public MessageDraft(String message, String subject, String recipient) {"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"        this.message \u003d message;"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"        this.subject \u003d subject;"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":"        this.recipient \u003d recipient;"},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"        this.relativeFilePath \u003d \"\";"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":"    public MessageDraft(String message, String subject, String recipient, String relativeFilePath) {"},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"        this.message \u003d message;"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"        this.subject \u003d subject;"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"        this.recipient \u003d recipient;"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"        this.relativeFilePath \u003d relativeFilePath;"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"    public String getMessage() {"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"        return message;"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"    public void setMessage(String message) {"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":"        this.message \u003d message;"},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"    public String getSubject() {"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"        return subject;"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":49,"author":{"gitID":"chanyikwai"},"content":"    public void setSubject(String subject) {"},{"lineNumber":50,"author":{"gitID":"chanyikwai"},"content":"        this.subject \u003d subject;"},{"lineNumber":51,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":53,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"chanyikwai"},"content":"    public String getRecipient() {"},{"lineNumber":55,"author":{"gitID":"chanyikwai"},"content":"        return recipient;"},{"lineNumber":56,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":58,"author":{"gitID":"chanyikwai"},"content":"    public void setRecipients(String recipient) {"},{"lineNumber":59,"author":{"gitID":"chanyikwai"},"content":"        this.recipient \u003d recipient;"},{"lineNumber":60,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":62,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"chanyikwai"},"content":"    public String getRelativeFilePath() {"},{"lineNumber":64,"author":{"gitID":"chanyikwai"},"content":"        return relativeFilePath;"},{"lineNumber":65,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":67,"author":{"gitID":"chanyikwai"},"content":"    public void setRelativeFilePath(String relativeFilePath) {"},{"lineNumber":68,"author":{"gitID":"chanyikwai"},"content":"        this.relativeFilePath \u003d relativeFilePath;"},{"lineNumber":69,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":71,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"chanyikwai"},"content":"    public boolean containsContent() {"},{"lineNumber":73,"author":{"gitID":"chanyikwai"},"content":"        if (message.isEmpty() || subject.isEmpty() || recipient.isEmpty()) {"},{"lineNumber":74,"author":{"gitID":"chanyikwai"},"content":"            return false;"},{"lineNumber":75,"author":{"gitID":"chanyikwai"},"content":"        } else {"},{"lineNumber":76,"author":{"gitID":"chanyikwai"},"content":"            return true;"},{"lineNumber":77,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":80,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"chanyikwai"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitID":"chanyikwai"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":83,"author":{"gitID":"chanyikwai"},"content":"                || (other instanceof ReadOnlyMessageDraft // instanceof handles nulls"},{"lineNumber":84,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 this.isSameStateAs((ReadOnlyMessageDraft) other));"},{"lineNumber":85,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":86}},{"path":"src/main/java/seedu/address/email/EmailFunction.java","lines":[{"lineNumber":1,"author":{"gitID":"chanyikwai"},"content":"package seedu.address.email;"},{"lineNumber":2,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":3,"author":{"gitID":"chanyikwai"},"content":"//@@author chanyikwai"},{"lineNumber":4,"author":{"gitID":"chanyikwai"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"chanyikwai"},"content":" * Keeps track of called Email Function"},{"lineNumber":6,"author":{"gitID":"chanyikwai"},"content":" */"},{"lineNumber":7,"author":{"gitID":"chanyikwai"},"content":"public class EmailFunction {"},{"lineNumber":8,"author":{"gitID":"chanyikwai"},"content":"    public static final String EMAIL_FUNCTION_SEND \u003d \"send\";"},{"lineNumber":9,"author":{"gitID":"chanyikwai"},"content":"    public static final String EMAIL_FUNCTION_CLEAR \u003d \"clear\";"},{"lineNumber":10,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":11,"author":{"gitID":"chanyikwai"},"content":"    private String emailFunction;"},{"lineNumber":12,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":13,"author":{"gitID":"chanyikwai"},"content":"    public EmailFunction() {"},{"lineNumber":14,"author":{"gitID":"chanyikwai"},"content":"        emailFunction \u003d \"\";"},{"lineNumber":15,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":17,"author":{"gitID":"chanyikwai"},"content":"    public EmailFunction(String emailFunction) {"},{"lineNumber":18,"author":{"gitID":"chanyikwai"},"content":"        this.emailFunction \u003d emailFunction;"},{"lineNumber":19,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":21,"author":{"gitID":"chanyikwai"},"content":"    public String getEmailFunction() {"},{"lineNumber":22,"author":{"gitID":"chanyikwai"},"content":"        return emailFunction;"},{"lineNumber":23,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":25,"author":{"gitID":"chanyikwai"},"content":"    public void setEmailFunction(String emailFunction) {"},{"lineNumber":26,"author":{"gitID":"chanyikwai"},"content":"        this.emailFunction \u003d emailFunction;"},{"lineNumber":27,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":29,"author":{"gitID":"chanyikwai"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"chanyikwai"},"content":"     * Returns true if task is valid"},{"lineNumber":31,"author":{"gitID":"chanyikwai"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"chanyikwai"},"content":"    public boolean isValid() {"},{"lineNumber":33,"author":{"gitID":"chanyikwai"},"content":"        switch (emailFunction) {"},{"lineNumber":34,"author":{"gitID":"chanyikwai"},"content":"        case EMAIL_FUNCTION_SEND:"},{"lineNumber":35,"author":{"gitID":"chanyikwai"},"content":"        case EMAIL_FUNCTION_CLEAR:"},{"lineNumber":36,"author":{"gitID":"chanyikwai"},"content":"            return true;"},{"lineNumber":37,"author":{"gitID":"chanyikwai"},"content":"        default:"},{"lineNumber":38,"author":{"gitID":"chanyikwai"},"content":"            return false;"},{"lineNumber":39,"author":{"gitID":"chanyikwai"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"chanyikwai"},"content":""},{"lineNumber":42,"author":{"gitID":"chanyikwai"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"chanyikwai"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"chanyikwai"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"chanyikwai"},"content":"                || (other instanceof EmailFunction // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"chanyikwai"},"content":"                \u0026\u0026 this.emailFunction.equals(((EmailFunction) other).emailFunction));"},{"lineNumber":47,"author":{"gitID":"chanyikwai"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"chanyikwai"},"content":"}"}],"authorContributionMap":{"chanyikwai":48}}]
