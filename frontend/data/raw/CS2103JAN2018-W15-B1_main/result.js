var resultJson = [{"path":"docs/team/IzHoBX.adoc","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"\u003d IzHoBX - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"This project portfolio showcases my contributions to all the projects that I was involved in."},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d PROJECT: ET - Employees Tracker"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"---"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d Overview"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"The Employees Tracker (ET) is a human resource management software. It aims to provide a one-stop solution for managers to manage their subordinates."},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"Its two major selling points are employees profile management and task tracking."},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"Since most managers can type fast, ET is designed to have a Command Line Interface (CLI) as to allow its users to carry out operations efficiently without having to switch between a keyboard and a mouse."},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"Nonetheless, ET has a Graphical User Interface (GUI) to provide more direct visual feedback."},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"ET is developed using JAVA 8 and JavaFX, and has about 10 kLoC."},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"* *Major enhancement*: *Notification System*"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"** What it does: It shows notification cards to users to remind them about the expiry of the tasks that they have assigned to their subordinates."},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"** Justification: Managers usually have to managed quite a number of subordinates and it is very difficult for them to keep track of all the tasks being carried out in his team. This feature alleviates their pain by removing the need for them to remember the details of each task."},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"** Highlights: This features requires a seamless integration with all other components of the app, from UI to Logic and even storage, in order to work properly."},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"That said, when designing the interface between the Notification System and each other components, one has to be aware of the constraints of the component and choose the best design accordingly."},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"Nonetheless, in order to present notifications in an elegant way that doesn\u0027t confuse users, a considerable amount of insights into UX and UI designs is required."},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"* *Minor enhancement*: added rating feature to allow users to record the performance of each employee."},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-W15-B1/main/blob/master/collated/functional/IzHoBX.md[Functional code] [https://github.com/CS2103JAN2018-W15-B1/main/blob/master/collated/test/IzHoBX.md[Test code]]"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"* *Other contributions*:"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"** Project management:"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"*** Oversees milestone v1.5rc and v1.5 on GitHub"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"** Enhancements to existing features:"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"*** Develops the command-suggestion system that gives hints on command usages dynamically according to text that users type (Pull request https://github.com/CS2103JAN2018-W15-B1/main/pull/132/[#132])"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"** Community:"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"*** Issues reviewed (with non-trivial review comments): https://github.com/CS2103JAN2018-W15-B1/main/issues/26[#26]"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com/CS2103JAN2018-W13-B2/main/issues/128[1], https://github.com/CS2103JAN2018-W13-B2/main/issues/137[2], https://github.com/CS2103JAN2018-W13-B2/main/issues/134[3], https://github.com/CS2103JAN2018-W13-B2/main/issues/130[4])"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"** Tools:"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"*** Integrated a third party library (emoji-java) to the project (https://github.com/CS2103JAN2018-W15-B1/main/pull/53/commits/b8fd616f4b40d442d5dee77c1ad77bf86ca1f96e[#53])"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"|\u003d\u003d\u003d"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"|_Given below are my contributions to the User Guide. They showcase my ability to write documentation that are easy to be understood by end-users._"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"|\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"include::../UserGuide.adoc[tag\u003d\"quickStart\"]"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to convey technical ideas in a professional and comprehensible way as well as the technical depth of my contributions to the project._"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"|\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"include::../DeveloperGuide.adoc[tag\u003drate]"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"include::../DeveloperGuide.adoc[tag\u003dns]"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"include::../DeveloperGuide.adoc[tag\u003dns2]"}],"authorContributionMap":{"IzHoBX":63}},{"path":"docs/team/Yoochard.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"\u003d Yoochard(Yang Yuqing) - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"\u003d\u003d PROJECT: Employees Tracker"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"---"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":"Employees Tracker (E.T.) is a Human Resource Manager application that helps managers to manage their subordinates. Its has 2 main functionalities: providing information about employees, as well as helping in tracking the tasks assigned to each employee. +"},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"\u003d\u003d Code Contribution"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"*Code contributed*: [https://github.com/CS2103JAN2018-W15-B1/main/blob/master/collated/functional/Yoochard.md[Functional code]] [https://github.com/CS2103JAN2018-W15-B1/main/blob/master/collated/test/Yoochard.md[Test code]]"},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"* *Enhancements added*: UI optimisation, sort command, changeTheme command"},{"lineNumber":20,"author":{"gitID":"-"},"content":"* *Major enhancement*: UI optimisation(Pull requests https://github.com/CS2103JAN2018-W15-B1/main/pull/51[#51], https://github.com/CS2103JAN2018-W15-B1/main/pull/113[#113], https://github.com/CS2103JAN2018-W15-B1/main/pull/62[#62], https://github.com/CS2103JAN2018-W15-B1/main/pull/86[#86], https://github.com/CS2103JAN2018-W15-B1/main/pull/138[#138], https://github.com/CS2103JAN2018-W15-B1/main/pull/186[#186])"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"* *Minor enhancement*: Sort command(Pull requests https://github.com/CS2103JAN2018-W15-B1/main/pull/16[#16], https://github.com/CS2103JAN2018-W15-B1/main/pull/48[#48]"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"** What it does: allows users to sort employees by existing fields."},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":"* *Other contributions*:"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":"** changeTheme command(Pull requests https://github.com/CS2103JAN2018-W15-B1/main/pull/113[#113], https://github.com/CS2103JAN2018-W15-B1/main/pull/194[#194])"},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"*** What it does: allows users to change the theme of ET between dark and bright"},{"lineNumber":26,"author":{"gitID":"-"},"content":"** add test files(Pull requests  , https://github.com/CS2103JAN2018-W15-B1/main/pull/115[#115])"},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":"** create a new field \"theme\" to implement Gui Setting, create Theme.java inside model folder(Commits from pull request https://github.com/CS2103JAN2018-W15-B1/main/pull/113/commits/157fc7631f6015b770d8e02c53859f5eaf22f6af[#113], https://github.com/CS2103JAN2018-W15-B1/main/pull/113/commits/650e464f219d7353384101914528a9566c612e14[#113])"},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":"** rewrite DarkTheme.css file and create BrightTheme.css file(Pull requests https://github.com/CS2103JAN2018-W15-B1/main/pull/113[#113], https://github.com/CS2103JAN2018-W15-B1/main/pull/194[#194])"},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"** report bugs and suggestions for other team’s products(Pull requests https://github.com/CS2103JAN2018-F11-B1/main/issues/185#event-1571733819[#185], https://github.com/CS2103JAN2018-F11-B1/main/issues/171[#171])"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":36,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Yoochard"},"content":"include::../UserGuide.adoc[tag\u003dsort]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":43,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":44,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"Yoochard"},"content":"include::../DeveloperGuide.adoc[tag\u003dsort]"},{"lineNumber":47,"author":{"gitID":"Yoochard"},"content":"include::../DeveloperGuide.adoc[tag\u003dchangeTheme]"},{"lineNumber":48,"author":{"gitID":"Yoochard"},"content":""}],"authorContributionMap":{"Yoochard":31,"-":17}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d E.T. (Employees Tracker) - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title: Table of Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":":repoURL: https://github.com/CS2103JAN2018-W15-B1/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"By: `Team W15-B1`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"Ever feels overwhelmed in managing all your employees? +"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"Ever wants to keep track of all the tasks you have assigned to your employees?"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"Employees Tracker (E.T.) comes to the rescue!"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"Employees Tracker is a *Human Resource Manager* application that helps managers to manage their subordinates. It has 2 main functionalities: providing information about employees, as well as helping in tracking the tasks assigned to each employee."},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"This user guide serves to guide you so that you are able to use utilize Employees Tracker to its fullest extent."},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"Jump to \u003c\u003cQuick Start\u003e\u003e to get started!"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"This section contains essential information and instructions to help you to start using E.T. quickly."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Setting up"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"If you are using E.T. for the first time, please set up E.T. by following the instructions below carefully:"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your computer."},{"lineNumber":39,"author":{"gitID":"-"},"content":"+"},{"lineNumber":40,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":42,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":43,"author":{"gitID":"-"},"content":"+"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Ensure that you have access to the internet."},{"lineNumber":45,"author":{"gitID":"-"},"content":".  Download the latest `et-employeestracker.jar` link:{repoURL}/releases[here]."},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":".  Copy the file to the folder you want to use as the home folder for your E.T."},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":".  Double-click the file to start the app. The user interface should appear in a few seconds, as shown in _Figure 1_."},{"lineNumber":48,"author":{"gitID":"-"},"content":"+"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":".User Interface."},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"image::Ui_locked.png[width\u003d\"790\"]"},{"lineNumber":51,"author":{"gitID":"-"},"content":"+"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":". Type `unlock` in E.T. and press kbd:[Enter] to unlock E.T. You will be greeted by a pop-up window as shown in _Figure 2_."},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":".Pop-up window on top of E.T."},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"image::password_box.png[width\u003d\"790\"]"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":". Type the default password `admin` in the pop-up window and press kbd:[Enter] or left-click on the `Unlock` button at the bottom right corner of the pop-up window. The pop-up window will then disappear."},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":". Type `authenET` in E.T. and press kbd:[Enter] to authorize E.T. You will be directed to an authorization web page as shown in _Figure 3_."},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":".Authorization web page."},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"image::authorize_ET.png[width\u003d\"790\"]"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":". Click on `allow` at the bottom right corner."},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":". Close your browser and return to E.T. once you see a web page with a confirmation message similar to that in _Figure 4_."},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":".Confirmation message."},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"image::login_done.png[width\u003d\"790\"]"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"The above instructions are only for first-time users. However, because E.T. is locked by default for security purposes, you will need to follow step 4, 5, 6 for every time you open E.T. in the future. Of course, if you have changed your password, then you will need to execute step 6 with your new password."},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"After setting up, you can start using E.T. by typing commands and press kbd:[Enter] to execute it. +"},{"lineNumber":75,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"****"},{"lineNumber":78,"author":{"gitID":"-"},"content":"Some example commands you can try:"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":81,"author":{"gitID":"-"},"content":"lists all employees."},{"lineNumber":82,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` +"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"adds an employee named `John Doe` to E.T."},{"lineNumber":84,"author":{"gitID":"-"},"content":"* `delete 3` +"},{"lineNumber":85,"author":{"gitID":"-"},"content":"deletes the 3^rd^ contact shown in the current list."},{"lineNumber":86,"author":{"gitID":"-"},"content":"* `exit` +"},{"lineNumber":87,"author":{"gitID":"-"},"content":"exits the app."},{"lineNumber":88,"author":{"gitID":"-"},"content":"****"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"Refer to \u003c\u003cCommands\u003e\u003e for more details on commands."},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Knowing the User Interface"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":"The User Interface will be the application’s interface that you will interact with. E.T. has a Graphical User Interface (GUI) instead of a Command Line Interface (CLI)."},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":"_Figure 5_ shows the 5 major components of the GUI of E.T. :"},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":"* *Command Box*: where you type in commands."},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":"* *Result Display Box*: where E.T. shows text result to you."},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"* *Employees List Panel*: where the list of all employees is shown."},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"* *Employee\u0027s Profile Panel*: where the details of the selected employee is shown."},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":"* *Notification cards*: where E.T. reminds you about events."},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":".Graphical User Interface (GUI)."},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":"image::UiLabelled.png[width\u003d\"800\"]"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Reading the result display box"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":"The result display box shows 3 types of information:"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"* Error messages in [red]#red# if the command you entered does not exists or does not match the pre-defined format."},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"* Hints about the format and usage of the command in [maroon]#maroon#."},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"* Status of E.T. in [maroon]#maroon# if your command is processed successfully."},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"Whenever you type keyword of a command in the `Command Box`, E.T. will provide [maroon]#hints# about its usage."},{"lineNumber":118,"author":{"gitID":"IzHoBX"},"content":"// tag::quickStart[]"},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Understanding the notifications"},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":"E.T. has a 2 phase notification system, i.e. there will be 2 notification cards popping up to remind you of each event:"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"* The first phase notification will pop out in a [blue]#blue# notification card, on the day of expiry, as shown in _Figure 6_."},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"* The second phase notification will pop out in a [red]#red# notification card, at the exact time of expiry, as shown in _Figure 7_."},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":".First phase notification card."},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":"image::card_blue.png[width\u003d\"\"]"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":".Second phase notification card."},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"image::card_red.png[width\u003d\"\"]"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":"For example, suppose you have assigned a task to Jane which will due on 15^th^ Apr 2018 0032 hrs. When you open E.T. for the first time in the morning of 15^th^ Apr 2018, you will be notified that Jane has a task that will due on *today* in a [blue]#blue# notification card. Later at 0032 hrs of 15^th^ Apr 2018, you will receive the second phase notification in [red]#red#, informing you that Jane should have finished the task by *now*."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"Notification cards will disappear from the screen after 5 seconds and will be stored in the `Notification Center`. If you want to refer to them later, use `noti` command or double press kbd:[Shift] to open the `Notification Center`."},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"IzHoBX"},"content":"Also, if you minimizes E.T. to use other software, E.T. is capable of showing notification cards in your computer\u0027s system (e.g. Windows, Mac, Linux, etc.), as shown in _Figure 8_. However, this feature may not work on some computer systems."},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":".E.T. shows notification card about event expiry even if you are using other programs."},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"image::card_windows.png[width\u003d\"\"]"},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":"// end::quickStart[]"},{"lineNumber":143,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":144,"author":{"gitID":"IzHoBX"},"content":"[[Commands]]"},{"lineNumber":145,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d Commands"},{"lineNumber":146,"author":{"gitID":"IzHoBX"},"content":"This section lists all E.T.\u0027s command."},{"lineNumber":147,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":149,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":152,"author":{"gitID":"-"},"content":"* Items in brackets are mandatory e.g. `(n/NAME_KEYPHRASE | t/TAG_KEYPHRASE | r/RATING_KEYPHRASE)` can be used as `n/John t/Sales r/5` but cannot be empty."},{"lineNumber":153,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":154,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":155,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"crizyli"},"content":"// tag::unlock[]"},{"lineNumber":159,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Unlocking E.T. : `unlock`"},{"lineNumber":160,"author":{"gitID":"IzHoBX"},"content":"Unlocks E.T. +"},{"lineNumber":161,"author":{"gitID":"crizyli"},"content":"Format: `unlock`"},{"lineNumber":162,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":163,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":164,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":165,"author":{"gitID":"IzHoBX"},"content":"* You need to enter the password in a pop-up window and it must match the application\u0027s password."},{"lineNumber":166,"author":{"gitID":"IzHoBX"},"content":"* The initial default password is \u0027admin\u0027."},{"lineNumber":167,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":168,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":169,"author":{"gitID":"IzHoBX"},"content":"Examples:"},{"lineNumber":170,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":171,"author":{"gitID":"crizyli"},"content":"* `unlock` +"},{"lineNumber":172,"author":{"gitID":"IzHoBX"},"content":"A pop-up window will appear as shown in _Figure 9_. +"},{"lineNumber":173,"author":{"gitID":"IzHoBX"},"content":"Fill in the input box with matching password to unlock E.T."},{"lineNumber":174,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":175,"author":{"gitID":"IzHoBX"},"content":".Unlock pop-up window."},{"lineNumber":176,"author":{"gitID":"crizyli"},"content":"image::unlock_dialog.png[width\u003d\"790\"][height\u003d\"200\"]"},{"lineNumber":177,"author":{"gitID":"crizyli"},"content":"// end::unlock[]"},{"lineNumber":178,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":179,"author":{"gitID":"IzHoBX"},"content":"// tag::lock[]"},{"lineNumber":180,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Locking E.T.: `lock`"},{"lineNumber":181,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":182,"author":{"gitID":"IzHoBX"},"content":"Locks E.T., so that the data is protected without the need of closing the program or shutting down your computer. +"},{"lineNumber":183,"author":{"gitID":"IzHoBX"},"content":"Format: `lock`"},{"lineNumber":184,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":185,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":186,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":187,"author":{"gitID":"IzHoBX"},"content":"E.T. will not respond to any command other than `unlock` when it is locked."},{"lineNumber":188,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":189,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":190,"author":{"gitID":"IzHoBX"},"content":"Examples:"},{"lineNumber":191,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":192,"author":{"gitID":"IzHoBX"},"content":"* `lock` +"},{"lineNumber":193,"author":{"gitID":"IzHoBX"},"content":"Locks E.T. +"},{"lineNumber":194,"author":{"gitID":"IzHoBX"},"content":"All information in E.T. will be hidden when it is locked as shown in _Figure 10_ below."},{"lineNumber":195,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":196,"author":{"gitID":"IzHoBX"},"content":".Information is hidden when E.T. is locked."},{"lineNumber":197,"author":{"gitID":"IzHoBX"},"content":"image::lock_screen.png[width\u003d\"300\"][height\u003d\"400\"]"},{"lineNumber":198,"author":{"gitID":"IzHoBX"},"content":"// end::lock[]"},{"lineNumber":199,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":200,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Setting E.T.\u0027s password: `setPassword`"},{"lineNumber":201,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":202,"author":{"gitID":"IzHoBX"},"content":"Sets E.T.\u0027s password. +"},{"lineNumber":203,"author":{"gitID":"crizyli"},"content":"Format: `setPassword`"},{"lineNumber":204,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":205,"author":{"gitID":"crizyli"},"content":"[NOTE]"},{"lineNumber":206,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":207,"author":{"gitID":"IzHoBX"},"content":"* You can press kbd:[Tab] to switch the selection between the window elements."},{"lineNumber":208,"author":{"gitID":"IzHoBX"},"content":"* You need to enter both old and new password in a pop-up window, and old password must match current password."},{"lineNumber":209,"author":{"gitID":"crizyli"},"content":"* The new password can contain any character *except comma(,)*."},{"lineNumber":210,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":211,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":212,"author":{"gitID":"crizyli"},"content":"Examples:"},{"lineNumber":213,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":214,"author":{"gitID":"crizyli"},"content":"* `setPassword` +"},{"lineNumber":215,"author":{"gitID":"IzHoBX"},"content":"A pop-up window will appear as shown in _Figure 11_. +"},{"lineNumber":216,"author":{"gitID":"IzHoBX"},"content":"Fill in the input boxes with matching old password and new password."},{"lineNumber":217,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":218,"author":{"gitID":"IzHoBX"},"content":".Set password pop-up window."},{"lineNumber":219,"author":{"gitID":"crizyli"},"content":"image::setPassword_dialog.png[width\u003d\"790\"][height\u003d\"200\"]"},{"lineNumber":220,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":221,"author":{"gitID":"IzHoBX"},"content":"// tag::auth[]"},{"lineNumber":222,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Authorizing E.T. : `authenET`"},{"lineNumber":223,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":224,"author":{"gitID":"IzHoBX"},"content":"Gets the permission to allow E.T. to access your Google calendar. +"},{"lineNumber":225,"author":{"gitID":"crizyli"},"content":"Format: `authenET`"},{"lineNumber":226,"author":{"gitID":"crizyli"},"content":"// end::auth[]"},{"lineNumber":227,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"IzHoBX"},"content":"Displays the user guide, which is this document, as shown in _Figure 12_. +"},{"lineNumber":231,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"IzHoBX"},"content":".The user guide."},{"lineNumber":234,"author":{"gitID":"IzHoBX"},"content":"image::user_guide.png[width\u003d\"\"]"},{"lineNumber":235,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":236,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Changing the theme of E.T.: `changeTheme`"},{"lineNumber":237,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":238,"author":{"gitID":"IzHoBX"},"content":"Changes E.T.\u0027s theme to bright or dark. +"},{"lineNumber":239,"author":{"gitID":"IzHoBX"},"content":"Format: `changeTheme (bright | dark)`"},{"lineNumber":240,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":241,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":242,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":243,"author":{"gitID":"IzHoBX"},"content":"`changeTheme` command is not undoable."},{"lineNumber":244,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":245,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":246,"author":{"gitID":"IzHoBX"},"content":"Examples:"},{"lineNumber":247,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":248,"author":{"gitID":"IzHoBX"},"content":"* `changeTheme bright` +"},{"lineNumber":249,"author":{"gitID":"IzHoBX"},"content":"Changes E.T.\u0027s theme to bright theme"},{"lineNumber":250,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":251,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Adding an employee: `add`"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"IzHoBX"},"content":"Adds an employee to E.T. +"},{"lineNumber":254,"author":{"gitID":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":257,"author":{"gitID":"-"},"content":"An employee can have any number of tags (including 0)."},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` +"},{"lineNumber":262,"author":{"gitID":"IzHoBX"},"content":"Adds John Doe with the information given into E.T."},{"lineNumber":263,"author":{"gitID":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal` +"},{"lineNumber":264,"author":{"gitID":"IzHoBX"},"content":"Adds Betsy Crowe with the information given into E.T."},{"lineNumber":265,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":266,"author":{"gitID":"crizyli"},"content":"// tag::addphoto[]"},{"lineNumber":267,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Adding a profile photo to an employee: `addPhoto`"},{"lineNumber":268,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":269,"author":{"gitID":"IzHoBX"},"content":"Adds a profile photo to an existing employee in E.T. +"},{"lineNumber":270,"author":{"gitID":"crizyli"},"content":"Format: `addPhoto INDEX`"},{"lineNumber":271,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":272,"author":{"gitID":"crizyli"},"content":"****"},{"lineNumber":273,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":274,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":275,"author":{"gitID":"crizyli"},"content":"* You will need to select a photo in a pop-up file chooser."},{"lineNumber":276,"author":{"gitID":"crizyli"},"content":"* The acceptable photo types are .jpg, .jpeg, .png and .bmp."},{"lineNumber":277,"author":{"gitID":"crizyli"},"content":"****"},{"lineNumber":278,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":279,"author":{"gitID":"crizyli"},"content":"[NOTE]"},{"lineNumber":280,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":281,"author":{"gitID":"crizyli"},"content":"This command will automatically copy the file you chosed to the application\u0027s data folder if it does not exist. Once"},{"lineNumber":282,"author":{"gitID":"crizyli"},"content":"the photo is copied, you should not delete it from that folder manually."},{"lineNumber":283,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"IzHoBX"},"content":"Examples:"},{"lineNumber":286,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":287,"author":{"gitID":"crizyli"},"content":"* `list` +"},{"lineNumber":288,"author":{"gitID":"crizyli"},"content":"`addPhoto 1` +"},{"lineNumber":289,"author":{"gitID":"crizyli"},"content":"Adds a photo to the 1st employee in the last employees listing."},{"lineNumber":290,"author":{"gitID":"IzHoBX"},"content":"// end::addphoto[]"},{"lineNumber":291,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":292,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing all employees : `list`"},{"lineNumber":293,"author":{"gitID":"-"},"content":""},{"lineNumber":294,"author":{"gitID":"IzHoBX"},"content":"Shows a list of all employees as shown in _Figure 13_. +"},{"lineNumber":295,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":".List of employees."},{"lineNumber":298,"author":{"gitID":"IzHoBX"},"content":"image::employeesList.png[width\u003d\"790\"][height\u003d\"200\"]"},{"lineNumber":299,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":300,"author":{"gitID":"IzHoBX"},"content":"// tag::sort[]"},{"lineNumber":301,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Sorting the employees by any field: `sort`"},{"lineNumber":302,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":303,"author":{"gitID":"IzHoBX"},"content":"Sorts existing employees by any field +"},{"lineNumber":304,"author":{"gitID":"Yoochard"},"content":"Format: `sort FIELD`"},{"lineNumber":305,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":306,"author":{"gitID":"Yoochard"},"content":"****"},{"lineNumber":307,"author":{"gitID":"IzHoBX"},"content":"* Employees are sorted by any existing field in alphabetical order. Note that rate field will be sorted in descending order."},{"lineNumber":308,"author":{"gitID":"IzHoBX"},"content":"* The field entered must be one of the following: `name`, `phone`, `email`, `address`, `rate`, `tag`."},{"lineNumber":309,"author":{"gitID":"IzHoBX"},"content":"* Sorting is case-insensitive."},{"lineNumber":310,"author":{"gitID":"IzHoBX"},"content":"* Sorted result is stored permanently. If you want to revert to the previous ordering, please refer to \u003c\u003cUndoing previous command : `undo`\u003e\u003e."},{"lineNumber":311,"author":{"gitID":"Yoochard"},"content":"****"},{"lineNumber":312,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":313,"author":{"gitID":"Yoochard"},"content":"Examples:"},{"lineNumber":314,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":315,"author":{"gitID":"Yoochard"},"content":"* `sort name` +"},{"lineNumber":316,"author":{"gitID":"Yoochard"},"content":"Sort the employees by name in alphabetical order (case-insensitive)."},{"lineNumber":317,"author":{"gitID":"Yoochard"},"content":"* `sort rate` +"},{"lineNumber":318,"author":{"gitID":"Yoochard"},"content":"Sort the employees by rating in descending order."},{"lineNumber":319,"author":{"gitID":"Yoochard"},"content":"// end::sort[]"},{"lineNumber":320,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":321,"author":{"gitID":"IzHoBX"},"content":"// tag::find[]"},{"lineNumber":322,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Searching for employees: `find`"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"Finds employees whose name, tags, rating, or all of those contain any of the given keyphrases. +"},{"lineNumber":325,"author":{"gitID":"-"},"content":"Format: `find (n/NAME_KEYPHRASE | t/TAG_KEYPHRASE | r/RATING_KEYPHRASE)  [n/NAME_KEYPHRASE]... [t/TAG_KEYPHRASE]... [r/RATING_KEYPHRASE]...`"},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"****"},{"lineNumber":328,"author":{"gitID":"IzHoBX"},"content":"* The search is case insensitive, e.g. `n/hANs` will match `Hans`"},{"lineNumber":329,"author":{"gitID":"IzHoBX"},"content":"* The order of the keyphrase does not matter, e.g. `n/Hans Bo` will match `Bo Hans`"},{"lineNumber":330,"author":{"gitID":"IzHoBX"},"content":"* The search does not match exactly all the words in a phrase in sequential order, but only finds any phrase that contains the specified keyphrase\u0027s words without sequential order, e.g. `n/Hans Bo` will match `Jonathan Bo Hans`"},{"lineNumber":331,"author":{"gitID":"-"},"content":"* The search only matches full word, e.g. `n/Han` will not match `Hans`"},{"lineNumber":332,"author":{"gitID":"-"},"content":"* Searching by multiple criteria will yield the result of employees that match all of them, e.g. +"},{"lineNumber":333,"author":{"gitID":"IzHoBX"},"content":"** `n/Hans Bo t/Sales` will match `Hans Bo` with tag `Sales` but not `Hans Bo` with tag `Marketing` or `John Doe` with tag `Sales` +"},{"lineNumber":334,"author":{"gitID":"-"},"content":"** `n/Hans Bo n/John Doe t/Sales t/Marketing` will match only `Hans Bo | Sales` or `Hans Bo | Marketing` or `John Doe | Sales` or `John Doe | Marketing`"},{"lineNumber":335,"author":{"gitID":"-"},"content":"****"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"* `find n/John` +"},{"lineNumber":340,"author":{"gitID":"-"},"content":"Returns all employees having name `John`. +"},{"lineNumber":341,"author":{"gitID":"-"},"content":"e.g. `john` and `John Doe`"},{"lineNumber":342,"author":{"gitID":"-"},"content":"* `find n/Betsy Tim John` +"},{"lineNumber":343,"author":{"gitID":"-"},"content":"Returns all employees with name that contains `Betsy Tim John` without any sequential order. +"},{"lineNumber":344,"author":{"gitID":"-"},"content":"e.g. `Caroline John Tim Betsy` and `Betsy Tim John`"},{"lineNumber":345,"author":{"gitID":"-"},"content":"* `find n/Betsy n/Tim n/John` +"},{"lineNumber":346,"author":{"gitID":"-"},"content":"Returns all employees with name that contains either `Betsy`, `Tim`, or `John` +"},{"lineNumber":347,"author":{"gitID":"-"},"content":"e.g. `Betsy`, `Tim`, `John`, `Betsy Toe`, `John Cook`, and `Tim John`"},{"lineNumber":348,"author":{"gitID":"IzHoBX"},"content":"* `find n/John t/Developer iOS r/3` +"},{"lineNumber":349,"author":{"gitID":"IzHoBX"},"content":"Returns all employees with name `John`, both tags `Developer` and `iOS`, and rating of 3 +"},{"lineNumber":350,"author":{"gitID":"IzHoBX"},"content":"e.g. `John | Developer, iOS | 3`"},{"lineNumber":351,"author":{"gitID":"IzHoBX"},"content":"* `find n/John t/Sales t/Associate` +"},{"lineNumber":352,"author":{"gitID":"IzHoBX"},"content":"Returns all employees having both names `John` and either tags `Sales` or `Associate` +"},{"lineNumber":353,"author":{"gitID":"IzHoBX"},"content":"e.g. `John Doe | Sales`, `John Dick| Associate`, `John | Friends, Associate`, and `John Dare | Sales, Associate, Newbie`"},{"lineNumber":354,"author":{"gitID":"IzHoBX"},"content":"// end::find[]"},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting an employee : `select`"},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"Selects the employee identified by the index number used in the last employees listing. +"},{"lineNumber":359,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"****"},{"lineNumber":362,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":363,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":364,"author":{"gitID":"-"},"content":"* Loads the employee\u0027s name, address, calendar, and reviews at the specified `INDEX`."},{"lineNumber":365,"author":{"gitID":"-"},"content":"****"},{"lineNumber":366,"author":{"gitID":"-"},"content":""},{"lineNumber":367,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":370,"author":{"gitID":"-"},"content":"`select 2` +"},{"lineNumber":371,"author":{"gitID":"IzHoBX"},"content":"Selects the 2^nd^ employee in E.T."},{"lineNumber":372,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":373,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":374,"author":{"gitID":"-"},"content":"Selects the 1^st^ employee in the results of the `find` command."},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":377,"author":{"gitID":"IzHoBX"},"content":"If `Calendar` in employee\u0027s `Profile Panel` looks something similar to _Figure 14_, it means you will have to sign in to your *Google Account* from there. This is because for security purposes, you will be required to sign in every time you close E.T. and open it again,"},{"lineNumber":378,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":379,"author":{"gitID":"IzHoBX"},"content":".Signing in to Google account at the Calendar row."},{"lineNumber":380,"author":{"gitID":"IzHoBX"},"content":"image::sign_in.png[width\u003d\"790\"][height\u003d\"200\"]"},{"lineNumber":381,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting an employee : `delete`"},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"IzHoBX"},"content":"Deletes the specified employee from E.T. whose calendar will also be deleted. +"},{"lineNumber":385,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":"****"},{"lineNumber":388,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":389,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":390,"author":{"gitID":"-"},"content":"****"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":395,"author":{"gitID":"-"},"content":"`delete 2` +"},{"lineNumber":396,"author":{"gitID":"IzHoBX"},"content":"Deletes the 2^nd^ employee and his calendar in E.T."},{"lineNumber":397,"author":{"gitID":"-"},"content":"* `find Betsy` +"},{"lineNumber":398,"author":{"gitID":"-"},"content":"`delete 1` +"},{"lineNumber":399,"author":{"gitID":"-"},"content":"Deletes the 1^st^ employee and his calendar in the results of the `find` command."},{"lineNumber":400,"author":{"gitID":"-"},"content":""},{"lineNumber":401,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":402,"author":{"gitID":"-"},"content":""},{"lineNumber":403,"author":{"gitID":"IzHoBX"},"content":"Clears all entries from E.T. +"},{"lineNumber":404,"author":{"gitID":"IzHoBX"},"content":"Format: `clear`"},{"lineNumber":405,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing an employee : `edit`"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"IzHoBX"},"content":"Edits an existing employee in E.T. +"},{"lineNumber":409,"author":{"gitID":"IzHoBX"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [r/RATING] [t/TAG]...`"},{"lineNumber":410,"author":{"gitID":"-"},"content":""},{"lineNumber":411,"author":{"gitID":"-"},"content":"****"},{"lineNumber":412,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the last employees listing."},{"lineNumber":413,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":414,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":415,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":416,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the employee will be removed i.e adding of tags is not cumulative."},{"lineNumber":417,"author":{"gitID":"-"},"content":"* You can remove all the employee\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":418,"author":{"gitID":"-"},"content":"****"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":421,"author":{"gitID":"-"},"content":""},{"lineNumber":422,"author":{"gitID":"-"},"content":"* `edit 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":423,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1^st^ employee to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":424,"author":{"gitID":"-"},"content":"* `edit 2 n/Betsy Crower t/` +"},{"lineNumber":425,"author":{"gitID":"-"},"content":"Edits the name of the 2^nd^ employee to be `Betsy Crower` and clears all existing tags."},{"lineNumber":426,"author":{"gitID":"-"},"content":""},{"lineNumber":427,"author":{"gitID":"IzHoBX"},"content":"// tag::rate[]"},{"lineNumber":428,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Rating an employee : `rate`"},{"lineNumber":429,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":430,"author":{"gitID":"IzHoBX"},"content":"Updates the rating of an existing employee in E.T. +"},{"lineNumber":431,"author":{"gitID":"IzHoBX"},"content":"Format: `rate INDEX RATING`"},{"lineNumber":432,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":433,"author":{"gitID":"IzHoBX"},"content":"****"},{"lineNumber":434,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the last employees listing."},{"lineNumber":435,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":436,"author":{"gitID":"IzHoBX"},"content":"* Both INDEX and RATING must be provided."},{"lineNumber":437,"author":{"gitID":"IzHoBX"},"content":"* Existing rating will be updated to the input RATING."},{"lineNumber":438,"author":{"gitID":"IzHoBX"},"content":"* RATING must be a positive integer between 1 and 5, i.e. 1, 2, 3, 4, or 5."},{"lineNumber":439,"author":{"gitID":"IzHoBX"},"content":"****"},{"lineNumber":440,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":441,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":442,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":443,"author":{"gitID":"IzHoBX"},"content":"* An employee will have a null rating (shown as `-`) by default upon added. This implies that the employee is yet to be rated."},{"lineNumber":444,"author":{"gitID":"-"},"content":"* You cannot assign null rating to an employee."},{"lineNumber":445,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":446,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":447,"author":{"gitID":"IzHoBX"},"content":"Examples:"},{"lineNumber":448,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":449,"author":{"gitID":"IzHoBX"},"content":"* `list` +"},{"lineNumber":450,"author":{"gitID":"IzHoBX"},"content":"`rate 1 5` +"},{"lineNumber":451,"author":{"gitID":"-"},"content":"Gives the 1^st^ employee in the last employees listing a 5-stars rating."},{"lineNumber":452,"author":{"gitID":"IzHoBX"},"content":"* `find Alex` +"},{"lineNumber":453,"author":{"gitID":"IzHoBX"},"content":"`rate 2 2` +"},{"lineNumber":454,"author":{"gitID":"-"},"content":"Gives the 2^nd^ employee in the list of Alex(s) a 2-stars rating."},{"lineNumber":455,"author":{"gitID":"IzHoBX"},"content":"// end::rate[]"},{"lineNumber":456,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":457,"author":{"gitID":"IzHoBX"},"content":"// tag::review[]"},{"lineNumber":458,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Reviewing an employee : `review`"},{"lineNumber":459,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":460,"author":{"gitID":"IzHoBX"},"content":"Assigns a review to an existing employee in E.T. +"},{"lineNumber":461,"author":{"gitID":"-"},"content":"Format: `review INDEX`"},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"****"},{"lineNumber":464,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the last employees listing."},{"lineNumber":465,"author":{"gitID":"-"},"content":"* The index *must be a positive integer*, i.e. 1, 2, 3, ..."},{"lineNumber":466,"author":{"gitID":"-"},"content":"* The reviewer must be a valid email address."},{"lineNumber":467,"author":{"gitID":"-"},"content":"* The review can contain any character without length limitation."},{"lineNumber":468,"author":{"gitID":"IzHoBX"},"content":"* A review will be tied to a single reviewer."},{"lineNumber":469,"author":{"gitID":"-"},"content":"****"},{"lineNumber":470,"author":{"gitID":"-"},"content":""},{"lineNumber":471,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":472,"author":{"gitID":"-"},"content":""},{"lineNumber":473,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":474,"author":{"gitID":"-"},"content":"`review 1` +"},{"lineNumber":475,"author":{"gitID":"-"},"content":"Gives the 1^st^ employee in the last employees listing a review. +"},{"lineNumber":476,"author":{"gitID":"-"},"content":"* `find n/Alex` +"},{"lineNumber":477,"author":{"gitID":"IzHoBX"},"content":"`review 2` +"},{"lineNumber":478,"author":{"gitID":"-"},"content":"Gives the 2^nd^ employee in the list of Alex(s) a review. +"},{"lineNumber":479,"author":{"gitID":"-"},"content":""},{"lineNumber":480,"author":{"gitID":"IzHoBX"},"content":"A pop-up window will appear after user executes the `review` command as shown in _Figure 15_. The window will prompts user to enter user\u0027s email (as a reviewer) and the review."},{"lineNumber":481,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":482,"author":{"gitID":"IzHoBX"},"content":".Review pop-up window."},{"lineNumber":483,"author":{"gitID":"-"},"content":"image::review_dialog.png[width\u003d\"\"]"},{"lineNumber":484,"author":{"gitID":"IzHoBX"},"content":"// end::review[]"},{"lineNumber":485,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":486,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":487,"author":{"gitID":"-"},"content":""},{"lineNumber":488,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":489,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":490,"author":{"gitID":"-"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":492,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":493,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":494,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":497,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":498,"author":{"gitID":"-"},"content":""},{"lineNumber":499,"author":{"gitID":"IzHoBX"},"content":"Restores E.T. to the state before the previous _undoable command_ was executed. +"},{"lineNumber":500,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":503,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":504,"author":{"gitID":"IzHoBX"},"content":"_Undoable commands_ are commands that modify E.T.\u0027s content (`add`, `addPhoto`, `clear`, `delete`, `dismiss`, `edit`, `email`, `rate`, `review`, and `sort`)."},{"lineNumber":505,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":506,"author":{"gitID":"-"},"content":""},{"lineNumber":507,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":508,"author":{"gitID":"-"},"content":""},{"lineNumber":509,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":510,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":511,"author":{"gitID":"Yoochard"},"content":"`undo` +"},{"lineNumber":512,"author":{"gitID":"-"},"content":"Reverses the `delete 1` command."},{"lineNumber":513,"author":{"gitID":"-"},"content":""},{"lineNumber":514,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":515,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":516,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":517,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":518,"author":{"gitID":"-"},"content":""},{"lineNumber":519,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":520,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":521,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":522,"author":{"gitID":"-"},"content":"Reverses the `clear` command. +"},{"lineNumber":523,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":524,"author":{"gitID":"-"},"content":"Reverses the `delete 1` command."},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":527,"author":{"gitID":"-"},"content":""},{"lineNumber":528,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":529,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":530,"author":{"gitID":"-"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":532,"author":{"gitID":"-"},"content":""},{"lineNumber":533,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":534,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":535,"author":{"gitID":"-"},"content":"Reverses the `delete 1` command. +"},{"lineNumber":536,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":537,"author":{"gitID":"-"},"content":"Reapplies the `delete 1` command."},{"lineNumber":538,"author":{"gitID":"-"},"content":""},{"lineNumber":539,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":540,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":541,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":542,"author":{"gitID":"-"},"content":""},{"lineNumber":543,"author":{"gitID":"-"},"content":"* `delete 1` +"},{"lineNumber":544,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":545,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":546,"author":{"gitID":"-"},"content":"Reverses the `clear` command. +"},{"lineNumber":547,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":548,"author":{"gitID":"-"},"content":"Reverses the `delete 1` command. +"},{"lineNumber":549,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":550,"author":{"gitID":"-"},"content":"Reapplies the `delete 1` command. +"},{"lineNumber":551,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":552,"author":{"gitID":"-"},"content":"Reapplies the `clear` command."},{"lineNumber":553,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":554,"author":{"gitID":"-"},"content":""},{"lineNumber":555,"author":{"gitID":"crizyli"},"content":"// tag::ct[]"},{"lineNumber":556,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Viewing my own calendar: `myCalendar`"},{"lineNumber":557,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":558,"author":{"gitID":"crizyli"},"content":"Views my own calendar. +"},{"lineNumber":559,"author":{"gitID":"crizyli"},"content":"Format: `myCalendar`"},{"lineNumber":560,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":561,"author":{"gitID":"crizyli"},"content":"Examples:"},{"lineNumber":562,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":563,"author":{"gitID":"crizyli"},"content":"* `myCalendar` +"},{"lineNumber":564,"author":{"gitID":"IzHoBX"},"content":"Your Google calendar will be displayed on a pop-up window."},{"lineNumber":565,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":566,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Viewing my to-do-list: `todoList`"},{"lineNumber":567,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":568,"author":{"gitID":"crizyli"},"content":"Views the upcoming events on my google account main calendar. +"},{"lineNumber":569,"author":{"gitID":"crizyli"},"content":"Format: `todoList`"},{"lineNumber":570,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":571,"author":{"gitID":"crizyli"},"content":"Examples:"},{"lineNumber":572,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":573,"author":{"gitID":"crizyli"},"content":"* `todoList` +"},{"lineNumber":574,"author":{"gitID":"IzHoBX"},"content":"A pop-up window will appear as shown in _Figure 16_."},{"lineNumber":575,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":576,"author":{"gitID":"IzHoBX"},"content":".To-do list pop-up window."},{"lineNumber":577,"author":{"gitID":"crizyli"},"content":"image::todoList.png[width\u003d\"300\"][height\u003d\"400\"]"},{"lineNumber":578,"author":{"gitID":"crizyli"},"content":"// end::ct[]"},{"lineNumber":579,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":580,"author":{"gitID":"crizyli"},"content":"// tag::addevent[]"},{"lineNumber":581,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Adding an event to an employee\u0027s calendar: `addEvent`"},{"lineNumber":582,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":583,"author":{"gitID":"crizyli"},"content":"Adds an event to the employee identified by the index number used in the last employees listing. +"},{"lineNumber":584,"author":{"gitID":"IzHoBX"},"content":"Format: `addEvent INDEX title/TITLE loca/LOCATION stime/STARTTIME etime/ENDTIME descrip/DESCRIPTION`"},{"lineNumber":585,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":586,"author":{"gitID":"crizyli"},"content":"****"},{"lineNumber":587,"author":{"gitID":"crizyli"},"content":"* `STARTTIME` and `ENDTIME` *must be in the format `YYYY-MM-DDTHH-MM-SS`*, which corresponds to year, month, day, hour, minute and second."},{"lineNumber":588,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":589,"author":{"gitID":"crizyli"},"content":"* The index *must be a positive integer 1, 2, 3,* …​"},{"lineNumber":590,"author":{"gitID":"crizyli"},"content":"****"},{"lineNumber":591,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":592,"author":{"gitID":"crizyli"},"content":"Examples:"},{"lineNumber":593,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":594,"author":{"gitID":"crizyli"},"content":"* `list` +"},{"lineNumber":595,"author":{"gitID":"crizyli"},"content":"`addEvent 2 title/Test Event loca/NUS, Singapore stime/2017-04-09T19:00:00 etime/2018-04-09T21:00:00 descrip/A Test Event` +"},{"lineNumber":596,"author":{"gitID":"IzHoBX"},"content":"Adds the event to 2^nd^ employee in the list calendar."},{"lineNumber":597,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":598,"author":{"gitID":"crizyli"},"content":"// end::addevent[]"},{"lineNumber":599,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":600,"author":{"gitID":"crizyli"},"content":"// tag::deleteevent[]"},{"lineNumber":601,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Deleting an event in an employee\u0027s calendar: `deleteEvent`"},{"lineNumber":602,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":603,"author":{"gitID":"IzHoBX"},"content":"Deletes an event with specified title which is the first occurrence in the calendar of employee identified by the index number used in the last employees listing. +"},{"lineNumber":604,"author":{"gitID":"crizyli"},"content":"Format: `deleteEvent INDEX TITLE`"},{"lineNumber":605,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":606,"author":{"gitID":"crizyli"},"content":"****"},{"lineNumber":607,"author":{"gitID":"crizyli"},"content":"* The `TITLE` is a String."},{"lineNumber":608,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":609,"author":{"gitID":"crizyli"},"content":"* The index *must be a positive integer 1, 2, 3,* …​"},{"lineNumber":610,"author":{"gitID":"crizyli"},"content":"****"},{"lineNumber":611,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":612,"author":{"gitID":"crizyli"},"content":"Examples:"},{"lineNumber":613,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":614,"author":{"gitID":"crizyli"},"content":"* `list` +"},{"lineNumber":615,"author":{"gitID":"IzHoBX"},"content":"`deleteEvent 2 Project Meeting` +"},{"lineNumber":616,"author":{"gitID":"IzHoBX"},"content":"Deletes the event with title \"Project Meeting\" in 2^nd^ employee in the list calendar."},{"lineNumber":617,"author":{"gitID":"crizyli"},"content":"// end::deleteevent[]"},{"lineNumber":618,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":619,"author":{"gitID":"IzHoBX"},"content":"// tag::ns[]"},{"lineNumber":620,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Toggling the notification center : `noti`"},{"lineNumber":621,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":622,"author":{"gitID":"IzHoBX"},"content":"Shows the notification center if it is hidden or hides the notification center if it is shown. +"},{"lineNumber":623,"author":{"gitID":"IzHoBX"},"content":"Format: `noti`"},{"lineNumber":624,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":625,"author":{"gitID":"IzHoBX"},"content":"[TIP]"},{"lineNumber":626,"author":{"gitID":"IzHoBX"},"content":"Alternatively, you can *double press* kbd:[SHIFT] to toggle the notification center."},{"lineNumber":627,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":628,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Dismissing a notification card : `dismiss`"},{"lineNumber":629,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":630,"author":{"gitID":"IzHoBX"},"content":"Dismisses the notification card identified by the index number. +"},{"lineNumber":631,"author":{"gitID":"IzHoBX"},"content":"Format: `dismiss INDEX`"},{"lineNumber":632,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":633,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Reminding an employee through email : `email`"},{"lineNumber":634,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":635,"author":{"gitID":"IzHoBX"},"content":"Opens up the email app of the computer to send a reminder email about the notification identified by the index number used in notification cards. +"},{"lineNumber":636,"author":{"gitID":"IzHoBX"},"content":"Format: `email INDEX`"},{"lineNumber":637,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":638,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":639,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":640,"author":{"gitID":"IzHoBX"},"content":"* You will be brought straight to the email composing interface of your email app."},{"lineNumber":641,"author":{"gitID":"IzHoBX"},"content":"* The recipient of the email will be set to the email address of the employee who was assigned the event."},{"lineNumber":642,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Reminding all notifications through email : `emailall`"},{"lineNumber":645,"author":{"gitID":"-"},"content":""},{"lineNumber":646,"author":{"gitID":"IzHoBX"},"content":"Opens up the email app of the computer to send a reminder email to all persons who has a task ended. +"},{"lineNumber":647,"author":{"gitID":"IzHoBX"},"content":"Format: `emailall INDEX`"},{"lineNumber":648,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":649,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":650,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":651,"author":{"gitID":"IzHoBX"},"content":"* You will be brought straight to the email composing interface of your email app."},{"lineNumber":652,"author":{"gitID":"IzHoBX"},"content":"* The recipient of the email will be set to the email address of all employees who has task(s) ended."},{"lineNumber":653,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":654,"author":{"gitID":"IzHoBX"},"content":"// end::ns[]"},{"lineNumber":655,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":656,"author":{"gitID":"crizyli"},"content":"// tag::export[]"},{"lineNumber":657,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Exporting the employees : `export`"},{"lineNumber":658,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":659,"author":{"gitID":"IzHoBX"},"content":"Exports current employees in E.T. to a .csv (Excel) file named \"employees.csv\" inside data folder. +"},{"lineNumber":660,"author":{"gitID":"IzHoBX"},"content":"Format: `export`"},{"lineNumber":661,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":662,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":663,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":664,"author":{"gitID":"IzHoBX"},"content":"Make sure that the employees.csv is not open in your computer before executing `export`."},{"lineNumber":665,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":666,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":667,"author":{"gitID":"IzHoBX"},"content":"Examples:"},{"lineNumber":668,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":669,"author":{"gitID":"IzHoBX"},"content":"* `export` +"},{"lineNumber":670,"author":{"gitID":"IzHoBX"},"content":"Current employees in E.T. will be exported."},{"lineNumber":671,"author":{"gitID":"IzHoBX"},"content":"// end::export[]"},{"lineNumber":672,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":673,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Exiting E.T. : `exit`"},{"lineNumber":674,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":675,"author":{"gitID":"IzHoBX"},"content":"Exits E.T. +"},{"lineNumber":676,"author":{"gitID":"IzHoBX"},"content":"Format: `exit`"},{"lineNumber":677,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":678,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":679,"author":{"gitID":"IzHoBX"},"content":"E.T. saves data automatically in the hard disk after any command that changes the data. There is no need to save manually before exit."},{"lineNumber":680,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Upcoming features"},{"lineNumber":682,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"Features yet to be implemented. Coming in `v2.0`."},{"lineNumber":684,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":685,"author":{"gitID":"Yoochard"},"content":"* Editing an event. +"},{"lineNumber":686,"author":{"gitID":"IzHoBX"},"content":"You will be able to edit an event."},{"lineNumber":687,"author":{"gitID":"Yoochard"},"content":"* Adding an event in mass to many employees\u0027 timetable at once. +"},{"lineNumber":688,"author":{"gitID":"Yoochard"},"content":"You will be able to add an event to many employee\u0027s timetable at once for maximum convenience."},{"lineNumber":689,"author":{"gitID":"IzHoBX"},"content":"// tag::dataencryption[]"},{"lineNumber":690,"author":{"gitID":"Yoochard"},"content":"* Encrypting data files. +"},{"lineNumber":691,"author":{"gitID":"-"},"content":"Employees Tracker will ensure data security by encrypting data files."},{"lineNumber":692,"author":{"gitID":"IzHoBX"},"content":"* Grouping employees. +"},{"lineNumber":693,"author":{"gitID":"IzHoBX"},"content":"You will be able to group employees according to the projects that they are working on and address the whole team with the group name."},{"lineNumber":694,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":695,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":696,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"\u003d\u003d Frequently Asked Questions (FAQ)"},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":700,"author":{"gitID":"IzHoBX"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous E.T. folder."},{"lineNumber":701,"author":{"gitID":"-"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":703,"author":{"gitID":"IzHoBX"},"content":"This section summarizes the usage of all E.T.\u0027s commands."},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":706,"author":{"gitID":"-"},"content":"|*Command* |*Format* |*Example*"},{"lineNumber":707,"author":{"gitID":"-"},"content":"|*Add* |`add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` |`add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":708,"author":{"gitID":"IzHoBX"},"content":"|*AddEvent* |`addEvent INDEX title/TITLE loca/LOCATION stime/STARTTIME etime/ENDTIME descrip/DESCRIPTION` |`addEvent 2 title/Test Event loca/NUS, Singapore stime/2017-04-09T19:00:00 etime/2018-04-09T21:00:00 descrip/A Test Event`"},{"lineNumber":709,"author":{"gitID":"crizyli"},"content":"|*AddPhoto* |`addPhoto INDEX` |"},{"lineNumber":710,"author":{"gitID":"-"},"content":"|*Authentication* |`authenET` |"},{"lineNumber":711,"author":{"gitID":"IzHoBX"},"content":"|*ChangeTheme* |`changeTheme THEME` |`changeTheme dark`"},{"lineNumber":712,"author":{"gitID":"-"},"content":"|*Clear* |`clear` |"},{"lineNumber":713,"author":{"gitID":"-"},"content":"|*Delete* |`delete INDEX` |`delete 3`"},{"lineNumber":714,"author":{"gitID":"-"},"content":"|*DeleteEvent* |`deleteEvent INDEX TITLE` |`deleteEvent 1 event title`"},{"lineNumber":715,"author":{"gitID":"IzHoBX"},"content":"|*Dismiss* |`dismiss INDEX` |`dismiss 2`"},{"lineNumber":716,"author":{"gitID":"-"},"content":"|*Edit* |`edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` |`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":717,"author":{"gitID":"IzHoBX"},"content":"|*Email* |`email INDEX` |`email 2`"},{"lineNumber":718,"author":{"gitID":"IzHoBX"},"content":"|*EmailAll* |`emailall` |"},{"lineNumber":719,"author":{"gitID":"crizyli"},"content":"|*Export* |`export` |"},{"lineNumber":720,"author":{"gitID":"-"},"content":"|*Find* |`find (n/NAME_KEYPHRASE \\| t/TAG_KEYPHRASE \\| r/RATING_KEYPHRASE) [n/NAME_KEYPHRASE]…​ [t/TAG_KEYPHRASE]…​ [r/RATING_KEYPHRASE]…` |`find n/James n/Jake Black t/Sales t/Marketing Senior r/3`"},{"lineNumber":721,"author":{"gitID":"-"},"content":"|*Help* |`help` |"},{"lineNumber":722,"author":{"gitID":"-"},"content":"|*History* |`history` |"},{"lineNumber":723,"author":{"gitID":"-"},"content":"|*List* |`list` |"},{"lineNumber":724,"author":{"gitID":"-"},"content":"|*Lock* |`lock` |"},{"lineNumber":725,"author":{"gitID":"-"},"content":"|*MyCalendar* |`myCalendar` |"},{"lineNumber":726,"author":{"gitID":"IzHoBX"},"content":"|*Noti* |`noti` |"},{"lineNumber":727,"author":{"gitID":"-"},"content":"|*Redo* |`redo` |"},{"lineNumber":728,"author":{"gitID":"-"},"content":"|*Review* |`review INDEX` |`review 2`"},{"lineNumber":729,"author":{"gitID":"-"},"content":"|*Select* |`select INDEX` |`select 2`"},{"lineNumber":730,"author":{"gitID":"-"},"content":"|*SetPassword* |`setPassword OLD_PASSWORD NEW_PASSWORD ` |`setPassword admin 12345`"},{"lineNumber":731,"author":{"gitID":"IzHoBX"},"content":"|*Sort* |`sort FIELD` |`sort name`"},{"lineNumber":732,"author":{"gitID":"-"},"content":"|*TodoList* |`todoList` |"},{"lineNumber":733,"author":{"gitID":"-"},"content":"|*Undo* |`undo` |"},{"lineNumber":734,"author":{"gitID":"IzHoBX"},"content":"|*Unlock* |`unlock` |"},{"lineNumber":735,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"}],"authorContributionMap":{"crizyli":109,"Yoochard":20,"IzHoBX":315,"-":291}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"E.T. (Employees Tracker) was developed by the W15-B1 team. +"},{"lineNumber":7,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Li Yufei"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"image::crizyli.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"{empty} [https://github.com/crizyli[github]][\u003c\u003ccrizyli#, portfolio\u003e\u003e]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"Role: Developer +"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"Responsibilities: Lock \u0026 unlock system, manage commands relating to events with google calendar api, add photo feature, export data"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Yang Yuqing"},{"lineNumber":21,"author":{"gitID":"-"},"content":"image::yoochard.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"{empty} [https://github.com/yoochard[github]][\u003c\u003cYoochard#, portfolio\u003e\u003e]"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"Role: Developer +"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"Responsibilities: UI optimisation, sort command and changeTheme command"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Gilbert Emerson"},{"lineNumber":30,"author":{"gitID":"-"},"content":"image::emer7.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"{empty}[http://github.com/emer7[github]][\u003c\u003cemer7#, portfolio\u003e\u003e]"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Responsibilities: Implement enhanced feature search and new feature review"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Ho Bing Xuan"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"image::izhobx.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":40,"author":{"gitID":"-"},"content":"{empty}[https://github.com/IzHoBX[github]][\u003c\u003cIzHoBX#, portfolio\u003e\u003e]"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"Responsibilities: Rating feature, notifications on timetable entry deadlines, email command, dynamic command usage suggestion system"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"}],"authorContributionMap":{"crizyli":4,"IzHoBX":8,"-":33}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d E.T. (Employees Tracker)"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"https://travis-ci.org/CS2103JAN2018-W15-B1[image:https://travis-ci.org/CS2103JAN2018-W15-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"image::docs/images/Ui.png[width\u003d\"600\"]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"Ever feels overwhelmed in managing all your employees?"},{"lineNumber":15,"author":{"gitID":"-"},"content":"Ever wants to keep track of all the tasks you have assigned to your employees?"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"Employees Tracker (E.T.) comes to the rescue!"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"E.T. is a *Human Resource Manager* desktop application that helps managers to manage their subordinates. Its has 2 main functionalities: providing information about employees,"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"as well as helping in tracking the tasks assigned to each employee. Its User Interface (UI) is a hybrid of Command Line"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). That said, ET will suit you better"},{"lineNumber":22,"author":{"gitID":"-"},"content":"if you can type fast and are familiar with CLI!"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":34,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], https://github.com/vdurmont/emoji-java[emoji-java],"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"https://developers.google.com/calendar[Google Calendar API]"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"* The original source of the code: AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/[original source]"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"crizyli":5,"-":34}},{"path":"docs/team/crizyli.adoc","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"\u003d Li Yufei - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"\u003d\u003d PROJECT: Employees Tracker"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"Employees Tracker (E.T.) is a *Human Resource Manager* application that helps managers to manage their subordinates. Its"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"has 2 main functionalities: providing information about employees, as well as helping in tracking the tasks assigned to"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"each employee."},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"Its User Interface (UI) is a hybrid of Command Line Interface (CLI) while still having the benefits of a Graphical User"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"Interface (GUI). That said, ET will suit you better if you can type fast and are familiar with CLI."},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":".UI page"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"image::Ui.png[width\u003d\"600\"]"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"*Code contributed*: [https://github.com/CS2103JAN2018-W15-B1/main/blob/master/collated/functional/crizyli.md[Functional code]] [https://github.com/CS2103JAN2018-W15-B1/main/blob/master/collated/test/crizyli.md[Test code]] {links to collated code files}"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Enhancement Added: Lock and Unlock System"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"include::../UserGuide.adoc[tag\u003dunlock]"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"include::../UserGuide.adoc[tag\u003dlock]"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"#End of Extract#"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"Employees Tracker is a locked by default application in order to prevent the data from unauthorized access. With the lock-unlock system, only the application owner(typically, the manager) can access the application with a unlock password only known to him."},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"(Pull requests https://github.com/CS2103JAN2018-W15-B1/main/pull/6[#6],"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/102[#102],"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/110[#110],"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/192[#192])"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"include::../DeveloperGuide.adoc[tag\u003dlockunlock]"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"#End of Extract#"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Enhancement Added: Calendars and Operations on Calendars"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"include::../UserGuide.adoc[tag\u003daddevent]"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"include::../UserGuide.adoc[tag\u003ddeleteevent]"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"include::../UserGuide.adoc[tag\u003dct]"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"include::../UserGuide.adoc[tag\u003dauth]"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"#End of Extract#"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"Each employee who exists in ET will have his or her owm calendar. Manager can manage all the calendars through some commands"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"that will be covered next."},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"(Pull requests https://github.com/CS2103JAN2018-W15-B1/main/pull/61[#61],"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/122[#122])"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"include::../DeveloperGuide.adoc[tag\u003dcalendar]"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"#End of Extract#"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Enhancement Added: AddPhotoCommand"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"include::../UserGuide.adoc[tag\u003daddphoto]"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"#End of Extract#"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":107,"author":{"gitID":"crizyli"},"content":"Employees have a photo field, and manager can update this field for every employee."},{"lineNumber":108,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":109,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":111,"author":{"gitID":"crizyli"},"content":"(Pull request https://github.com/CS2103JAN2018-W15-B1/main/pull/165[#165],"},{"lineNumber":112,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/166[#166],"},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/169[#169],"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/173[#173],"},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/197[#197])"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":118,"author":{"gitID":"crizyli"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"include::../DeveloperGuide.adoc[tag\u003daddphoto]"},{"lineNumber":121,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":122,"author":{"gitID":"crizyli"},"content":"#End of Extract#"},{"lineNumber":123,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":124,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":125,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":126,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Enhancement Added: Export Employees Data"},{"lineNumber":127,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":128,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d External behavior"},{"lineNumber":129,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":130,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":131,"author":{"gitID":"crizyli"},"content":"#Start of Extract [from: User Guide]#"},{"lineNumber":132,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":133,"author":{"gitID":"crizyli"},"content":"include::../UserGuide.adoc[tag\u003dexport]"},{"lineNumber":134,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":135,"author":{"gitID":"crizyli"},"content":"#End of Extract#"},{"lineNumber":136,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":137,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":138,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":139,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d Justification"},{"lineNumber":140,"author":{"gitID":"crizyli"},"content":"Manager can export the information of employees to an excel file."},{"lineNumber":141,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":142,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":143,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":144,"author":{"gitID":"crizyli"},"content":"(Pull request https://github.com/CS2103JAN2018-W15-B1/main/pull/208[#208])"},{"lineNumber":145,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":146,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":147,"author":{"gitID":"crizyli"},"content":"#Start of Extract [from: Developer Guide]#"},{"lineNumber":148,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":149,"author":{"gitID":"crizyli"},"content":"include::../DeveloperGuide.adoc[tag\u003dexportcom]"},{"lineNumber":150,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":151,"author":{"gitID":"crizyli"},"content":"#End of Extract#"},{"lineNumber":152,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":153,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":154,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":155,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Enhancement Proposed: Data Encryption"},{"lineNumber":156,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":157,"author":{"gitID":"crizyli"},"content":"For now, the application\u0027s password and employees\u0027 information are in plaintext and visible to others besides the user. It is crucial to"},{"lineNumber":158,"author":{"gitID":"crizyli"},"content":"to do data encryption to secure the data from leaking. I am proposing to add a new class `Crypto` which is used to encrypt and decrypt the"},{"lineNumber":159,"author":{"gitID":"crizyli"},"content":"data. Refer to the diagram below:"},{"lineNumber":160,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":161,"author":{"gitID":"crizyli"},"content":".Data encryption precess"},{"lineNumber":162,"author":{"gitID":"crizyli"},"content":"image::dataencrypt.png[width\u003d\"600\"]"},{"lineNumber":163,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":164,"author":{"gitID":"crizyli"},"content":"---"},{"lineNumber":165,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":166,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Other enhancements and contributions"},{"lineNumber":167,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":168,"author":{"gitID":"crizyli"},"content":"* Bugs found and fixed: (https://github.com/CS2103JAN2018-W15-B1/main/issues/171[#171],"},{"lineNumber":169,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/issues/118[#118],"},{"lineNumber":170,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/issues/22[#22],"},{"lineNumber":171,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/222[#222],"},{"lineNumber":172,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/197[#197],"},{"lineNumber":173,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/187[#187],"},{"lineNumber":174,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/127[#127],"},{"lineNumber":175,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/122[#122],"},{"lineNumber":176,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/112[#112],"},{"lineNumber":177,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/60[#60],"},{"lineNumber":178,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-W15-B1/main/pull/43[#43])"},{"lineNumber":179,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":180,"author":{"gitID":"crizyli"},"content":"* Bugs found or suggestions during acceptance testing for other group: (https://github.com/CS2103JAN2018-F11-B1/main/issues/167[#167],"},{"lineNumber":181,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-F11-B1/main/issues/172[#172],"},{"lineNumber":182,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-F11-B1/main/issues/174[#174],"},{"lineNumber":183,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-F11-B1/main/issues/183[#183],"},{"lineNumber":184,"author":{"gitID":"crizyli"},"content":"https://github.com/CS2103JAN2018-F11-B1/main/issues/191[#191])"},{"lineNumber":185,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":186,"author":{"gitID":"crizyli"},"content":""}],"authorContributionMap":{"crizyli":186}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class SampleDataTest extends AddressBookSystemTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void addressBook_dataFileDoesNotExist_loadBlank() {"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":51,"author":{"gitID":"emer7"},"content":"        Person[] expectedList \u003d new Person[0];"},{"lineNumber":52,"author":{"gitID":"emer7"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand();"},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"        testUnlockCommand.setTestMode(true);"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":"        testUnlockCommand.setData(getModel(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"        testUnlockCommand.execute();"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":"        showAllPersons();"},{"lineNumber":57,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedList);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":8,"crizyli":1,"-":51}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.DetailPanel;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand();"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setTestMode(true);"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setData(getModel(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.execute();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        getDetailPanel().click();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":73,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertNotEquals(DetailPanel.DEFAULT_PAGE, getDetailPanel().getLoadedUrl());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertFalse(getDetailPanel().isDetailChanged());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"        //assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":6,"Yoochard":1,"IzHoBX":1,"-":95}},{"path":"src/test/java/systemtests/AddCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE_DEFAULT;"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.testutil.TypicalPersons.AMY_DEFAULT;"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.testutil.TypicalPersons.BOB_DEFAULT;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalPersons.KEYPHRASE_MATCHING_MEIER;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"public class AddCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"        String password \u003d model.getPassword();"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand();"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setTestMode(true);"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.execute();"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":72,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":73,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"        Person toAdd \u003d AMY_DEFAULT;"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"        String command \u003d \"   \" + AddCommand.TEST_COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":76,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":"        //assertCommandSuccess(command, toAdd);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":107,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":109,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(ALICE_DEFAULT);"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"        toAdd \u003d BOB_DEFAULT;"},{"lineNumber":124,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":126,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":129,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":134,"author":{"gitID":"crizyli"},"content":"        showPersonsWithName(KEYPHRASE_MATCHING_MEIER);"},{"lineNumber":135,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":140,"author":{"gitID":"crizyli"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":141,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":146,"author":{"gitID":"crizyli"},"content":"        command \u003d PersonUtil.getTestAddCommand(HOON);"},{"lineNumber":147,"author":{"gitID":"crizyli"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":153,"author":{"gitID":"crizyli"},"content":"        command \u003d PersonUtil.getTestAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":154,"author":{"gitID":"crizyli"},"content":"        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":158,"author":{"gitID":"crizyli"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":162,"author":{"gitID":"crizyli"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":165,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":166,"author":{"gitID":"crizyli"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        /* Case: missing address -\u003e rejected */"},{"lineNumber":169,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":170,"author":{"gitID":"crizyli"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        /* Case: invalid keyphrase -\u003e rejected */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":174,"author":{"gitID":"crizyli"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":177,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":178,"author":{"gitID":"crizyli"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":182,"author":{"gitID":"crizyli"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":185,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"},{"lineNumber":186,"author":{"gitID":"crizyli"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":189,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"},{"lineNumber":190,"author":{"gitID":"crizyli"},"content":"        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":193,"author":{"gitID":"crizyli"},"content":"        command \u003d AddCommand.TEST_COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":194,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC;"},{"lineNumber":195,"author":{"gitID":"crizyli"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * 5. Detail panel and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) {"},{"lineNumber":213,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(PersonUtil.getTestAddCommand(toAdd), toAdd);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":218,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":245,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":247,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * 5. Detail panel, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":264,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":265,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":266,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":56,"Yoochard":2,"IzHoBX":5,"-":206}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.DetailPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import guitests.guihandles.DetailPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.ui.DetailPanel;"},{"lineNumber":44,"author":{"gitID":"Yoochard"},"content":"import seedu.address.ui.ResultDisplay;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":47,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":48,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":49,"author":{"gitID":"-"},"content":" */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":59,"author":{"gitID":"Yoochard"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":60,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"Yoochard"},"content":"        defaultStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":77,"author":{"gitID":"Yoochard"},"content":"        errorStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"},{"lineNumber":78,"author":{"gitID":"Yoochard"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":79,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getDetailPanel());"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public DetailPanelHandle getDetailPanel() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getDetailPanel();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getDetailPanel());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyphrase} (case-insensitive)."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyphrase) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" n/\" + keyphrase);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":186,"author":{"gitID":"IzHoBX"},"content":"        //assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Calls {@code DetailPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        getDetailPanel().rememberUrl();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        getDetailPanel().rememberPersonDetail();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the detail panel remains displaying the details"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * @see DetailPanelHandle#isUrlChanged()"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * @see DetailPanelHandle#isDetailChanged()"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        assertFalse(getDetailPanel().isUrlChanged());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        assertFalse(getDetailPanel().isDetailChanged());"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * Asserts that the detail panel is changed to display the details of the person in the person list panel at"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * @see DetailPanelHandle#isUrlChanged()"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * @see DetailPanelHandle#isDetailChanged()"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            expectedUrl \u003d new URL(DetailPanel.getSearchPageUrl());"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":231,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * Asserts that the detail panel and the selected card in the person list panel remain unchanged."},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * @see DetailPanelHandle#isUrlChanged()"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * @see DetailPanelHandle#isDetailChanged()"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertFalse(getDetailPanel().isUrlChanged());"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        assertFalse(getDetailPanel().isDetailChanged());"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":248,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":249,"author":{"gitID":"emer7"},"content":"     * Asserts that detailPanel is empty and the previously selected card is now deselected."},{"lineNumber":250,"author":{"gitID":"emer7"},"content":"     * @see DetailPanelHandle#isFieldsEmpty()"},{"lineNumber":251,"author":{"gitID":"emer7"},"content":"     * @see PersonListPanelHandle#isAnyCardSelected()"},{"lineNumber":252,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"emer7"},"content":"    protected void assertSelectedCardDeselectedDetailEmpty() {"},{"lineNumber":254,"author":{"gitID":"emer7"},"content":"        assertTrue(getDetailPanel().isFieldsEmpty());"},{"lineNumber":255,"author":{"gitID":"emer7"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":256,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"emer7"},"content":""},{"lineNumber":258,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":259,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":260,"author":{"gitID":"Yoochard"},"content":"     * Asserts that the command box and result display shows the default style."},{"lineNumber":261,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":262,"author":{"gitID":"Yoochard"},"content":"    protected void assertCommandBoxAndResultDisplayShowsDefaultStyle() {"},{"lineNumber":263,"author":{"gitID":"Yoochard"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":264,"author":{"gitID":"Yoochard"},"content":"        assertEquals(defaultStyleOfResultDisplay, getResultDisplay().getStyleClass());"},{"lineNumber":265,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":267,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":268,"author":{"gitID":"Yoochard"},"content":"     * Asserts that the command box and result display shows the error style."},{"lineNumber":269,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":270,"author":{"gitID":"Yoochard"},"content":"    protected void assertCommandBoxAndResultDisplayShowsErrorStyle() {"},{"lineNumber":271,"author":{"gitID":"Yoochard"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":272,"author":{"gitID":"Yoochard"},"content":"        assertEquals(errorStyleOfResultDisplay, getResultDisplay().getStyleClass());"},{"lineNumber":273,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":275,"author":{"gitID":"Yoochard"},"content":"    //@@author"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":278,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":287,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":288,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":289,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":299,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":302,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":303,"author":{"gitID":"IzHoBX"},"content":"            assertEquals(ResultDisplay.WELCOME_MESSAGE, getResultDisplay().getText());"},{"lineNumber":304,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":305,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getDetailPanel().getLoadedUrl());"},{"lineNumber":306,"author":{"gitID":"-"},"content":"            assertTrue(getDetailPanel().isFieldsEmpty());"},{"lineNumber":307,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":308,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":309,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":310,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":315,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":316,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":"}"},{"lineNumber":321,"author":{"gitID":"IzHoBX"},"content":""}],"authorContributionMap":{"emer7":11,"crizyli":1,"Yoochard":26,"IzHoBX":3,"-":280}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYPHRASE_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class SelectCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand();"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setTestMode(true);"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setData(getModel(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.execute();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":37,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":69,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYPHRASE_MATCHING_MEIER);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":96,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":100,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the detail panel is updated accordingly.\u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":128,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":141,"author":{"gitID":"crizyli"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":146,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * 5. Detail panel, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":161,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":162,"author":{"gitID":"crizyli"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":10,"Yoochard":2,"-":152}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_SUCCESS_EVENT_STUB \u003d"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"            new NewResultAvailableEvent(\"success\", true);"},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_FAILURE_EVENT_STUB \u003d"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"            new NewResultAvailableEvent(\"failure\", false);"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"    private List\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"    private List\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":31,"author":{"gitID":"Yoochard"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":32,"author":{"gitID":"Yoochard"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":33,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":34,"author":{"gitID":"Yoochard"},"content":"        defaultStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"},{"lineNumber":35,"author":{"gitID":"Yoochard"},"content":"        defaultStyleOfResultDisplay.remove(ResultDisplay.SUGGESTION_STYLE_CLASS);"},{"lineNumber":36,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":37,"author":{"gitID":"Yoochard"},"content":"        errorStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(defaultStyleOfResultDisplay);"},{"lineNumber":38,"author":{"gitID":"Yoochard"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":39,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":41,"author":{"gitID":"Yoochard"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Yoochard"},"content":"    public void display() {"},{"lineNumber":43,"author":{"gitID":"Yoochard"},"content":"        // default result text"},{"lineNumber":44,"author":{"gitID":"Yoochard"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":45,"author":{"gitID":"Yoochard"},"content":"        resultDisplayHandle.getStyleClass().remove(ResultDisplay.SUGGESTION_STYLE_CLASS);"},{"lineNumber":46,"author":{"gitID":"Yoochard"},"content":"        assertEquals(ResultDisplay.WELCOME_MESSAGE, resultDisplayHandle.getText());"},{"lineNumber":47,"author":{"gitID":"Yoochard"},"content":"        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":48,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":49,"author":{"gitID":"Yoochard"},"content":"        // receiving new results"},{"lineNumber":50,"author":{"gitID":"Yoochard"},"content":"        assertResultDisplay(NEW_RESULT_SUCCESS_EVENT_STUB);"},{"lineNumber":51,"author":{"gitID":"Yoochard"},"content":"        assertResultDisplay(NEW_RESULT_FAILURE_EVENT_STUB);"},{"lineNumber":52,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":54,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":"     * Posts the {@code event} to the {@code EventsCenter}, then verifies that \u003cbr\u003e"},{"lineNumber":56,"author":{"gitID":"Yoochard"},"content":"     *      - the text on the result display matches the {@code event}\u0027s message \u003cbr\u003e"},{"lineNumber":57,"author":{"gitID":"Yoochard"},"content":"     *      - the result display\u0027s style is the same as {@code defaultStyleOfResultDisplay} if event is successful,"},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":"     *        {@code errorStyleOfResultDisplay} otherwise."},{"lineNumber":59,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Yoochard"},"content":"    private void assertResultDisplay(NewResultAvailableEvent event) {"},{"lineNumber":61,"author":{"gitID":"Yoochard"},"content":"        postNow(event);"},{"lineNumber":62,"author":{"gitID":"Yoochard"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":64,"author":{"gitID":"Yoochard"},"content":"        List\u003cString\u003e expectedStyleClass \u003d event.isSuccessful ? defaultStyleOfResultDisplay : errorStyleOfResultDisplay;"},{"lineNumber":65,"author":{"gitID":"Yoochard"},"content":"        resultDisplayHandle.getStyleClass().remove(ResultDisplay.SUGGESTION_STYLE_CLASS);"},{"lineNumber":66,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":67,"author":{"gitID":"Yoochard"},"content":"        assertEquals(event.message, resultDisplayHandle.getText());"},{"lineNumber":68,"author":{"gitID":"Yoochard"},"content":"        assertEquals(expectedStyleClass, resultDisplayHandle.getStyleClass());"},{"lineNumber":69,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":55,"-":15}},{"path":"src/test/java/systemtests/ReviewCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEW_LAZY;"},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":"import static seedu.address.testutil.TypicalPersons.KEYPHRASE_MATCHING_MEIER;"},{"lineNumber":11,"author":{"gitID":"emer7"},"content":""},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":""},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":""},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"import guitests.GuiRobot;"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"import guitests.guihandles.ReviewDialogHandle;"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.commands.ReviewCommand;"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"import seedu.address.model.review.Review;"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":""},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"public class ReviewCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":""},{"lineNumber":37,"author":{"gitID":"emer7"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":38,"author":{"gitID":"emer7"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":41,"author":{"gitID":"emer7"},"content":""},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":""},{"lineNumber":44,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"    public void openReviewDialog() {"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand();"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"        testUnlockCommand.setTestMode(true);"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"        testUnlockCommand.setData(getModel(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"        testUnlockCommand.execute();"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":"        showAllPersons();"},{"lineNumber":51,"author":{"gitID":"emer7"},"content":""},{"lineNumber":52,"author":{"gitID":"emer7"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"        String command \u003d \"     \" + ReviewCommand.COMMAND_WORD + \"      \" + index.getOneBased() + \"       \";"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":"        executeCommand(command);"},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"        assertReviewDialogOpen();"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"emer7"},"content":""},{"lineNumber":58,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"emer7"},"content":"    public void review() throws Exception {"},{"lineNumber":60,"author":{"gitID":"emer7"},"content":"        Model model \u003d getModel();"},{"lineNumber":61,"author":{"gitID":"emer7"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand();"},{"lineNumber":62,"author":{"gitID":"emer7"},"content":"        testUnlockCommand.setTestMode(true);"},{"lineNumber":63,"author":{"gitID":"emer7"},"content":"        testUnlockCommand.setData(getModel(), new CommandHistory(), new UndoRedoStack());"},{"lineNumber":64,"author":{"gitID":"emer7"},"content":"        testUnlockCommand.execute();"},{"lineNumber":65,"author":{"gitID":"emer7"},"content":"        showAllPersons();"},{"lineNumber":66,"author":{"gitID":"emer7"},"content":""},{"lineNumber":67,"author":{"gitID":"emer7"},"content":"        /* Case: review once with different reviewer -\u003e new review*/"},{"lineNumber":68,"author":{"gitID":"emer7"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":69,"author":{"gitID":"emer7"},"content":"        String command \u003d \"     \" + ReviewCommand.COMMAND_WORD + \" \" + index.getOneBased();"},{"lineNumber":70,"author":{"gitID":"emer7"},"content":"        String reviewer \u003d \"test@example.com\";"},{"lineNumber":71,"author":{"gitID":"emer7"},"content":"        String review \u003d \"hardworker\";"},{"lineNumber":72,"author":{"gitID":"emer7"},"content":"        Person editedPerson \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":73,"author":{"gitID":"emer7"},"content":"        Set\u003cReview\u003e newReview \u003d new HashSet\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"emer7"},"content":"        newReview.add(editedPerson.getReviews().iterator().next());"},{"lineNumber":75,"author":{"gitID":"emer7"},"content":"        newReview.add(new Review(reviewer + \"\\n\" + review));"},{"lineNumber":76,"author":{"gitID":"emer7"},"content":"        editedPerson.setReviews(newReview);"},{"lineNumber":77,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(command, index, editedPerson, reviewer, review);"},{"lineNumber":78,"author":{"gitID":"emer7"},"content":""},{"lineNumber":79,"author":{"gitID":"emer7"},"content":"        /* Case: review once with same reviewer -\u003e replace old review*/"},{"lineNumber":80,"author":{"gitID":"emer7"},"content":"        reviewer \u003d \"test@example.com\";"},{"lineNumber":81,"author":{"gitID":"emer7"},"content":"        review \u003d \"lazy\";"},{"lineNumber":82,"author":{"gitID":"emer7"},"content":"        editedPerson \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":83,"author":{"gitID":"emer7"},"content":"        newReview \u003d new HashSet\u003c\u003e();"},{"lineNumber":84,"author":{"gitID":"emer7"},"content":"        newReview.add(editedPerson.getReviews().iterator().next());"},{"lineNumber":85,"author":{"gitID":"emer7"},"content":"        newReview.add(new Review(reviewer + \"\\n\" + review));"},{"lineNumber":86,"author":{"gitID":"emer7"},"content":"        editedPerson.setReviews(newReview);"},{"lineNumber":87,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(command, index, editedPerson, reviewer, review);"},{"lineNumber":88,"author":{"gitID":"emer7"},"content":""},{"lineNumber":89,"author":{"gitID":"emer7"},"content":"        /* Case: review once with empty review -\u003e null review*/"},{"lineNumber":90,"author":{"gitID":"emer7"},"content":"        reviewer \u003d \"test@example.com\";"},{"lineNumber":91,"author":{"gitID":"emer7"},"content":"        review \u003d \"\";"},{"lineNumber":92,"author":{"gitID":"emer7"},"content":"        editedPerson \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":93,"author":{"gitID":"emer7"},"content":"        newReview \u003d new HashSet\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"emer7"},"content":"        newReview.add(editedPerson.getReviews().iterator().next());"},{"lineNumber":95,"author":{"gitID":"emer7"},"content":"        newReview.add(new Review(reviewer + \"\\n\" + \"-\"));"},{"lineNumber":96,"author":{"gitID":"emer7"},"content":"        editedPerson.setReviews(newReview);"},{"lineNumber":97,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(command, index, editedPerson, reviewer, review);"},{"lineNumber":98,"author":{"gitID":"emer7"},"content":""},{"lineNumber":99,"author":{"gitID":"emer7"},"content":"        /* Case: undo reviewing the last person in the list -\u003e last person restored */"},{"lineNumber":100,"author":{"gitID":"emer7"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":101,"author":{"gitID":"emer7"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":102,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(command, model, expectedResultMessage, \"undo\");"},{"lineNumber":103,"author":{"gitID":"emer7"},"content":""},{"lineNumber":104,"author":{"gitID":"emer7"},"content":"        /* Case: redo reviewing the last person in the list -\u003e last person reviewed again */"},{"lineNumber":105,"author":{"gitID":"emer7"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":106,"author":{"gitID":"emer7"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":107,"author":{"gitID":"emer7"},"content":"        model.updatePerson("},{"lineNumber":108,"author":{"gitID":"emer7"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":109,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(command, model, expectedResultMessage, \"redo\");"},{"lineNumber":110,"author":{"gitID":"emer7"},"content":""},{"lineNumber":111,"author":{"gitID":"emer7"},"content":"        /* ------------------ Performing review operation while a filtered list is being shown ---------------------- */"},{"lineNumber":112,"author":{"gitID":"emer7"},"content":""},{"lineNumber":113,"author":{"gitID":"emer7"},"content":"        /* Case: filtered person list, review index within bounds of address book and person list -\u003e edited */"},{"lineNumber":114,"author":{"gitID":"emer7"},"content":"        showPersonsWithName(KEYPHRASE_MATCHING_MEIER);"},{"lineNumber":115,"author":{"gitID":"emer7"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":116,"author":{"gitID":"emer7"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":117,"author":{"gitID":"emer7"},"content":"        command \u003d ReviewCommand.COMMAND_WORD + \" \" + index.getOneBased();"},{"lineNumber":118,"author":{"gitID":"emer7"},"content":"        reviewer \u003d \"test@example.com\";"},{"lineNumber":119,"author":{"gitID":"emer7"},"content":"        review \u003d \"hardwork\";"},{"lineNumber":120,"author":{"gitID":"emer7"},"content":"        editedPerson \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":121,"author":{"gitID":"emer7"},"content":"        newReview \u003d new HashSet\u003c\u003e();"},{"lineNumber":122,"author":{"gitID":"emer7"},"content":"        newReview.add(editedPerson.getReviews().iterator().next());"},{"lineNumber":123,"author":{"gitID":"emer7"},"content":"        newReview.add(new Review(reviewer + \"\\n\" + review));"},{"lineNumber":124,"author":{"gitID":"emer7"},"content":"        editedPerson.setReviews(newReview);"},{"lineNumber":125,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(command, index, editedPerson, reviewer, review);"},{"lineNumber":126,"author":{"gitID":"emer7"},"content":""},{"lineNumber":127,"author":{"gitID":"emer7"},"content":"        /* -------------------- Performing review operation while a person card is selected ------------------------- */"},{"lineNumber":128,"author":{"gitID":"emer7"},"content":""},{"lineNumber":129,"author":{"gitID":"emer7"},"content":"        /* Case: selects first card in the person list, review a person -\u003e reviewed, card selection remains unchanged"},{"lineNumber":130,"author":{"gitID":"emer7"},"content":"         * but detail panel changes"},{"lineNumber":131,"author":{"gitID":"emer7"},"content":"         */"},{"lineNumber":132,"author":{"gitID":"emer7"},"content":"        showAllPersons();"},{"lineNumber":133,"author":{"gitID":"emer7"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":134,"author":{"gitID":"emer7"},"content":"        selectPerson(index);"},{"lineNumber":135,"author":{"gitID":"emer7"},"content":"        command \u003d ReviewCommand.COMMAND_WORD + \" \" + index.getOneBased();"},{"lineNumber":136,"author":{"gitID":"emer7"},"content":"        reviewer \u003d \"test@example.com\";"},{"lineNumber":137,"author":{"gitID":"emer7"},"content":"        review \u003d \"lazy\";"},{"lineNumber":138,"author":{"gitID":"emer7"},"content":"        editedPerson \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":139,"author":{"gitID":"emer7"},"content":"        newReview \u003d new HashSet\u003c\u003e();"},{"lineNumber":140,"author":{"gitID":"emer7"},"content":"        newReview.add(editedPerson.getReviews().iterator().next());"},{"lineNumber":141,"author":{"gitID":"emer7"},"content":"        newReview.add(new Review(reviewer + \"\\n\" + review));"},{"lineNumber":142,"author":{"gitID":"emer7"},"content":"        editedPerson.setReviews(newReview);"},{"lineNumber":143,"author":{"gitID":"emer7"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":144,"author":{"gitID":"emer7"},"content":"        // detail panel is updated to reflect the new person\u0027s name"},{"lineNumber":145,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(command, index, editedPerson, index, reviewer, review);"},{"lineNumber":146,"author":{"gitID":"emer7"},"content":""},{"lineNumber":147,"author":{"gitID":"emer7"},"content":"        /* -------------------------------- Performing invalid review operation ------------------------------------- */"},{"lineNumber":148,"author":{"gitID":"emer7"},"content":""},{"lineNumber":149,"author":{"gitID":"emer7"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":150,"author":{"gitID":"emer7"},"content":"        assertCommandFailure(ReviewCommand.COMMAND_WORD + \" 0\","},{"lineNumber":151,"author":{"gitID":"emer7"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ReviewCommand.MESSAGE_USAGE));"},{"lineNumber":152,"author":{"gitID":"emer7"},"content":""},{"lineNumber":153,"author":{"gitID":"emer7"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":154,"author":{"gitID":"emer7"},"content":"        assertCommandFailure(ReviewCommand.COMMAND_WORD + \" -1\","},{"lineNumber":155,"author":{"gitID":"emer7"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ReviewCommand.MESSAGE_USAGE));"},{"lineNumber":156,"author":{"gitID":"emer7"},"content":""},{"lineNumber":157,"author":{"gitID":"emer7"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected but will still display the pop up dialog first */"},{"lineNumber":158,"author":{"gitID":"emer7"},"content":""},{"lineNumber":159,"author":{"gitID":"emer7"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":160,"author":{"gitID":"emer7"},"content":"        assertCommandFailure(ReviewCommand.COMMAND_WORD,"},{"lineNumber":161,"author":{"gitID":"emer7"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, ReviewCommand.MESSAGE_USAGE));"},{"lineNumber":162,"author":{"gitID":"emer7"},"content":""},{"lineNumber":163,"author":{"gitID":"emer7"},"content":"        /* Case: invalid reviewer -\u003e rejected */"},{"lineNumber":164,"author":{"gitID":"emer7"},"content":"        assertCommandFailure(ReviewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":165,"author":{"gitID":"emer7"},"content":"                Email.MESSAGE_EMAIL_CONSTRAINTS, INVALID_EMAIL_DESC, VALID_REVIEW_LAZY);"},{"lineNumber":166,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"emer7"},"content":""},{"lineNumber":168,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":169,"author":{"gitID":"emer7"},"content":"     * Asserts that the review dialog is open, and closes it after checking."},{"lineNumber":170,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":171,"author":{"gitID":"emer7"},"content":"    private void assertReviewDialogOpen() {"},{"lineNumber":172,"author":{"gitID":"emer7"},"content":"        assertTrue(ERROR_MESSAGE, ReviewDialogHandle.isWindowPresent());"},{"lineNumber":173,"author":{"gitID":"emer7"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":174,"author":{"gitID":"emer7"},"content":""},{"lineNumber":175,"author":{"gitID":"emer7"},"content":"        ReviewDialogHandle reviewDialog \u003d"},{"lineNumber":176,"author":{"gitID":"emer7"},"content":"                new ReviewDialogHandle(guiRobot.getStage(ReviewDialogHandle.REVIEW_DIALOG_WINDOW_TITLE));"},{"lineNumber":177,"author":{"gitID":"emer7"},"content":"        reviewDialog.close();"},{"lineNumber":178,"author":{"gitID":"emer7"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":179,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"emer7"},"content":""},{"lineNumber":181,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"emer7"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":183,"author":{"gitID":"emer7"},"content":"     * the detail panel and selected card remain unchanged."},{"lineNumber":184,"author":{"gitID":"emer7"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":185,"author":{"gitID":"emer7"},"content":"     * @see ReviewCommandSystemTest#assertCommandSuccess(String, Index, Person, Index, String, String)"},{"lineNumber":186,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"emer7"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":188,"author":{"gitID":"emer7"},"content":"                                      String reviewer, String review) {"},{"lineNumber":189,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, toEdit, reviewer, review);"},{"lineNumber":190,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"emer7"},"content":""},{"lineNumber":192,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"emer7"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"emer7"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code ReviewCommand}.\u003cbr\u003e"},{"lineNumber":195,"author":{"gitID":"emer7"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":196,"author":{"gitID":"emer7"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":197,"author":{"gitID":"emer7"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":198,"author":{"gitID":"emer7"},"content":"     * @see ReviewCommandSystemTest#assertCommandSuccess(String, Model, String, Index, String, String)"},{"lineNumber":199,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"emer7"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":201,"author":{"gitID":"emer7"},"content":"                                      Index expectedSelectedCardIndex,"},{"lineNumber":202,"author":{"gitID":"emer7"},"content":"                                      String reviewer, String review) {"},{"lineNumber":203,"author":{"gitID":"emer7"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":204,"author":{"gitID":"emer7"},"content":"        try {"},{"lineNumber":205,"author":{"gitID":"emer7"},"content":"            expectedModel.updatePerson("},{"lineNumber":206,"author":{"gitID":"emer7"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":207,"author":{"gitID":"emer7"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":208,"author":{"gitID":"emer7"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":209,"author":{"gitID":"emer7"},"content":"            throw new IllegalArgumentException("},{"lineNumber":210,"author":{"gitID":"emer7"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":211,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"emer7"},"content":""},{"lineNumber":213,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":214,"author":{"gitID":"emer7"},"content":"                String.format(ReviewCommand.MESSAGE_REVIEW_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex,"},{"lineNumber":215,"author":{"gitID":"emer7"},"content":"                reviewer, review);"},{"lineNumber":216,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"emer7"},"content":""},{"lineNumber":218,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"emer7"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":220,"author":{"gitID":"emer7"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":221,"author":{"gitID":"emer7"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":222,"author":{"gitID":"emer7"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"emer7"},"content":"     * 4. Asserts that the detail panel and selected card update accordingly depending on the card.\u003cbr\u003e"},{"lineNumber":224,"author":{"gitID":"emer7"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"emer7"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"emer7"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":227,"author":{"gitID":"emer7"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":228,"author":{"gitID":"emer7"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":229,"author":{"gitID":"emer7"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":230,"author":{"gitID":"emer7"},"content":"     * @see AddressBookSystemTest#assertSelectedCardDeselectedDetailEmpty()"},{"lineNumber":231,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"emer7"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":233,"author":{"gitID":"emer7"},"content":"                                      String undoOrRedo) {"},{"lineNumber":234,"author":{"gitID":"emer7"},"content":"        executeCommand(command);"},{"lineNumber":235,"author":{"gitID":"emer7"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":236,"author":{"gitID":"emer7"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":237,"author":{"gitID":"emer7"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":238,"author":{"gitID":"emer7"},"content":"        if (undoOrRedo.equals(\"redo\")) {"},{"lineNumber":239,"author":{"gitID":"emer7"},"content":"            assertSelectedCardChanged(null);"},{"lineNumber":240,"author":{"gitID":"emer7"},"content":"        } else {"},{"lineNumber":241,"author":{"gitID":"emer7"},"content":"            assertSelectedCardDeselectedDetailEmpty();"},{"lineNumber":242,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":243,"author":{"gitID":"emer7"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":244,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"emer7"},"content":""},{"lineNumber":246,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"emer7"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"emer7"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"emer7"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"emer7"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"emer7"},"content":"     * 4. Asserts that the detail panel and selected card update accordingly depending on the card at"},{"lineNumber":252,"author":{"gitID":"emer7"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"emer7"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"emer7"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":255,"author":{"gitID":"emer7"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":256,"author":{"gitID":"emer7"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":257,"author":{"gitID":"emer7"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":258,"author":{"gitID":"emer7"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":259,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"emer7"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":261,"author":{"gitID":"emer7"},"content":"                                      Index expectedSelectedCardIndex, String reviewer, String review) {"},{"lineNumber":262,"author":{"gitID":"emer7"},"content":"        executeCommand(command);"},{"lineNumber":263,"author":{"gitID":"emer7"},"content":""},{"lineNumber":264,"author":{"gitID":"emer7"},"content":"        ReviewDialogHandle reviewDialog \u003d"},{"lineNumber":265,"author":{"gitID":"emer7"},"content":"                new ReviewDialogHandle(guiRobot.getStage(ReviewDialogHandle.REVIEW_DIALOG_WINDOW_TITLE));"},{"lineNumber":266,"author":{"gitID":"emer7"},"content":"        reviewDialog.focus();"},{"lineNumber":267,"author":{"gitID":"emer7"},"content":"        reviewDialog.setReviewInputTextField(review);"},{"lineNumber":268,"author":{"gitID":"emer7"},"content":"        reviewDialog.setReviewerInputTextField(reviewer);"},{"lineNumber":269,"author":{"gitID":"emer7"},"content":""},{"lineNumber":270,"author":{"gitID":"emer7"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":271,"author":{"gitID":"emer7"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":272,"author":{"gitID":"emer7"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":273,"author":{"gitID":"emer7"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":274,"author":{"gitID":"emer7"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":275,"author":{"gitID":"emer7"},"content":"        } else {"},{"lineNumber":276,"author":{"gitID":"emer7"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":277,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"emer7"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":279,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"emer7"},"content":""},{"lineNumber":281,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"emer7"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"emer7"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":284,"author":{"gitID":"emer7"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":285,"author":{"gitID":"emer7"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":286,"author":{"gitID":"emer7"},"content":"     * 4. Asserts that the detail panel, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":287,"author":{"gitID":"emer7"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":288,"author":{"gitID":"emer7"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":289,"author":{"gitID":"emer7"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":290,"author":{"gitID":"emer7"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":291,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":292,"author":{"gitID":"emer7"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage, String... review) {"},{"lineNumber":293,"author":{"gitID":"emer7"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":294,"author":{"gitID":"emer7"},"content":""},{"lineNumber":295,"author":{"gitID":"emer7"},"content":"        executeCommand(command);"},{"lineNumber":296,"author":{"gitID":"emer7"},"content":""},{"lineNumber":297,"author":{"gitID":"emer7"},"content":"        if (review.length \u003e 0) {"},{"lineNumber":298,"author":{"gitID":"emer7"},"content":"            ReviewDialogHandle reviewDialog \u003d"},{"lineNumber":299,"author":{"gitID":"emer7"},"content":"                    new ReviewDialogHandle(guiRobot.getStage(ReviewDialogHandle.REVIEW_DIALOG_WINDOW_TITLE));"},{"lineNumber":300,"author":{"gitID":"emer7"},"content":"            reviewDialog.focus();"},{"lineNumber":301,"author":{"gitID":"emer7"},"content":"            reviewDialog.setReviewInputTextField(review[1]);"},{"lineNumber":302,"author":{"gitID":"emer7"},"content":"            reviewDialog.setReviewerInputTextField(review[0]);"},{"lineNumber":303,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":304,"author":{"gitID":"emer7"},"content":""},{"lineNumber":305,"author":{"gitID":"emer7"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":306,"author":{"gitID":"emer7"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":307,"author":{"gitID":"emer7"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":308,"author":{"gitID":"emer7"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":309,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":310}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":"    @Rule"},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":136,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"Yoochard"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"Yoochard"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"Yoochard"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":140,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"Yoochard"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":142,"author":{"gitID":"Yoochard"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":143,"author":{"gitID":"Yoochard"},"content":"        assertFalse(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful);"},{"lineNumber":144,"author":{"gitID":"Yoochard"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":145,"author":{"gitID":"Yoochard"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":146,"author":{"gitID":"Yoochard"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":147,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":149,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"Yoochard"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":151,"author":{"gitID":"Yoochard"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":152,"author":{"gitID":"Yoochard"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":153,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"Yoochard"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":155,"author":{"gitID":"Yoochard"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":156,"author":{"gitID":"Yoochard"},"content":"        assertTrue(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful);"},{"lineNumber":157,"author":{"gitID":"Yoochard"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003e 1);"},{"lineNumber":158,"author":{"gitID":"Yoochard"},"content":"        eventsCollectorRule.eventsCollector.reset();"},{"lineNumber":159,"author":{"gitID":"Yoochard"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":160,"author":{"gitID":"Yoochard"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":161,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"Yoochard"},"content":"    //@@author"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":33,"-":137}},{"path":"src/test/java/seedu/address/ui/DetailPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.DetailPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertPanelDisplaysPerson;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import guitests.guihandles.DetailPanelHandle;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class DetailPanelTest extends GuiUnitTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private PersonCard selectionChangedPersonCardStub;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private DetailPanel detailPanel;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private DetailPanelHandle detailPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        selectionChangedPersonCardStub \u003d new PersonCard(ALICE, 0);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(selectionChangedPersonCardStub);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e detailPanel \u003d new DetailPanel());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(detailPanel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        detailPanelHandle \u003d new DetailPanelHandle(detailPanel.getRoot());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, detailPanelHandle.getLoadedUrl());"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // associated web page of a person \u0026 person card detail"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"        URL expectedPersonUrl \u003d new URL(\"https://calendar.google.com/calendar/embed?src\u003d\""},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"                + \"testCalendarId\u0026ctz\u003dAsia%2FSingapore\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(detailPanelHandle);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertEquals(expectedPersonUrl, detailPanelHandle.getLoadedUrl());"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":"        detailPanelHandle \u003d new DetailPanelHandle(detailPanel.getRoot());"},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"        assertPanelDisplay(new PersonCardHandle(selectionChangedPersonCardStub.getRoot()), detailPanelHandle);"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"emer7"},"content":""},{"lineNumber":58,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"emer7"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":60,"author":{"gitID":"emer7"},"content":"     * {@code expectedId}."},{"lineNumber":61,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"emer7"},"content":"    private void assertPanelDisplay(PersonCardHandle expectedPersonCard, DetailPanelHandle detailPanelHandle) {"},{"lineNumber":63,"author":{"gitID":"emer7"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":64,"author":{"gitID":"emer7"},"content":"        assertPanelDisplaysPerson(expectedPersonCard, detailPanelHandle);"},{"lineNumber":65,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"emer7"},"content":"    //@@author"},{"lineNumber":67,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":14,"crizyli":2,"-":51}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.DetailPanelHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":37,"author":{"gitID":"Yoochard"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":38,"author":{"gitID":"Yoochard"},"content":"                actualCard.getTags());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"     * Asserts that {@code actualPanel} displays the details of {@code expectedPerson}."},{"lineNumber":44,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"    public static void assertPanelDisplaysPerson(PersonCardHandle expectedPersonCard, DetailPanelHandle actualPanel) {"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"        assertEquals(expectedPersonCard.getName(), actualPanel.getName());"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"    //@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * in the correct order."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":8,"Yoochard":3,"-":71}},{"path":"src/test/java/seedu/address/ui/testutil/UiPartRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiPart;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides an isolated stage to test an individual {@code UiPart}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UiPartRule extends StageRule {"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/BrightTheme.css\", \"view/Extensions.css\"};"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            FxToolkit.setupScene(() -\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                Scene scene \u003d new Scene(uiPart.getRoot());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                scene.getStylesheets().setAll(CSS_FILES);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                return scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Timeout should not happen.\", te);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":1,"-":28}},{"path":"src/test/java/systemtests/EditCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BOB;"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BOB;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWER_SUPERVISOR;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEW_LAZY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYPHRASE_MATCHING_MEIER;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"public class EditCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        String password \u003d model.getPassword();"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand();"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setTestMode(true);"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.execute();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":75,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":76,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":79,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \""},{"lineNumber":80,"author":{"gitID":"-"},"content":"                + RATING_DESC_BOB;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRating(VALID_RATING_BOB)"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                .withReviews(VALID_REVIEWER_SUPERVISOR + \"\\n\" + VALID_REVIEW_LAZY).build();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage, \"undo\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":96,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage, \"redo\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":"                + ADDRESS_DESC_BOB + RATING_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYPHRASE_MATCHING_MEIER);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":129,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":130,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYPHRASE_MATCHING_MEIER);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":134,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":139,"author":{"gitID":"-"},"content":"         * detail panel changes"},{"lineNumber":140,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // detail panel is updated to reflect the new person\u0027s name"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":154,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":158,"author":{"gitID":"-"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":175,"author":{"gitID":"-"},"content":"                + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":179,"author":{"gitID":"-"},"content":"                + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        /* Case: invalid address -\u003e rejected */"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":187,"author":{"gitID":"-"},"content":"                + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":191,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":194,"author":{"gitID":"crizyli"},"content":"        executeCommand(PersonUtil.getTestAddCommand(BOB));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":199,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":204,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * the detail panel and selected card remain unchanged."},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, toEdit);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":224,"author":{"gitID":"-"},"content":"     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":231,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":235,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":239,"author":{"gitID":"-"},"content":"                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":243,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":244,"author":{"gitID":"emer7"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":245,"author":{"gitID":"emer7"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":246,"author":{"gitID":"emer7"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"emer7"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"emer7"},"content":"     * 4. Asserts that the detail panel and selected card update accordingly depending on the card.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"emer7"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"emer7"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"emer7"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":252,"author":{"gitID":"emer7"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":253,"author":{"gitID":"emer7"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":254,"author":{"gitID":"emer7"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":255,"author":{"gitID":"emer7"},"content":"     * @see AddressBookSystemTest#assertSelectedCardDeselectedDetailEmpty()"},{"lineNumber":256,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":257,"author":{"gitID":"emer7"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":258,"author":{"gitID":"emer7"},"content":"                                      String undoOrRedo) {"},{"lineNumber":259,"author":{"gitID":"emer7"},"content":"        executeCommand(command);"},{"lineNumber":260,"author":{"gitID":"emer7"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":261,"author":{"gitID":"emer7"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":262,"author":{"gitID":"emer7"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":263,"author":{"gitID":"emer7"},"content":"        if (undoOrRedo.equals(\"redo\")) {"},{"lineNumber":264,"author":{"gitID":"emer7"},"content":"            assertSelectedCardChanged(null);"},{"lineNumber":265,"author":{"gitID":"emer7"},"content":"        } else {"},{"lineNumber":266,"author":{"gitID":"emer7"},"content":"            assertSelectedCardDeselectedDetailEmpty();"},{"lineNumber":267,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"emer7"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":269,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":270,"author":{"gitID":"emer7"},"content":"    //@@author"},{"lineNumber":271,"author":{"gitID":"-"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":273,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":275,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":276,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":277,"author":{"gitID":"-"},"content":"     * 4. Asserts that the detail panel and selected card update accordingly depending on the card at"},{"lineNumber":278,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":279,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":280,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":281,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":284,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":285,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":291,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsDefaultStyle();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":295,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":296,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":297,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":298,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":301,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":302,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":303,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":304,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":305,"author":{"gitID":"-"},"content":"     * 4. Asserts that the detail panel, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":306,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":307,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":308,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":310,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":317,"author":{"gitID":"Yoochard"},"content":"        assertCommandBoxAndResultDisplayShowsErrorStyle();"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":29,"crizyli":8,"Yoochard":2,"IzHoBX":3,"-":278}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(800.0, 800.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public AddressBook readStorageAddressBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return new AddressBook(storage.readAddressBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Data is not in the Employees Tracker format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        return storage.getAddressBookFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"        copy.setPassword(\"admin\");"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":1,"-":123}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"        String defaultConfigAsString \u003d \"App title : ET - Employees Tracker\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":1,"-":31}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"    private static final String VALID_CALENDARID \u003d \"null\";"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    private static final String VALID_PHOTO \u003d \"DefaultPerson.png\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":83,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CALENDARID, VALID_PHOTO);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":92,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CALENDARID, VALID_PHOTO);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":101,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_CALENDARID, VALID_PHOTO);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":135,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":148,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":5,"-":143}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    private Logic logic \u003d new LogicManager(model, false);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    public void execute_applicationLocked() {"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        String validCommand \u003d \"list\";"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        LogicManager.lock();"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        assertUnlockRequired(validCommand, LogicManager.MESSAGE_LOCKED);"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        assertHistoryCorrect(deleteCommand);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":105,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":127,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":134,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":135,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"crizyli"},"content":"     * Asserts that the feedback to user is the same as the message showed when application is locked."},{"lineNumber":137,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"crizyli"},"content":"    private void assertUnlockRequired(String command, String expectedMessage) {"},{"lineNumber":139,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"crizyli"},"content":"            CommandResult result \u003d logic.execute(command);"},{"lineNumber":141,"author":{"gitID":"crizyli"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":142,"author":{"gitID":"crizyli"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":143,"author":{"gitID":"crizyli"},"content":"            throw new AssertionError(\"ParseException and CommandException should not be thrown.\");"},{"lineNumber":144,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":147,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":28,"-":119}},{"path":"src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Contains helper methods for testing command parsers."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class CommandParserTestUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            Command command \u003d parser.parse(userInput);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"     * Special asserts for AddCommandParser to successfully parse and create AddCommand."},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    public static void assertParseSuccess(AddCommandParser parser, boolean isTest,"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"                                          String userInput, Command expectedCommand) {"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"            Command command \u003d parser.parse(userInput, isTest);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            parser.parse(userInput);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":8,"-":45}},{"path":"src/test/java/seedu/address/ui/testutil/NotificationCardStub.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import java.util.LinkedList;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * A stub that mimics the behavior of Notification Card by removing the JavaFX components."},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"public class NotificationCardStub {"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    protected boolean isFirstStage;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    private String title;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    private String index;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    private String ownerName;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    private String endTime;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    private LinkedList\u003cString\u003e content \u003d new LinkedList\u003c\u003e();"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    private String ownerId;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    private boolean isForCenter;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    private String id;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCardStub(String title, String displayedIndex, String ownerName, String endTime, String ownerId,"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"                            boolean isFirstStage, String id) {"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"        this.index \u003d displayedIndex + \". \";"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"        this.title \u003d title;"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"        this.ownerName \u003d ownerName;"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"        this.ownerId \u003d ownerId;"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"        this.isFirstStage \u003d isFirstStage;"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        isForCenter \u003d false;"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"        setStyle();"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCardStub(String title, String displayedIndex, String ownerName, String endTime, String ownerId,"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"                            boolean isFirstStage, boolean isForCenter, String id) {"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"        this.index \u003d displayedIndex + \". \";"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        this.title \u003d title;"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"        this.ownerName \u003d ownerName;"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"        this.ownerId \u003d ownerId;"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"        this.isFirstStage \u003d isFirstStage;"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"        isForCenter \u003d isForCenter;"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"        setStyle();"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"        // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"        // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"        if (!(other instanceof NotificationCardStub)) {"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"            return false;"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"        // state check"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"        NotificationCardStub card \u003d (NotificationCardStub) other;"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"        return index.equals(card.getIndex())"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 title.equals(card.title)"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 ownerName.equals(card.ownerName)"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 endTime.equals(card.endTime);"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"    public String getOwnerId() {"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        return ownerId;"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"    public String getTitle() {"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"        return title;"},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"    public String getIndex() {"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"        return index;"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"    public String getOwnerName() {"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"        return ownerName;"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"    public String getEndTime() {"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"        return endTime;"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"    public void setStyle() {"},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":"    public String getId() {"},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":"        return id;"},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"        return \"Title: \" + title + \" Owner: \" + ownerName;"},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":"     * Decreases the index displayed on notification card."},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":"    public void decreaseIndex(int i) {"},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"        String currIndex \u003d this.index;"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"        int j;"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"        for (j \u003d 0; j \u003c currIndex.length(); j++) {"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":"            if (currIndex.charAt(j) \u003d\u003d \u0027.\u0027) {"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"                break;"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"        int currIndexNumeric \u003d Integer.parseInt(currIndex.substring(0, j));"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"        this.index \u003d (currIndexNumeric - i) + \". \";"},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":117}},{"path":"src/test/java/seedu/address/logic/parser/SetPasswordCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":" * Test scope: similar to {@code SetPasswordCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":" * @see SetPasswordCommandParserTest"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"public class SetPasswordCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    private SetPasswordCommandParser parser \u003d new SetPasswordCommandParser();"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    public void parse_invalidArgs() {"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        // extra args provided."},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \" 1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"                SetPasswordCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    public void parse_validArgs_returnsSetPasswordCommand() {"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        //trailing spaces, success."},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \" \","},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"                new SetPasswordCommand());"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":33}},{"path":"src/test/java/seedu/address/logic/parser/UnlockCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":" * Test scope: similar to {@code UnlockCommandParserTest}."},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":" * @see UnlockCommandParserTest"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"public class UnlockCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    private UnlockCommandParser parser \u003d new UnlockCommandParser();"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    public void parse_extraArgs() {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        //extra args provided"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \" 123\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnlockCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    public void parse_validArgs_returnsLockCommand() {"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \"   \", new UnlockCommand());"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":29}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"//@@author Yoochard"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":" * Test scope: To test SortCommandParser."},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":"public class SortCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"    public void no_arguments_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":23}},{"path":"src/test/java/seedu/address/logic/parser/LockCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":" * Test scope: similar to {@code UnlockCommandParserTest}."},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":" * @see UnlockCommandParserTest"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"public class LockCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    private LockCommandParser parser \u003d new LockCommandParser();"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    public void parse_extraArgs() {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        //extra args provided"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \" 2\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, LockCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    public void parse_validArgs_returnsLockCommand() {"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        //trailing spaces, success."},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \"   \", new LockCommand());"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":30}},{"path":"src/test/java/seedu/address/logic/parser/AddPhotoCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.AddPhotoCommand;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"public class AddPhotoCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    private AddPhotoCommandParser parser \u003d new AddPhotoCommandParser();"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    public void parse_validArgs_returnsAddPhotoCommand() {"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \"1\", new AddPhotoCommand(INDEX_FIRST_PERSON));"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPhotoCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":29}},{"path":"src/test/java/seedu/address/logic/parser/ReviewCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":""},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":""},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.commands.ReviewCommand;"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":""},{"lineNumber":11,"author":{"gitID":"emer7"},"content":"public class ReviewCommandParserTest {"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewCommand.MESSAGE_USAGE);"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":""},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"    private ReviewCommandParser parser \u003d new ReviewCommandParser();"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":""},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"    public void parse_indexInvalid_failure() {"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"        assertParseFailure(parser, \"a\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":""},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"    public void parse_indexZeroOrLess_failure() {"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":27}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.AddPhotoCommand;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.AuthenCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.MyCalendarCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.TestAddEventCommand;"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.TodoListCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.FieldContainKeyphrasesPredicate;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":54,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        List\u003cString\u003e nameKeyphrases \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        List\u003cString\u003e tagKeyphrases \u003d Arrays.asList(\"friend\", \"family\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        List\u003cString\u003e ratingKeyphrases \u003d Arrays.asList(\"5\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":70,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                        + \" n/\""},{"lineNumber":72,"author":{"gitID":"-"},"content":"                        + nameKeyphrases.stream().collect(Collectors.joining(\" n/\"))"},{"lineNumber":73,"author":{"gitID":"emer7"},"content":"                        //@@author emer7"},{"lineNumber":74,"author":{"gitID":"emer7"},"content":"                        + \" t/\""},{"lineNumber":75,"author":{"gitID":"emer7"},"content":"                        + tagKeyphrases.stream().collect(Collectors.joining(\" t/\"))"},{"lineNumber":76,"author":{"gitID":"emer7"},"content":"                        + \" r/\""},{"lineNumber":77,"author":{"gitID":"emer7"},"content":"                        + ratingKeyphrases.stream().collect(Collectors.joining(\" r/\")));"},{"lineNumber":78,"author":{"gitID":"emer7"},"content":"        assertEquals(new FindCommand("},{"lineNumber":79,"author":{"gitID":"emer7"},"content":"                new FieldContainKeyphrasesPredicate("},{"lineNumber":80,"author":{"gitID":"emer7"},"content":"                        nameKeyphrases, tagKeyphrases, ratingKeyphrases)),"},{"lineNumber":81,"author":{"gitID":"emer7"},"content":"                        command);"},{"lineNumber":82,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":111,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"crizyli"},"content":"    public void parseCommand_addEvent() throws Exception {"},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"        assertTrue(parser.parseCommand(TestAddEventCommand.COMMAND_WORD"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"                + \" 1 title/Project loca/NUS, Singapore stime/2017-03-19T08:00:00 \""},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":"                + \"etime/2017-03-19T10:00:00 descrip/discuss\")"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":"                instanceof TestAddEventCommand);"},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"    public void parseCommand_lock() throws Exception {"},{"lineNumber":121,"author":{"gitID":"crizyli"},"content":"        assertTrue(parser.parseCommand(LockCommand.COMMAND_WORD) instanceof LockCommand);"},{"lineNumber":122,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":124,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"crizyli"},"content":"    public void parseCommand_unlock() throws Exception {"},{"lineNumber":126,"author":{"gitID":"crizyli"},"content":"        assertTrue(parser.parseCommand(UnlockCommand.COMMAND_WORD) instanceof UnlockCommand);"},{"lineNumber":127,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":129,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"crizyli"},"content":"    public void parseCommand_setPasswrod() throws Exception {"},{"lineNumber":131,"author":{"gitID":"crizyli"},"content":"        assertTrue(parser.parseCommand(SetPasswordCommand.COMMAND_WORD) instanceof SetPasswordCommand);"},{"lineNumber":132,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":134,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"crizyli"},"content":"    public void parseCommand_todoList() throws Exception {"},{"lineNumber":136,"author":{"gitID":"crizyli"},"content":"        assertTrue(parser.parseCommand(TodoListCommand.COMMAND_WORD) instanceof TodoListCommand);"},{"lineNumber":137,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":139,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"crizyli"},"content":"    public void parseCommand_myCalendar() throws Exception {"},{"lineNumber":141,"author":{"gitID":"crizyli"},"content":"        assertTrue(parser.parseCommand(MyCalendarCommand.COMMAND_WORD) instanceof MyCalendarCommand);"},{"lineNumber":142,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":144,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"crizyli"},"content":"    public void parseCommand_addPhoto() throws Exception {"},{"lineNumber":146,"author":{"gitID":"crizyli"},"content":"        AddPhotoCommand command \u003d (AddPhotoCommand) parser.parseCommand("},{"lineNumber":147,"author":{"gitID":"crizyli"},"content":"                AddPhotoCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":148,"author":{"gitID":"crizyli"},"content":"        assertEquals(new AddPhotoCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":149,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":151,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"crizyli"},"content":"    public void parseCommand_authen() throws Exception {"},{"lineNumber":153,"author":{"gitID":"crizyli"},"content":"        assertTrue(parser.parseCommand(AuthenCommand.COMMAND_WORD) instanceof AuthenCommand);"},{"lineNumber":154,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":156,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":160,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":10,"crizyli":55,"-":124}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d E.T. (Employees Tracker) - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title: Table of Contents"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":":repoURL: https://github.com/CS2103JAN2018-W15-B1/main/tree/master"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"By: `Team W15-B1`      Since: `Feb 2018`      Licence: `MIT`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"Employees Tracker is a *Human Resource Manager* application that helps managers to manage their subordinates. It has 2 main functionalities: providing information about employees, as well as helping in tracking the tasks assigned to each employee."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"This developer guide serves to guide you so that you are able to develop Employees Tracker further and contribute to it."},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u003d\u003d Setting Up"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"Make sure you follow this section carefully so that you get to work on Employees Tracker right away!"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"Before you start developing, make sure you have the followings in your computer:"},{"lineNumber":32,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"* *JDK `1.8.0_60`* or later"},{"lineNumber":34,"author":{"gitID":"-"},"content":"+"},{"lineNumber":35,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":36,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *IntelliJ* IDE"},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":43,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":44,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Instructions for setting up the project in your computer"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"Follow the steps below to set up the project in your computer:"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer."},{"lineNumber":52,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":53,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle."},{"lineNumber":54,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."},{"lineNumber":55,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK."},{"lineNumber":56,"author":{"gitID":"-"},"content":". Click `Import Project`."},{"lineNumber":57,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`."},{"lineNumber":58,"author":{"gitID":"-"},"content":". Click `Open as Project`."},{"lineNumber":59,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings."},{"lineNumber":60,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":61,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Verification of the setup"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"Follow the steps below to verify your setup:"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands."},{"lineNumber":68,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours."},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"To rectify:"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."},{"lineNumber":79,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`."},{"lineNumber":80,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: +"},{"lineNumber":83,"author":{"gitID":"-"},"content":"Set to `999` to prevent IntelliJ from contracting the import statements."},{"lineNumber":84,"author":{"gitID":"-"},"content":"* For `Import Layout`: +"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Add a `\u003cblank line\u003e` between `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, and `import all other imports` each sequentially."},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":100,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"When you are ready to start coding:"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":112,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"This section outlines the design of Employees Tracker."},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":119,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"The *Architecture Diagram* given in _Figure 1_ below explains the high-level design of the App."},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":".Architecture Diagram."},{"lineNumber":124,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":127,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"Given below is a quick overview of each component:"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"* `Main` : It only has one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"},{"lineNumber":132,"author":{"gitID":"-"},"content":"** At app launch: Initializing the components in the correct sequence, and connecting them up with each other."},{"lineNumber":133,"author":{"gitID":"-"},"content":"** At shut down: Shutting down the components and invoking cleanup method where necessary."},{"lineNumber":134,"author":{"gitID":"-"},"content":"* `Commons` : It represents a collection of classes used by other components. +"},{"lineNumber":135,"author":{"gitID":"-"},"content":"Two of those classes play important roles at the architecture level:"},{"lineNumber":136,"author":{"gitID":"-"},"content":"** `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)."},{"lineNumber":137,"author":{"gitID":"-"},"content":"** `LogsCenter` : This class is used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":138,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e : It is the User Interface (UI) of the App."},{"lineNumber":139,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e : It executes command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e : It holds Employees Tracker\u0027s data in memory."},{"lineNumber":141,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e : It communicates between Employees Tracker and hard disk to read and write data."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"Each of the last four components (\u003c\u003cDesign-Ui,*`UI`*\u003e\u003e, \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e, \u003c\u003cDesign-Model,*`Model`*\u003e\u003e, and \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e) shares a common functionality:"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":146,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"For example, the `Logic` component (refer to the class diagram given in _Figure 2_ below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":151,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":154,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-driven nature of the design"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"The *Sequence Diagram* given in _Figure 3_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)."},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":162,"author":{"gitID":"-"},"content":"Pay attention to how the `Model` simply raises a `AddressBookChangedEvent` when Employees Tracker\u0027s data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"The *Sequence Diagram* given in _Figure 4_ below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)."},{"lineNumber":167,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":170,"author":{"gitID":"-"},"content":"Pay attention to how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"The *Class Diagram* given in _Figure 5_ below shows the classes in UI component and their associations."},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":180,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":183,"author":{"gitID":"-"},"content":"Refer to link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`] for the *API* of UI Component."},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"The `UI` component executes user commands using the `Logic` component, binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change, and responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":192,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"The *Class Diagram* given in _Figure 6_ below shows the classes in Logic component and their associations."},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":197,"author":{"gitID":"-"},"content":".Structure of the Logic Component."},{"lineNumber":198,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"The *Class Diagram* given in _Figure 7_ below shows a finer detail concerning `XYZCommand` and `Command` in _Figure 6_."},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component."},{"lineNumber":203,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":206,"author":{"gitID":"-"},"content":"Refer to link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`] for the *API* of Logic Component."},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"The `Logic` component uses the AddressBookParser class to parse the user command. This will result in a `Command` object which is executed by the `LogicManager`, which may affect the `Model` (e.g. adding a person) and/or raise events. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"The *Sequence Diagram* given in _Figure 8_ below shows the interactions within the `Logic` component for `execute(\"delete 1\")` _API_ call."},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command."},{"lineNumber":213,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":216,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"The *Class Diagram* given in _Figure 9_ below shows the classes in Model component and their associations."},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":".Structure of the Model Component."},{"lineNumber":221,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":224,"author":{"gitID":"-"},"content":"Refer to link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`] for the *API* of Model Component."},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"The `Model` component does the following:"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"* Stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":229,"author":{"gitID":"-"},"content":"* Stores Employees Tracker\u0027s data."},{"lineNumber":230,"author":{"gitID":"-"},"content":"* Exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"The `Model` component does not depend on any of the other three components."},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"The *Class Diagram* given in _Figure 10_ below shows the classes in Storage component and their associations."},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":".Structure of the Storage Component."},{"lineNumber":240,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":243,"author":{"gitID":"-"},"content":"Refer to link:{repoURL}/src/main/java/seedu/address/model/Storage.java[`Storage.java`] for the *API* of Storage Component."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"The `Storage` component does the following:"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"* Save `UserPref` objects in json format and read it back."},{"lineNumber":248,"author":{"gitID":"-"},"content":"* Save Employees Tracker data in xml format and read it back."},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":257,"author":{"gitID":"-"},"content":""},{"lineNumber":258,"author":{"gitID":"Yoochard"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of Employees Tracker (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":259,"author":{"gitID":"-"},"content":""},{"lineNumber":260,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"Yoochard"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of Employees Tracker before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":267,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":268,"author":{"gitID":"-"},"content":"----"},{"lineNumber":269,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":273,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":274,"author":{"gitID":"-"},"content":"}"},{"lineNumber":275,"author":{"gitID":"-"},"content":"----"},{"lineNumber":276,"author":{"gitID":"-"},"content":""},{"lineNumber":277,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":278,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":279,"author":{"gitID":"-"},"content":"----"},{"lineNumber":280,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":287,"author":{"gitID":"-"},"content":"}"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":293,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":294,"author":{"gitID":"-"},"content":"}"},{"lineNumber":295,"author":{"gitID":"-"},"content":"----"},{"lineNumber":296,"author":{"gitID":"-"},"content":""},{"lineNumber":297,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":298,"author":{"gitID":"-"},"content":""},{"lineNumber":299,"author":{"gitID":"Yoochard"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5^th^ person in Employees Tracker. The current state of Employees Tracker is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":304,"author":{"gitID":"-"},"content":""},{"lineNumber":305,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":306,"author":{"gitID":"-"},"content":""},{"lineNumber":307,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":308,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"Yoochard"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore Employees Tracker to the state before the `add` command executed."},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":317,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"Yoochard"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores Employees Tracker to the state after the command is executed)."},{"lineNumber":324,"author":{"gitID":"-"},"content":""},{"lineNumber":325,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":326,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":327,"author":{"gitID":"-"},"content":""},{"lineNumber":328,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":329,"author":{"gitID":"-"},"content":""},{"lineNumber":330,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":331,"author":{"gitID":"-"},"content":""},{"lineNumber":332,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":333,"author":{"gitID":"-"},"content":""},{"lineNumber":334,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":335,"author":{"gitID":"-"},"content":""},{"lineNumber":336,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":337,"author":{"gitID":"-"},"content":""},{"lineNumber":338,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":339,"author":{"gitID":"-"},"content":""},{"lineNumber":340,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":341,"author":{"gitID":"-"},"content":""},{"lineNumber":342,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":343,"author":{"gitID":"-"},"content":""},{"lineNumber":344,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`."},{"lineNumber":345,"author":{"gitID":"IzHoBX"},"content":"** Pros: Will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":347,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`."},{"lineNumber":348,"author":{"gitID":"Yoochard"},"content":"** Pros: Template pattern is not involved when developing, so it is easier for new developers to understand."},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":350,"author":{"gitID":"-"},"content":""},{"lineNumber":351,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":352,"author":{"gitID":"-"},"content":""},{"lineNumber":353,"author":{"gitID":"Yoochard"},"content":"* **Alternative 1 (current choice):** Saves entire Employees Tracker."},{"lineNumber":354,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":356,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":357,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":359,"author":{"gitID":"-"},"content":""},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":362,"author":{"gitID":"-"},"content":""},{"lineNumber":363,"author":{"gitID":"Yoochard"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies Employees Tracker (`add`, `clear`, `edit`)."},{"lineNumber":364,"author":{"gitID":"IzHoBX"},"content":"** Pros: Only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":365,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":366,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":367,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":368,"author":{"gitID":"Yoochard"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of Employees Tracker and not the view."},{"lineNumber":369,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo."},{"lineNumber":375,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":376,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":377,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo."},{"lineNumber":378,"author":{"gitID":"IzHoBX"},"content":"** Pros: Do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":379,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":380,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"IzHoBX"},"content":"// tag::rate[]"},{"lineNumber":383,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Edit and rate a person"},{"lineNumber":384,"author":{"gitID":"IzHoBX"},"content":"This section presents the implmentation of `edit` command and `rate` command, which are implemented in a similar manner. The only difference is that `rate` can only change the `Rating` field, but `edit` can be used to change any field."},{"lineNumber":385,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":387,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":388,"author":{"gitID":"IzHoBX"},"content":"There are 4 classes that play a vital role in the current implementation:"},{"lineNumber":389,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":390,"author":{"gitID":"IzHoBX"},"content":"* Person"},{"lineNumber":391,"author":{"gitID":"IzHoBX"},"content":"* EditCommandParser or RateCommandParser"},{"lineNumber":392,"author":{"gitID":"IzHoBX"},"content":"* EditPersonDescriptor"},{"lineNumber":393,"author":{"gitID":"IzHoBX"},"content":"* EditCommand"},{"lineNumber":394,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":395,"author":{"gitID":"IzHoBX"},"content":"The following code snippet shows the fields of the `EditPersonDescriptor` class, which is an internal class of `EditCommand`."},{"lineNumber":396,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":397,"author":{"gitID":"IzHoBX"},"content":"[source, java]"},{"lineNumber":398,"author":{"gitID":"IzHoBX"},"content":"----"},{"lineNumber":399,"author":{"gitID":"IzHoBX"},"content":"  public static class EditPersonDescriptor {"},{"lineNumber":400,"author":{"gitID":"IzHoBX"},"content":"        private Name name;"},{"lineNumber":401,"author":{"gitID":"IzHoBX"},"content":"        private Phone phone;"},{"lineNumber":402,"author":{"gitID":"IzHoBX"},"content":"        private Email email;"},{"lineNumber":403,"author":{"gitID":"IzHoBX"},"content":"        private Address address;"},{"lineNumber":404,"author":{"gitID":"IzHoBX"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":405,"author":{"gitID":"IzHoBX"},"content":"        private Set\u003cReview\u003e reviews;"},{"lineNumber":406,"author":{"gitID":"IzHoBX"},"content":"        private Rating rating;"},{"lineNumber":407,"author":{"gitID":"IzHoBX"},"content":"        private Photo photo;"},{"lineNumber":408,"author":{"gitID":"IzHoBX"},"content":"  }"},{"lineNumber":409,"author":{"gitID":"IzHoBX"},"content":"----"},{"lineNumber":410,"author":{"gitID":"IzHoBX"},"content":"Note that the `EditPersonDescriptor` has the exact same fields as the `Person` class."},{"lineNumber":411,"author":{"gitID":"IzHoBX"},"content":"Each of the fields is used to contain the corresponding *new* value of the field. For example, suppose the user wants to edit the name from \"Alek\" to \"Alex\", \"Alex\" will be stored in the `name` field of `EditPersonDescriptor`. +"},{"lineNumber":412,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":413,"author":{"gitID":"IzHoBX"},"content":"_Figure 11_ below shows the sequence diagram of the execution of `rate` command. `Edit` command has an exactly same execution, `RateCommandParser` will be replaced with `EditCommandParser` while `RateCommand` will be replaced with `EditCommand`."},{"lineNumber":414,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":415,"author":{"gitID":"IzHoBX"},"content":".Sequence diagram of Rate Command execution"},{"lineNumber":416,"author":{"gitID":"IzHoBX"},"content":"image::Rate Command Sequence Diagram.png[width\u003d\"500\"]"},{"lineNumber":417,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":418,"author":{"gitID":"IzHoBX"},"content":"The important method calls during the execution of `edit` and `rate` command includes:"},{"lineNumber":419,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":420,"author":{"gitID":"IzHoBX"},"content":". parse(args): `EditCommandParser` extracts the new information for each field from user input."},{"lineNumber":421,"author":{"gitID":"IzHoBX"},"content":". EditPersonDescriptor(): `EditPersonDescriptor` is used to record which field(s) will be changed and the respective new value."},{"lineNumber":422,"author":{"gitID":"IzHoBX"},"content":". getFilteredPersonList(): The original Person, `toEdit` is obtained from `Model`."},{"lineNumber":423,"author":{"gitID":"IzHoBX"},"content":". person(): `edited` Person will be created, by obtaining the new value for modified fields from `EditPersonDescriptor`. The value of unmodified field(s) are obtained from `toEdit`."},{"lineNumber":424,"author":{"gitID":"IzHoBX"},"content":". updatePerson(toEdit, edited): `edited` Person is used to replace `toEdit` Person in `AddressBook`."},{"lineNumber":425,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":426,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":427,"author":{"gitID":"IzHoBX"},"content":"This current implementation of `edit` command is by courtesy of the original AddressBook application. The W15B1 team is only responsible for adapting the implementation into `rate` command."},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":430,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":431,"author":{"gitID":"IzHoBX"},"content":"This section showcases some of the alternative designs for the implementation of `rate` and `edit` command."},{"lineNumber":432,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":433,"author":{"gitID":"IzHoBX"},"content":"There are 2 ways to update information regarding a `Person` object. +"},{"lineNumber":434,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":435,"author":{"gitID":"IzHoBX"},"content":"* Alternative 1 (current implementation): Creates a new `Person` object that contains the new information to replace the old `Person` object"},{"lineNumber":436,"author":{"gitID":"IzHoBX"},"content":"** Pros: data integrity is guaranteed, higher cohesion (all modifications on data must be done through `Model`)"},{"lineNumber":437,"author":{"gitID":"IzHoBX"},"content":"** Cons: implementation is more complicated"},{"lineNumber":438,"author":{"gitID":"IzHoBX"},"content":"* Alternative 2: Uses setter methods on the `Person` object"},{"lineNumber":439,"author":{"gitID":"IzHoBX"},"content":"** Pros: implementation is simple"},{"lineNumber":440,"author":{"gitID":"IzHoBX"},"content":"** Cons: data integrity is compromised (the `Person` object can be modified by any entity), more coupling"},{"lineNumber":441,"author":{"gitID":"IzHoBX"},"content":"// end::rate[]"},{"lineNumber":442,"author":{"gitID":"-"},"content":""},{"lineNumber":443,"author":{"gitID":"-"},"content":"// tag::emer7[]"},{"lineNumber":444,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Review feature"},{"lineNumber":445,"author":{"gitID":"-"},"content":""},{"lineNumber":446,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":447,"author":{"gitID":"-"},"content":""},{"lineNumber":448,"author":{"gitID":"-"},"content":"A `Review` consists of the _review_ content itself and the _reviewer_. _Review_ and _reviewer_ are separated by a single newline character."},{"lineNumber":449,"author":{"gitID":"-"},"content":""},{"lineNumber":450,"author":{"gitID":"-"},"content":"_Review_ content itself has no restriction on the content, it accepts all characters with no length limitation). _Reviewer_ must be a valid email format. A new empty `Review` will be instantiated with null value of `-` for both _review_ and _reviewer_, signifying that both fields are empty."},{"lineNumber":451,"author":{"gitID":"-"},"content":""},{"lineNumber":452,"author":{"gitID":"-"},"content":"Each `Person` has a `UniqueReviewList`, that is a unique list of `Review(s)`. A new `Person` upon creation will have an empty `UniqueReviewList`. A `Person` can be assigned `Review(s)` through `review` command."},{"lineNumber":453,"author":{"gitID":"-"},"content":""},{"lineNumber":454,"author":{"gitID":"-"},"content":"`review` command and `review` command are implemented in a similar manner. They both involve modifying the field(s) of a `Person`. The only difference is that `review` can only change the `Review` field, but `edit` can be used to change any field except `Review`. Hence, the implementation may be very similar to \u003c\u003cEdit and rate a person\u003e\u003e."},{"lineNumber":455,"author":{"gitID":"-"},"content":""},{"lineNumber":456,"author":{"gitID":"-"},"content":"The implementation of `review` and `edit` command in the Logic component involves 4 objects: +"},{"lineNumber":457,"author":{"gitID":"-"},"content":""},{"lineNumber":458,"author":{"gitID":"-"},"content":". `Person` personToEdit."},{"lineNumber":459,"author":{"gitID":"-"},"content":". `Person` editedPerson."},{"lineNumber":460,"author":{"gitID":"-"},"content":". `Parser` ReviewCommandParser."},{"lineNumber":461,"author":{"gitID":"-"},"content":". `EditPersonDescriptor`."},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"-"},"content":"Since all fields of the `Person` class are immutable, we need to use `Person` _editedPerson_ to replace the `Person` _personToEdit_."},{"lineNumber":464,"author":{"gitID":"-"},"content":""},{"lineNumber":465,"author":{"gitID":"-"},"content":"Additionally, the implementation also involves `ReviewDialog` in the UI component and `ShowReviewDialogEvent` in Common component to show the pop-up review dialog for user to input _reviewer_ and _review_."},{"lineNumber":466,"author":{"gitID":"-"},"content":""},{"lineNumber":467,"author":{"gitID":"IzHoBX"},"content":"The details of implementation are as follow:"},{"lineNumber":468,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":469,"author":{"gitID":"-"},"content":". `Parser` extracts `Index` from user input and validates it."},{"lineNumber":470,"author":{"gitID":"-"},"content":". `Parser` posts `ShowReviewDialogEvent` to show the review pop-up dialog for user to input the _reviewer_ and _review_."},{"lineNumber":471,"author":{"gitID":"-"},"content":". `EditPersonDescriptor` is used to record the new `Review` value."},{"lineNumber":472,"author":{"gitID":"-"},"content":". `Person` _editedPerson_ will be created by obtaining the new `Review` value from `EditPersonDescriptor` together with the old `Review` value. +"},{"lineNumber":473,"author":{"gitID":"-"},"content":"The old `Review` value is obtained from `Person` _personToEdit_."},{"lineNumber":474,"author":{"gitID":"-"},"content":". `Person` _editedPerson_ is used to replace `Person` _personToEdit_ in `AddressBook`."},{"lineNumber":475,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":476,"author":{"gitID":"-"},"content":"Given below in _Figure 11_ is the partial sequence diagram of Review Command. `LogicManager` and how `ReviewCommand` executes are omitted as they are similar to _Figure 8_."},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"-"},"content":".Sequence Diagram for Review Command"},{"lineNumber":479,"author":{"gitID":"-"},"content":"image::review_seq.png[width\u003d\"800\"]"},{"lineNumber":480,"author":{"gitID":"-"},"content":""},{"lineNumber":481,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":482,"author":{"gitID":"-"},"content":"----"},{"lineNumber":483,"author":{"gitID":"-"},"content":"public class ReviewCommandParser implements Parser\u003cReviewCommand\u003e {"},{"lineNumber":484,"author":{"gitID":"-"},"content":""},{"lineNumber":485,"author":{"gitID":"-"},"content":"    public ReviewCommand parse(String args) throws ParseException {"},{"lineNumber":486,"author":{"gitID":"-"},"content":"        // ... get Index from args and validates it to be positive"},{"lineNumber":487,"author":{"gitID":"-"},"content":"        // ... post events for the review dialog"},{"lineNumber":488,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":489,"author":{"gitID":"-"},"content":"            // ... create Review from the input from review dialog ..."},{"lineNumber":490,"author":{"gitID":"-"},"content":"            // ... create EditPersonDescriptor based on the Review ..."},{"lineNumber":491,"author":{"gitID":"-"},"content":"            return new ReviewCommand(index, editPersonDescriptor);"},{"lineNumber":492,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":493,"author":{"gitID":"-"},"content":"            // ... throw exception ..."},{"lineNumber":494,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":495,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":496,"author":{"gitID":"-"},"content":""},{"lineNumber":497,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":498,"author":{"gitID":"-"},"content":"    private void getReviewInput(ReviewInputEvent event) {"},{"lineNumber":499,"author":{"gitID":"-"},"content":"        // ... get reviewer and review content from the review dialog ..."},{"lineNumber":500,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":501,"author":{"gitID":"crizyli"},"content":"}"},{"lineNumber":502,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":503,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to get the review input from user"},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use JavaFX\u0027s Dialog for a pop-up window."},{"lineNumber":509,"author":{"gitID":"-"},"content":"** Pros: More comfortable and convenient for user to type longer review and also easier for them to edit."},{"lineNumber":510,"author":{"gitID":"-"},"content":"** Cons: Harder to implement and user may not necessarily want a pop-up window."},{"lineNumber":511,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use CommandBox."},{"lineNumber":512,"author":{"gitID":"-"},"content":"** Pros: Easier to implement and user can directly type to the CommandBox, which may be more efficient."},{"lineNumber":513,"author":{"gitID":"-"},"content":"** Cons: May be restrictive for user to enter a long review or to edit what they have typed."},{"lineNumber":514,"author":{"gitID":"-"},"content":""},{"lineNumber":515,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Way of showing the review dialog"},{"lineNumber":516,"author":{"gitID":"-"},"content":""},{"lineNumber":517,"author":{"gitID":"crizyli"},"content":"* **Alternative 1 (current choice):** Post an event to request MainWindow to show the Dialog."},{"lineNumber":518,"author":{"gitID":"Yoochard"},"content":"** Pros: Good to comply with the Events-Driven nature of the application\u0027s design, making the design more cohesive and less coupling."},{"lineNumber":519,"author":{"gitID":"crizyli"},"content":"** Cons: Events-Driven design is routine-less. Need to put extra effort to control the events. As the application grows, there are more events posted"},{"lineNumber":520,"author":{"gitID":"crizyli"},"content":"and it is necessary to control these events well to prevent events messing up."},{"lineNumber":521,"author":{"gitID":"crizyli"},"content":"* **Alternative 2:** Just add a static method in MainWindow that will show the Dialog."},{"lineNumber":522,"author":{"gitID":"crizyli"},"content":"** Pros: Simpler implementation than current one, no need extra effort for event controlling."},{"lineNumber":523,"author":{"gitID":"crizyli"},"content":"** Cons: The static method could not use the non-static attributes in MainWindow, as a result, need extra effort to deal with referencing non-static variables."},{"lineNumber":524,"author":{"gitID":"-"},"content":"// end::emer7[]"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"crizyli"},"content":"// tag::calendar[]"},{"lineNumber":527,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Calendars and operations on calendars"},{"lineNumber":528,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":529,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":530,"author":{"gitID":"crizyli"},"content":"To implement the calendars for employees, a third party source has been used which is Google Calendar API, it allows to manage google"},{"lineNumber":531,"author":{"gitID":"crizyli"},"content":"calendars on desktop applications. The commands that relating to calendars are `addEvent`, `deleteEvent`, `todoList` and `authenET`."},{"lineNumber":532,"author":{"gitID":"crizyli"},"content":"Below is the overall design:"},{"lineNumber":533,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":".Overall design relating to calendars."},{"lineNumber":535,"author":{"gitID":"crizyli"},"content":"image::calendarsystem.png[width\u003d\"800\"]"},{"lineNumber":536,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":537,"author":{"gitID":"crizyli"},"content":"[NOTE]"},{"lineNumber":538,"author":{"gitID":"crizyli"},"content":"Command `authenET` should be executed before all other commands if it is the first time to use E.T., because only when E.T. is authorized"},{"lineNumber":539,"author":{"gitID":"crizyli"},"content":"with one working google account, all other commands can be executed correctly."},{"lineNumber":540,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":541,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation of `todoList` command"},{"lineNumber":542,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":543,"author":{"gitID":"crizyli"},"content":"The logic flow of `todoList` command is:"},{"lineNumber":544,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":545,"author":{"gitID":"crizyli"},"content":". `AddressBookParser` is used to let the application accept `todoList` command."},{"lineNumber":546,"author":{"gitID":"crizyli"},"content":". `TodoListCommand` will firstly get the google calendar service through `Authentication`, then it will request google calendar service to retrieve all the events"},{"lineNumber":547,"author":{"gitID":"crizyli"},"content":"on the main calendar. After that, it will post an event to request to open a todo-list window. And post another event containing all the retrieved events that are to be displayed."},{"lineNumber":548,"author":{"gitID":"crizyli"},"content":". `UiManager` will handle the first event posted by `TodoListCommand` and show the `TodoListWindow`."},{"lineNumber":549,"author":{"gitID":"crizyli"},"content":". `TodoListWindow` will handle the second event posted by `TodoListCommand` and display all the events."},{"lineNumber":550,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":551,"author":{"gitID":"crizyli"},"content":"Here is the code snippet of how `todoList` command executes:"},{"lineNumber":552,"author":{"gitID":"crizyli"},"content":"[source,java]"},{"lineNumber":553,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":554,"author":{"gitID":"-"},"content":"public CommandResult execute() {"},{"lineNumber":555,"author":{"gitID":"crizyli"},"content":"        // Build a new authorized API client service."},{"lineNumber":556,"author":{"gitID":"crizyli"},"content":"        com.google.api.services.calendar.Calendar service \u003d"},{"lineNumber":557,"author":{"gitID":"crizyli"},"content":"                null;"},{"lineNumber":558,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":559,"author":{"gitID":"crizyli"},"content":"            service \u003d Authentication.getCalendarService();"},{"lineNumber":560,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":561,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":562,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":563,"author":{"gitID":"crizyli"},"content":"        //retrieve events from the main calendar"},{"lineNumber":564,"author":{"gitID":"crizyli"},"content":"        String calendarId \u003d \"primary\";"},{"lineNumber":565,"author":{"gitID":"crizyli"},"content":"        String pageToken \u003d null;"},{"lineNumber":566,"author":{"gitID":"crizyli"},"content":"        do {"},{"lineNumber":567,"author":{"gitID":"crizyli"},"content":"            Events events \u003d null;"},{"lineNumber":568,"author":{"gitID":"crizyli"},"content":"            try {"},{"lineNumber":569,"author":{"gitID":"crizyli"},"content":"                events \u003d service.events().list(calendarId).setPageToken(pageToken).execute();"},{"lineNumber":570,"author":{"gitID":"crizyli"},"content":"            } catch (IOException e) {"},{"lineNumber":571,"author":{"gitID":"crizyli"},"content":"                e.printStackTrace();"},{"lineNumber":572,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":573,"author":{"gitID":"crizyli"},"content":"            List\u003cEvent\u003e items \u003d events.getItems();"},{"lineNumber":574,"author":{"gitID":"crizyli"},"content":"            for (Event event : items) {"},{"lineNumber":575,"author":{"gitID":"crizyli"},"content":"                eventList.add(new ListEvent(event.getSummary(), event.getLocation(), event.getStart().getDateTime()));"},{"lineNumber":576,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":577,"author":{"gitID":"crizyli"},"content":"            pageToken \u003d events.getNextPageToken();"},{"lineNumber":578,"author":{"gitID":"crizyli"},"content":"        } while (pageToken !\u003d null);"},{"lineNumber":579,"author":{"gitID":"crizyli"},"content":"        //post events"},{"lineNumber":580,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().post(new ShowTodoListEvent());"},{"lineNumber":581,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().post(new ShowTodoListDisplayContentEvent(eventList));"},{"lineNumber":582,"author":{"gitID":"crizyli"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":583,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":584,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":585,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":586,"author":{"gitID":"crizyli"},"content":"Below is the sequence diagram for the execution of `todoList` command."},{"lineNumber":587,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":588,"author":{"gitID":"-"},"content":".Sequence diagram of `todoList`."},{"lineNumber":589,"author":{"gitID":"crizyli"},"content":"image::todolist_seq.png[width\u003d\"800\"]"},{"lineNumber":590,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":591,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation of `addEvent`, `deleteEvent` and `authenET` commands"},{"lineNumber":592,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":593,"author":{"gitID":"crizyli"},"content":"As stated, `authenET` command is to be executed at the very beginning, and what it does is to sent a HTTP request through `Authentication` in order"},{"lineNumber":594,"author":{"gitID":"crizyli"},"content":"to authorize E.T.. It will then receive a status code and a content page which will be opened by the default browser to ask the permission of authorizing E.T.."},{"lineNumber":595,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":596,"author":{"gitID":"crizyli"},"content":"The implementation of  `addEvent` and `deleteEvent` commands are similar to `todoList` command, both require to first build a new authorized API calendar service."},{"lineNumber":597,"author":{"gitID":"crizyli"},"content":"Then they will just sent request through the API service and all other things will be done at google service side. Finally, they will do updates according to the request results."},{"lineNumber":598,"author":{"gitID":"-"},"content":""},{"lineNumber":599,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":600,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Where to place the todo-list window"},{"lineNumber":601,"author":{"gitID":"crizyli"},"content":"* **Alternative 1 (current choice):** Make it as a pop-up window."},{"lineNumber":602,"author":{"gitID":"crizyli"},"content":"** Pros: Easy to manage, it is relatively independent to main window as it is created at a new javaFX stage."},{"lineNumber":603,"author":{"gitID":"crizyli"},"content":"** Cons: Cannot update information in pop-up windows, that is, if leave the todo-list window open and execute another `todoList` command, another todo-list"},{"lineNumber":604,"author":{"gitID":"crizyli"},"content":"window will pop up which contains the most up-to-date information, then the two windows may cause confusion."},{"lineNumber":605,"author":{"gitID":"crizyli"},"content":"* **Alternative 2:** create a field called todo-list panel in `MainWindow`."},{"lineNumber":606,"author":{"gitID":"crizyli"},"content":"** Pros: Every time execute `todoList` command, the information can be updated, without creating new windows."},{"lineNumber":607,"author":{"gitID":"crizyli"},"content":"** Cons: Need to re-structure the layout of MainWindow."},{"lineNumber":608,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":609,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: When and how to authorize E.T."},{"lineNumber":610,"author":{"gitID":"crizyli"},"content":"* **Alternative 1 (current choice):** A dedicated command `authenET` to authorize E.T.."},{"lineNumber":611,"author":{"gitID":"crizyli"},"content":"** Pros: Make the logic more clear and systematic."},{"lineNumber":612,"author":{"gitID":"crizyli"},"content":"** Cons: Single point of failure: if not execute `authenET` ahead, all other commands relating to calendars will not work."},{"lineNumber":613,"author":{"gitID":"crizyli"},"content":"* **Alternative 2 (old version):** Every command goes through the authorization step to check if authorized."},{"lineNumber":614,"author":{"gitID":"crizyli"},"content":"** Pros: No need extra command ahead, each command can execute independently."},{"lineNumber":615,"author":{"gitID":"crizyli"},"content":"** Cons: A lot of unnecessary authorization processes, because this step is supposed to be run only once and all are set. The"},{"lineNumber":616,"author":{"gitID":"crizyli"},"content":"response time per command will be longer."},{"lineNumber":617,"author":{"gitID":"crizyli"},"content":"// end::calendar[]"},{"lineNumber":618,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":619,"author":{"gitID":"crizyli"},"content":"// tag::lockunlock[]"},{"lineNumber":620,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Lock and Unlock system"},{"lineNumber":621,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":622,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":623,"author":{"gitID":"crizyli"},"content":"The Lock and Unlock system is facilitated by maintaining a password inside `LogicManager` at runtime, and also maintaining"},{"lineNumber":624,"author":{"gitID":"crizyli"},"content":"the password in storage when application is closed. It allows to lock the application (hiding information) while keeping the application"},{"lineNumber":625,"author":{"gitID":"crizyli"},"content":"open, and unlock it to resume at anytime."},{"lineNumber":626,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":627,"author":{"gitID":"crizyli"},"content":"The password is stored in storage as a field annotated as `@XmlElement` in `XmlSerializableAddressBook`, and is been read and converted to model type when the application"},{"lineNumber":628,"author":{"gitID":"crizyli"},"content":"is launched and kept at `LogicManager` in which the password can be handled at runtime."},{"lineNumber":629,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":630,"author":{"gitID":"crizyli"},"content":"Below is the overall design of Lock and Unlock system. Arrows are representing logic flow and lines in blue, red and green are for event posting and handling."},{"lineNumber":631,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":632,"author":{"gitID":"-"},"content":".Overall design of lock and unlock system."},{"lineNumber":633,"author":{"gitID":"crizyli"},"content":"image::lockunlocksystem.png[width\u003d\"800\"]"},{"lineNumber":634,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":635,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation of `lock` command"},{"lineNumber":636,"author":{"gitID":"crizyli"},"content":"The logic flow of `lock` command is:"},{"lineNumber":637,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":638,"author":{"gitID":"crizyli"},"content":". `AddressBookParser` is used to let the application accept `lock` command."},{"lineNumber":639,"author":{"gitID":"crizyli"},"content":". `LockCommandParser` is to make sure no other extra inputs are entered besides the command word `lock`."},{"lineNumber":640,"author":{"gitID":"crizyli"},"content":". `LockCommand` is used to set the state of the application to be locked, and post an event to indicate the application is locked such that"},{"lineNumber":641,"author":{"gitID":"crizyli"},"content":"no information should be shown now. Note the `DetailPanel` is the handler of the event. There are mainly two parts that need to be hidden: `PersonList` and `DetailPanel`. Refer to the first code snippet below."},{"lineNumber":642,"author":{"gitID":"crizyli"},"content":". `LogicManager` is used to check the state and decide whether the application is locked or not, and decide the logic flow accordingly. Refer to the second code snippet below."},{"lineNumber":643,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":644,"author":{"gitID":"crizyli"},"content":"Below is the execution logic of `LockCommand`:"},{"lineNumber":645,"author":{"gitID":"crizyli"},"content":"[source,java]"},{"lineNumber":646,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":647,"author":{"gitID":"-"},"content":"public CommandResult execute() {"},{"lineNumber":648,"author":{"gitID":"crizyli"},"content":"    model.updateFilteredPersonList(predicate);"},{"lineNumber":649,"author":{"gitID":"crizyli"},"content":"    EventsCenter.getInstance().post(new HideDetailPanelEvent());"},{"lineNumber":650,"author":{"gitID":"crizyli"},"content":"    LogicManager.lock();"},{"lineNumber":651,"author":{"gitID":"crizyli"},"content":"    return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":652,"author":{"gitID":"crizyli"},"content":"}"},{"lineNumber":653,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":654,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":655,"author":{"gitID":"crizyli"},"content":"Below is the logic flow in `LogicManger`:"},{"lineNumber":656,"author":{"gitID":"crizyli"},"content":"[source,java]"},{"lineNumber":657,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":658,"author":{"gitID":"crizyli"},"content":"    if (isLocked \u0026\u0026 !(command instanceof HelpCommand)) { //check if locked"},{"lineNumber":659,"author":{"gitID":"crizyli"},"content":"        command.setData(model, history, undoRedoStack);"},{"lineNumber":660,"author":{"gitID":"crizyli"},"content":"        if (command instanceof UnlockCommand) { //check unlock command"},{"lineNumber":661,"author":{"gitID":"crizyli"},"content":"            UnlockCommand unlockCommand \u003d (UnlockCommand) command;"},{"lineNumber":662,"author":{"gitID":"crizyli"},"content":"            result \u003d unlockCommand.execute();"},{"lineNumber":663,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":664,"author":{"gitID":"crizyli"},"content":"            result \u003d new CommandResult(\"Addressbook has been locked, please unlock it first!\");"},{"lineNumber":665,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":666,"author":{"gitID":"crizyli"},"content":"    } else { //unlocked case"},{"lineNumber":667,"author":{"gitID":"crizyli"},"content":"        command.setData(model, history, undoRedoStack);"},{"lineNumber":668,"author":{"gitID":"crizyli"},"content":"        result \u003d command.execute();"},{"lineNumber":669,"author":{"gitID":"crizyli"},"content":"        undoRedoStack.push(command);"},{"lineNumber":670,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":671,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":672,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":673,"author":{"gitID":"crizyli"},"content":"The following sequence diagram shows how `lock` command works:"},{"lineNumber":674,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":675,"author":{"gitID":"crizyli"},"content":"[NOTE]"},{"lineNumber":676,"author":{"gitID":"crizyli"},"content":"The event posted by LockCommand should firstly be reacted by `EventsCenter` and then handled by `DetailPanel`,"},{"lineNumber":677,"author":{"gitID":"crizyli"},"content":"this step is removed for clearer viewing and without messing up the diagram."},{"lineNumber":678,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":".Sequence Diagram for Lock Command."},{"lineNumber":680,"author":{"gitID":"crizyli"},"content":"image::lock_seq.jpg[width\u003d\"800\"]"},{"lineNumber":681,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":682,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation of `unlock` command"},{"lineNumber":683,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":684,"author":{"gitID":"crizyli"},"content":"The logic flow of `unlock` command is:"},{"lineNumber":685,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":686,"author":{"gitID":"crizyli"},"content":". `AddressBookParser` is used to let the application accept `unlock` command."},{"lineNumber":687,"author":{"gitID":"crizyli"},"content":". `UnlockCommandParser` is to make sure no other extra inputs are entered besides the command word `unlock`. Similar to `LockCommandParser`."},{"lineNumber":688,"author":{"gitID":"crizyli"},"content":". `UnlockCommand` is used to post an event requesting `MainWindow` to pop up a password input dialog."},{"lineNumber":689,"author":{"gitID":"crizyli"},"content":". `MainWindow` will handle the event posted by `UnlockCommand` and show the password input dialog. Then it will post an event containing user entered password."},{"lineNumber":690,"author":{"gitID":"crizyli"},"content":". `UnlockCommand` will then handle the event and get the password from the event, and compare it with the application\u0027s unlock password to decide whether the unlock process is successful. Refer to the code snippet below."},{"lineNumber":691,"author":{"gitID":"crizyli"},"content":". `LogicManager` is used to decide whether the application is locked or not, and decide the logic flow accordingly."},{"lineNumber":692,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":693,"author":{"gitID":"crizyli"},"content":"Below is the execution logic of `UnlockCommand`:"},{"lineNumber":694,"author":{"gitID":"crizyli"},"content":"[source,java]"},{"lineNumber":695,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":696,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":697,"author":{"gitID":"crizyli"},"content":"        if (!LogicManager.isLocked()) {"},{"lineNumber":698,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(\"Employees Tracker is already unlocked!\");"},{"lineNumber":699,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":700,"author":{"gitID":"crizyli"},"content":"        //post a event to show password input dialog."},{"lineNumber":701,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().post(new ShowPasswordFieldEvent());"},{"lineNumber":702,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":703,"author":{"gitID":"crizyli"},"content":"        // if the password is set to \"nopassword\", means no input got from user."},{"lineNumber":704,"author":{"gitID":"crizyli"},"content":"        if (this.password.equals(\"nopassword\")) {"},{"lineNumber":705,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_MISSING_PASSWORD);"},{"lineNumber":706,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":707,"author":{"gitID":"crizyli"},"content":"        //check if the entered password match the unlock password."},{"lineNumber":708,"author":{"gitID":"crizyli"},"content":"        if (this.password.compareTo(LogicManager.getPassword()) \u003d\u003d 0) {"},{"lineNumber":709,"author":{"gitID":"crizyli"},"content":"            LogicManager.unLock();"},{"lineNumber":710,"author":{"gitID":"IzHoBX"},"content":"            EventsCenter.getInstance().post(new AddressBookUnlockedEvent());"},{"lineNumber":711,"author":{"gitID":"-"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":712,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":713,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":714,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_INCORRECT_PASSWORD);"},{"lineNumber":715,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":716,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":717,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":718,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":719,"author":{"gitID":"crizyli"},"content":"    * handle the event to get the input password."},{"lineNumber":720,"author":{"gitID":"crizyli"},"content":"    */"},{"lineNumber":721,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":722,"author":{"gitID":"crizyli"},"content":"    private void handlePasswordEnteredEvent(PasswordEnteredEvent event) {"},{"lineNumber":723,"author":{"gitID":"crizyli"},"content":"        this.password \u003d event.getPassword();"},{"lineNumber":724,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":725,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":726,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":727,"author":{"gitID":"crizyli"},"content":"The following sequence diagram shows how `unlock` command works:"},{"lineNumber":728,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":729,"author":{"gitID":"crizyli"},"content":"[NOTE]"},{"lineNumber":730,"author":{"gitID":"crizyli"},"content":"The detail of the instantiation of `UnlockCommand` is removed, because it is similar to that of"},{"lineNumber":731,"author":{"gitID":"crizyli"},"content":"`LockCommand`. Note that both `MainWindow` and `UnlockCommand` are event handler, which is indicated by the two post method and the"},{"lineNumber":732,"author":{"gitID":"crizyli"},"content":"blue activation bar in the diagram, and the interaction with `EventsCenter` is also omitted like before."},{"lineNumber":733,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":734,"author":{"gitID":"-"},"content":".Sequence Diagram for Unlock Command."},{"lineNumber":735,"author":{"gitID":"crizyli"},"content":"image::unlock_seq.jpg[width\u003d\"800\"]"},{"lineNumber":736,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":737,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d\u003d Implementation of `setPassword` command"},{"lineNumber":738,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":739,"author":{"gitID":"crizyli"},"content":"This command is used to set new unlock password of the application, which is also part of"},{"lineNumber":740,"author":{"gitID":"crizyli"},"content":"the Lock and Unlock system. The implementation of `setPassword` command is similar to that of `unlock` command, but additionally,"},{"lineNumber":741,"author":{"gitID":"crizyli"},"content":"`setPassword` command requires to update the password in both model and storage."},{"lineNumber":742,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":743,"author":{"gitID":"crizyli"},"content":"The logic flow of `setPassword` command is:"},{"lineNumber":744,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":745,"author":{"gitID":"crizyli"},"content":". `AddressBookParser` is used to let the application accept `setPassword` command."},{"lineNumber":746,"author":{"gitID":"crizyli"},"content":". `SetPasswordCommandParser` is to make sure no other extra inputs are entered besides the command word `setPassword`. Similar to `LockCommandParser`."},{"lineNumber":747,"author":{"gitID":"crizyli"},"content":". `SetPasswordCommand` is used to post an event requesting `MainWindow` to pop up a password input dialog, get the passwords (old password and new password) entered by user, and"},{"lineNumber":748,"author":{"gitID":"crizyli"},"content":"compare the old password with the application\u0027s current unlock password to decide whether they match. If match, then update the password in both `LogicManager` and storage. Refer to the code snippet below."},{"lineNumber":749,"author":{"gitID":"crizyli"},"content":". `MainWindow` will handle the event and post another event containing user inputs, which is similar to that in `Unlock` command."},{"lineNumber":750,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":751,"author":{"gitID":"crizyli"},"content":"[source,java]"},{"lineNumber":752,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":753,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":754,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().post(new ShowSetPasswordDialogEvent());"},{"lineNumber":755,"author":{"gitID":"crizyli"},"content":"        //check if all password input fields are inputed by user."},{"lineNumber":756,"author":{"gitID":"crizyli"},"content":"        if (!isComplete) {"},{"lineNumber":757,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_INCOMPLETE_FIELD);"},{"lineNumber":758,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":759,"author":{"gitID":"crizyli"},"content":"        //check if the old password match the current one."},{"lineNumber":760,"author":{"gitID":"crizyli"},"content":"        if (this.oldPassword.compareTo(LogicManager.getPassword()) \u003d\u003d 0) {"},{"lineNumber":761,"author":{"gitID":"crizyli"},"content":"            LogicManager.setPassword(this.newPassword);"},{"lineNumber":762,"author":{"gitID":"crizyli"},"content":"            model.setPassword(this.newPassword);"},{"lineNumber":763,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":764,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":765,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_INCORRECT_OLDPASSWORD);"},{"lineNumber":766,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":767,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":768,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":769,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":770,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":771,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to input password values"},{"lineNumber":772,"author":{"gitID":"crizyli"},"content":"* **Alternative 1 (current choice):** Input all password in dialogs."},{"lineNumber":773,"author":{"gitID":"crizyli"},"content":"** Pros: It is more secure as all password inputs in dialogs can be invisible."},{"lineNumber":774,"author":{"gitID":"crizyli"},"content":"** Cons: Need the cooperation with UI to pop up the dialogs, which makes it harder to implement."},{"lineNumber":775,"author":{"gitID":"crizyli"},"content":"* **Alternative 2 (old version):** Just let the passwords be the command parameters."},{"lineNumber":776,"author":{"gitID":"crizyli"},"content":"** Pros: Easy to achieve as only need to parse the inputs in command parser to get the passwords."},{"lineNumber":777,"author":{"gitID":"crizyli"},"content":"** Cons: Not so secure, because the password inputs are all visible like the command word, and someone else may accidentally see them."},{"lineNumber":778,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":779,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Way of showing the password input dialog"},{"lineNumber":780,"author":{"gitID":"crizyli"},"content":"* **Alternative 1 (current choice):** Post an event to request MainWindow to show the Dialog."},{"lineNumber":781,"author":{"gitID":"IzHoBX"},"content":"** Pros: Good to comply with the Events-Driven nature of the application\u0027s design, making the design more cohesive and less coupling."},{"lineNumber":782,"author":{"gitID":"crizyli"},"content":"** Cons: Events-Driven design is routine-less. Need to put extra effort to control the events. As the application grows, there are more events posted"},{"lineNumber":783,"author":{"gitID":"crizyli"},"content":"and it is necessary to control these events well to prevent events messing up."},{"lineNumber":784,"author":{"gitID":"crizyli"},"content":"* **Alternative 2:** Just add a static method in MainWindow that will show the Dialog."},{"lineNumber":785,"author":{"gitID":"crizyli"},"content":"** Pros: Simpler implementation than current one, no need extra effort for event controlling."},{"lineNumber":786,"author":{"gitID":"crizyli"},"content":"** Cons: The static method could not use the non-static attributes in MainWindow, as a result, need extra effort to deal with referencing non-static variables."},{"lineNumber":787,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":788,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to store the password in storage"},{"lineNumber":789,"author":{"gitID":"crizyli"},"content":"* **Alternative 1 (current choice):** Password is a visible field in storage in plaintext."},{"lineNumber":790,"author":{"gitID":"crizyli"},"content":"** Pros: Easy to retrieve and update the password in storage."},{"lineNumber":791,"author":{"gitID":"crizyli"},"content":"** Cons: Not secure because password is visible in plaintext."},{"lineNumber":792,"author":{"gitID":"crizyli"},"content":"* **Alternative 2:** Password is still visible but encrypted."},{"lineNumber":793,"author":{"gitID":"crizyli"},"content":"** Pros: Though password is visible, it it encrypted and one can only get the correct password by getting the encryption key. It is more secure."},{"lineNumber":794,"author":{"gitID":"crizyli"},"content":"** Cons: Every time load the password from data, need to decrypt it and every time update it in storage, need to encrypt it."},{"lineNumber":795,"author":{"gitID":"crizyli"},"content":"Also need to keep the encryption key somewhere secret."},{"lineNumber":796,"author":{"gitID":"crizyli"},"content":"// end::lockunlock[]"},{"lineNumber":797,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":798,"author":{"gitID":"crizyli"},"content":"// tag::addphoto[]"},{"lineNumber":799,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Add photo to employees"},{"lineNumber":800,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"crizyli"},"content":"Command `addPhoto` mainly copy the local photo files chosen by users to the data folder of E.T., and employees will be assigned with these"},{"lineNumber":803,"author":{"gitID":"crizyli"},"content":"photos which matches to their fields for photo."},{"lineNumber":804,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":805,"author":{"gitID":"crizyli"},"content":"The logic flow of `addPhoto` command is:"},{"lineNumber":806,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":807,"author":{"gitID":"crizyli"},"content":". `AddressBookParser` is used to let the application accept `addPhoto` command."},{"lineNumber":808,"author":{"gitID":"crizyli"},"content":". `AddPhotoCommandParser` is to make sure the user inputs are correct and extract the parameter."},{"lineNumber":809,"author":{"gitID":"crizyli"},"content":". `AddPhotoCommand` is will first post an event requesting `MainWindow` to pop up a file chooser, get the photo file chose by user,"},{"lineNumber":810,"author":{"gitID":"crizyli"},"content":"and check its validation. It will then copy this photo to the data folder if this photo does not exist there. Finally, it will update"},{"lineNumber":811,"author":{"gitID":"crizyli"},"content":"person and pass to `ModelManager`."},{"lineNumber":812,"author":{"gitID":"crizyli"},"content":". `ModelManager` will update the person list and the photo list accordingly."},{"lineNumber":813,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":814,"author":{"gitID":"crizyli"},"content":"Here is the class diagram of `addPhoto` command:"},{"lineNumber":815,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":816,"author":{"gitID":"-"},"content":".Class diagram of `addPhoto` command."},{"lineNumber":817,"author":{"gitID":"crizyli"},"content":"image::addphotoclassdia.png[width\u003d\"800\"]"},{"lineNumber":818,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":819,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":820,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How to maintain the photos"},{"lineNumber":821,"author":{"gitID":"crizyli"},"content":"* **Alternative 1 (current choice):** Store them at application\u0027s data folder which can be retrieved at runtime."},{"lineNumber":822,"author":{"gitID":"crizyli"},"content":"** Pros: Easy to manage, as the photos are all in application\u0027s data folder."},{"lineNumber":823,"author":{"gitID":"crizyli"},"content":"** Cons: Need to maintain an extra list in runtime storage to manage the photos in data folder."},{"lineNumber":824,"author":{"gitID":"crizyli"},"content":"* **Alternative 2:** No need to store photos at application\u0027s data folder, load them directly from local disk."},{"lineNumber":825,"author":{"gitID":"crizyli"},"content":"** Pros: No need to maintain the list of photos in application."},{"lineNumber":826,"author":{"gitID":"crizyli"},"content":"** Cons: The change of photos\u0027 paths in local disk will cause loading error at runtime, need mechanisms to ensure person photo paths are"},{"lineNumber":827,"author":{"gitID":"crizyli"},"content":"dynamically referenced."},{"lineNumber":828,"author":{"gitID":"crizyli"},"content":"// end::addphoto[]"},{"lineNumber":829,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":830,"author":{"gitID":"crizyli"},"content":"// tag::exportcom[]"},{"lineNumber":831,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Export employees data"},{"lineNumber":832,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":833,"author":{"gitID":"crizyli"},"content":"Command `export` will export employees data as a .csv file into data folder."},{"lineNumber":834,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":835,"author":{"gitID":"crizyli"},"content":"The logic flow of `addPhoto` command is:"},{"lineNumber":836,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":837,"author":{"gitID":"crizyli"},"content":". `AddressBookParser` is used to let the application accept `export` command."},{"lineNumber":838,"author":{"gitID":"crizyli"},"content":". `ExportEmployeesCommand` is will first post an event to get the current employee list in `ModelManager`, and then create a .csv file"},{"lineNumber":839,"author":{"gitID":"crizyli"},"content":"at data folder. It will finally write the employees\u0027 information to that file."},{"lineNumber":840,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":841,"author":{"gitID":"crizyli"},"content":"Here is the code snippet of the execution of `export` command:"},{"lineNumber":842,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":843,"author":{"gitID":"crizyli"},"content":"[source,java]"},{"lineNumber":844,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":845,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":846,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().post(new GetEmployeesRequestEvent());"},{"lineNumber":847,"author":{"gitID":"crizyli"},"content":"        File csv \u003d new File(EXPORT_FILE_PATH);"},{"lineNumber":848,"author":{"gitID":"crizyli"},"content":"        BufferedWriter bw \u003d null;"},{"lineNumber":849,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":850,"author":{"gitID":"crizyli"},"content":"            bw \u003d new BufferedWriter(new FileWriter(csv));"},{"lineNumber":851,"author":{"gitID":"crizyli"},"content":"            bw.write(\"Name,Phone,Email,Address,Tags\\n\");"},{"lineNumber":852,"author":{"gitID":"crizyli"},"content":"            for (Person p : employees) {"},{"lineNumber":853,"author":{"gitID":"crizyli"},"content":"                String temp \u003d p.getName().fullName + \",\" + p.getPhone().value + \",\" + p.getEmail().value + \",\""},{"lineNumber":854,"author":{"gitID":"crizyli"},"content":"                        + p.getAddress().value.replaceAll(\",\", \" \");"},{"lineNumber":855,"author":{"gitID":"crizyli"},"content":"                if (!p.getTags().isEmpty()) {"},{"lineNumber":856,"author":{"gitID":"crizyli"},"content":"                    temp \u003d temp + \",\" + p.getTags().toString()"},{"lineNumber":857,"author":{"gitID":"crizyli"},"content":"                            .replaceAll(\", \", \" | \");"},{"lineNumber":858,"author":{"gitID":"crizyli"},"content":"                }"},{"lineNumber":859,"author":{"gitID":"crizyli"},"content":"                temp \u003d temp + \"\\n\";"},{"lineNumber":860,"author":{"gitID":"crizyli"},"content":"                bw.write(temp);"},{"lineNumber":861,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":862,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":863,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":864,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_FAIL);"},{"lineNumber":865,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":866,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":867,"author":{"gitID":"crizyli"},"content":"            bw.close();"},{"lineNumber":868,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":869,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":870,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":871,"author":{"gitID":"crizyli"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":872,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":873,"author":{"gitID":"crizyli"},"content":"----"},{"lineNumber":874,"author":{"gitID":"crizyli"},"content":"// end::exportcom[]"},{"lineNumber":875,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":876,"author":{"gitID":"IzHoBX"},"content":"// tag::ns[]"},{"lineNumber":877,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":878,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":879,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":880,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Notification System"},{"lineNumber":881,"author":{"gitID":"Yoochard"},"content":"This section discusses about the implementation of the notification feature of Employees Tracker."},{"lineNumber":882,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":883,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":884,"author":{"gitID":"IzHoBX"},"content":"All usages of the word `Event` in this section refers to the class `com.google.api.services.calendar.model.Event`,"},{"lineNumber":885,"author":{"gitID":"IzHoBX"},"content":"not to be confused with Event classes in commons package which will be referred in their full name,"},{"lineNumber":886,"author":{"gitID":"IzHoBX"},"content":"e.g. BaseEvent, AddressBookChangedEvent."},{"lineNumber":887,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":888,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":889,"author":{"gitID":"IzHoBX"},"content":"This section shows how the Notification System is implemented in the current version of ET."},{"lineNumber":890,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":891,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d Introduction"},{"lineNumber":892,"author":{"gitID":"IzHoBX"},"content":"In the current implementation, the major classes and objects of the notification system includes:"},{"lineNumber":893,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":894,"author":{"gitID":"IzHoBX"},"content":"* The `Notification` class that stores of essential information for each `Event`."},{"lineNumber":895,"author":{"gitID":"IzHoBX"},"content":"* The LinkedList of `Notification` in the `AddressBook` class that stores all `Notification` objects."},{"lineNumber":896,"author":{"gitID":"IzHoBX"},"content":"* The `NotificationCard` class, which is a graphical representation of `Notification`."},{"lineNumber":897,"author":{"gitID":"IzHoBX"},"content":"* The `Notification Center` class that stores all the `NotificationCard` objects."},{"lineNumber":898,"author":{"gitID":"IzHoBX"},"content":"* The `MainWindow` class that is involved in showing `NotificationCard` objects on the GUI."},{"lineNumber":899,"author":{"gitID":"IzHoBX"},"content":"* The `Model` class that initiates the add notifications and delete notifications operations."},{"lineNumber":900,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":901,"author":{"gitID":"IzHoBX"},"content":"Please refer to the class diagram below for the association between them."},{"lineNumber":902,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":903,"author":{"gitID":"IzHoBX"},"content":".Class diagram of the Notification System"},{"lineNumber":904,"author":{"gitID":"IzHoBX"},"content":"image::Notification System.png[width\u003d\"500\"]"},{"lineNumber":905,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":906,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d Initialization of the Notification System"},{"lineNumber":907,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":908,"author":{"gitID":"IzHoBX"},"content":"For every time the app starts, the following initialization operations will be carried out:"},{"lineNumber":909,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":910,"author":{"gitID":"IzHoBX"},"content":". `AddressBook` and LinkedList of `Notification` is read from storage."},{"lineNumber":911,"author":{"gitID":"IzHoBX"},"content":". `MainWindow` is created."},{"lineNumber":912,"author":{"gitID":"IzHoBX"},"content":". `MainWindow` creates a `NotificationCenter`."},{"lineNumber":913,"author":{"gitID":"IzHoBX"},"content":". `MainWindow` passes the `NotificationCenter` to `Model` through `Logic`."},{"lineNumber":914,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":915,"author":{"gitID":"IzHoBX"},"content":"// end::ns[]"},{"lineNumber":916,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":917,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d Add-Notification Operation"},{"lineNumber":918,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":919,"author":{"gitID":"IzHoBX"},"content":"The following steps show how a Notification is added to the Notification System:"},{"lineNumber":920,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":921,"author":{"gitID":"IzHoBX"},"content":".  A `Notification` is created."},{"lineNumber":922,"author":{"gitID":"IzHoBX"},"content":". `Model` to add the `Notification` into the `Notifications` list in `AddressBook`."},{"lineNumber":923,"author":{"gitID":"IzHoBX"},"content":". `Model` raises a `AddressBookChangedEvent` and `NotificationAddedEvent` after adding the Notification."},{"lineNumber":924,"author":{"gitID":"IzHoBX"},"content":". `Storage` handles the `AddressBookChangedEvent` and saves the new list of Notifications."},{"lineNumber":925,"author":{"gitID":"IzHoBX"},"content":". `Logic` handles the  `NotificationAddedEvent` and decides when to show the notification."},{"lineNumber":926,"author":{"gitID":"IzHoBX"},"content":". When it is time to show the notification, `Logic` will request `Ui` to show a notification."},{"lineNumber":927,"author":{"gitID":"IzHoBX"},"content":". `Ui` will instruct `MainWindow` to show a notification."},{"lineNumber":928,"author":{"gitID":"IzHoBX"},"content":". `MainWindow` will create a `NotificationCard` and shows it to user on-screen."},{"lineNumber":929,"author":{"gitID":"IzHoBX"},"content":". `MainWindow` will create another copy of the same `NotificationCard` and stores it in the `NotificationCenter`"},{"lineNumber":930,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":931,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d Find-owner-name operation"},{"lineNumber":932,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":933,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":934,"author":{"gitID":"IzHoBX"},"content":"Each `Event` is assigned (and thus) to an employee. In the following discussions, we will use the phrase `owner` to refer to the employee who is assigned to the `Event`."},{"lineNumber":935,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":936,"author":{"gitID":"IzHoBX"},"content":"Note that the `Notification` class only contains a field called `ownerId` instead of the name, email, etc. of its `owner`."},{"lineNumber":937,"author":{"gitID":"IzHoBX"},"content":"The information of the owner of a notification is retrieved through the `findPersonById` mechanism."},{"lineNumber":938,"author":{"gitID":"IzHoBX"},"content":"The following are the details of the mechanism:"},{"lineNumber":939,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":940,"author":{"gitID":"IzHoBX"},"content":"* `AddressBook` class has a `nextId` integer field."},{"lineNumber":941,"author":{"gitID":"IzHoBX"},"content":"* Whenever an employee is added, `addressBook` assigns the `nextId` to him and increment the `nextId` field."},{"lineNumber":942,"author":{"gitID":"IzHoBX"},"content":"* The `Person` class has an `id` field to store the id."},{"lineNumber":943,"author":{"gitID":"IzHoBX"},"content":"* When a `Notification` is created, it has a `ownerId` field that stores the `id` of its `owner`."},{"lineNumber":944,"author":{"gitID":"IzHoBX"},"content":"* To retrieve the owner of a `Notification`, call `findPersonById(ownerId)` to obtain the `Person` owner. Then, use getter methods to obtain relevant information."},{"lineNumber":945,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":946,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d Delete-notification operation"},{"lineNumber":947,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":948,"author":{"gitID":"IzHoBX"},"content":"Delete-notification operation has a simpler implementation compared to Add-notification operation. Please refer to _Figure 19_ below for the flow of the operation."},{"lineNumber":949,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":950,"author":{"gitID":"IzHoBX"},"content":".Activity Diagram for deleting notification"},{"lineNumber":951,"author":{"gitID":"IzHoBX"},"content":"image::Delete Notification.png[width\u003d\"\"]"},{"lineNumber":952,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":953,"author":{"gitID":"IzHoBX"},"content":"[NOTE]"},{"lineNumber":954,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":955,"author":{"gitID":"IzHoBX"},"content":"* Deleting with `eventId` and *not* `deleteFromAddressBookOnly` is usally invoked by `deleteEvent` command."},{"lineNumber":956,"author":{"gitID":"IzHoBX"},"content":"* Deleting with `eventId` and `deleteFromAddressBookOnly` is usually invoked by `Logic`, when it is yet to add a `NotificationCard` to the `NotificationCenter` but finds out that the `owner` has already been deleted."},{"lineNumber":957,"author":{"gitID":"IzHoBX"},"content":"* Deleting with `eventId` is usually invoked by `delete` command, where `Notification` and `Person` are deleted together."},{"lineNumber":958,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":959,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":960,"author":{"gitID":"IzHoBX"},"content":"// tag::ns2[]"},{"lineNumber":961,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d Add-notifications-at-startup operation"},{"lineNumber":962,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":963,"author":{"gitID":"IzHoBX"},"content":"At each startup, after initializing the Notification System, ET will then go through the LinkedList of `Notification` in `AddressBook`."},{"lineNumber":964,"author":{"gitID":"IzHoBX"},"content":"For each `Notification` in the LinkedList, `NotificationAddedEvent` will be called."},{"lineNumber":965,"author":{"gitID":"IzHoBX"},"content":"That said, this may result in multiple threads attempting to make GUI operations at the same time through `MainWindow.showNewNotification`."},{"lineNumber":966,"author":{"gitID":"IzHoBX"},"content":"This will result in concurrent modification issues. Thus, `Semaphore` is used to prevent those issues. Please refer to the simplified code of `MainWindow.showNewNotification` at below."},{"lineNumber":967,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":968,"author":{"gitID":"IzHoBX"},"content":"[source, java]"},{"lineNumber":969,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":970,"author":{"gitID":"IzHoBX"},"content":"  //current implementation only allows 1 thread to enter showNewNotification() at the same time."},{"lineNumber":971,"author":{"gitID":"IzHoBX"},"content":"  Semaphore \u003d new Semaphore(1);"},{"lineNumber":972,"author":{"gitID":"IzHoBX"},"content":"  /**"},{"lineNumber":973,"author":{"gitID":"IzHoBX"},"content":"     * Show in-app notification"},{"lineNumber":974,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":975,"author":{"gitID":"IzHoBX"},"content":"    public void showNewNotification(ShowNotificationEvent event) {"},{"lineNumber":976,"author":{"gitID":"IzHoBX"},"content":"        logger.info(\"Preparing in app notification\");"},{"lineNumber":977,"author":{"gitID":"IzHoBX"},"content":"        //...metadata update"},{"lineNumber":978,"author":{"gitID":"IzHoBX"},"content":"        //hides notificationCard away from screen"},{"lineNumber":979,"author":{"gitID":"IzHoBX"},"content":"        notificationCard.setTranslateX(NOTIFICATION_CARD_WIDTH);"},{"lineNumber":980,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":981,"author":{"gitID":"IzHoBX"},"content":"            semaphore.acquire();"},{"lineNumber":982,"author":{"gitID":"IzHoBX"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":983,"author":{"gitID":"IzHoBX"},"content":"            e.printStackTrace();"},{"lineNumber":984,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":985,"author":{"gitID":"IzHoBX"},"content":"        notificationCard.setTranslateY(UP * shownNotificationCards.size() * NOTIFICATION_CARD_HEIGHT);"},{"lineNumber":986,"author":{"gitID":"IzHoBX"},"content":"        shownNotificationCards.add(notificationCard);"},{"lineNumber":987,"author":{"gitID":"IzHoBX"},"content":"        semaphore.release();"},{"lineNumber":988,"author":{"gitID":"IzHoBX"},"content":"        //..animations"},{"lineNumber":989,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":990,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":993,"author":{"gitID":"IzHoBX"},"content":"There are a couple of aspects with regards to `Notification` that can be implemented in alternative designs."},{"lineNumber":994,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":995,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: extracting a Person\u0027s information"},{"lineNumber":996,"author":{"gitID":"-"},"content":"* **Alternative1 (current choice)**: `searchEmployeeById` mechanism."},{"lineNumber":997,"author":{"gitID":"IzHoBX"},"content":"** Pros: provides the latest information even if the `Person` is edited after the `Notification` is created."},{"lineNumber":998,"author":{"gitID":"-"},"content":"** Cons: requires `id` field to be implemented in `Person` and `AddressBook` class, provides wrong information if `id` is not implemented correctly (e.g. repeated id)."},{"lineNumber":999,"author":{"gitID":"-"},"content":"* ** Alternative2**: storing the Person\u0027s Information in `Notification` class."},{"lineNumber":1000,"author":{"gitID":"-"},"content":"** Pros: has a simpler implementation."},{"lineNumber":1001,"author":{"gitID":"-"},"content":"** Cons: provides wrong information if `Person` \u0027s information is edited after `Notification` is created, requires to update `Notification` when `Person` is edited, increases coupling."},{"lineNumber":1002,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1003,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: storing `Event` locally"},{"lineNumber":1004,"author":{"gitID":"-"},"content":"* **Alternative1 (current choice)**: stores a list of `Notifications` in `AddressBook`."},{"lineNumber":1005,"author":{"gitID":"-"},"content":"** Pros: ensures that notification feature remains working when there\u0027s no internet access, saves storage space as only essential information is saved."},{"lineNumber":1006,"author":{"gitID":"-"},"content":"** Cons: has a complicated implementation (creation of `Notification` class and edit of `Person` and `AddressBook` class for `searchEmployeeById` mechanism)."},{"lineNumber":1007,"author":{"gitID":"-"},"content":"* **Alternative2** : stores a list of `Event` in `AddressBook`."},{"lineNumber":1008,"author":{"gitID":"-"},"content":"** Pros: has a simpler implementation (doesn\u0027t need to implement `Notification` class)."},{"lineNumber":1009,"author":{"gitID":"-"},"content":"** Cons: requires another mechanism for extracting `ownerName` because `Event` class does not store `ownerName`, waste of storage space because `Event` class contains a lot of information unnecessary for notification feature."},{"lineNumber":1010,"author":{"gitID":"-"},"content":"* **Alternative3** : stores a list of `Notifications` in `Person`."},{"lineNumber":1011,"author":{"gitID":"-"},"content":"** Pros: has a simpler implementation (doesn\u0027t need to implement `searchEmployeeById` mechanism)."},{"lineNumber":1012,"author":{"gitID":"-"},"content":"** Cons: compromises performance, especially when there are a lot of employees and only a few `Notification`."},{"lineNumber":1013,"author":{"gitID":"-"},"content":"* **Alternative4** : does not store `Event` locally (relies on Google calendar service)."},{"lineNumber":1014,"author":{"gitID":"-"},"content":"** Pros: has the simplest implementation (only need to pull data from Google, does not need to create local class), saves storage space as nothing is stored locally."},{"lineNumber":1015,"author":{"gitID":"-"},"content":"** Cons: compromises notification feature if there\u0027s no internet access, requires another mechanism for extracting `ownerName` because `Event` class does not store `ownerName`, compromises performance if internet speed is slow)."},{"lineNumber":1016,"author":{"gitID":"IzHoBX"},"content":"// end::ns2[]"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"Yoochard"},"content":"// tag::sort[]"},{"lineNumber":1019,"author":{"gitID":"Yoochard"},"content":"\u003d\u003d\u003d Sort existing employees"},{"lineNumber":1020,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":1021,"author":{"gitID":"Yoochard"},"content":"The implementation of `sort` command involves following objects: +"},{"lineNumber":1022,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1023,"author":{"gitID":"-"},"content":". Command: SortCommand."},{"lineNumber":1024,"author":{"gitID":"-"},"content":". Parser: SortCommandParser, AddressBookParser."},{"lineNumber":1025,"author":{"gitID":"-"},"content":". AddressBook, UniqueEmployeeList."},{"lineNumber":1026,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1027,"author":{"gitID":"Yoochard"},"content":"The details of implementation of `sort` command are as follow:"},{"lineNumber":1028,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1029,"author":{"gitID":"Yoochard"},"content":". `SortCommandParser` guarantees Employees Tracker to accept `sort` command."},{"lineNumber":1030,"author":{"gitID":"Yoochard"},"content":". `SortCommandParser` extracts the sorting field from user input."},{"lineNumber":1031,"author":{"gitID":"Yoochard"},"content":". `ModelManager` and `UniqueEmployeeList` provide sorting algorithm, called by `AddressBook`."},{"lineNumber":1032,"author":{"gitID":"-"},"content":". `UniqueEmployeeList` will sort the units by giving field."},{"lineNumber":1033,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1034,"author":{"gitID":"IzHoBX"},"content":"Here is the sequence diagram of `sort` command:"},{"lineNumber":1035,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":".Sequence diagram of `sort` command."},{"lineNumber":1037,"author":{"gitID":"IzHoBX"},"content":"image::SortCommandSeqDia.png[width\u003d\"800\"]"},{"lineNumber":1038,"author":{"gitID":"-"},"content":""},{"lineNumber":1039,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":1040,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `SortCommand`"},{"lineNumber":1041,"author":{"gitID":"IzHoBX"},"content":"* **Alternative1(current choice)**: Sort the employees in `UniqueEmployeeList`."},{"lineNumber":1042,"author":{"gitID":"IzHoBX"},"content":"** Pros: Easy to understand for new developers, and it is the most intuitive way of implementing."},{"lineNumber":1043,"author":{"gitID":"IzHoBX"},"content":"** Cons: Will create different levels of abstraction of the same sort method in Model for sorting, which results to slightly more work."},{"lineNumber":1044,"author":{"gitID":"IzHoBX"},"content":"* **Alternative2:** Create multiple `SortBy...` commands, use different comparators in these `SortBy...` commands."},{"lineNumber":1045,"author":{"gitID":"IzHoBX"},"content":"** Pros: Easier for developer to implement, because sorting by different fields will be executed by different commands separately."},{"lineNumber":1046,"author":{"gitID":"IzHoBX"},"content":"** Cons: Will raise a lot of redundant codes which can be extracted by Alternative1, and it is not user-friendly to let user treat \"sorting by different fields\" as different commands."},{"lineNumber":1047,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1048,"author":{"gitID":"IzHoBX"},"content":"Here is the code snippet of the execution of `sort` command in `UniqueEmployeeList`:"},{"lineNumber":1049,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1050,"author":{"gitID":"IzHoBX"},"content":"[source,java]"},{"lineNumber":1051,"author":{"gitID":"IzHoBX"},"content":"----"},{"lineNumber":1052,"author":{"gitID":"-"},"content":"    public void sort(String field) {"},{"lineNumber":1053,"author":{"gitID":"-"},"content":"            switch (field) {"},{"lineNumber":1054,"author":{"gitID":"-"},"content":"            case \"name\":"},{"lineNumber":1055,"author":{"gitID":"-"},"content":"                sortByName();"},{"lineNumber":1056,"author":{"gitID":"-"},"content":"                break;"},{"lineNumber":1057,"author":{"gitID":"-"},"content":"            case \"phone\":"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"                sortByPhone();"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"                break;"},{"lineNumber":1060,"author":{"gitID":"-"},"content":"            case \"email\":"},{"lineNumber":1061,"author":{"gitID":"-"},"content":"                sortByEmail();"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"                break;"},{"lineNumber":1063,"author":{"gitID":"-"},"content":"            case \"address\":"},{"lineNumber":1064,"author":{"gitID":"-"},"content":"                sortByAddress();"},{"lineNumber":1065,"author":{"gitID":"-"},"content":"                break;"},{"lineNumber":1066,"author":{"gitID":"-"},"content":"            case \"tag\":"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"                sortByTag();"},{"lineNumber":1068,"author":{"gitID":"-"},"content":"                break;"},{"lineNumber":1069,"author":{"gitID":"-"},"content":"            case \"rate\":"},{"lineNumber":1070,"author":{"gitID":"-"},"content":"                sortByRate();"},{"lineNumber":1071,"author":{"gitID":"-"},"content":"                break;"},{"lineNumber":1072,"author":{"gitID":"-"},"content":"            default:"},{"lineNumber":1073,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"Sort field should be name, phone, email, tag, address or rate.\");"},{"lineNumber":1074,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":1076,"author":{"gitID":"IzHoBX"},"content":"----"},{"lineNumber":1077,"author":{"gitID":"Yoochard"},"content":"// end::sort[]"},{"lineNumber":1078,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1079,"author":{"gitID":"Yoochard"},"content":"// tag::changeTheme[]"},{"lineNumber":1080,"author":{"gitID":"Yoochard"},"content":"\u003d\u003d\u003d Change theme of Employees Tracker"},{"lineNumber":1081,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1082,"author":{"gitID":"-"},"content":"`changeTheme` command is used to change the theme to `dark` or `bright`."},{"lineNumber":1083,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"* `changeTheme` is achieved by handling `changeThemeEvent` in `MainWindow`."},{"lineNumber":1085,"author":{"gitID":"IzHoBX"},"content":"* a new \"theme\" field is added in `GuiSetting`."},{"lineNumber":1086,"author":{"gitID":"Yoochard"},"content":"// end::changeTheme[]"},{"lineNumber":1087,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1088,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":1089,"author":{"gitID":"-"},"content":""},{"lineNumber":1090,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":1091,"author":{"gitID":"-"},"content":""},{"lineNumber":1092,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)."},{"lineNumber":1093,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level."},{"lineNumber":1094,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":1095,"author":{"gitID":"-"},"content":""},{"lineNumber":1096,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":1097,"author":{"gitID":"-"},"content":""},{"lineNumber":1098,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application."},{"lineNumber":1099,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution."},{"lineNumber":1100,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App."},{"lineNumber":1101,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size."},{"lineNumber":1102,"author":{"gitID":"-"},"content":""},{"lineNumber":1103,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":1104,"author":{"gitID":"-"},"content":""},{"lineNumber":1105,"author":{"gitID":"-"},"content":"This section outlines how to do the documentation for Employees Tracker."},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":1111,"author":{"gitID":"-"},"content":""},{"lineNumber":1112,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing documentation"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":1115,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":1116,"author":{"gitID":"-"},"content":""},{"lineNumber":1117,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing documentation"},{"lineNumber":1118,"author":{"gitID":"-"},"content":""},{"lineNumber":1119,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":1120,"author":{"gitID":"-"},"content":""},{"lineNumber":1121,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting documentation to PDF format"},{"lineNumber":1122,"author":{"gitID":"-"},"content":""},{"lineNumber":1123,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":1124,"author":{"gitID":"-"},"content":""},{"lineNumber":1125,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":1126,"author":{"gitID":"-"},"content":""},{"lineNumber":1127,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":1128,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":1129,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":1130,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":1131,"author":{"gitID":"-"},"content":""},{"lineNumber":1132,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome."},{"lineNumber":1133,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":1134,"author":{"gitID":"-"},"content":""},{"lineNumber":1135,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":1136,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":1137,"author":{"gitID":"-"},"content":""},{"lineNumber":1138,"author":{"gitID":"-"},"content":"This section outlines the testing procedure of Employees Tracker."},{"lineNumber":1139,"author":{"gitID":"-"},"content":""},{"lineNumber":1140,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running tests"},{"lineNumber":1141,"author":{"gitID":"-"},"content":""},{"lineNumber":1142,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":1143,"author":{"gitID":"-"},"content":""},{"lineNumber":1144,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1145,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3^rd^ one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`."},{"lineNumber":1150,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`."},{"lineNumber":1151,"author":{"gitID":"-"},"content":""},{"lineNumber":1152,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)."},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1157,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":1158,"author":{"gitID":"-"},"content":""},{"lineNumber":1159,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":1160,"author":{"gitID":"-"},"content":""},{"lineNumber":1161,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":1162,"author":{"gitID":"-"},"content":""},{"lineNumber":1163,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)."},{"lineNumber":1164,"author":{"gitID":"-"},"content":""},{"lineNumber":1165,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include:"},{"lineNumber":1170,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":1171,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":1172,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include:"},{"lineNumber":1173,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":1174,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`."},{"lineNumber":1175,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":1176,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`."},{"lineNumber":1177,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":1178,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`."},{"lineNumber":1179,"author":{"gitID":"-"},"content":""},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting testing"},{"lineNumber":1182,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":1183,"author":{"gitID":"-"},"content":""},{"lineNumber":1184,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":1185,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":1186,"author":{"gitID":"-"},"content":""},{"lineNumber":1187,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":1188,"author":{"gitID":"-"},"content":""},{"lineNumber":1189,"author":{"gitID":"-"},"content":"This section outlines the development and operation of Employees Tracker."},{"lineNumber":1190,"author":{"gitID":"-"},"content":""},{"lineNumber":1191,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build automation"},{"lineNumber":1192,"author":{"gitID":"-"},"content":""},{"lineNumber":1193,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":1194,"author":{"gitID":"-"},"content":""},{"lineNumber":1195,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous integration"},{"lineNumber":1196,"author":{"gitID":"-"},"content":""},{"lineNumber":1197,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":1198,"author":{"gitID":"-"},"content":""},{"lineNumber":1199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation previews"},{"lineNumber":1200,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":1201,"author":{"gitID":"-"},"content":""},{"lineNumber":1202,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a release"},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":1205,"author":{"gitID":"-"},"content":""},{"lineNumber":1206,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":1207,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":1208,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`."},{"lineNumber":1209,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":1210,"author":{"gitID":"-"},"content":""},{"lineNumber":1211,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing dependencies"},{"lineNumber":1212,"author":{"gitID":"-"},"content":""},{"lineNumber":1213,"author":{"gitID":"Yoochard"},"content":"A project often depends on third-party libraries. For example, Employees Tracker depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":1214,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size). +"},{"lineNumber":1215,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)."},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":1218,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1219,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":1220,"author":{"gitID":"-"},"content":""},{"lineNumber":1221,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":1222,"author":{"gitID":"-"},"content":""},{"lineNumber":1223,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":1224,"author":{"gitID":"-"},"content":""},{"lineNumber":1225,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":1228,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":1229,"author":{"gitID":"-"},"content":""},{"lineNumber":1230,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":1231,"author":{"gitID":"-"},"content":""},{"lineNumber":1232,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1233,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":1234,"author":{"gitID":"-"},"content":""},{"lineNumber":1235,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":1236,"author":{"gitID":"-"},"content":""},{"lineNumber":1237,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1238,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":1239,"author":{"gitID":"-"},"content":""},{"lineNumber":1240,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":1241,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1242,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1243,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1244,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":1245,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":1246,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1247,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":1248,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":1249,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":1250,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":1251,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1254,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":1255,"author":{"gitID":"-"},"content":""},{"lineNumber":1256,"author":{"gitID":"Yoochard"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in Employees Tracker, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":1257,"author":{"gitID":"-"},"content":""},{"lineNumber":1258,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1259,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"Yoochard"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in Employees Tracker."},{"lineNumber":1262,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1263,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1265,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":1266,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":1267,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":1268,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1269,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":1270,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":1271,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":1272,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":1273,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":1274,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":1275,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1276,"author":{"gitID":"-"},"content":""},{"lineNumber":1277,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1278,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"Yoochard"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your Employees Tracker application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1283,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":1284,"author":{"gitID":"-"},"content":""},{"lineNumber":1285,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":1286,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1287,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1288,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1289,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":1290,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1291,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1292,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1293,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":1294,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1295,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1296,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1297,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":1298,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":1299,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":1300,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1301,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":1302,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":1303,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":1304,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1305,"author":{"gitID":"-"},"content":""},{"lineNumber":1306,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":1307,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1308,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1309,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1310,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":1311,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1312,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1313,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1314,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":1315,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1316,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1317,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1318,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":1319,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":1320,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1321,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":1322,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":1323,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":1324,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":1325,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":1326,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":1327,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":1328,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"Yoochard"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in Employees Tracker."},{"lineNumber":1331,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1332,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":1333,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1334,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":1335,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1336,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":1337,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1338,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":1339,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1340,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1341,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":1342,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":1343,"author":{"gitID":"Yoochard"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever Employees Tracker is updated."},{"lineNumber":1344,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1345,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":1346,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":1347,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":1348,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":1349,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":1350,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1351,"author":{"gitID":"-"},"content":""},{"lineNumber":1352,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1353,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":1354,"author":{"gitID":"-"},"content":""},{"lineNumber":1355,"author":{"gitID":"Yoochard"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving Employees Tracker to the cloud. However, the current implementation of the application constantly saves Employees Tracker after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for Employees Tracker storage."},{"lineNumber":1356,"author":{"gitID":"-"},"content":""},{"lineNumber":1357,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":1358,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":1359,"author":{"gitID":"-"},"content":""},{"lineNumber":1360,"author":{"gitID":"Yoochard"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that Employees Tracker can be saved in a fixed temporary location."},{"lineNumber":1361,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1362,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1363,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":1364,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":1365,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":1366,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":1367,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":1368,"author":{"gitID":"-"},"content":"****"},{"lineNumber":1369,"author":{"gitID":"-"},"content":""},{"lineNumber":1370,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":1371,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":1372,"author":{"gitID":"-"},"content":""},{"lineNumber":1373,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":1374,"author":{"gitID":"-"},"content":""},{"lineNumber":1375,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":1376,"author":{"gitID":"-"},"content":""},{"lineNumber":1377,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":1378,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":1379,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":1380,"author":{"gitID":"-"},"content":""},{"lineNumber":1381,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":1382,"author":{"gitID":"-"},"content":""},{"lineNumber":1383,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":1384,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":1385,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":1386,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":1387,"author":{"gitID":"-"},"content":""},{"lineNumber":1388,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":1389,"author":{"gitID":"-"},"content":""},{"lineNumber":1390,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":1391,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":1392,"author":{"gitID":"-"},"content":""},{"lineNumber":1393,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":1396,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":1397,"author":{"gitID":"-"},"content":""},{"lineNumber":1398,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1399,"author":{"gitID":"-"},"content":""},{"lineNumber":1400,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":1401,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":1404,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":1405,"author":{"gitID":"-"},"content":""},{"lineNumber":1406,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1407,"author":{"gitID":"-"},"content":""},{"lineNumber":1408,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":1409,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":1410,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":1411,"author":{"gitID":"-"},"content":""},{"lineNumber":1412,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1413,"author":{"gitID":"-"},"content":""},{"lineNumber":1414,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":1415,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":1416,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":1417,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":1418,"author":{"gitID":"-"},"content":""},{"lineNumber":1419,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":1420,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":1421,"author":{"gitID":"-"},"content":""},{"lineNumber":1422,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1423,"author":{"gitID":"-"},"content":""},{"lineNumber":1424,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":1425,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":1426,"author":{"gitID":"-"},"content":""},{"lineNumber":1427,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1428,"author":{"gitID":"-"},"content":""},{"lineNumber":1429,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1430,"author":{"gitID":"-"},"content":""},{"lineNumber":1431,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1432,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1433,"author":{"gitID":"-"},"content":""},{"lineNumber":1434,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1435,"author":{"gitID":"-"},"content":""},{"lineNumber":1436,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1437,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1438,"author":{"gitID":"-"},"content":""},{"lineNumber":1439,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1440,"author":{"gitID":"-"},"content":""},{"lineNumber":1441,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1442,"author":{"gitID":"-"},"content":""},{"lineNumber":1443,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1444,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1445,"author":{"gitID":"-"},"content":""},{"lineNumber":1446,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1447,"author":{"gitID":"-"},"content":""},{"lineNumber":1448,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1449,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":1450,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1451,"author":{"gitID":"-"},"content":""},{"lineNumber":1452,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1453,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1454,"author":{"gitID":"-"},"content":""},{"lineNumber":1455,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1456,"author":{"gitID":"-"},"content":""},{"lineNumber":1457,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1458,"author":{"gitID":"-"},"content":""},{"lineNumber":1459,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1460,"author":{"gitID":"-"},"content":""},{"lineNumber":1461,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1462,"author":{"gitID":"-"},"content":""},{"lineNumber":1463,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1464,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1465,"author":{"gitID":"-"},"content":""},{"lineNumber":1466,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1467,"author":{"gitID":"-"},"content":""},{"lineNumber":1468,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1469,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1470,"author":{"gitID":"-"},"content":""},{"lineNumber":1471,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1472,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1473,"author":{"gitID":"-"},"content":""},{"lineNumber":1474,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1475,"author":{"gitID":"-"},"content":""},{"lineNumber":1476,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1477,"author":{"gitID":"-"},"content":""},{"lineNumber":1478,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1479,"author":{"gitID":"-"},"content":""},{"lineNumber":1480,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1481,"author":{"gitID":"-"},"content":""},{"lineNumber":1482,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1483,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1484,"author":{"gitID":"-"},"content":""},{"lineNumber":1485,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1486,"author":{"gitID":"-"},"content":""},{"lineNumber":1487,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1488,"author":{"gitID":"-"},"content":""},{"lineNumber":1489,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1490,"author":{"gitID":"-"},"content":""},{"lineNumber":1491,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1492,"author":{"gitID":"-"},"content":""},{"lineNumber":1493,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1494,"author":{"gitID":"-"},"content":""},{"lineNumber":1495,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1496,"author":{"gitID":"-"},"content":""},{"lineNumber":1497,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1498,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1499,"author":{"gitID":"-"},"content":""},{"lineNumber":1500,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1501,"author":{"gitID":"-"},"content":""},{"lineNumber":1502,"author":{"gitID":"IzHoBX"},"content":"* is a manger"},{"lineNumber":1503,"author":{"gitID":"IzHoBX"},"content":"* has a need to keep track of a significant number of subordinate employees"},{"lineNumber":1504,"author":{"gitID":"-"},"content":"* need to assign work to employees and keep track of it"},{"lineNumber":1505,"author":{"gitID":"crizyli"},"content":"* prefers desktop apps over mobile apps"},{"lineNumber":1506,"author":{"gitID":"IzHoBX"},"content":"* can type fast, i.e. \u003e45 words per minute"},{"lineNumber":1507,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1508,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1509,"author":{"gitID":"-"},"content":""},{"lineNumber":1510,"author":{"gitID":"-"},"content":"*Value proposition*: keep track of employees and their work easily through a single app"},{"lineNumber":1511,"author":{"gitID":"-"},"content":""},{"lineNumber":1512,"author":{"gitID":"-"},"content":"*Feature Contribution*："},{"lineNumber":1513,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1514,"author":{"gitID":"IzHoBX"},"content":". Li Yufei +"},{"lineNumber":1515,"author":{"gitID":"crizyli"},"content":"* (minor) be able to lock the application and unlock it and must use the same password"},{"lineNumber":1516,"author":{"gitID":"crizyli"},"content":"* (major) each employee has his own timetable and manager can add events on anyone\u0027s timetable"},{"lineNumber":1517,"author":{"gitID":"IzHoBX"},"content":". Yang Yuqing"},{"lineNumber":1518,"author":{"gitID":"-"},"content":"* (minor) be able to sort the employees by existing field (ie. name, phone, email, address, rate)"},{"lineNumber":1519,"author":{"gitID":"Yoochard"},"content":"* (major) UI optimization"},{"lineNumber":1520,"author":{"gitID":"IzHoBX"},"content":". Ho Bing Xuan"},{"lineNumber":1521,"author":{"gitID":"IzHoBX"},"content":"* (minor) add Rating features"},{"lineNumber":1522,"author":{"gitID":"IzHoBX"},"content":"* (major) notification feature for timetable entry"},{"lineNumber":1523,"author":{"gitID":"-"},"content":". Gilbert Emerson"},{"lineNumber":1524,"author":{"gitID":"-"},"content":"* (minor) enhance on the Find feature, able to find by multiple keyphrases and also in multiple fields"},{"lineNumber":1525,"author":{"gitID":"-"},"content":"* (major) add Review feature"},{"lineNumber":1526,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1527,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1528,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1529,"author":{"gitID":"-"},"content":""},{"lineNumber":1530,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1531,"author":{"gitID":"-"},"content":""},{"lineNumber":1532,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1533,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1534,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1535,"author":{"gitID":"-"},"content":"|`* * *`|new user |see usage instructions |refer to instructions when I forget how to use the App"},{"lineNumber":1536,"author":{"gitID":"-"},"content":""},{"lineNumber":1537,"author":{"gitID":"-"},"content":"|`* * *`|user |add a new person | include employee that have just entered the company"},{"lineNumber":1538,"author":{"gitID":"-"},"content":""},{"lineNumber":1539,"author":{"gitID":"IzHoBX"},"content":"|`* * *`|user |have a dedicated timetable for each employee| trace progress of that person"},{"lineNumber":1540,"author":{"gitID":"-"},"content":""},{"lineNumber":1541,"author":{"gitID":"-"},"content":"|`* * *`|user |add a timetable entry on anyone\u0027s timetable | assign jobs to employee"},{"lineNumber":1542,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1543,"author":{"gitID":"IzHoBX"},"content":"|`* * *`|user |edit a timetable entry |update timetable entry information"},{"lineNumber":1544,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1545,"author":{"gitID":"-"},"content":"|`* * *`|user |delete a timetable entry | remove a job or event that is canceled"},{"lineNumber":1546,"author":{"gitID":"-"},"content":""},{"lineNumber":1547,"author":{"gitID":"-"},"content":"|`* * *`|user |give employee a rating |evaluate their performance"},{"lineNumber":1548,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1549,"author":{"gitID":"-"},"content":"|`* * *`|user |change employee\u0027s rating | update my rating record when the performance of an employee changes"},{"lineNumber":1550,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1551,"author":{"gitID":"-"},"content":"|`* * *`|user |add notes on a timetable entry or on a person | include more details about the entry"},{"lineNumber":1552,"author":{"gitID":"-"},"content":""},{"lineNumber":1553,"author":{"gitID":"IzHoBX"},"content":"|`* * *`|user |search employees by specific criteria (e.g. name and tags) | search employees more easily"},{"lineNumber":1554,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1555,"author":{"gitID":"IzHoBX"},"content":"|`* * *`|user |identify a person with name when carrying out commands | save time by not having to browse through a long list"},{"lineNumber":1556,"author":{"gitID":"-"},"content":""},{"lineNumber":1557,"author":{"gitID":"-"},"content":"|`* *`|user |sort employees by name |locate an employee easily"},{"lineNumber":1558,"author":{"gitID":"-"},"content":""},{"lineNumber":1559,"author":{"gitID":"-"},"content":"|`* *`|user |sort employees by their rating |give them bonus salaries accordingly"},{"lineNumber":1560,"author":{"gitID":"-"},"content":""},{"lineNumber":1561,"author":{"gitID":"-"},"content":"|`* *`|user |sort employees by their salaries |see their salary conditions"},{"lineNumber":1562,"author":{"gitID":"-"},"content":""},{"lineNumber":1563,"author":{"gitID":"-"},"content":"|`* *`|user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"},{"lineNumber":1564,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1565,"author":{"gitID":"-"},"content":"|`* *`|user |have my own timetable |manage my own time"},{"lineNumber":1566,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1567,"author":{"gitID":"IzHoBX"},"content":"|`* *`|user |start composing an email with a command |send an email to a specific person faster"},{"lineNumber":1568,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1569,"author":{"gitID":"-"},"content":"|`* *`|user |mass adding timetable entry to many employees\u0027 timetable at once | save time by not having to add the event to person by person"},{"lineNumber":1570,"author":{"gitID":"-"},"content":""},{"lineNumber":1571,"author":{"gitID":"-"},"content":"|`* *`|user |be notified for any deadline for the timetable entry of my employees | be aware of employees who are late in submitting their work"},{"lineNumber":1572,"author":{"gitID":"-"},"content":""},{"lineNumber":1573,"author":{"gitID":"-"},"content":"|`* *`|user |export my employees tracker |share information with another user"},{"lineNumber":1574,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1575,"author":{"gitID":"-"},"content":"|`* *`|user |import my employees tracker |obtain information from another user"},{"lineNumber":1576,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1577,"author":{"gitID":"IzHoBX"},"content":"|`*`|user |see timetable entries happening in other departments |be aware of the progress of other departments"},{"lineNumber":1578,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1579,"author":{"gitID":"IzHoBX"},"content":"|`*`|user |view to-do-list |see my own upcoming jobs/events"},{"lineNumber":1580,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1581,"author":{"gitID":"IzHoBX"},"content":"|`*`|user |export a list of people into excel sheet |do collective operations easily on other platform"},{"lineNumber":1582,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1583,"author":{"gitID":"IzHoBX"},"content":"|`*`|user |login |have personalized privileges/window scheme"},{"lineNumber":1584,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1585,"author":{"gitID":"-"},"content":"|`*`|user |change the window scheme/theme/skin | have personalised experience in the app"},{"lineNumber":1586,"author":{"gitID":"-"},"content":""},{"lineNumber":1587,"author":{"gitID":"-"},"content":"|`*`|user |know employee\u0027s location |search their location on the map"},{"lineNumber":1588,"author":{"gitID":"-"},"content":""},{"lineNumber":1589,"author":{"gitID":"Yoochard"},"content":"|`*`|user |lock employees tracker |leave my app open while making unauthorized people cannot access it"},{"lineNumber":1590,"author":{"gitID":"-"},"content":""},{"lineNumber":1591,"author":{"gitID":"Yoochard"},"content":"|`*`|user |unlock employees tracker |continue to use the app after leaving it locked"},{"lineNumber":1592,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1593,"author":{"gitID":"-"},"content":"|`*`|user |write a review to an employee that has ever worked below me| information his/her current manager of his/her performance"},{"lineNumber":1594,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1595,"author":{"gitID":"-"},"content":""},{"lineNumber":1596,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1597,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1598,"author":{"gitID":"-"},"content":""},{"lineNumber":1599,"author":{"gitID":"-"},"content":"(For all use cases below, the *System* is the `Employees Tracker` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1600,"author":{"gitID":"-"},"content":""},{"lineNumber":1601,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1602,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Use case: Add a timetable entry on anyone\u0027s timetable"},{"lineNumber":1603,"author":{"gitID":"-"},"content":""},{"lineNumber":1604,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1605,"author":{"gitID":"-"},"content":""},{"lineNumber":1606,"author":{"gitID":"Yoochard"},"content":"1. User requests to list employees"},{"lineNumber":1607,"author":{"gitID":"-"},"content":"2.   shows a list of employees"},{"lineNumber":1608,"author":{"gitID":"-"},"content":"3. User requests to add a entry to an employee\u0027s timetable"},{"lineNumber":1609,"author":{"gitID":"-"},"content":"4. Employees Tracker adds the entry"},{"lineNumber":1610,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1611,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1612,"author":{"gitID":"-"},"content":""},{"lineNumber":1613,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1614,"author":{"gitID":"-"},"content":""},{"lineNumber":1615,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1616,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1617,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1618,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1619,"author":{"gitID":"-"},"content":""},{"lineNumber":1620,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1621,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1622,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1623,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows an error message."},{"lineNumber":1624,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1625,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1626,"author":{"gitID":"-"},"content":""},{"lineNumber":1627,"author":{"gitID":"crizyli"},"content":"[discrete]"},{"lineNumber":1628,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Give employee a rating"},{"lineNumber":1629,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1630,"author":{"gitID":"Yoochard"},"content":"*MSS*"},{"lineNumber":1631,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1632,"author":{"gitID":"Yoochard"},"content":"1. User requests to list employees"},{"lineNumber":1633,"author":{"gitID":"-"},"content":"2. Employees Tracker shows a list of employees"},{"lineNumber":1634,"author":{"gitID":"-"},"content":"3. User requests to give an employee a rating"},{"lineNumber":1635,"author":{"gitID":"-"},"content":"4. Employees Tracker add the rating"},{"lineNumber":1636,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1637,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1638,"author":{"gitID":"-"},"content":""},{"lineNumber":1639,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1640,"author":{"gitID":"-"},"content":""},{"lineNumber":1641,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1642,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1643,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1644,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1645,"author":{"gitID":"-"},"content":""},{"lineNumber":1646,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1647,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1648,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1649,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows an error message."},{"lineNumber":1650,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1651,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1652,"author":{"gitID":"-"},"content":""},{"lineNumber":1653,"author":{"gitID":"crizyli"},"content":"* 3b. The given rating is not an integer."},{"lineNumber":1654,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1655,"author":{"gitID":"crizyli"},"content":"[none]"},{"lineNumber":1656,"author":{"gitID":"-"},"content":"** 3b1. Employees Tracker shows an error message."},{"lineNumber":1657,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1658,"author":{"gitID":"crizyli"},"content":"Use case resumes at step 2."},{"lineNumber":1659,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1660,"author":{"gitID":"crizyli"},"content":"* 4a. The person has already been rated."},{"lineNumber":1661,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1662,"author":{"gitID":"crizyli"},"content":"[none]"},{"lineNumber":1663,"author":{"gitID":"-"},"content":"** 4a1. Employees Tracker updates the rating for the person with the new rating."},{"lineNumber":1664,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1665,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1666,"author":{"gitID":"-"},"content":""},{"lineNumber":1667,"author":{"gitID":"crizyli"},"content":"[discrete]"},{"lineNumber":1668,"author":{"gitID":"crizyli"},"content":"\u003d\u003d\u003d Use case: Sort the employees by their rating"},{"lineNumber":1669,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1670,"author":{"gitID":"crizyli"},"content":"*MSS*"},{"lineNumber":1671,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1672,"author":{"gitID":"-"},"content":"1. User requests to list employees sorted by their ratings"},{"lineNumber":1673,"author":{"gitID":"-"},"content":"2. Employees Tracker accesses the list of all employees"},{"lineNumber":1674,"author":{"gitID":"-"},"content":"3. Employees Tracker sorts the employees in the list by their ratings"},{"lineNumber":1675,"author":{"gitID":"-"},"content":"4. Employees Tracker shows the sorted list"},{"lineNumber":1676,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1677,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1678,"author":{"gitID":"-"},"content":""},{"lineNumber":1679,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1680,"author":{"gitID":"-"},"content":""},{"lineNumber":1681,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1682,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1683,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1684,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1685,"author":{"gitID":"-"},"content":""},{"lineNumber":1686,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1687,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use Case: Mass adding timetable entry to many employees\u0027 timetable at once"},{"lineNumber":1688,"author":{"gitID":"-"},"content":""},{"lineNumber":1689,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1690,"author":{"gitID":"-"},"content":""},{"lineNumber":1691,"author":{"gitID":"-"},"content":"1. User requests to list all employees"},{"lineNumber":1692,"author":{"gitID":"-"},"content":"2. Employees Tracker shows a list of all employees"},{"lineNumber":1693,"author":{"gitID":"-"},"content":"3. User requests to add timetable entry to many employees"},{"lineNumber":1694,"author":{"gitID":"-"},"content":"4. Employees Tracker add the entry to many employees"},{"lineNumber":1695,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1696,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1697,"author":{"gitID":"-"},"content":""},{"lineNumber":1698,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1699,"author":{"gitID":"-"},"content":""},{"lineNumber":1700,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1701,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1702,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1703,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1704,"author":{"gitID":"-"},"content":""},{"lineNumber":1705,"author":{"gitID":"-"},"content":"* 3a. The index range given is invalid."},{"lineNumber":1706,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1707,"author":{"gitID":"crizyli"},"content":"[none]"},{"lineNumber":1708,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows an error message."},{"lineNumber":1709,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1710,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1711,"author":{"gitID":"-"},"content":""},{"lineNumber":1712,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1713,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use Case: Write a review to an employee that has ever worked below me"},{"lineNumber":1714,"author":{"gitID":"-"},"content":""},{"lineNumber":1715,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1716,"author":{"gitID":"-"},"content":""},{"lineNumber":1717,"author":{"gitID":"-"},"content":"1. User requests to list all employees"},{"lineNumber":1718,"author":{"gitID":"-"},"content":"2. Employees Tracker shows a list of all employees"},{"lineNumber":1719,"author":{"gitID":"-"},"content":"3. User requests to add review to an employee"},{"lineNumber":1720,"author":{"gitID":"-"},"content":"4. Employees Tracker add the review to the employee"},{"lineNumber":1721,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1722,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1723,"author":{"gitID":"-"},"content":""},{"lineNumber":1724,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1725,"author":{"gitID":"-"},"content":""},{"lineNumber":1726,"author":{"gitID":"crizyli"},"content":"[none]"},{"lineNumber":1727,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":1728,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1729,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1730,"author":{"gitID":"-"},"content":""},{"lineNumber":1731,"author":{"gitID":"-"},"content":"* 3a. The index given is invalid."},{"lineNumber":1732,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1733,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1734,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows an error message."},{"lineNumber":1735,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1736,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1737,"author":{"gitID":"-"},"content":""},{"lineNumber":1738,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1739,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use Case: Export Employees Tracker"},{"lineNumber":1740,"author":{"gitID":"-"},"content":""},{"lineNumber":1741,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1742,"author":{"gitID":"-"},"content":""},{"lineNumber":1743,"author":{"gitID":"-"},"content":"1. User requests export Employees Tracker into a directory"},{"lineNumber":1744,"author":{"gitID":"Yoochard"},"content":"2. Employees Tracker export Employees Tracker data in a file to the directory specified"},{"lineNumber":1745,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1746,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1747,"author":{"gitID":"-"},"content":""},{"lineNumber":1748,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1749,"author":{"gitID":"-"},"content":""},{"lineNumber":1750,"author":{"gitID":"crizyli"},"content":"[none]"},{"lineNumber":1751,"author":{"gitID":"-"},"content":"* 1a. The directory is invalid."},{"lineNumber":1752,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1753,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1754,"author":{"gitID":"-"},"content":"** 1a1. Employees Tracker shows an error message."},{"lineNumber":1755,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1756,"author":{"gitID":"crizyli"},"content":"Use case ends."},{"lineNumber":1757,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1758,"author":{"gitID":"crizyli"},"content":"[discrete]"},{"lineNumber":1759,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use Case: Import Employees Tracker"},{"lineNumber":1760,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1761,"author":{"gitID":"crizyli"},"content":"*MSS*"},{"lineNumber":1762,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1763,"author":{"gitID":"-"},"content":"1. User requests import Employees Tracker file from a directory"},{"lineNumber":1764,"author":{"gitID":"Yoochard"},"content":"2. Employees Tracker import Employees Tracker data from the file in the directory specified"},{"lineNumber":1765,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1766,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1767,"author":{"gitID":"-"},"content":""},{"lineNumber":1768,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1769,"author":{"gitID":"-"},"content":""},{"lineNumber":1770,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1771,"author":{"gitID":"-"},"content":"* 1a. The directory is invalid."},{"lineNumber":1772,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1773,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1774,"author":{"gitID":"-"},"content":"** 1a1. Employees Tracker shows an error message."},{"lineNumber":1775,"author":{"gitID":"crizyli"},"content":"+"},{"lineNumber":1776,"author":{"gitID":"crizyli"},"content":"Use case ends."},{"lineNumber":1777,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":1778,"author":{"gitID":"IzHoBX"},"content":"[discrete]"},{"lineNumber":1779,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Use case: edit timetable entry"},{"lineNumber":1780,"author":{"gitID":"-"},"content":""},{"lineNumber":1781,"author":{"gitID":"IzHoBX"},"content":"*MSS*"},{"lineNumber":1782,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1783,"author":{"gitID":"IzHoBX"},"content":"1. User requests to list all persons."},{"lineNumber":1784,"author":{"gitID":"IzHoBX"},"content":"2. User requests to view the timetable of a person."},{"lineNumber":1785,"author":{"gitID":"-"},"content":"3. Employees Tracker shows the timetable of that person."},{"lineNumber":1786,"author":{"gitID":"IzHoBX"},"content":"4. User requests to update the information of an entry in the timetable."},{"lineNumber":1787,"author":{"gitID":"-"},"content":"5. Employees Tracker updates the new information for that timetable entry."},{"lineNumber":1788,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1789,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1790,"author":{"gitID":"-"},"content":""},{"lineNumber":1791,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1792,"author":{"gitID":"-"},"content":""},{"lineNumber":1793,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1794,"author":{"gitID":"IzHoBX"},"content":"* 1a. The list is empty."},{"lineNumber":1795,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":1796,"author":{"gitID":"IzHoBX"},"content":"Use case ends."},{"lineNumber":1797,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1798,"author":{"gitID":"IzHoBX"},"content":"* 2a. The given index is invalid."},{"lineNumber":1799,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":1800,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1801,"author":{"gitID":"-"},"content":"** 2a1. Employees Tracker shows an error message."},{"lineNumber":1802,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":1803,"author":{"gitID":"IzHoBX"},"content":"Use case resumes at step 2."},{"lineNumber":1804,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1805,"author":{"gitID":"IzHoBX"},"content":"* 2b. The person has no timetable entry."},{"lineNumber":1806,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":1807,"author":{"gitID":"IzHoBX"},"content":"Use case ends."},{"lineNumber":1808,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1809,"author":{"gitID":"IzHoBX"},"content":"* 4a. The event name provided by user doesn\u0027t exist."},{"lineNumber":1810,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":1811,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1812,"author":{"gitID":"-"},"content":"** 4a1. Employees Tracker shows an error message"},{"lineNumber":1813,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1814,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1815,"author":{"gitID":"-"},"content":""},{"lineNumber":1816,"author":{"gitID":"IzHoBX"},"content":"* 4b. The new information given by user doesn\u0027t follow command format"},{"lineNumber":1817,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1818,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1819,"author":{"gitID":"-"},"content":"** 4b1. Employees Tracker shows an error message"},{"lineNumber":1820,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1821,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1822,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1823,"author":{"gitID":"-"},"content":"* 5a. Employees Tracker couldn\u0027t write to save file."},{"lineNumber":1824,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1825,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1826,"author":{"gitID":"-"},"content":"** 5a1. Employees Tracker shows error message and requests user to resolve the error."},{"lineNumber":1827,"author":{"gitID":"IzHoBX"},"content":"** 5a2. User resolves the error."},{"lineNumber":1828,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1829,"author":{"gitID":"-"},"content":"Use case resumes at step 5."},{"lineNumber":1830,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1831,"author":{"gitID":"IzHoBX"},"content":"[discrete]"},{"lineNumber":1832,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Use case: delete a timetable entry"},{"lineNumber":1833,"author":{"gitID":"-"},"content":""},{"lineNumber":1834,"author":{"gitID":"IzHoBX"},"content":"*MSS*"},{"lineNumber":1835,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1836,"author":{"gitID":"IzHoBX"},"content":"1. User requests to list all persons."},{"lineNumber":1837,"author":{"gitID":"IzHoBX"},"content":"2. User requests to view the timetable of a person."},{"lineNumber":1838,"author":{"gitID":"-"},"content":"3. Employees Tracker shows the timetable of that person."},{"lineNumber":1839,"author":{"gitID":"IzHoBX"},"content":"4. User requests to delete an entry in that person\u0027s timetable."},{"lineNumber":1840,"author":{"gitID":"-"},"content":"5. Employees Tracker deletes the timetable entry."},{"lineNumber":1841,"author":{"gitID":"Yoochard"},"content":"+"},{"lineNumber":1842,"author":{"gitID":"Yoochard"},"content":"Use case ends."},{"lineNumber":1843,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1844,"author":{"gitID":"IzHoBX"},"content":"*Extensions*"},{"lineNumber":1845,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1846,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1847,"author":{"gitID":"IzHoBX"},"content":"* 1a. The list is empty."},{"lineNumber":1848,"author":{"gitID":"IzHoBX"},"content":"+"},{"lineNumber":1849,"author":{"gitID":"IzHoBX"},"content":"Use case ends."},{"lineNumber":1850,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1851,"author":{"gitID":"IzHoBX"},"content":"* 2a. The given index is invalid."},{"lineNumber":1852,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1853,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1854,"author":{"gitID":"-"},"content":"** 2a1. Employees Tracker shows an error message."},{"lineNumber":1855,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1856,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1857,"author":{"gitID":"-"},"content":""},{"lineNumber":1858,"author":{"gitID":"IzHoBX"},"content":"* 2b. The person has no timetable entry."},{"lineNumber":1859,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1860,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1861,"author":{"gitID":"-"},"content":""},{"lineNumber":1862,"author":{"gitID":"IzHoBX"},"content":"* 4a. The event name provided by user doesn\u0027t exist."},{"lineNumber":1863,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1864,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1865,"author":{"gitID":"-"},"content":"** 4a1. Employees Tracker shows an error message"},{"lineNumber":1866,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1867,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1868,"author":{"gitID":"-"},"content":""},{"lineNumber":1869,"author":{"gitID":"-"},"content":"* 5a. Employees Tracker couldn\u0027t write to save file."},{"lineNumber":1870,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1871,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1872,"author":{"gitID":"-"},"content":"** 5a1. Employees Tracker shows error message and requests user to resolve the error."},{"lineNumber":1873,"author":{"gitID":"IzHoBX"},"content":"** 5a2. User resolves the error."},{"lineNumber":1874,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1875,"author":{"gitID":"-"},"content":"Use case resumes at step 5."},{"lineNumber":1876,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1877,"author":{"gitID":"IzHoBX"},"content":"[discrete]"},{"lineNumber":1878,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Use case: start composing email"},{"lineNumber":1879,"author":{"gitID":"-"},"content":""},{"lineNumber":1880,"author":{"gitID":"IzHoBX"},"content":"*MSS*"},{"lineNumber":1881,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1882,"author":{"gitID":"IzHoBX"},"content":"1. User requests to list all persons."},{"lineNumber":1883,"author":{"gitID":"IzHoBX"},"content":"2. User requests to email a person in the list."},{"lineNumber":1884,"author":{"gitID":"-"},"content":"3. Employees Tracker opens up a webpage for composing email to that person."},{"lineNumber":1885,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1886,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1887,"author":{"gitID":"-"},"content":""},{"lineNumber":1888,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1889,"author":{"gitID":"-"},"content":""},{"lineNumber":1890,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1891,"author":{"gitID":"IzHoBX"},"content":"* 1a. The list is empty."},{"lineNumber":1892,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1893,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1894,"author":{"gitID":"-"},"content":""},{"lineNumber":1895,"author":{"gitID":"IzHoBX"},"content":"* 2a. The given index is invalid."},{"lineNumber":1896,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1897,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1898,"author":{"gitID":"-"},"content":"** 2a1. Employees Tracker shows an error message."},{"lineNumber":1899,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1900,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1901,"author":{"gitID":"-"},"content":""},{"lineNumber":1902,"author":{"gitID":"IzHoBX"},"content":"* 3a. The computer has no access to internet."},{"lineNumber":1903,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1904,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1905,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows error message."},{"lineNumber":1906,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1907,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1908,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1909,"author":{"gitID":"IzHoBX"},"content":"[discrete]"},{"lineNumber":1910,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Use case: export a list of people as Excel spreadsheet"},{"lineNumber":1911,"author":{"gitID":"-"},"content":""},{"lineNumber":1912,"author":{"gitID":"IzHoBX"},"content":"*MSS*"},{"lineNumber":1913,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1914,"author":{"gitID":"IzHoBX"},"content":"1. User requests to list all persons, or perform a search."},{"lineNumber":1915,"author":{"gitID":"IzHoBX"},"content":"2. User requests to export the list of persons as excel sheet and save it in a save file path."},{"lineNumber":1916,"author":{"gitID":"-"},"content":"3. Employees Tracker exports the list of persons as excel sheet."},{"lineNumber":1917,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1918,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1919,"author":{"gitID":"-"},"content":""},{"lineNumber":1920,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1921,"author":{"gitID":"-"},"content":""},{"lineNumber":1922,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1923,"author":{"gitID":"IzHoBX"},"content":"* 1a. The list is empty."},{"lineNumber":1924,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1925,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1926,"author":{"gitID":"-"},"content":""},{"lineNumber":1927,"author":{"gitID":"IzHoBX"},"content":"* 2a. The given save file path is invalid."},{"lineNumber":1928,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1929,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1930,"author":{"gitID":"-"},"content":"** 2a1. Employees Tracker shows an error message."},{"lineNumber":1931,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1932,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":1933,"author":{"gitID":"-"},"content":""},{"lineNumber":1934,"author":{"gitID":"-"},"content":"* 3a. Employees Tracker couldn\u0027t write to save file."},{"lineNumber":1935,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1936,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1937,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows error message and requests user to resolve the error."},{"lineNumber":1938,"author":{"gitID":"IzHoBX"},"content":"** 3a2. User resolves the error."},{"lineNumber":1939,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1940,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1941,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1942,"author":{"gitID":"IzHoBX"},"content":"[discrete]"},{"lineNumber":1943,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Use case: login"},{"lineNumber":1944,"author":{"gitID":"-"},"content":""},{"lineNumber":1945,"author":{"gitID":"IzHoBX"},"content":"*MSS*"},{"lineNumber":1946,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1947,"author":{"gitID":"Yoochard"},"content":"1. User starts Employees Tracker program."},{"lineNumber":1948,"author":{"gitID":"-"},"content":"2. Employees Tracker requests user to enter username and password."},{"lineNumber":1949,"author":{"gitID":"IzHoBX"},"content":"3. User enters his username and password"},{"lineNumber":1950,"author":{"gitID":"-"},"content":"4. Employees Tracker shows the content."},{"lineNumber":1951,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1952,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1953,"author":{"gitID":"-"},"content":""},{"lineNumber":1954,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1955,"author":{"gitID":"-"},"content":""},{"lineNumber":1956,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1957,"author":{"gitID":"IzHoBX"},"content":"* 3a. The user enters an invalid username or wrong password."},{"lineNumber":1958,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1959,"author":{"gitID":"IzHoBX"},"content":"[none]"},{"lineNumber":1960,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows an error message."},{"lineNumber":1961,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1962,"author":{"gitID":"-"},"content":"Use case resumes at step 1."},{"lineNumber":1963,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":1964,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1965,"author":{"gitID":"Yoochard"},"content":"\u003d\u003d\u003d Use case: Lock Employees Tracker"},{"lineNumber":1966,"author":{"gitID":"-"},"content":""},{"lineNumber":1967,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1968,"author":{"gitID":"-"},"content":""},{"lineNumber":1969,"author":{"gitID":"Yoochard"},"content":"1. User requests to lock Employees Tracker by entering \"lock\" and password"},{"lineNumber":1970,"author":{"gitID":"-"},"content":"2. Employees Tracker is locked unless user unlocks it."},{"lineNumber":1971,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1972,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1973,"author":{"gitID":"Yoochard"},"content":"* 2a. When employees tracker is locked, user are required to unlock Employees Tracker before any instruction."},{"lineNumber":1974,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1975,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1976,"author":{"gitID":"-"},"content":""},{"lineNumber":1977,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1978,"author":{"gitID":"Yoochard"},"content":"\u003d\u003d\u003d Use case: Unlock Employees Tracker"},{"lineNumber":1979,"author":{"gitID":"-"},"content":""},{"lineNumber":1980,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1981,"author":{"gitID":"-"},"content":""},{"lineNumber":1982,"author":{"gitID":"Yoochard"},"content":"1. User requests to unlock Employees Tracker by entering \"unlock\" and the password set earlier"},{"lineNumber":1983,"author":{"gitID":"-"},"content":"2. Employees Tracker unlocked. Use case ends."},{"lineNumber":1984,"author":{"gitID":"-"},"content":""},{"lineNumber":1985,"author":{"gitID":"Yoochard"},"content":"*Extensions*"},{"lineNumber":1986,"author":{"gitID":"-"},"content":""},{"lineNumber":1987,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1988,"author":{"gitID":"Yoochard"},"content":"* 1a. The given password is incorrect, which means different from the one set earlier"},{"lineNumber":1989,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1990,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1991,"author":{"gitID":"-"},"content":"** 1a1. Employees Tracker shows an error message and requires to re-enter password"},{"lineNumber":1992,"author":{"gitID":"Yoochard"},"content":"+"},{"lineNumber":1993,"author":{"gitID":"Yoochard"},"content":"Use case resumes at step 1"},{"lineNumber":1994,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":1995,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1996,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Change an employee\u0027s rating"},{"lineNumber":1997,"author":{"gitID":"-"},"content":""},{"lineNumber":1998,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1999,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":2000,"author":{"gitID":"Yoochard"},"content":"1. User requests to list employees"},{"lineNumber":2001,"author":{"gitID":"-"},"content":"2. Employees Tracker shows a list of employees"},{"lineNumber":2002,"author":{"gitID":"Yoochard"},"content":"3. User requests to change the rating of one of the employees from the list"},{"lineNumber":2003,"author":{"gitID":"-"},"content":"4. Employees Tracker changes the rating of the employee."},{"lineNumber":2004,"author":{"gitID":"Yoochard"},"content":"+"},{"lineNumber":2005,"author":{"gitID":"Yoochard"},"content":"Use case ends."},{"lineNumber":2006,"author":{"gitID":"-"},"content":""},{"lineNumber":2007,"author":{"gitID":"Yoochard"},"content":"*Extensions*"},{"lineNumber":2008,"author":{"gitID":"-"},"content":""},{"lineNumber":2009,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2010,"author":{"gitID":"-"},"content":"* 3a. The employee does not exist in employees tracker."},{"lineNumber":2011,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2012,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2013,"author":{"gitID":"-"},"content":"** 3a1. Employees Tracker shows an error message."},{"lineNumber":2014,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2015,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":2016,"author":{"gitID":"-"},"content":""},{"lineNumber":2017,"author":{"gitID":"Yoochard"},"content":"* 3b. The rate is out of bound."},{"lineNumber":2018,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2019,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":2020,"author":{"gitID":"-"},"content":"** 3b1. Employees Tracker shows an error message"},{"lineNumber":2021,"author":{"gitID":"-"},"content":"+"},{"lineNumber":2022,"author":{"gitID":"-"},"content":"Use case resumes at step 2."},{"lineNumber":2023,"author":{"gitID":"-"},"content":""},{"lineNumber":2024,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":2025,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Change the window scheme/theme/skin"},{"lineNumber":2026,"author":{"gitID":"-"},"content":""},{"lineNumber":2027,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":2028,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":2029,"author":{"gitID":"Yoochard"},"content":"1. User requests to change the scheme/theme/skin on the User Interface"},{"lineNumber":2030,"author":{"gitID":"-"},"content":"2. Employees Tracker changes the scheme/theme/skin"},{"lineNumber":2031,"author":{"gitID":"Yoochard"},"content":"+"},{"lineNumber":2032,"author":{"gitID":"Yoochard"},"content":"Use case ends."},{"lineNumber":2033,"author":{"gitID":"-"},"content":""},{"lineNumber":2034,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2035,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":2036,"author":{"gitID":"-"},"content":""},{"lineNumber":2037,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":2038,"author":{"gitID":"-"},"content":".  Should be able to hold up to 1000 persons without a noticeable sluggishness (i.e. response time \u003e 500ms) in performance for typical usage."},{"lineNumber":2039,"author":{"gitID":"-"},"content":".  A user with above average typing speed (i.e. ≥ 45 words per minute) for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":2040,"author":{"gitID":"-"},"content":".  The app should be used only by one user."},{"lineNumber":2041,"author":{"gitID":"-"},"content":".  Only the owner can view the data in the app"},{"lineNumber":2042,"author":{"gitID":"-"},"content":".  The app should be able to apply to people who are generally managing ≤ 200 other people"},{"lineNumber":2043,"author":{"gitID":"-"},"content":".  Should not consume memory more than 2GB"},{"lineNumber":2044,"author":{"gitID":"-"},"content":".  Should be able to be run easily by non-technical user"},{"lineNumber":2045,"author":{"gitID":"-"},"content":".  The save file of the app should be cross-compatible"},{"lineNumber":2046,"author":{"gitID":"-"},"content":".  The app should be used only by one user."},{"lineNumber":2047,"author":{"gitID":"-"},"content":".  Only the owner can view the data in the app"},{"lineNumber":2048,"author":{"gitID":"-"},"content":".  The app should be able to response the command within 500ms"},{"lineNumber":2049,"author":{"gitID":"-"},"content":".  The app should be able to apply to people who are generally managing ≤ 200 other people"},{"lineNumber":2050,"author":{"gitID":"IzHoBX"},"content":".  Users should prefer typing over mouse input or other input methods."},{"lineNumber":2051,"author":{"gitID":"IzHoBX"},"content":".  Users should be comfortable using CLI apps."},{"lineNumber":2052,"author":{"gitID":"IzHoBX"},"content":".  The app should not have flow flaws when running."},{"lineNumber":2053,"author":{"gitID":"IzHoBX"},"content":".  The app may utilise third party libraries, API and plug-ins."},{"lineNumber":2054,"author":{"gitID":"IzHoBX"},"content":".  The app should be able to access the Internet."},{"lineNumber":2055,"author":{"gitID":"IzHoBX"},"content":".  The app should be able to perform basic commands without internet access."},{"lineNumber":2056,"author":{"gitID":"Yoochard"},"content":".  This application should work well both on 32-bit and 64-bit environments."},{"lineNumber":2057,"author":{"gitID":"Yoochard"},"content":".  Should be easy to use by new users"},{"lineNumber":2058,"author":{"gitID":"Yoochard"},"content":".  This application should be stable and maintainable"},{"lineNumber":2059,"author":{"gitID":"Yoochard"},"content":".  This application is open source"},{"lineNumber":2060,"author":{"gitID":"-"},"content":""},{"lineNumber":2061,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2062,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":2063,"author":{"gitID":"-"},"content":""},{"lineNumber":2064,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":2065,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":2066,"author":{"gitID":"-"},"content":""},{"lineNumber":2067,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":2068,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":2069,"author":{"gitID":"-"},"content":""},{"lineNumber":2070,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2071,"author":{"gitID":"-"},"content":"\u003d\u003d Product Survey"},{"lineNumber":2072,"author":{"gitID":"-"},"content":""},{"lineNumber":2073,"author":{"gitID":"-"},"content":"*Product Name*"},{"lineNumber":2074,"author":{"gitID":"-"},"content":""},{"lineNumber":2075,"author":{"gitID":"-"},"content":"Author: ..."},{"lineNumber":2076,"author":{"gitID":"-"},"content":""},{"lineNumber":2077,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":2078,"author":{"gitID":"-"},"content":""},{"lineNumber":2079,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":2080,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":2081,"author":{"gitID":"-"},"content":""},{"lineNumber":2082,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":2083,"author":{"gitID":"-"},"content":""},{"lineNumber":2084,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":2085,"author":{"gitID":"-"},"content":"* ..."},{"lineNumber":2086,"author":{"gitID":"-"},"content":""},{"lineNumber":2087,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":2088,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":2089,"author":{"gitID":"-"},"content":""},{"lineNumber":2090,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":2091,"author":{"gitID":"-"},"content":""},{"lineNumber":2092,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":2093,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":2094,"author":{"gitID":"-"},"content":""},{"lineNumber":2095,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and shutdown"},{"lineNumber":2096,"author":{"gitID":"-"},"content":""},{"lineNumber":2097,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":2098,"author":{"gitID":"-"},"content":""},{"lineNumber":2099,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":2100,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":2101,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":2102,"author":{"gitID":"-"},"content":""},{"lineNumber":2103,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":2104,"author":{"gitID":"-"},"content":""},{"lineNumber":2105,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":2106,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":2107,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":2108,"author":{"gitID":"-"},"content":""},{"lineNumber":2109,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Make sure you have access to Internet"},{"lineNumber":2110,"author":{"gitID":"-"},"content":""},{"lineNumber":2111,"author":{"gitID":"IzHoBX"},"content":"Some commands will not work without the access to Internet."},{"lineNumber":2112,"author":{"gitID":"-"},"content":""},{"lineNumber":2113,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Unlock E.T."},{"lineNumber":2114,"author":{"gitID":"-"},"content":""},{"lineNumber":2115,"author":{"gitID":"IzHoBX"},"content":". E.T. is initially locked by default"},{"lineNumber":2116,"author":{"gitID":"-"},"content":""},{"lineNumber":2117,"author":{"gitID":"IzHoBX"},"content":".. type `unlock`, key in `admin` (default password) and press kbd:[Enter]."},{"lineNumber":2118,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":2119,"author":{"gitID":"IzHoBX"},"content":". Change password"},{"lineNumber":2120,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":2121,"author":{"gitID":"IzHoBX"},"content":".. type `setPassword`, key in old and new password and press kbd:[Enter]. You can press kbd:[Tab] to switch between"},{"lineNumber":2122,"author":{"gitID":"IzHoBX"},"content":"the input fields."},{"lineNumber":2123,"author":{"gitID":"IzHoBX"},"content":".. type `lock` to lock E.T.."},{"lineNumber":2124,"author":{"gitID":"IzHoBX"},"content":".. type `unlock`, key in the new password you just set. E.T. will be unlocked."},{"lineNumber":2125,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":2126,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d Add some sample employees"},{"lineNumber":2127,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":2128,"author":{"gitID":"IzHoBX"},"content":". There are no sample employees at the beginning, need to manually add some, here is some sample employees that can add."},{"lineNumber":2129,"author":{"gitID":"IzHoBX"},"content":"Copy and paste it in the command box and execute"},{"lineNumber":2130,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":2131,"author":{"gitID":"IzHoBX"},"content":".. add n/Carl Smith p/98765432 e/johnd@example.com a/John street, block 123, #01-01 t/tester"},{"lineNumber":2132,"author":{"gitID":"IzHoBX"},"content":".. add n/Betsy Crowe t/tester e/betsycrowe@example.com a/Besty Street p/1234567"},{"lineNumber":2133,"author":{"gitID":"IzHoBX"},"content":".. add n/John Daniel e/johnda@example.com a/Newgate Prison p/00002222 t/developer"},{"lineNumber":2134,"author":{"gitID":"IzHoBX"},"content":".. add n/David Li e/davidli@example.com a/David Street p/88881111 t/teamleader"},{"lineNumber":2135,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":2136,"author":{"gitID":"IzHoBX"},"content":"\u003d\u003d\u003d See user guide for more commands"},{"lineNumber":2137,"author":{"gitID":"-"},"content":""},{"lineNumber":2138,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":2139,"author":{"gitID":"-"},"content":""},{"lineNumber":2140,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":2141,"author":{"gitID":"-"},"content":""},{"lineNumber":2142,"author":{"gitID":"-"},"content":".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"},{"lineNumber":2143,"author":{"gitID":"-"},"content":""},{"lineNumber":2144,"author":{"gitID":"-"},"content":"_{ more test cases ... }_"}],"authorContributionMap":{"crizyli":376,"Yoochard":78,"IzHoBX":354,"-":1336}},{"path":"src/test/java/seedu/address/logic/parser/TestAddEventCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESCRIPTION;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_ENDTIME;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_LOCATION;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_STARTTIME;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_TITLE;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_ENDTIME;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_STARTTIME;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESCRIPTION;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ENDTIME;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_LOCATION;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_STARTTIME;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_TITLE;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.TestAddEventCommand;"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"public class TestAddEventCommandParserTest {"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    private TestAddEventCommandParser parser \u003d new TestAddEventCommandParser();"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        final String expectedTitle \u003d \"Test Event\";"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        final String expectedLocation \u003d \"NUS\";"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        final String expectedStarttime \u003d \"2018-05-15T10:00:00\";"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        final String expectedEndtime \u003d \"2018-05-15T12:00:00\";"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        final String expectedDescription \u003d \"A test event.\";"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \"1\" + EVENT_TITLE + EVENT_LOCATION + EVENT_STARTTIME"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"                + EVENT_ENDTIME + EVENT_DESCRIPTION, new TestAddEventCommand(INDEX_FIRST_PERSON, expectedTitle,"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"                expectedLocation, expectedStarttime, expectedEndtime, expectedDescription));"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        // whitespace only preamble"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + \"1\" + EVENT_TITLE + EVENT_LOCATION + EVENT_STARTTIME"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"                + EVENT_ENDTIME + EVENT_DESCRIPTION, new TestAddEventCommand(INDEX_FIRST_PERSON, expectedTitle,"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"                expectedLocation, expectedStarttime, expectedEndtime, expectedDescription));"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TestAddEventCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        //missing person index"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, VALID_EVENT_TITLE + EVENT_LOCATION + EVENT_STARTTIME"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"                + EVENT_ENDTIME + EVENT_DESCRIPTION, expectedMessage);"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        //missing title prefix"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \"1\" + VALID_EVENT_TITLE + EVENT_LOCATION + EVENT_STARTTIME"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"                + EVENT_ENDTIME + EVENT_DESCRIPTION, expectedMessage);"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"        //missing location prefix"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \"1\" + EVENT_TITLE + VALID_EVENT_LOCATION + EVENT_STARTTIME"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"                + EVENT_ENDTIME + EVENT_DESCRIPTION, expectedMessage);"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        //missing starttime prefix"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \"1\" + EVENT_TITLE + EVENT_LOCATION + VALID_EVENT_STARTTIME"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"                + EVENT_ENDTIME + EVENT_DESCRIPTION, expectedMessage);"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"        //missing endtime prefix"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \"1\" + EVENT_TITLE + EVENT_LOCATION + EVENT_STARTTIME"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"                + VALID_EVENT_ENDTIME + EVENT_DESCRIPTION, expectedMessage);"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"        //missing description prefix"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \"1\" + EVENT_TITLE + EVENT_LOCATION + EVENT_STARTTIME"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"                + EVENT_ENDTIME + VALID_EVENT_DESCRIPTION, expectedMessage);"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"        //all prefix missing"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \"1\" + VALID_EVENT_TITLE + VALID_EVENT_LOCATION + VALID_EVENT_STARTTIME"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"                + VALID_EVENT_ENDTIME + VALID_EVENT_DESCRIPTION, expectedMessage);"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"        // invalid start time"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \"1\" + EVENT_TITLE + EVENT_LOCATION + INVALID_EVENT_STARTTIME"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"                + EVENT_ENDTIME + EVENT_DESCRIPTION, \"Invalid date/time format: \" + \"2018-04-09T08:00\");"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"        // invalid end time"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \"1\" + EVENT_TITLE + EVENT_LOCATION + EVENT_STARTTIME"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"                + INVALID_EVENT_ENDTIME + EVENT_DESCRIPTION, \"Invalid date/time format: \" + \"2018-04-09T10\");"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"        //non-empty preamble"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + \"1\" + EVENT_TITLE + EVENT_LOCATION + EVENT_STARTTIME"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"                + EVENT_ENDTIME + EVENT_DESCRIPTION,"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TestAddEventCommand.MESSAGE_USAGE));"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":97}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // whitespace only preamble"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, true, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, true, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, true, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, true, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, true, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, true, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":78,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // zero tags"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().build();"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, true, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // missing name prefix"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // missing phone prefix"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":100,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // missing email prefix"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":104,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // missing address prefix"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // all prefixes missing"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                expectedMessage);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // invalid phone"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":123,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        // invalid email"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        // invalid address"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // invalid tag"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":135,"author":{"gitID":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // non-empty preamble"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":22,"-":124}},{"path":"src/test/java/seedu/address/logic/parser/RateCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"public class RateCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE);"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    private RateCommandParser parser \u003d new RateCommandParser();"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    public void parse_oneIntegerArg_failure() {"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    public void parse_nonIntegerArg_failure() {"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"a b\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"1 b\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"b 1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    public void parse_indexZeroOrLess_failure() {"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"0 5\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"-1 5\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    public void parse_ratingOutOfBound_failure() {"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"1 6\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"1 0\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"        assertParseFailure(parser, \"1 -1\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":42}},{"path":"src/test/java/seedu/address/logic/parser/DeleteEventCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":" * Test scope: similar to {@code DeleteCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":" * @see DeleteCommandParserTest"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"public class DeleteEventCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    private DeleteEventCommandParser parser \u003d new DeleteEventCommandParser();"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    public void parse_invalidArgs() {"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        // no agrs provided command"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"                DeleteEventCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        //only one arg provided"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"                DeleteEventCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        //illegal value for index"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"                DeleteEventCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"    public void parse_validArgs_returnsDeleteEventCommand() {"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        assertParseSuccess(parser, \" 1 event\","},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"                new DeleteEventCommand(INDEX_FIRST_PERSON, \"event\"));"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":40}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    /*@Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"    }*/"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"    /*@Test"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"    }*/"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"    /*@Test"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":"        // deleteNotification -\u003e first person deleted"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"    }*/"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"        // deleteNotification -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        deleteCommand.execute();"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deleteCommand);"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private DeleteCommand prepareCommand(Index index) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":188,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":8,"-":186}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"//@@author Yoochard"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":" * Contains integration tests (interaction with the Model) for {@code LockCommand}."},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"public class SortCommandTest {"},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":"    public void equals() {"},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"        SortCommand firstSortCommand \u003d new SortCommand(\"rate\");"},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":"        SortCommand secondSortCommand \u003d new SortCommand(\"name\");"},{"lineNumber":31,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":32,"author":{"gitID":"Yoochard"},"content":"        // same object -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"Yoochard"},"content":"        assertTrue(firstSortCommand.equals(firstSortCommand));"},{"lineNumber":34,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":35,"author":{"gitID":"Yoochard"},"content":"        // same values -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"Yoochard"},"content":"        SortCommand secondSortCommandcopy \u003d new SortCommand(\"name\");"},{"lineNumber":37,"author":{"gitID":"Yoochard"},"content":"        assertTrue(secondSortCommand.equals(secondSortCommandcopy));"},{"lineNumber":38,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":39,"author":{"gitID":"Yoochard"},"content":"        // different types -\u003e returns false"},{"lineNumber":40,"author":{"gitID":"Yoochard"},"content":"        assertFalse(secondSortCommand.equals(1));"},{"lineNumber":41,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":42,"author":{"gitID":"Yoochard"},"content":"        // null -\u003e returns false"},{"lineNumber":43,"author":{"gitID":"Yoochard"},"content":"        assertFalse(firstSortCommand.equals(null));"},{"lineNumber":44,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":45,"author":{"gitID":"Yoochard"},"content":"        // different value -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"Yoochard"},"content":"        assertFalse(firstSortCommand.equals(secondSortCommand));"},{"lineNumber":47,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":49,"author":{"gitID":"Yoochard"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"Yoochard"},"content":"    public void sortSuccess() {"},{"lineNumber":51,"author":{"gitID":"Yoochard"},"content":"        SortCommand testSortCommand \u003d new SortCommand(\"rate\");"},{"lineNumber":52,"author":{"gitID":"Yoochard"},"content":"        testSortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"        String expectedMessage \u003d SortCommand.MESSAGE_SORT_EMPLOYEE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"Yoochard"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":"            CommandResult commandResult \u003d testSortCommand.execute();"},{"lineNumber":56,"author":{"gitID":"Yoochard"},"content":"        } catch (CommandException ce) {"},{"lineNumber":57,"author":{"gitID":"Yoochard"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":61,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":62,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":63,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":63}},{"path":"src/test/java/seedu/address/logic/commands/RateCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"public class RateCommandTest {"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"        Person editedPerson \u003d new PersonBuilder().withRating(\"1\").withEmail(\"alice@example.com\")"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"                .withReviews(\"supervisor@example.com\\nLazy\")"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"                .build();"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withRating(\"1\").build();"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"        RateCommand rateCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"        String expectedMessage \u003d String.format(RateCommand.MESSAGE_RATE_PERSON_SUCCESS, editedPerson);"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"        assertCommandSuccess(rateCommand, model, expectedMessage, expectedModel);"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"     * Returns an {@code RateCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"    private RateCommand prepareCommand(Index index, EditCommand.EditPersonDescriptor descriptor) {"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"        RateCommand rateCommand \u003d new RateCommand(index, descriptor);"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"        rateCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"        return rateCommand;"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":49}},{"path":"src/test/java/seedu/address/logic/commands/AddPhotoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":" * {@code AddPhotoCommand}."},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"public class AddPhotoCommandTest {"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    public void addPhotoSuccess() throws Exception {"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        Person personToAddPhoto \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        AddPhotoCommand addPhotoCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        Person newPerson \u003d new PersonBuilder(personToAddPhoto).build();"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        newPerson.setPhotoName(\"DefaultPerson.png\");"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d AddPhotoCommand.MESSAGE_SUCCESS;"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), newPerson);"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(addPhotoCommand, model, expectedMessage, expectedModel);"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"     * Returns a {@code AddPhotoCommand} with the parameter {@code index}."},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    private AddPhotoCommand prepareCommand(Index index) {"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"        AddPhotoCommand addPhotoCommand \u003d new AddPhotoCommand(index);"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        addPhotoCommand.setTestMode();"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"        addPhotoCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        return addPhotoCommand;"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":50}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCCRIPTION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeyphrasesPredicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    public static final String VALID_RATING_AMY \u003d \"-1\";"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    public static final String VALID_RATING_BOB \u003d \"5\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_REVIEW_LAZY \u003d \"Lazy\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final String VALID_REVIEWER_SUPERVISOR \u003d \"supervisor@example.com\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"    public static final String VALID_EVENT_TITLE \u003d \"Test Event\";"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"    public static final String VALID_EVENT_LOCATION \u003d \"NUS\";"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"    public static final String VALID_EVENT_STARTTIME \u003d \"2018-05-15T10:00:00\";"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"    public static final String VALID_EVENT_ENDTIME \u003d \"2018-05-15T12:00:00\";"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"    public static final String VALID_EVENT_DESCRIPTION \u003d \"A test event.\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"    public static final String RATING_DESC_BOB \u003d \" \" + PREFIX_RATING + VALID_RATING_BOB;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"    public static final String EVENT_TITLE \u003d \" \" + PREFIX_TITLE + VALID_EVENT_TITLE;"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"    public static final String EVENT_LOCATION \u003d \" \" + PREFIX_LOCATION + VALID_EVENT_LOCATION;"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"    public static final String EVENT_STARTTIME \u003d \" \" + PREFIX_STARTTIME + VALID_EVENT_STARTTIME;"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"    public static final String EVENT_ENDTIME \u003d \" \" + PREFIX_ENDTIME + VALID_EVENT_ENDTIME;"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"    public static final String EVENT_DESCRIPTION \u003d \" \" + PREFIX_DESCCRIPTION + VALID_EVENT_DESCRIPTION;"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":81,"author":{"gitID":"Yoochard"},"content":"    public static final String INVALID_THEME_NAME \u003d \" \" + \"iridescent\"; //invalid theme name"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"    public static final String INVALID_EVENT_STARTTIME \u003d \" \" + PREFIX_STARTTIME + \"2018-04-09T08:00\";"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"    public static final String INVALID_EVENT_ENDTIME \u003d \" \" + PREFIX_ENDTIME + \"2018-04-09T10\";"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).withReviews(VALID_REVIEWER_SUPERVISOR + \"\\n\" + VALID_REVIEW_LAZY).build();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":96,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":125,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeyphrasesPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Employee in filtered list must exist in model.\", pnfe);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":18,"Yoochard":1,"IzHoBX":4,"-":158}},{"path":"src/test/java/seedu/address/logic/commands/UnlockCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" * Contains integration tests (interaction with the Model) for {@code UnlockCommand}."},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"public class UnlockCommandTest {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"    public void equals() {"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        UnlockCommand firstUnlockCommand \u003d new UnlockCommand();"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        assertTrue(firstUnlockCommand.equals(firstUnlockCommand));"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstUnlockCommand.equals(1));"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstUnlockCommand.equals(null));"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    public void unlockSuccess() {"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"        model.setPassword(\"admin\");"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"        LogicManager logicManager \u003d new LogicManager(model);"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        LockCommand testLockCommand \u003d new LockCommand();"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        testLockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"        testLockCommand.execute();"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand();"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setTestMode(true);"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d UnlockCommand.MESSAGE_SUCCESS;"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d testUnlockCommand.execute();"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"    public void unlockFail_incorrectPassword() {"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        model.setPassword(\"qwer\");"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"        LogicManager logicManager \u003d new LogicManager(model);"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"        LockCommand testLockCommand \u003d new LockCommand();"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"        testLockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"        testLockCommand.execute();"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand();"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setTestMode(true);"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d UnlockCommand.MESSAGE_INCORRECT_PASSWORD;"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d testUnlockCommand.execute();"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"    public void unlockFail_missingPassword() {"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"        model.setPassword(\"qwer\");"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"        LogicManager logicManager \u003d new LogicManager(model);"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"        LockCommand testLockCommand \u003d new LockCommand();"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"        testLockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"        testLockCommand.execute();"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand();"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setTestMode(false);"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d UnlockCommand.MESSAGE_MISSING_PASSWORD;"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d testUnlockCommand.execute();"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"    public void unlockFail_alreadyUnlocked() {"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"        model.setPassword(\"admin\");"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"        LogicManager logicManager \u003d new LogicManager(model);"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"        LogicManager.unLock();"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"        UnlockCommand testUnlockCommand \u003d new UnlockCommand();"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"        testUnlockCommand.setTestMode(true);"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d UnlockCommand.MESSAGE_ALREADY_UNLOCKED;"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d testUnlockCommand.execute();"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":102}},{"path":"src/test/java/seedu/address/logic/commands/TodoListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"//import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"//import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":" * Contains integration tests (interaction with the Model) for {@code TodoListCommand}."},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"public class TodoListCommandTest {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        TodoListCommand todoListCommand \u003d new TodoListCommand();"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        assertTrue(todoListCommand.equals(todoListCommand));"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        assertFalse(todoListCommand.equals(1));"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        assertFalse(todoListCommand.equals(null));"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"     *  This test can be tested locally, and can not be executed on travis because it requires authentication."},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"    /*@Test"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"    public void showSuccess() {"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        TodoListCommand command \u003d new TodoListCommand();"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d TodoListCommand.MESSAGE_SUCCESS;"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"    }*/"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":50}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    /*@Test"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":31,"author":{"gitID":"-"},"content":"                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        deleteCommandOne.execute();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deleteCommandTwo.execute();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"    }*/"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":2,"-":47}},{"path":"src/test/java/seedu/address/logic/commands/ChangeThemeCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"//@@author Yoochard"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_THEME_NAME;"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"public class ChangeThemeCommandTest {"},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":"    private UserPrefs userPrefs;"},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"    private Model model;"},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":31,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":32,"author":{"gitID":"Yoochard"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"Yoochard"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitID":"Yoochard"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"Yoochard"},"content":"        userPrefs \u003d new UserPrefs();"},{"lineNumber":36,"author":{"gitID":"Yoochard"},"content":"        guiSettings \u003d userPrefs.getGuiSettings();"},{"lineNumber":37,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":39,"author":{"gitID":"Yoochard"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Yoochard"},"content":"    public void executeChangeThemeCommandSuccess() throws Exception {"},{"lineNumber":41,"author":{"gitID":"Yoochard"},"content":"        ChangeThemeCommand changeThemeCommand \u003d prepareCommand(\"bright\");"},{"lineNumber":42,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":43,"author":{"gitID":"Yoochard"},"content":"        String expectedMessage \u003d String.format(ChangeThemeCommand.MESSAGE_CHANGE_THEME_SUCCESS, \"bright\");"},{"lineNumber":44,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":45,"author":{"gitID":"Yoochard"},"content":"        UserPrefs expectedUserPrefs \u003d new UserPrefs();"},{"lineNumber":46,"author":{"gitID":"Yoochard"},"content":"        expectedUserPrefs.setGuiSettings("},{"lineNumber":47,"author":{"gitID":"Yoochard"},"content":"                guiSettings.getWindowHeight(),"},{"lineNumber":48,"author":{"gitID":"Yoochard"},"content":"                guiSettings.getWindowWidth(),"},{"lineNumber":49,"author":{"gitID":"Yoochard"},"content":"                guiSettings.getWindowCoordinates().x,"},{"lineNumber":50,"author":{"gitID":"Yoochard"},"content":"                guiSettings.getWindowCoordinates().y,"},{"lineNumber":51,"author":{"gitID":"Yoochard"},"content":"                guiSettings.getTheme());"},{"lineNumber":52,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), expectedUserPrefs);"},{"lineNumber":54,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":"        assertCommandSuccess(changeThemeCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"Yoochard"},"content":"    public void executeChangeThemeCommandInvalidThemeNameFailure() throws Exception {"},{"lineNumber":60,"author":{"gitID":"Yoochard"},"content":"        ChangeThemeCommand changeThemeCommand \u003d prepareCommand(INVALID_THEME_NAME);"},{"lineNumber":61,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":62,"author":{"gitID":"Yoochard"},"content":"        String expectedMessage \u003d String.format(ChangeThemeCommand.MESSAGE_INVALID_THEME_NAME, INVALID_THEME_NAME);"},{"lineNumber":63,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":64,"author":{"gitID":"Yoochard"},"content":"        assertCommandFailure(changeThemeCommand, model, expectedMessage);"},{"lineNumber":65,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":67,"author":{"gitID":"Yoochard"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"Yoochard"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"Yoochard"},"content":"        ChangeThemeCommand themeDarkTheme \u003d new ChangeThemeCommand(\"dark\");"},{"lineNumber":70,"author":{"gitID":"Yoochard"},"content":"        ChangeThemeCommand themeBrightTheme \u003d new ChangeThemeCommand(\"bright\");"},{"lineNumber":71,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":72,"author":{"gitID":"Yoochard"},"content":"        // same theme -\u003e returns true"},{"lineNumber":73,"author":{"gitID":"Yoochard"},"content":"        assertTrue(themeDarkTheme.equals(themeDarkTheme));"},{"lineNumber":74,"author":{"gitID":"Yoochard"},"content":"        assertTrue(themeBrightTheme.equals(themeBrightTheme));"},{"lineNumber":75,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":76,"author":{"gitID":"Yoochard"},"content":"        // invalid types-\u003e returns false"},{"lineNumber":77,"author":{"gitID":"Yoochard"},"content":"        assertFalse(themeDarkTheme.equals(1));"},{"lineNumber":78,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":79,"author":{"gitID":"Yoochard"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"Yoochard"},"content":"        assertFalse(themeDarkTheme.equals(null));"},{"lineNumber":81,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":82,"author":{"gitID":"Yoochard"},"content":"        // different themes -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"Yoochard"},"content":"        assertFalse(themeDarkTheme.equals(themeBrightTheme));"},{"lineNumber":84,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":86,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"Yoochard"},"content":"     * Returns an {@code ChangeThemeCommand} with parameters {@code theme}"},{"lineNumber":88,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"Yoochard"},"content":"    private ChangeThemeCommand prepareCommand(String theme) {"},{"lineNumber":90,"author":{"gitID":"Yoochard"},"content":"        ChangeThemeCommand changeThemeCommand \u003d new ChangeThemeCommand(theme);"},{"lineNumber":91,"author":{"gitID":"Yoochard"},"content":"        changeThemeCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":92,"author":{"gitID":"Yoochard"},"content":"        return changeThemeCommand;"},{"lineNumber":93,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":95,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":95}},{"path":"src/test/java/seedu/address/logic/commands/ReviewCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitID":"emer7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":""},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"import java.util.HashSet;"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":""},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":""},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"import seedu.address.model.review.Review;"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"emer7"},"content":""},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"public class ReviewCommandTest {"},{"lineNumber":37,"author":{"gitID":"emer7"},"content":""},{"lineNumber":38,"author":{"gitID":"emer7"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"emer7"},"content":""},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"        Person reviewedPerson \u003d new PersonBuilder().withEmail(\"alice@example.com\").withRating(\"1\")"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"                .withReviews(\"supervisor@example.com\\nLazy\")"},{"lineNumber":44,"author":{"gitID":"emer7"},"content":"                .build();"},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(reviewedPerson)"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"                .withReviews(\"sales@example.com\\nLazy\").build();"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":""},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"        ReviewCommand reviewCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":""},{"lineNumber":50,"author":{"gitID":"emer7"},"content":"        HashSet\u003cReview\u003e newReviews \u003d new HashSet\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"emer7"},"content":"        newReviews.add(new Review(\"supervisor@example.com\\nLazy\"));"},{"lineNumber":52,"author":{"gitID":"emer7"},"content":"        newReviews.add(new Review(\"sales@example.com\\nLazy\"));"},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"        reviewedPerson.setReviews(newReviews);"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":""},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"        String expectedMessage \u003d String.format(ReviewCommand.MESSAGE_REVIEW_PERSON_SUCCESS, reviewedPerson);"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":""},{"lineNumber":57,"author":{"gitID":"emer7"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"emer7"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), reviewedPerson);"},{"lineNumber":59,"author":{"gitID":"emer7"},"content":""},{"lineNumber":60,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(reviewCommand, model, expectedMessage, expectedModel);"},{"lineNumber":61,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"emer7"},"content":""},{"lineNumber":63,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"emer7"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":65,"author":{"gitID":"emer7"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":66,"author":{"gitID":"emer7"},"content":""},{"lineNumber":67,"author":{"gitID":"emer7"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":68,"author":{"gitID":"emer7"},"content":"        Person reviewedPerson \u003d new PersonBuilder(personInFilteredList)"},{"lineNumber":69,"author":{"gitID":"emer7"},"content":"                .withReviews(\"supervisor@example.com\\nLazy\")"},{"lineNumber":70,"author":{"gitID":"emer7"},"content":"                .build();"},{"lineNumber":71,"author":{"gitID":"emer7"},"content":"        ReviewCommand reviewCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":72,"author":{"gitID":"emer7"},"content":"                new EditPersonDescriptorBuilder().withReviews(\"sales@example.com\\nLazy\").build());"},{"lineNumber":73,"author":{"gitID":"emer7"},"content":""},{"lineNumber":74,"author":{"gitID":"emer7"},"content":"        HashSet\u003cReview\u003e newReviews \u003d new HashSet\u003c\u003e();"},{"lineNumber":75,"author":{"gitID":"emer7"},"content":"        newReviews.add(new Review(\"supervisor@example.com\\nLazy\"));"},{"lineNumber":76,"author":{"gitID":"emer7"},"content":"        newReviews.add(new Review(\"sales@example.com\\nLazy\"));"},{"lineNumber":77,"author":{"gitID":"emer7"},"content":"        reviewedPerson.setReviews(newReviews);"},{"lineNumber":78,"author":{"gitID":"emer7"},"content":""},{"lineNumber":79,"author":{"gitID":"emer7"},"content":"        String expectedMessage \u003d String.format(ReviewCommand.MESSAGE_REVIEW_PERSON_SUCCESS,"},{"lineNumber":80,"author":{"gitID":"emer7"},"content":"                reviewedPerson);"},{"lineNumber":81,"author":{"gitID":"emer7"},"content":""},{"lineNumber":82,"author":{"gitID":"emer7"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":83,"author":{"gitID":"emer7"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), reviewedPerson);"},{"lineNumber":84,"author":{"gitID":"emer7"},"content":""},{"lineNumber":85,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(reviewCommand, model, expectedMessage, expectedModel);"},{"lineNumber":86,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"emer7"},"content":""},{"lineNumber":88,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"emer7"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":90,"author":{"gitID":"emer7"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":91,"author":{"gitID":"emer7"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":92,"author":{"gitID":"emer7"},"content":"                .build();"},{"lineNumber":93,"author":{"gitID":"emer7"},"content":"        ReviewCommand reviewCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":94,"author":{"gitID":"emer7"},"content":""},{"lineNumber":95,"author":{"gitID":"emer7"},"content":"        assertCommandFailure(reviewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":96,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"emer7"},"content":""},{"lineNumber":98,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"emer7"},"content":"     * Review filtered list where index is larger than size of filtered list,"},{"lineNumber":100,"author":{"gitID":"emer7"},"content":"     * but smaller than size of address book"},{"lineNumber":101,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"emer7"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":104,"author":{"gitID":"emer7"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":105,"author":{"gitID":"emer7"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":106,"author":{"gitID":"emer7"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":107,"author":{"gitID":"emer7"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":108,"author":{"gitID":"emer7"},"content":""},{"lineNumber":109,"author":{"gitID":"emer7"},"content":"        ReviewCommand reviewCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":110,"author":{"gitID":"emer7"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":111,"author":{"gitID":"emer7"},"content":""},{"lineNumber":112,"author":{"gitID":"emer7"},"content":"        assertCommandFailure(reviewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":113,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"emer7"},"content":""},{"lineNumber":115,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":116,"author":{"gitID":"emer7"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":117,"author":{"gitID":"emer7"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":118,"author":{"gitID":"emer7"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":119,"author":{"gitID":"emer7"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":120,"author":{"gitID":"emer7"},"content":"        Person reviewedPerson \u003d new PersonBuilder()"},{"lineNumber":121,"author":{"gitID":"emer7"},"content":"                .withEmail(\"alice@example.com\")"},{"lineNumber":122,"author":{"gitID":"emer7"},"content":"                .withRating(\"5\")"},{"lineNumber":123,"author":{"gitID":"emer7"},"content":"                .withReviews(\"supervisor@example.com\\nLazy\")"},{"lineNumber":124,"author":{"gitID":"emer7"},"content":"                .build();"},{"lineNumber":125,"author":{"gitID":"emer7"},"content":"        Person personToReview \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":126,"author":{"gitID":"emer7"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(reviewedPerson)"},{"lineNumber":127,"author":{"gitID":"emer7"},"content":"                .withReviews(\"sales@example.com\\nLazy\")"},{"lineNumber":128,"author":{"gitID":"emer7"},"content":"                .build();"},{"lineNumber":129,"author":{"gitID":"emer7"},"content":"        ReviewCommand reviewCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":130,"author":{"gitID":"emer7"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":131,"author":{"gitID":"emer7"},"content":""},{"lineNumber":132,"author":{"gitID":"emer7"},"content":"        // review -\u003e first person reviewed"},{"lineNumber":133,"author":{"gitID":"emer7"},"content":"        reviewCommand.execute();"},{"lineNumber":134,"author":{"gitID":"emer7"},"content":"        undoRedoStack.push(reviewCommand);"},{"lineNumber":135,"author":{"gitID":"emer7"},"content":""},{"lineNumber":136,"author":{"gitID":"emer7"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":137,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":138,"author":{"gitID":"emer7"},"content":""},{"lineNumber":139,"author":{"gitID":"emer7"},"content":"        // redo -\u003e same first person reviewed again"},{"lineNumber":140,"author":{"gitID":"emer7"},"content":"        expectedModel.updatePerson(personToReview, reviewedPerson);"},{"lineNumber":141,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":142,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"emer7"},"content":""},{"lineNumber":144,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"emer7"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":146,"author":{"gitID":"emer7"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":147,"author":{"gitID":"emer7"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":148,"author":{"gitID":"emer7"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":149,"author":{"gitID":"emer7"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":150,"author":{"gitID":"emer7"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":151,"author":{"gitID":"emer7"},"content":"                .build();"},{"lineNumber":152,"author":{"gitID":"emer7"},"content":"        ReviewCommand reviewCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":153,"author":{"gitID":"emer7"},"content":""},{"lineNumber":154,"author":{"gitID":"emer7"},"content":"        // execution failed -\u003e reviewCommand not pushed into undoRedoStack"},{"lineNumber":155,"author":{"gitID":"emer7"},"content":"        assertCommandFailure(reviewCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":156,"author":{"gitID":"emer7"},"content":""},{"lineNumber":157,"author":{"gitID":"emer7"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":158,"author":{"gitID":"emer7"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":159,"author":{"gitID":"emer7"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":160,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"emer7"},"content":""},{"lineNumber":162,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"emer7"},"content":"     * 1. Reviews a {@code Person} from a filtered list."},{"lineNumber":164,"author":{"gitID":"emer7"},"content":"     * 2. Undo the review."},{"lineNumber":165,"author":{"gitID":"emer7"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously reviewed person in the"},{"lineNumber":166,"author":{"gitID":"emer7"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":167,"author":{"gitID":"emer7"},"content":"     * 4. Redo the review. This ensures {@code RedoCommand} reviews the person object regardless of indexing."},{"lineNumber":168,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":170,"author":{"gitID":"emer7"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonReviewed() throws Exception {"},{"lineNumber":171,"author":{"gitID":"emer7"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":172,"author":{"gitID":"emer7"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":173,"author":{"gitID":"emer7"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":174,"author":{"gitID":"emer7"},"content":"        Person reviewedPerson \u003d new PersonBuilder()"},{"lineNumber":175,"author":{"gitID":"emer7"},"content":"                .withName(\"Benson Meier\")"},{"lineNumber":176,"author":{"gitID":"emer7"},"content":"                .withPhone(\"98765432\")"},{"lineNumber":177,"author":{"gitID":"emer7"},"content":"                .withEmail(\"johnd@example.com\")"},{"lineNumber":178,"author":{"gitID":"emer7"},"content":"                .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":179,"author":{"gitID":"emer7"},"content":"                .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":180,"author":{"gitID":"emer7"},"content":"                .withReviews(\"supervisor@example.com\\nLazy\")"},{"lineNumber":181,"author":{"gitID":"emer7"},"content":"                .build();"},{"lineNumber":182,"author":{"gitID":"emer7"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(reviewedPerson)"},{"lineNumber":183,"author":{"gitID":"emer7"},"content":"                .withReviews(\"sales@example.com\\nLazy\")"},{"lineNumber":184,"author":{"gitID":"emer7"},"content":"                .build();"},{"lineNumber":185,"author":{"gitID":"emer7"},"content":"        ReviewCommand reviewCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":186,"author":{"gitID":"emer7"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":187,"author":{"gitID":"emer7"},"content":""},{"lineNumber":188,"author":{"gitID":"emer7"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":189,"author":{"gitID":"emer7"},"content":"        Person personToReview \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":190,"author":{"gitID":"emer7"},"content":"        // review -\u003e reviews second person in unfiltered person list / first person in filtered person list"},{"lineNumber":191,"author":{"gitID":"emer7"},"content":"        reviewCommand.execute();"},{"lineNumber":192,"author":{"gitID":"emer7"},"content":"        undoRedoStack.push(reviewCommand);"},{"lineNumber":193,"author":{"gitID":"emer7"},"content":""},{"lineNumber":194,"author":{"gitID":"emer7"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":195,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":196,"author":{"gitID":"emer7"},"content":""},{"lineNumber":197,"author":{"gitID":"emer7"},"content":"        expectedModel.updatePerson(personToReview, reviewedPerson);"},{"lineNumber":198,"author":{"gitID":"emer7"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToReview);"},{"lineNumber":199,"author":{"gitID":"emer7"},"content":"        // redo -\u003e reviews same second person in unfiltered person list"},{"lineNumber":200,"author":{"gitID":"emer7"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":201,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"emer7"},"content":""},{"lineNumber":203,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"emer7"},"content":"    public void equals() throws Exception {"},{"lineNumber":205,"author":{"gitID":"emer7"},"content":"        final ReviewCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":206,"author":{"gitID":"emer7"},"content":""},{"lineNumber":207,"author":{"gitID":"emer7"},"content":"        // same values -\u003e returns true"},{"lineNumber":208,"author":{"gitID":"emer7"},"content":"        EditCommand.EditPersonDescriptor copyDescriptor \u003d new EditCommand.EditPersonDescriptor(DESC_AMY);"},{"lineNumber":209,"author":{"gitID":"emer7"},"content":"        ReviewCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":210,"author":{"gitID":"emer7"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":211,"author":{"gitID":"emer7"},"content":""},{"lineNumber":212,"author":{"gitID":"emer7"},"content":"        // same object -\u003e returns true"},{"lineNumber":213,"author":{"gitID":"emer7"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":214,"author":{"gitID":"emer7"},"content":""},{"lineNumber":215,"author":{"gitID":"emer7"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":216,"author":{"gitID":"emer7"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":217,"author":{"gitID":"emer7"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":218,"author":{"gitID":"emer7"},"content":""},{"lineNumber":219,"author":{"gitID":"emer7"},"content":"        // null -\u003e returns false"},{"lineNumber":220,"author":{"gitID":"emer7"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":221,"author":{"gitID":"emer7"},"content":""},{"lineNumber":222,"author":{"gitID":"emer7"},"content":"        // different types -\u003e returns false"},{"lineNumber":223,"author":{"gitID":"emer7"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":224,"author":{"gitID":"emer7"},"content":""},{"lineNumber":225,"author":{"gitID":"emer7"},"content":"        // different index -\u003e returns false"},{"lineNumber":226,"author":{"gitID":"emer7"},"content":"        assertFalse(standardCommand.equals(new ReviewCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":227,"author":{"gitID":"emer7"},"content":""},{"lineNumber":228,"author":{"gitID":"emer7"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":229,"author":{"gitID":"emer7"},"content":"        assertFalse(standardCommand.equals(new ReviewCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":230,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":231,"author":{"gitID":"emer7"},"content":""},{"lineNumber":232,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":233,"author":{"gitID":"emer7"},"content":"     * Returns an {@code ReviewCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":234,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":235,"author":{"gitID":"emer7"},"content":"    private ReviewCommand prepareCommand(Index index, EditCommand.EditPersonDescriptor descriptor) {"},{"lineNumber":236,"author":{"gitID":"emer7"},"content":"        ReviewCommand reviewCommand \u003d new ReviewCommand(index, descriptor);"},{"lineNumber":237,"author":{"gitID":"emer7"},"content":"        reviewCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":238,"author":{"gitID":"emer7"},"content":"        return reviewCommand;"},{"lineNumber":239,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":240}},{"path":"src/test/java/seedu/address/logic/commands/MyCalendarCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":" * Contains integration tests (interaction with the Model) for {@code MyCalendarCommand}."},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"public class MyCalendarCommandTest {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        MyCalendarCommand myCalendarCommand \u003d new MyCalendarCommand();"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        assertTrue(myCalendarCommand.equals(myCalendarCommand));"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        assertFalse(myCalendarCommand.equals(1));"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        assertFalse(myCalendarCommand.equals(null));"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    public void viewSuccess() {"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"        MyCalendarCommand testCommand \u003d new MyCalendarCommand();"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"        testCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d MyCalendarCommand.MESSAGE_SUCCESS;"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d testCommand.execute();"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":48}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        deleteCommandOne.preprocessUndoableCommand();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteCommandTwo.preprocessUndoableCommand();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    /*@Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void execute() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":34,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"    }*/"},{"lineNumber":50,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":2,"-":48}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    /*@Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    }*/"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    /*@Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void redo() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"    }*/"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":4,"-":58}},{"path":"src/test/java/seedu/address/logic/commands/DeleteEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"//import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"//import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"//import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"public class DeleteEventCommandTest {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    private final Person testPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"            .withTags(\"friends\")"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"ck6s71ditb731dfepeporbnfb0@group.calendar.google.com\")"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    private Model model;"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"            ab.addPerson(testPerson);"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        model \u003d new ModelManager(ab, new UserPrefs());"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"     *  This test can be tested locally, and can not be executed on travis because it requires authentication."},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    /*@Test"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"    public void execute_addEvent_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        TestAddEventCommand addEventCommand \u003d new TestAddEventCommand(INDEX_FIRST_PERSON, \"Test Event\","},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"                \"NUS\", \"2018-05-01T12:00:00\", \"2018-05-01T12:30:00\","},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"                \"Test add event command\");"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        addEventCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        addEventCommand.execute();"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(INDEX_FIRST_PERSON, \"Test Event\");"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        deleteEventCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d DeleteEventCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d deleteEventCommand.execute();"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"    }*/"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":58}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.GEORGE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.FieldContainKeyphrasesPredicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e firstNamePredicateKeyphraseList \u003d Collections.singletonList(\"first\");"},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e secondNamePredicateKeyphraseList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e firstTagPredicateKeyphraseList \u003d Collections.singletonList(\"first\");"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e secondTagPredicateKeyphraseList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":44,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e firstRatingPredicateKeyphraseList \u003d Collections.singletonList(\"first\");"},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e secondRatingPredicateKeyphraseList \u003d Collections.singletonList(\"second\");"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":""},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"        FieldContainKeyphrasesPredicate firstPredicate \u003d"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"                new FieldContainKeyphrasesPredicate("},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"                        firstNamePredicateKeyphraseList,"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":"                        firstTagPredicateKeyphraseList,"},{"lineNumber":51,"author":{"gitID":"emer7"},"content":"                        firstRatingPredicateKeyphraseList);"},{"lineNumber":52,"author":{"gitID":"emer7"},"content":"        FieldContainKeyphrasesPredicate secondPredicate \u003d"},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"                new FieldContainKeyphrasesPredicate("},{"lineNumber":54,"author":{"gitID":"emer7"},"content":"                        secondNamePredicateKeyphraseList,"},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"                        secondTagPredicateKeyphraseList,"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":"                        secondRatingPredicateKeyphraseList);"},{"lineNumber":57,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void execute_zeroKeyphrases_allPersonFound() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 7);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \", \" \", \" \");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void execute_multipleKeyphrases_multiplePersonsFound() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"        FindCommand command \u003d prepareCommand(\"Kurz Elle Kunz\", \"Friends Family\", \"5 -1\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String nameInput, String tagInput, String ratingInput) {"},{"lineNumber":97,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":98,"author":{"gitID":"emer7"},"content":"        FindCommand command \u003d"},{"lineNumber":99,"author":{"gitID":"emer7"},"content":"                new FindCommand("},{"lineNumber":100,"author":{"gitID":"emer7"},"content":"                        new FieldContainKeyphrasesPredicate("},{"lineNumber":101,"author":{"gitID":"emer7"},"content":"                                Arrays.asList(nameInput.split(\"\\\\s+\")),"},{"lineNumber":102,"author":{"gitID":"emer7"},"content":"                                Arrays.asList(tagInput.split(\"\\\\s+\")),"},{"lineNumber":103,"author":{"gitID":"emer7"},"content":"                                Arrays.asList(ratingInput.split(\"\\\\s+\"))));"},{"lineNumber":104,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":27,"crizyli":1,"-":95}},{"path":"src/test/java/seedu/address/logic/commands/SetPasswordCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" * Contains integration tests (interaction with the Model) for {@code SetPasswordCommand}."},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"public class SetPasswordCommandTest {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    public void equals() {"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        SetPasswordCommand firstCommand \u003d new SetPasswordCommand();"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        assertTrue(firstCommand.equals(firstCommand));"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        // different types -\u003e returns false"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstCommand.equals(1));"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        // null -\u003e returns false"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstCommand.equals(null));"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    public void setPasswordFail_incorrectPassword() {"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        //incorrect old password entered."},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"        LogicManager logicManager \u003d new LogicManager(model);"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"        LogicManager.setPassword(\"psw\");"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        model.setPassword(\"psw\");"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        SetPasswordCommand command \u003d new SetPasswordCommand();"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"        command.setTestMode();"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d SetPasswordCommand.MESSAGE_INCORRECT_OLDPASSWORD;"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"    public void setPasswordSuccess() {"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"        LogicManager logicManager \u003d new LogicManager(model);"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"        LogicManager.setPassword(\"admin\");"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"        model.setPassword(\"admin\");"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"        SetPasswordCommand command \u003d new SetPasswordCommand();"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"        command.setTestMode();"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d SetPasswordCommand.MESSAGE_SUCCESS;"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":70}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.exceptions.NotificationNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.Photo;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.NotificationCard;"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.NotificationCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"        public Person getPerson(int index) throws IndexOutOfBoundsException {"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"            return null;"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":111,"author":{"gitID":"crizyli"},"content":"        @Override"},{"lineNumber":112,"author":{"gitID":"crizyli"},"content":"        public void setPassword(String password) {"},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"            return;"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":"        @Override"},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"        public String getPassword() {"},{"lineNumber":118,"author":{"gitID":"crizyli"},"content":"            return null;"},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":121,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":"        public void addNotification(Notification e) {"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"crizyli"},"content":"        @Override"},{"lineNumber":160,"author":{"gitID":"crizyli"},"content":"        public ObservableList\u003cPhoto\u003e getPhotoList() {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"Yoochard"},"content":"        //@@author Yoochard"},{"lineNumber":166,"author":{"gitID":"Yoochard"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"Yoochard"},"content":"        public void sort(String field) {"},{"lineNumber":168,"author":{"gitID":"Yoochard"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"Yoochard"},"content":"        //@@author"},{"lineNumber":171,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":177,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":178,"author":{"gitID":"IzHoBX"},"content":"        public void findAllSavedNotifications() {"},{"lineNumber":179,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":181,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public void deleteNotification(String id, boolean deleteFromAddressBookOnly)"},{"lineNumber":183,"author":{"gitID":"-"},"content":"                throws NotificationNotFoundException {"},{"lineNumber":184,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":185,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":187,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"IzHoBX"},"content":"        public void setNotificationCenter(NotificationCenter notificationCenter) {"},{"lineNumber":189,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":190,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":192,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"IzHoBX"},"content":"        public NotificationCenter getNotificationCenter() {"},{"lineNumber":194,"author":{"gitID":"IzHoBX"},"content":"            return null;"},{"lineNumber":195,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":197,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"IzHoBX"},"content":"        public NotificationCard deleteNotificationByIndex(Index targetIndex) throws NotificationNotFoundException {"},{"lineNumber":199,"author":{"gitID":"IzHoBX"},"content":"            return null;"},{"lineNumber":200,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":232,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":13,"Yoochard":7,"IzHoBX":38,"-":178}},{"path":"src/test/java/seedu/address/logic/commands/TestAddEventCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"//import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"//import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"//import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"//import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":" * Contains integration tests (interaction with the Model) for {@code TestAddEventCommand}."},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"public class TestAddEventCommandTest {"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    private final Person testPerson \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"            .withTags(\"friends\")"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"ck6s71ditb731dfepeporbnfb0@group.calendar.google.com\")"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    private Model model;"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    @Before"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"    public void setUp() {"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"            ab.addPerson(testPerson);"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        model \u003d new ModelManager(ab, new UserPrefs());"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"     *  This test can be tested locally, and can not be executed on travis because it requires authentication."},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    /*@Test"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    public void execute_addEvent_success() throws Exception {"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        TestAddEventCommand command \u003d new TestAddEventCommand(INDEX_FIRST_PERSON, \"Test Event\","},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"                \"NUS\", \"2018-05-01T12:00:00\", \"2018-05-01T12:30:00\","},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"                \"Test add event command\");"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d TestAddEventCommand.MESSAGE_SUCCESS;"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"    }*/"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":56}},{"path":"src/test/java/seedu/address/logic/commands/ExportEmployeesCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"public class ExportEmployeesCommandTest {"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(prepareCommand(model), model, ExportEmployeesCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        assertCommandSuccess(prepareCommand(model), model, ExportEmployeesCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"     * Generates a new {@code ExportEmployeesCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    private ExportEmployeesCommand prepareCommand(Model model) {"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        ExportEmployeesCommand command \u003d new ExportEmployeesCommand(true);"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        return command;"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":36}},{"path":"src/test/java/seedu/address/logic/commands/NotificationSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import static junit.framework.TestCase.fail;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import java.util.LinkedList;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import java.util.concurrent.Semaphore;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.exceptions.NotificationNotFoundException;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.NotificationCard;"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.NotificationCenter;"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.testutil.NotificationCardStub;"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"public class NotificationSystemTest {"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    public void run() {"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        //object instantiation"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"        NotificationCenterStub notificationCenterStub \u003d new NotificationCenterStub();"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        ModelStub modelStub \u003d new ModelStub();"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"        modelStub.setNotificationCenter(notificationCenterStub);"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        AddressbookStub addressbookStub \u003d new AddressbookStub();"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        //setup initial data"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"        Person person1 \u003d null;"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"        Person person2 \u003d null;"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"            person1 \u003d new Person(new Name(\"Alex\"), new Phone(\"12344\"), new Email(\"h@b.c\"), new Address(\"ascada\"),"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"                    ParserUtil.parseTags(new LinkedList\u003c\u003e()), \"asasdasd\");"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"            person1.setId(2);"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"            person2 \u003d new Person(new Name(\"David\"), new Phone(\"12344\"), new Email(\"h@b.c\"), new Address(\"ascada\"),"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"                    ParserUtil.parseTags(new LinkedList\u003c\u003e()), \"asasdasd\");"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"            person2.setId(5);"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"            assertTrue(false);"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"            addressbookStub.addPerson(person1);"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"            addressbookStub.addPerson(person2);"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"            assertTrue(false);"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"        assertEquals(addressbookStub.getPersonList().size(), 2);"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"        modelStub.setAddressBook(addressbookStub);"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":"        assertEquals(modelStub.getAddressBook().getPersonList().size(), 2);"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"        //adding notification test"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"        Notification notification1 \u003d new Notification(\"TEST1\", person1.getCalendarId(), \"ascca\","},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"                \"wasccas\", person1.getId() + \"\");"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"        Notification notification2 \u003d new Notification(\"TEST2\", person2.getCalendarId(), \"ascca\","},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"                \"wasccas\", person2.getId() + \"\");"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"        Notification notification3 \u003d new Notification(\"TEST3\", person2.getCalendarId(), \"ascca\","},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":"                \"wasccas\", person2.getId() + \"\");"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"        Notification notification4 \u003d new Notification(\"TEST4\", person2.getCalendarId(), \"ascca\","},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"                \"wasccas\", person2.getId() + \"\");"},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"        addressbookStub.addNotification(notification1);"},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":"        addressbookStub.addNotification(notification2);"},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"        addressbookStub.addNotification(notification3);"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"        addressbookStub.addNotification(notification4);"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"        notificationCenterStub.add(new NotificationCardStub(notification1.getTitle(), ("},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"                notificationCenterStub.getTotalUndismmissedNotificationCards() + 1) + \"\","},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"                \"Alex\", notification1.getEndDate(), notification1.getOwnerId(), true,"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"                notification1.getEventId()));"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"        notificationCenterStub.add(new NotificationCardStub(notification2.getTitle(), ("},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"                notificationCenterStub.getTotalUndismmissedNotificationCards() + 1) + \"\","},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"                \"David\", notification1.getEndDate(), notification2.getOwnerId(), true,"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"                notification2.getEventId()));"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"        notificationCenterStub.add(new NotificationCardStub(notification3.getTitle(), ("},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"                notificationCenterStub.getTotalUndismmissedNotificationCards() + 1) + \"\","},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"                \"David\", notification1.getEndDate(), notification3.getOwnerId(), true,"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":"                notification3.getEventId()));"},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":"        notificationCenterStub.add(new NotificationCardStub(notification4.getTitle(), ("},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":"                notificationCenterStub.getTotalUndismmissedNotificationCards() + 1) + \"\","},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":"                \"David\", notification1.getEndDate(), notification4.getOwnerId(), true,"},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"                notification4.getEventId()));"},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":"        assertTrue(notificationCenterStub.getTotalUndismmissedNotificationCards() \u003d\u003d 4);"},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"        //email command test"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"        EmailCommandStub ec \u003d new EmailCommandStub(Index.fromOneBased(1));"},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":"        ec.setData(modelStub);"},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"            ec.preprocessUndoableCommand();"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":"        } catch (CommandException e) {"},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":"            assertTrue(false);"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"        assertEquals(ec.getPerson().getEmail(), person1.getEmail());"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"}"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"class NotificationCenterStub extends NotificationCenter {"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"    protected LinkedList\u003cNotificationCardStub\u003e notificationCardCopy;"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCenterStub() {"},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"        notificationCardCopy \u003d new LinkedList\u003c\u003e();"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"        notificationCardCopy.add(null);"},{"lineNumber":118,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":120,"author":{"gitID":"IzHoBX"},"content":"    public void add(NotificationCardStub newNotificationCard) {"},{"lineNumber":121,"author":{"gitID":"IzHoBX"},"content":"        notificationCardCopy.add(newNotificationCard);"},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"    public int getTotalUndismmissedNotificationCards() {"},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"        return notificationCardCopy.size() - 1;"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCardStub getNotificationCardStub(Index targetIndex) {"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"        return notificationCardCopy.get(targetIndex.getOneBased());"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":"    public String getOwnerIdByIndex(Index index) {"},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"        return notificationCardCopy.get(index.getOneBased()).getOwnerId();"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"IzHoBX"},"content":"}"},{"lineNumber":137,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"class ModelStub extends ModelManager {"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"    private NotificationCenterStub notificationCenter;"},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":"    private AddressBook addressBook;"},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":"    private LinkedList\u003cPerson\u003e persons \u003d new LinkedList\u003c\u003e();"},{"lineNumber":143,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":144,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"IzHoBX"},"content":"    public void addNotification(Notification e) {"},{"lineNumber":146,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":147,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":149,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":150,"author":{"gitID":"IzHoBX"},"content":"    public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":151,"author":{"gitID":"IzHoBX"},"content":"        persons.add(person);"},{"lineNumber":152,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":154,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"IzHoBX"},"content":"    public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":156,"author":{"gitID":"IzHoBX"},"content":"        fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":159,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"IzHoBX"},"content":"    public void deleteNotification(String id, boolean deleteFromAddressBookOnly)"},{"lineNumber":161,"author":{"gitID":"IzHoBX"},"content":"            throws NotificationNotFoundException {"},{"lineNumber":162,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":163,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":165,"author":{"gitID":"IzHoBX"},"content":"    public void setNotificationCenter(NotificationCenterStub notificationCenter) {"},{"lineNumber":166,"author":{"gitID":"IzHoBX"},"content":"        this.notificationCenter \u003d notificationCenter;"},{"lineNumber":167,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":169,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCenterStub getNotificationCenter() {"},{"lineNumber":171,"author":{"gitID":"IzHoBX"},"content":"        return notificationCenter;"},{"lineNumber":172,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":174,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCard deleteNotificationByIndex(Index targetIndex) throws NotificationNotFoundException {"},{"lineNumber":176,"author":{"gitID":"IzHoBX"},"content":"        return null;"},{"lineNumber":177,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":179,"author":{"gitID":"IzHoBX"},"content":"    public void setAddressBook(AddressBook addressBook) {"},{"lineNumber":180,"author":{"gitID":"IzHoBX"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":181,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":183,"author":{"gitID":"IzHoBX"},"content":"    public AddressBook getAddressBook() {"},{"lineNumber":184,"author":{"gitID":"IzHoBX"},"content":"        return addressBook;"},{"lineNumber":185,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"IzHoBX"},"content":"}"},{"lineNumber":187,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":188,"author":{"gitID":"IzHoBX"},"content":"class AddressbookStub extends AddressBook {"},{"lineNumber":189,"author":{"gitID":"IzHoBX"},"content":"    private LinkedList\u003cNotification\u003e notifications;"},{"lineNumber":190,"author":{"gitID":"IzHoBX"},"content":"    private Semaphore semaphore;"},{"lineNumber":191,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":192,"author":{"gitID":"IzHoBX"},"content":"    public AddressbookStub() {"},{"lineNumber":193,"author":{"gitID":"IzHoBX"},"content":"        this.notifications \u003d new LinkedList\u003c\u003e();"},{"lineNumber":194,"author":{"gitID":"IzHoBX"},"content":"        semaphore \u003d new Semaphore(1);"},{"lineNumber":195,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"IzHoBX"},"content":"}"},{"lineNumber":197,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":198,"author":{"gitID":"IzHoBX"},"content":"class EmailCommandStub {"},{"lineNumber":199,"author":{"gitID":"IzHoBX"},"content":"    private final Index targetIndex;"},{"lineNumber":200,"author":{"gitID":"IzHoBX"},"content":"    private ModelStub model;"},{"lineNumber":201,"author":{"gitID":"IzHoBX"},"content":"    private Person owner;"},{"lineNumber":202,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":203,"author":{"gitID":"IzHoBX"},"content":"    public EmailCommandStub(Index targetIndex) {"},{"lineNumber":204,"author":{"gitID":"IzHoBX"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":205,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":207,"author":{"gitID":"IzHoBX"},"content":"    public void setData(ModelStub model) {"},{"lineNumber":208,"author":{"gitID":"IzHoBX"},"content":"        this.model \u003d model;"},{"lineNumber":209,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":211,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"IzHoBX"},"content":"     * Mimics the behavior of preprocessUndoableCommand() in EmailCommand"},{"lineNumber":213,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"IzHoBX"},"content":"    public void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":215,"author":{"gitID":"IzHoBX"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d model.getNotificationCenter().getTotalUndismmissedNotificationCards() - 1) {"},{"lineNumber":216,"author":{"gitID":"IzHoBX"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_NOTIFICATION_CARD_INDEX);"},{"lineNumber":217,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"IzHoBX"},"content":"        NotificationCardStub notificationCard \u003d model.getNotificationCenter().getNotificationCardStub(targetIndex);"},{"lineNumber":219,"author":{"gitID":"IzHoBX"},"content":"        String ownerId \u003d model.getNotificationCenter().getOwnerIdByIndex(targetIndex);"},{"lineNumber":220,"author":{"gitID":"IzHoBX"},"content":"        owner \u003d model.getAddressBook().findPersonById(Integer.parseInt(ownerId));"},{"lineNumber":221,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":223,"author":{"gitID":"IzHoBX"},"content":"    public Person getPerson() {"},{"lineNumber":224,"author":{"gitID":"IzHoBX"},"content":"        return owner;"},{"lineNumber":225,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"IzHoBX"},"content":"}"},{"lineNumber":227,"author":{"gitID":"IzHoBX"},"content":""}],"authorContributionMap":{"IzHoBX":227}},{"path":"src/test/java/seedu/address/storage/NotificationTimeParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"public class NotificationTimeParserUtilTest {"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"    private static final String NO_INTEGER_INVALID \u003d \"assvvbdgdtdyhdhdhbdfhdfhdhfhdghfhghfhjfjfjjjfjfhdgdgsdfsfsfsgghd\";"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    private static final String NULL_STRING_INVALID \u003d \"\";"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    private static final String SHORTER_THAN_SECOND_END_INDEX_INVALID \u003d \"20180419T1220\";"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    private static final String ACCEPTABLE_FORMAT_VALID \u003d \"2018-04-19T12:20:00\";"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    private static final String ACCEPTABLE_FORMAT_WITHOUT_SEPARATION_INVALID \u003d \"20180419122000\";"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    private static final String DEFAULT_FORMAT_VALID \u003d"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"            \"{\\\"dateTime\\\":\\\"2018-12-20T13:35:00.000+08:00timeZone:\\\"Asia/Singapore\\\"}\";"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    private static final String DEFAULT_FORMAT_WITHOUT_QUOTE_VALID \u003d"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"            \"{dateTime:2018-12-20T13:35:00.000+08:00timeZone:Asia/Singapore}\";"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    public void parseTimeTest_invalidInput_fail() {"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"        assertError(NO_INTEGER_INVALID);"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"        assertError(NULL_STRING_INVALID);"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"        assertError(SHORTER_THAN_SECOND_END_INDEX_INVALID);"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"        assertError(ACCEPTABLE_FORMAT_WITHOUT_SEPARATION_INVALID);"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    public void parseTimeTest_validInput_success() {"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"        assertSuccess(ACCEPTABLE_FORMAT_VALID);"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"        assertSuccess(DEFAULT_FORMAT_VALID);"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"        assertSuccess(DEFAULT_FORMAT_WITHOUT_QUOTE_VALID);"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"     * Passes if there is error thrown, vice versa."},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    private void assertError(String input) {"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"            NotificationTimeParserUtil.parseTime(input);"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"        } catch (Error e) {"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"            assertTrue(e instanceof AssertionError);"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"            return;"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"        assert(false);"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"     * Passes if there is no error thrown, vice versa."},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"    private void assertSuccess(String input) {"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"            NotificationTimeParserUtil.parseTime(input);"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"        } catch (AssertionError e) {"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"            assertTrue(false);"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"            return;"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"        assertTrue(true);"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":59}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"Yoochard"},"content":"        original.setGuiSettings(300, 600, 4, 6, \"dark\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":1,"-":100}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitID":"Yoochard"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100, \"bright\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookFilePath(\"addressbook.xml\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        userPrefs.setAddressBookName(\"TypicalAddressBookName\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":118,"author":{"gitID":"Yoochard"},"content":"        original.setGuiSettings(1200, 200, 0, 2, \"bright\");"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":129,"author":{"gitID":"Yoochard"},"content":"        original.setGuiSettings(5, 5, 5, 5, \"bright\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":3,"-":132}},{"path":"src/test/java/seedu/address/logic/commands/LockCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":" * Contains integration tests (interaction with the Model) for {@code LockCommand}."},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"public class LockCommandTest {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    public void equals() {"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        LockCommand firstLockCommand \u003d new LockCommand();"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        LockCommand secondLockCommand \u003d new LockCommand();"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        // same object -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        assertTrue(firstLockCommand.equals(firstLockCommand));"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstLockCommand.equals(1));"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        // null -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstLockCommand.equals(null));"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"    public void lockSuccess() {"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        LockCommand testLockCommand \u003d new LockCommand();"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        testLockCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"        String expectedMessage \u003d LockCommand.MESSAGE_SUCCESS;"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        CommandResult commandResult \u003d testLockCommand.execute();"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":53}},{"path":"src/test/java/seedu/address/model/person/RatingTest.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.model.person.Rating.DEFAULT_NULL_RATING;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import com.vdurmont.emoji.EmojiParser;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"public class RatingTest {"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    public void constructorTest_noRatingSpecified_nullRating() {"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"        Rating r \u003d new Rating();"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"        assertEquals((Integer) DEFAULT_NULL_RATING, (Integer) r.value);"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    public void equalTest_notEqual() {"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"        Rating a \u003d new Rating();"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"        Rating b \u003d new Rating(5 + \"\");"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"        assertNotEquals(a, b);"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    public void equalTest_equal() {"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"        Rating a \u003d new Rating(5 + \"\");"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"        Rating b \u003d new Rating(5 + \"\");"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"        assertEquals(a, b);"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    public void toStringTest() {"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"        Rating r \u003d new Rating(\"123\");"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"        assertEquals(r.toString(), \"123\");"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    public void getRatingDisplayTest() {"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        Rating r \u003d new Rating();"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"        assertEquals(r.INVALID_RATING_DISPLAY, r.getRatingDisplay());"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"        Rating a \u003d new Rating(1 + \"\");"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"        assertEquals(a.getRatingDisplay(), EmojiParser.parseToUnicode(a.RATING_DISPLAY));"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":46,"-":1}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    private static final String VALID_CALENDARID \u003d \"null\";"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    private static final String VALID_PHOTONAME \u003d \"win.jpg\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"                        VALID_TAGS, VALID_CALENDARID, VALID_PHOTONAME);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"                VALID_TAGS, VALID_CALENDARID, VALID_PHOTONAME);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"                        VALID_CALENDARID, VALID_PHOTONAME);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"                VALID_TAGS, VALID_CALENDARID, VALID_PHOTONAME);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"                        VALID_CALENDARID, VALID_PHOTONAME);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"                VALID_TAGS, VALID_CALENDARID, VALID_PHOTONAME);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS,"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"                        VALID_CALENDARID, VALID_PHOTONAME);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":"                VALID_TAGS, VALID_CALENDARID, VALID_PHOTONAME);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags,"},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"                        VALID_CALENDARID, VALID_PHOTONAME);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":20,"-":101}},{"path":"src/test/java/seedu/address/model/person/CalendarIdTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class CalendarIdTest {"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new CalendarId(null));"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    public void construct_success() {"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"        CalendarId calendarId \u003d new CalendarId(\"cid\");"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        assertEquals(calendarId.getValue(), \"cid\");"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":21}},{"path":"src/test/java/seedu/address/model/person/RatingContainsKeyphrasesPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":""},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":""},{"lineNumber":11,"author":{"gitID":"emer7"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":""},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":""},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"public class RatingContainsKeyphrasesPredicateTest {"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":""},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e firstPredicateKeyphraseList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e secondPredicateKeyphraseList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":""},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"        RatingContainsKeyphrasesPredicate firstPredicate \u003d new RatingContainsKeyphrasesPredicate("},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"                firstPredicateKeyphraseList);"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"        RatingContainsKeyphrasesPredicate secondPredicate \u003d new RatingContainsKeyphrasesPredicate("},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"                secondPredicateKeyphraseList);"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":""},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":""},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"        RatingContainsKeyphrasesPredicate firstPredicateCopy \u003d new RatingContainsKeyphrasesPredicate("},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"                firstPredicateKeyphraseList);"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":""},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitID":"emer7"},"content":""},{"lineNumber":38,"author":{"gitID":"emer7"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":""},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"        // different person -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"emer7"},"content":""},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"    public void test_ratingContainsKeyphrases_returnsTrue() {"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"        // Zero keyphrase"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"        RatingContainsKeyphrasesPredicate predicate \u003d new RatingContainsKeyphrasesPredicate(Collections.emptyList());"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder().withRating(\"2\").build()));"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":""},{"lineNumber":51,"author":{"gitID":"emer7"},"content":"        // One keyphrase"},{"lineNumber":52,"author":{"gitID":"emer7"},"content":"        predicate \u003d new RatingContainsKeyphrasesPredicate(Collections.singletonList(\"3\"));"},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder().withRating(\"3\").build()));"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":""},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"        // Multiple keyphrases"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":"        predicate \u003d new RatingContainsKeyphrasesPredicate(Arrays.asList(\"3\", \"4\"));"},{"lineNumber":57,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder().withRating(\"4\").build()));"},{"lineNumber":58,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"emer7"},"content":""},{"lineNumber":60,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"emer7"},"content":"    public void test_ratingDoesNotContainKeyphrases_returnsFalse() {"},{"lineNumber":62,"author":{"gitID":"emer7"},"content":"        // Non-matching keyphrase"},{"lineNumber":63,"author":{"gitID":"emer7"},"content":"        RatingContainsKeyphrasesPredicate predicate \u003d new RatingContainsKeyphrasesPredicate("},{"lineNumber":64,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"2\"));"},{"lineNumber":65,"author":{"gitID":"emer7"},"content":"        assertFalse(predicate.test(new PersonBuilder().withRating(\"1\").build()));"},{"lineNumber":66,"author":{"gitID":"emer7"},"content":""},{"lineNumber":67,"author":{"gitID":"emer7"},"content":"        // Keyphrase match name, phone, email, address, and tags, but does not match rating"},{"lineNumber":68,"author":{"gitID":"emer7"},"content":"        predicate \u003d new RatingContainsKeyphrasesPredicate("},{"lineNumber":69,"author":{"gitID":"emer7"},"content":"                Arrays.asList(\"Alice 12345 alice@email.com Main Street Friends\"));"},{"lineNumber":70,"author":{"gitID":"emer7"},"content":"        assertFalse(predicate.test(new PersonBuilder()"},{"lineNumber":71,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice\")"},{"lineNumber":72,"author":{"gitID":"emer7"},"content":"                .withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitID":"emer7"},"content":"                .withEmail(\"alice@email.com\")"},{"lineNumber":74,"author":{"gitID":"emer7"},"content":"                .withAddress(\"Main Street\")"},{"lineNumber":75,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\")"},{"lineNumber":76,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":77,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":78,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":79}},{"path":"src/test/java/seedu/address/model/notification/NotificationTimeTest.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.notification;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import java.util.Calendar;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"public class NotificationTimeTest {"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    public void isTodayTest_pastDate_fail() {"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"        assertFalse((new NotificationTime(2014, 2, 1, 10, 12, 13)).isToday());"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    public void isTodayTest_todayDate_success() {"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"        assertTrue((new NotificationTime(Calendar.getInstance().get(Calendar.YEAR),"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"                Calendar.getInstance().get(Calendar.MONTH),"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"                Calendar.getInstance().get(Calendar.DAY_OF_MONTH),"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"                12, 12, 12)).isToday());"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    public void isTodayTest_futureDate_fail() {"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"        assertFalse((new NotificationTime(2024, 2, 1, 10, 12, 13)).isToday());"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":31}},{"path":"src/test/java/seedu/address/model/person/TagContainsKeyphrasesPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":""},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":""},{"lineNumber":11,"author":{"gitID":"emer7"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":""},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":""},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"public class TagContainsKeyphrasesPredicateTest {"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":""},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e firstPredicateKeyphraseList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e secondPredicateKeyphraseList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":""},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"        TagContainsKeyphrasesPredicate firstPredicate \u003d new TagContainsKeyphrasesPredicate("},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"                firstPredicateKeyphraseList);"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"        TagContainsKeyphrasesPredicate secondPredicate \u003d new TagContainsKeyphrasesPredicate("},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"                secondPredicateKeyphraseList);"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":""},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":""},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"        // same values -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"        TagContainsKeyphrasesPredicate firstPredicateCopy \u003d new TagContainsKeyphrasesPredicate("},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"                firstPredicateKeyphraseList);"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":""},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"        // different types -\u003e returns false"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":37,"author":{"gitID":"emer7"},"content":""},{"lineNumber":38,"author":{"gitID":"emer7"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":""},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"        // different person -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"emer7"},"content":""},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"    public void test_tagContainsKeyphrases_returnsTrue() {"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"        // Zero keyphrase"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"        TagContainsKeyphrasesPredicate predicate \u003d new TagContainsKeyphrasesPredicate(Collections.emptyList());"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Friends\").build()));"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":""},{"lineNumber":51,"author":{"gitID":"emer7"},"content":"        // One keyphrase"},{"lineNumber":52,"author":{"gitID":"emer7"},"content":"        predicate \u003d new TagContainsKeyphrasesPredicate(Collections.singletonList(\"Friends\"));"},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Friends\", \"Family\").build()));"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":"        predicate \u003d new TagContainsKeyphrasesPredicate(Collections.singletonList(\"Friends Family\"));"},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Friends\", \"Family\").build()));"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":""},{"lineNumber":57,"author":{"gitID":"emer7"},"content":"        // Multiple keyphrases"},{"lineNumber":58,"author":{"gitID":"emer7"},"content":"        predicate \u003d new TagContainsKeyphrasesPredicate(Arrays.asList(\"Friends\", \"Colleagues\"));"},{"lineNumber":59,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Friends\").build()));"},{"lineNumber":60,"author":{"gitID":"emer7"},"content":""},{"lineNumber":61,"author":{"gitID":"emer7"},"content":"        // Mixed-case keyphrase"},{"lineNumber":62,"author":{"gitID":"emer7"},"content":"        predicate \u003d new TagContainsKeyphrasesPredicate(Arrays.asList(\"fRiends\"));"},{"lineNumber":63,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder().withTags(\"Friends\").build()));"},{"lineNumber":64,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"emer7"},"content":""},{"lineNumber":66,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"emer7"},"content":"    public void test_tagDoesNotContainKeyphrases_returnsFalse() {"},{"lineNumber":68,"author":{"gitID":"emer7"},"content":"        // Non-matching keyphrase"},{"lineNumber":69,"author":{"gitID":"emer7"},"content":"        TagContainsKeyphrasesPredicate predicate \u003d new TagContainsKeyphrasesPredicate("},{"lineNumber":70,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"Friends\"));"},{"lineNumber":71,"author":{"gitID":"emer7"},"content":"        assertFalse(predicate.test(new PersonBuilder().withTags(\"Enemy\", \"Nemesis\").build()));"},{"lineNumber":72,"author":{"gitID":"emer7"},"content":""},{"lineNumber":73,"author":{"gitID":"emer7"},"content":"        // Keyphrase match name, phone, email, and address, but does not match tag"},{"lineNumber":74,"author":{"gitID":"emer7"},"content":"        predicate \u003d new TagContainsKeyphrasesPredicate("},{"lineNumber":75,"author":{"gitID":"emer7"},"content":"                Arrays.asList(\"Alice 12345 alice@email.com Main Street 3\"));"},{"lineNumber":76,"author":{"gitID":"emer7"},"content":"        assertFalse(predicate.test(new PersonBuilder()"},{"lineNumber":77,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice\")"},{"lineNumber":78,"author":{"gitID":"emer7"},"content":"                .withPhone(\"12345\")"},{"lineNumber":79,"author":{"gitID":"emer7"},"content":"                .withEmail(\"alice@email.com\")"},{"lineNumber":80,"author":{"gitID":"emer7"},"content":"                .withAddress(\"Main Street\")"},{"lineNumber":81,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\")"},{"lineNumber":82,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":83,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":84,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":85}},{"path":"src/test/java/seedu/address/model/listevent/ListEventTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.model.listevent;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class ListEventTest {"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public void construct_success() {"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"        DateTime startTime \u003d new DateTime(\"2018-04-30T18:00:00+08:00\");"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"        ListEvent listEvent \u003d new ListEvent(\"Test Event\", \"NUS\", startTime);"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"        assertEquals(\"Test Event\", listEvent.getTitle());"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"        assertEquals(\"NUS\", listEvent.getLocation());"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"        assertEquals(startTime, listEvent.getStartTime());"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"        assertEquals(\"EVENT: Test Event  ||   LOCATION: NUS  ||   START AT: \" + startTime.toString()"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"                .substring(0, startTime.toString().lastIndexOf(\"+\")).replaceAll(\"T\", \" \"),"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"                listEvent.toString());"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":22}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import java.util.LinkedList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.Photo;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"        List\u003cPhoto\u003e newPhotos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags, newPhotos);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"        private final ObservableList\u003cPhoto\u003e photos \u003d FXCollections.observableArrayList();"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"                        Collection\u003c? extends Photo\u003e photos) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"            this.photos.setAll(photos);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"        @Override"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"        public ObservableList\u003cPhoto\u003e getPhotoList() {"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"            return photos;"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"        public LinkedList\u003cNotification\u003e getNotificationsList() {"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"            return null;"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"        public int getNextId() {"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"            return 0;"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"crizyli"},"content":"        public String getPassword() {"},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":"            return null;"},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"        public Person findPersonById(int id) {"},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"            return null;"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":18,"IzHoBX":18,"-":92}},{"path":"src/test/java/seedu/address/model/notification/NotificationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.notification;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"public class NotificationTest {"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    private static final String SAMPLE_STRING \u003d \"123\";"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    public void notification_nullTitle_fail() {"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"            Notification n \u003d new Notification(null, SAMPLE_STRING, SAMPLE_STRING, SAMPLE_STRING, SAMPLE_STRING);"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"        } catch (Error e) {"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"            assertTrue(e instanceof AssertionError);"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"            return;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"        assertTrue(false);"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    public void notification_idNull_fail() {"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"            Notification n \u003d new Notification(SAMPLE_STRING, SAMPLE_STRING, null, SAMPLE_STRING, SAMPLE_STRING);"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"        } catch (Error e) {"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"            assertTrue(e instanceof AssertionError);"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"            return;"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        assertTrue(false);"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    public void notification_endDateNull_fail() {"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"            Notification n \u003d new Notification(SAMPLE_STRING, SAMPLE_STRING, SAMPLE_STRING, null, SAMPLE_STRING);"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        } catch (Error e) {"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"            assertTrue(e instanceof AssertionError);"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"            return;"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        assertTrue(false);"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    public void notification_ownerIdNull_fail() {"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"            Notification n \u003d new Notification(SAMPLE_STRING, SAMPLE_STRING, SAMPLE_STRING, SAMPLE_STRING, null);"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"        } catch (Error e) {"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"            assertTrue(e instanceof AssertionError);"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"            return;"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"        assertTrue(false);"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"    public void notification_ownerIdUninitialised_fail() {"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"            Notification n \u003d new Notification(SAMPLE_STRING, SAMPLE_STRING, SAMPLE_STRING, SAMPLE_STRING,"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"                    Person.UNINITIALISED_ID + \"\");"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"        } catch (Error e) {"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"            assertTrue(e instanceof AssertionError);"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"            return;"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"        assertTrue(false);"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"    public void notification_nonEssentialParameterNull_success() {"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"            Notification n \u003d new Notification(SAMPLE_STRING, null, SAMPLE_STRING, SAMPLE_STRING, SAMPLE_STRING);"},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":"        } catch (Error e) {"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"            assertTrue(false);"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"            return;"},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":"        assertTrue(true);"},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"    public void notification_allParameterNonNull_success() {"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"            Notification n \u003d new Notification(SAMPLE_STRING, SAMPLE_STRING, SAMPLE_STRING, SAMPLE_STRING,"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"                    SAMPLE_STRING);"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"        } catch (Error e) {"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"            assertTrue(false);"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"            return;"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"        assertTrue(true);"},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":91}},{"path":"src/test/java/seedu/address/model/person/FieldContainKeyphrasesPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":""},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":""},{"lineNumber":11,"author":{"gitID":"emer7"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":""},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":""},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"public class FieldContainKeyphrasesPredicateTest {"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":""},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"    public void equals() {"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e firstNamePredicateKeyphraseList \u003d Collections.singletonList(\"first\");"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e secondNamePredicateKeyphraseList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e firstTagPredicateKeyphraseList \u003d Collections.singletonList(\"first\");"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e secondTagPredicateKeyphraseList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e firstRatingPredicateKeyphraseList \u003d Collections.singletonList(\"first\");"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e secondRatingPredicateKeyphraseList \u003d Collections.singletonList(\"second\");"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":""},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"        FieldContainKeyphrasesPredicate firstPredicate \u003d"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"                new FieldContainKeyphrasesPredicate("},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"                        firstNamePredicateKeyphraseList,"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"                        firstTagPredicateKeyphraseList,"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"                        firstRatingPredicateKeyphraseList);"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"        FieldContainKeyphrasesPredicate secondPredicate \u003d"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"                new FieldContainKeyphrasesPredicate("},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"                        secondNamePredicateKeyphraseList,"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"                        secondTagPredicateKeyphraseList,"},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"                        secondRatingPredicateKeyphraseList);"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":""},{"lineNumber":37,"author":{"gitID":"emer7"},"content":"        // same object -\u003e returns true"},{"lineNumber":38,"author":{"gitID":"emer7"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":39,"author":{"gitID":"emer7"},"content":""},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"        // same values -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"        FieldContainKeyphrasesPredicate firstPredicateCopy \u003d new FieldContainKeyphrasesPredicate("},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"                firstNamePredicateKeyphraseList, firstTagPredicateKeyphraseList, firstRatingPredicateKeyphraseList);"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":44,"author":{"gitID":"emer7"},"content":""},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"        // different types -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":""},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"        // null -\u003e returns false"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":""},{"lineNumber":51,"author":{"gitID":"emer7"},"content":"        // different person -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"emer7"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":""},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":"    public void test_containKeyphrases_returnsTrue() {"},{"lineNumber":57,"author":{"gitID":"emer7"},"content":"        // All zero keyphrase"},{"lineNumber":58,"author":{"gitID":"emer7"},"content":"        FieldContainKeyphrasesPredicate predicate \u003d new FieldContainKeyphrasesPredicate("},{"lineNumber":59,"author":{"gitID":"emer7"},"content":"                Collections.emptyList(),"},{"lineNumber":60,"author":{"gitID":"emer7"},"content":"                Collections.emptyList(),"},{"lineNumber":61,"author":{"gitID":"emer7"},"content":"                Collections.emptyList());"},{"lineNumber":62,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder()"},{"lineNumber":63,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice Bob\")"},{"lineNumber":64,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\", \"Family\")"},{"lineNumber":65,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":66,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":67,"author":{"gitID":"emer7"},"content":""},{"lineNumber":68,"author":{"gitID":"emer7"},"content":"        // All one keyphrase"},{"lineNumber":69,"author":{"gitID":"emer7"},"content":"        predicate \u003d new FieldContainKeyphrasesPredicate("},{"lineNumber":70,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"Alice\"),"},{"lineNumber":71,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"Friends\"),"},{"lineNumber":72,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"3\"));"},{"lineNumber":73,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder()"},{"lineNumber":74,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice Bob\")"},{"lineNumber":75,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\", \"Family\")"},{"lineNumber":76,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":77,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":78,"author":{"gitID":"emer7"},"content":""},{"lineNumber":79,"author":{"gitID":"emer7"},"content":"        // Name one keyphrase"},{"lineNumber":80,"author":{"gitID":"emer7"},"content":"        predicate \u003d new FieldContainKeyphrasesPredicate("},{"lineNumber":81,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"Alice Bob\"),"},{"lineNumber":82,"author":{"gitID":"emer7"},"content":"                Collections.emptyList(),"},{"lineNumber":83,"author":{"gitID":"emer7"},"content":"                Collections.emptyList());"},{"lineNumber":84,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder()"},{"lineNumber":85,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice Bob\")"},{"lineNumber":86,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\", \"Family\")"},{"lineNumber":87,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":88,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":89,"author":{"gitID":"emer7"},"content":""},{"lineNumber":90,"author":{"gitID":"emer7"},"content":"        // Tag one keyphrase"},{"lineNumber":91,"author":{"gitID":"emer7"},"content":"        predicate \u003d new FieldContainKeyphrasesPredicate("},{"lineNumber":92,"author":{"gitID":"emer7"},"content":"                Collections.emptyList(),"},{"lineNumber":93,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"Friends Family\"),"},{"lineNumber":94,"author":{"gitID":"emer7"},"content":"                Collections.emptyList());"},{"lineNumber":95,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder()"},{"lineNumber":96,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice Bob\")"},{"lineNumber":97,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\", \"Family\")"},{"lineNumber":98,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":99,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":100,"author":{"gitID":"emer7"},"content":""},{"lineNumber":101,"author":{"gitID":"emer7"},"content":"        // Rating one keyphrase"},{"lineNumber":102,"author":{"gitID":"emer7"},"content":"        predicate \u003d new FieldContainKeyphrasesPredicate("},{"lineNumber":103,"author":{"gitID":"emer7"},"content":"                Collections.emptyList(),"},{"lineNumber":104,"author":{"gitID":"emer7"},"content":"                Collections.emptyList(),"},{"lineNumber":105,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"3\"));"},{"lineNumber":106,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder()"},{"lineNumber":107,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice Bob\")"},{"lineNumber":108,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\", \"Family\")"},{"lineNumber":109,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":110,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":111,"author":{"gitID":"emer7"},"content":""},{"lineNumber":112,"author":{"gitID":"emer7"},"content":"        // Both name and tag multiple keyphrases, but only one matches"},{"lineNumber":113,"author":{"gitID":"emer7"},"content":"        predicate \u003d new FieldContainKeyphrasesPredicate("},{"lineNumber":114,"author":{"gitID":"emer7"},"content":"                Arrays.asList(\"Alice\", \"Carol\"),"},{"lineNumber":115,"author":{"gitID":"emer7"},"content":"                Arrays.asList(\"Friends\", \"Enemy\"),"},{"lineNumber":116,"author":{"gitID":"emer7"},"content":"                Collections.emptyList());"},{"lineNumber":117,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder()"},{"lineNumber":118,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice Bob\")"},{"lineNumber":119,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\", \"Family\")"},{"lineNumber":120,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":121,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":122,"author":{"gitID":"emer7"},"content":""},{"lineNumber":123,"author":{"gitID":"emer7"},"content":"        // Both name and tag mixed-case keyphrase"},{"lineNumber":124,"author":{"gitID":"emer7"},"content":"        predicate \u003d new FieldContainKeyphrasesPredicate("},{"lineNumber":125,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"aLIce\"),"},{"lineNumber":126,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"fRIeNDs\"),"},{"lineNumber":127,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"3\"));"},{"lineNumber":128,"author":{"gitID":"emer7"},"content":"        assertTrue(predicate.test(new PersonBuilder()"},{"lineNumber":129,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice Bob\")"},{"lineNumber":130,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\", \"Family\")"},{"lineNumber":131,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":132,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":133,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"emer7"},"content":""},{"lineNumber":135,"author":{"gitID":"emer7"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"emer7"},"content":"    public void test_notContainKeyphrases_returnsFalse() {"},{"lineNumber":137,"author":{"gitID":"emer7"},"content":"        // Non-matching keyphrase"},{"lineNumber":138,"author":{"gitID":"emer7"},"content":"        FieldContainKeyphrasesPredicate predicate \u003d new FieldContainKeyphrasesPredicate("},{"lineNumber":139,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"Carol\"),"},{"lineNumber":140,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"Enemy\"),"},{"lineNumber":141,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"3\"));"},{"lineNumber":142,"author":{"gitID":"emer7"},"content":"        assertFalse(predicate.test(new PersonBuilder()"},{"lineNumber":143,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice Bob\")"},{"lineNumber":144,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\")"},{"lineNumber":145,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":146,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":147,"author":{"gitID":"emer7"},"content":""},{"lineNumber":148,"author":{"gitID":"emer7"},"content":"        // Keyphrase match phone, email, address, and tags, but does not match name"},{"lineNumber":149,"author":{"gitID":"emer7"},"content":"        predicate \u003d new FieldContainKeyphrasesPredicate("},{"lineNumber":150,"author":{"gitID":"emer7"},"content":"                Arrays.asList(\"12345 alice@email.com Main Street\"),"},{"lineNumber":151,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"Friends\"),"},{"lineNumber":152,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"3\"));"},{"lineNumber":153,"author":{"gitID":"emer7"},"content":"        assertFalse(predicate.test(new PersonBuilder()"},{"lineNumber":154,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice\")"},{"lineNumber":155,"author":{"gitID":"emer7"},"content":"                .withPhone(\"12345\")"},{"lineNumber":156,"author":{"gitID":"emer7"},"content":"                .withEmail(\"alice@email.com\")"},{"lineNumber":157,"author":{"gitID":"emer7"},"content":"                .withAddress(\"Main Street\")"},{"lineNumber":158,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\")"},{"lineNumber":159,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":160,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":161,"author":{"gitID":"emer7"},"content":""},{"lineNumber":162,"author":{"gitID":"emer7"},"content":"        // Keyphrase match name, phone, email, and address, but does not match tags"},{"lineNumber":163,"author":{"gitID":"emer7"},"content":"        predicate \u003d new FieldContainKeyphrasesPredicate("},{"lineNumber":164,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"Alice\"),"},{"lineNumber":165,"author":{"gitID":"emer7"},"content":"                Arrays.asList(\"12345 alice@email.com Main Street\"),"},{"lineNumber":166,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"3\"));"},{"lineNumber":167,"author":{"gitID":"emer7"},"content":"        assertFalse(predicate.test(new PersonBuilder()"},{"lineNumber":168,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice\")"},{"lineNumber":169,"author":{"gitID":"emer7"},"content":"                .withPhone(\"12345\")"},{"lineNumber":170,"author":{"gitID":"emer7"},"content":"                .withEmail(\"alice@email.com\")"},{"lineNumber":171,"author":{"gitID":"emer7"},"content":"                .withAddress(\"Main Street\")"},{"lineNumber":172,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\")"},{"lineNumber":173,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":174,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":175,"author":{"gitID":"emer7"},"content":""},{"lineNumber":176,"author":{"gitID":"emer7"},"content":"        // Keyphrase match name, phone, email, address, and tags, but does not match rating"},{"lineNumber":177,"author":{"gitID":"emer7"},"content":"        predicate \u003d new FieldContainKeyphrasesPredicate("},{"lineNumber":178,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"Alice\"),"},{"lineNumber":179,"author":{"gitID":"emer7"},"content":"                Collections.singletonList(\"Friends\"),"},{"lineNumber":180,"author":{"gitID":"emer7"},"content":"                Arrays.asList(\"12345 alice@email.com Main Street\"));"},{"lineNumber":181,"author":{"gitID":"emer7"},"content":"        assertFalse(predicate.test(new PersonBuilder()"},{"lineNumber":182,"author":{"gitID":"emer7"},"content":"                .withName(\"Alice\")"},{"lineNumber":183,"author":{"gitID":"emer7"},"content":"                .withPhone(\"12345\")"},{"lineNumber":184,"author":{"gitID":"emer7"},"content":"                .withEmail(\"alice@email.com\")"},{"lineNumber":185,"author":{"gitID":"emer7"},"content":"                .withAddress(\"Main Street\")"},{"lineNumber":186,"author":{"gitID":"emer7"},"content":"                .withTags(\"Friends\")"},{"lineNumber":187,"author":{"gitID":"emer7"},"content":"                .withRating(\"3\")"},{"lineNumber":188,"author":{"gitID":"emer7"},"content":"                .build()));"},{"lineNumber":189,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":190}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.review.Review;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        descriptor.setRating(person.getRating());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        descriptor.setReviews(person.getReviews());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"     * Sets the {@code Rating} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"    public EditPersonDescriptorBuilder withRating(String rating) {"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"        descriptor.setRating(new Rating(rating));"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"        return this;"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":87,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"emer7"},"content":"     * Parses the {@code reviews} into a {@code Set\u003cReview\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":89,"author":{"gitID":"emer7"},"content":"     * that we are building."},{"lineNumber":90,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"emer7"},"content":"    public EditPersonDescriptorBuilder withReviews(String... reviews) {"},{"lineNumber":92,"author":{"gitID":"emer7"},"content":"        Set\u003cReview\u003e reviewSet \u003d Stream.of(reviews).map(Review::new).collect(Collectors.toSet());"},{"lineNumber":93,"author":{"gitID":"emer7"},"content":"        descriptor.setReviews(reviewSet);"},{"lineNumber":94,"author":{"gitID":"emer7"},"content":"        return this;"},{"lineNumber":95,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"emer7"},"content":"    //@@author"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":11,"IzHoBX":9,"-":91}},{"path":"src/test/java/seedu/address/model/photo/PhotoTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.model.photo;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class PhotoTest {"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public void construct_success() {"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"        Photo photo \u003d new Photo(\"test.jpg\");"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"        assertEquals(photo.getName(), \"test.jpg\");"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"        assertEquals(photo.toString(), Photo.DEFAULT_PHOTO_FOLDER + \"test.jpg\");"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public void invalidPhotoName_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        assertFalse(Photo.isValidPhotoName(\"\"));"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        assertFalse(Photo.isValidPhotoName(\"test\"));"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        assertFalse(Photo.isValidPhotoName(\"test.txt\"));"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        assertFalse(Photo.isValidPhotoName(\"test.pdf\"));"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    public void equals() {"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        Photo firstPhoto \u003d new Photo(\"test.jpg\");"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        Photo secondPhoto \u003d new Photo(\"test2.jpg\");"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        // same object -\u003e returns true"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        assertTrue(firstPhoto.equals(firstPhoto));"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstPhoto.equals(1));"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstPhoto.equals(null));"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        // same value -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"        Photo thirdPhoto \u003d new Photo(\"test.jpg\");"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"        assertTrue(firstPhoto.equals(thirdPhoto));"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        // different value -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"        assertFalse(firstPhoto.equals(secondPhoto));"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":49}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"     * Returns an test add command string for adding the {@code person}."},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    public static String getTestAddCommand(Person person) {"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        return AddCommand.TEST_COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":41,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":7,"-":38}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.review.Review;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    public static final String DEFAULT_CALENDARID \u003d \"null\";"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    public static final String DEFAULT_RATING \u003d \"-1\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_REVIEWS \u003d \"-\\n-\";"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    public static final String DEFAULT_PHOTONAME \u003d \"DefaultPerson.png\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    private Rating rating;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Set\u003cReview\u003e reviews;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    private String calendarId;"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    private String photoName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"        rating \u003d new Rating(DEFAULT_RATING);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        //reviews \u003d SampleDataUtil.getReviewSet(DEFAULT_REVIEWS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        reviews \u003d new HashSet\u003c\u003e();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        calendarId \u003d this.DEFAULT_CALENDARID;"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        photoName \u003d this.DEFAULT_PHOTONAME;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"        rating \u003d personToCopy.getRating();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        reviews \u003d personToCopy.getReviews();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        photoName \u003d personToCopy.getPhotoName();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":109,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":"     * Sets the {@code calendarId} of the {@code Person} that we are building."},{"lineNumber":111,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"crizyli"},"content":"    public PersonBuilder withCalendarId(String calendarId) {"},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"        return this;"},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"crizyli"},"content":"     * Sets the {@code photoName} of the {@code Person} that we are building."},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"    public PersonBuilder withPhotoName(String photoName) {"},{"lineNumber":121,"author":{"gitID":"crizyli"},"content":"        this.photoName \u003d photoName;"},{"lineNumber":122,"author":{"gitID":"crizyli"},"content":"        return this;"},{"lineNumber":123,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":125,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"     * Sets the {@code Rating} of the {@code Person} that we are building."},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":"    public PersonBuilder withRating(String rating) {"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"        this.rating \u003d new Rating(rating);"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"        return this;"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":134,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":135,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"emer7"},"content":"     * Sets the {@code Review} of the {@code Person} that we are building."},{"lineNumber":137,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"emer7"},"content":"    public PersonBuilder withReviews(String ... reviews) {"},{"lineNumber":139,"author":{"gitID":"emer7"},"content":"        this.reviews \u003d SampleDataUtil.getReviewSet(reviews);"},{"lineNumber":140,"author":{"gitID":"emer7"},"content":"        return this;"},{"lineNumber":141,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"emer7"},"content":""},{"lineNumber":143,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"emer7"},"content":"     * Build a person with the determined details"},{"lineNumber":145,"author":{"gitID":"emer7"},"content":"     * @return person to be built"},{"lineNumber":146,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":147,"author":{"gitID":"emer7"},"content":"    public Person build() {"},{"lineNumber":148,"author":{"gitID":"emer7"},"content":"        Person toReturn \u003d new Person(name, phone, email, address, tags, calendarId);"},{"lineNumber":149,"author":{"gitID":"emer7"},"content":"        toReturn.setRating(rating);"},{"lineNumber":150,"author":{"gitID":"emer7"},"content":"        toReturn.setReviews(reviews);"},{"lineNumber":151,"author":{"gitID":"emer7"},"content":"        return toReturn;"},{"lineNumber":152,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"content":"    //@@author"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":19,"null":1,"crizyli":25,"IzHoBX":13,"-":98}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEWER_SUPERVISOR;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_REVIEW_LAZY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"            .withTags(\"friends\")"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"testCalendarId\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withRating(\"1\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withReviews(\"supervisor@example.com\\nLazy\")"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"            .withPhotoName(\"DefaultPerson.png\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .build();"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    public static final Person ALICE_DEFAULT \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .withPhone(\"85355255\")"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .withTags(\"friends\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withRating(\"-1\")"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"testCalendarId\")"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"            .withPhotoName(\"DefaultPerson.png\")"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"testCalendarId\")"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            .withRating(\"2\")"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            .withReviews(\"supervisor@example.com\\nLazy\")"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"            .withPhotoName(\"DefaultPerson.png\")"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"testCalendarId\")"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"            .withPhotoName(\"DefaultPerson.png\")"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"testCalendarId\")"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            .withRating(\"4\")"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            .withReviews(\"supervisor@example.com\\nLazy\")"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"            .withPhotoName(\"DefaultPerson.png\")"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"testCalendarId\")"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            .withRating(\"5\")"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            .withReviews(\"supervisor@example.com\\nLazy\")"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"            .withPhotoName(\"DefaultPerson.png\")"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"testCalendarId\")"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            .withRating(\"4\")"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            .withReviews(\"supervisor@example.com\\nLazy\")"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"            .withPhotoName(\"DefaultPerson.png\")"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"testCalendarId\")"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            .withRating(\"3\")"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            .withReviews(\"supervisor@example.com\\nLazy\")"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"            .withPhotoName(\"DefaultPerson.png\")"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\")"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"testCalendarId\")"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            .withRating(\"-1\")"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"            .withPhotoName(\"DefaultPerson.png\")"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"            .withCalendarId(\"testCalendarId\")"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            .withRating(\"-1\")"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"            .withPhotoName(\"DefaultPerson.png\")"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"            .build();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withRating(VALID_RATING_BOB)"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_FRIEND)"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            .withReviews(VALID_REVIEWER_SUPERVISOR + \"\\n\" + VALID_REVIEW_LAZY).build();"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"    public static final Person AMY_DEFAULT \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"                    (VALID_TAG_FRIEND).build();"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withRating(VALID_RATING_BOB)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            .withReviews(VALID_REVIEWER_SUPERVISOR + \"\\n\" + VALID_REVIEW_LAZY).build();"},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"    public static final Person BOB_DEFAULT \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static final String KEYPHRASE_MATCHING_MEIER \u003d \"Meier\"; // A keyphrase that matches MEIER"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                ab.addPerson(person);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":38,"IzHoBX":7,"-":97}},{"path":"src/test/java/seedu/address/model/UniqueEmployeeListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"import seedu.address.model.person.UniqueEmployeeList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":"public class UniqueEmployeeListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"        UniqueEmployeeList uniquePersonList \u003d new UniqueEmployeeList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        uniquePersonList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":3,"-":16}},{"path":"src/test/java/guitests/guihandles/ResultDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A handler for the {@code ResultDisplay} of the UI"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle(TextArea resultDisplayNode) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        super(resultDisplayNode);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns the text in the result display."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":"     * Returns the list of style classes present in the result display."},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"    public List\u003cString\u003e getStyleClass() {"},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":31,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":11,"-":21}},{"path":"src/test/java/seedu/address/model/UniquePhotoListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.Photo;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.UniquePhotoList;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"public class UniquePhotoListTest {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    @Rule"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    private Set\u003cPhoto\u003e photos;"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    private Photo photo1 \u003d new Photo(\"test1.jpg\");"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    private Photo photo2 \u003d new Photo(\"test2.jpg\");"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        UniquePhotoList uniquePhotoList \u003d new UniquePhotoList();"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        uniquePhotoList.asObservableList().remove(0);"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"    @Before"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    public void setUp() {"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        photos \u003d new HashSet\u003cPhoto\u003e();"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        photos.add(photo1);"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        photos.add(photo2);"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new UniquePhotoList(null));"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"    public void construct_success() {"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        UniquePhotoList uniquePhotoList \u003d new UniquePhotoList(photos);"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        assertEquals(photos, uniquePhotoList.toSet());"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"    public void setAndAddPhoto_success() throws UniquePhotoList.DuplicatePhotoException {"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"        UniquePhotoList uniquePhotoList \u003d new UniquePhotoList();"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        uniquePhotoList.setPhotos(photos);"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"        assertEquals(photos, uniquePhotoList.toSet());"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"        Photo photo3 \u003d new Photo(\"test3.jpg\");"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"        uniquePhotoList.add(photo3);"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"        Set\u003cPhoto\u003e newPhotos \u003d new HashSet\u003cPhoto\u003e();"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"        newPhotos.add(photo3);"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"        newPhotos.add(photo2);"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"        newPhotos.add(photo1);"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        UniquePhotoList uniquePhotoList1 \u003d new UniquePhotoList(newPhotos);"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        assertTrue(uniquePhotoList.equalsOrderInsensitive(uniquePhotoList1));"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"    public void addDuplicate_throwsDuplicatePhotoException() {"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"        UniquePhotoList uniquePhotoList \u003d new UniquePhotoList();"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"        uniquePhotoList.setPhotos(photos);"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"        Assert.assertThrows(UniquePhotoList.DuplicatePhotoException.class, () -\u003e uniquePhotoList.add(photo1));"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"        UniquePhotoList uniquePhotoList \u003d new UniquePhotoList();"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"        uniquePhotoList.setPhotos(photos);"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"        Set\u003cPhoto\u003e newPhotos \u003d new HashSet\u003cPhoto\u003e();"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"        newPhotos.add(photo2);"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"        newPhotos.add(photo1);"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"        UniquePhotoList uniquePhotoList1 \u003d new UniquePhotoList(newPhotos);"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"        // same object -\u003e returns true"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"        assertTrue(uniquePhotoList.equals(uniquePhotoList));"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"        // different types -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"        assertFalse(uniquePhotoList.equals(1));"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"        // null -\u003e returns false"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"        assertFalse(uniquePhotoList.equals(null));"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"        // same value -\u003e returns true"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"        assertTrue(uniquePhotoList.equals(uniquePhotoList1));"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"        assertEquals(uniquePhotoList.asObservableList().hashCode(), uniquePhotoList.hashCode());"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":100}},{"path":"src/test/java/guitests/guihandles/ReviewInputHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":""},{"lineNumber":3,"author":{"gitID":"emer7"},"content":"package guitests.guihandles;"},{"lineNumber":4,"author":{"gitID":"emer7"},"content":""},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":""},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":" * A handle to the {@code ReviewDialog#review} in the GUI."},{"lineNumber":9,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":"public class ReviewInputHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":11,"author":{"gitID":"emer7"},"content":""},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"    public static final String REVIEW_INPUT_FIELD_ID \u003d \"reviewInputTextField\";"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":""},{"lineNumber":14,"author":{"gitID":"emer7"},"content":"    public ReviewInputHandle(TextArea reviewInputNode) {"},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"        super(reviewInputNode);"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"emer7"},"content":""},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"     * Returns the text in the review input box."},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"    public String getInput() {"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"        return getRootNode().getText();"},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":""},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"     * Enters the given value in the text area and presses enter."},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"    public void run(String command) {"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"        click();"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(command));"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":33}},{"path":"src/test/java/guitests/guihandles/PersonCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Provides a handle to a person card in the person list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label phoneLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label emailLabel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public PersonCardHandle(Node cardNode) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String getPhone() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return phoneLabel.getText();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public String getEmail() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return emailLabel.getText();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                .map(Label::getText)"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":65,"author":{"gitID":"Yoochard"},"content":"    public List\u003cString\u003e getTagStyleClasses(String tag) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"Yoochard"},"content":"                .filter(label -\u003e label.getText().equals(tag))"},{"lineNumber":69,"author":{"gitID":"Yoochard"},"content":"                .map(Label::getStyleClass)"},{"lineNumber":70,"author":{"gitID":"Yoochard"},"content":"                .findFirst()"},{"lineNumber":71,"author":{"gitID":"Yoochard"},"content":"                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag.\"));"},{"lineNumber":72,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":7,"-":66}},{"path":"src/test/java/guitests/guihandles/ReviewDialogHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import static guitests.guihandles.ReviewInputHandle.REVIEW_INPUT_FIELD_ID;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import static guitests.guihandles.ReviewerInputHandle.REVIEWER_INPUT_FIELD_ID;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":"import static seedu.address.ui.ReviewDialog.REVIEW_DIALOG_PANE_FIELD_ID;"},{"lineNumber":7,"author":{"gitID":"emer7"},"content":""},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"import guitests.GuiRobot;"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"import javafx.scene.control.DialogPane;"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitID":"emer7"},"content":""},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":" * A handle to the {@code ReviewDialog} of the application."},{"lineNumber":14,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"public class ReviewDialogHandle extends StageHandle {"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":""},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"    public static final String REVIEW_DIALOG_WINDOW_TITLE \u003d \"Review Dialog\";"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":""},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"    private final DialogPane dialogPane;"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":""},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"    public ReviewDialogHandle(Stage reviewDialogStage) {"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"        super(reviewDialogStage);"},{"lineNumber":23,"author":{"gitID":"emer7"},"content":""},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"        this.dialogPane \u003d getChildNode(\"#\" + REVIEW_DIALOG_PANE_FIELD_ID);"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":""},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"     * Returns true if a review dialog is currently present in the application."},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"    public static boolean isWindowPresent() {"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"        return new GuiRobot().isWindowShown(REVIEW_DIALOG_WINDOW_TITLE);"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":""},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"    public void setReviewerInputTextField(String value) {"},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"        ReviewerInputHandle reviewerInput \u003d new ReviewerInputHandle(getChildNode(\"#\" + REVIEWER_INPUT_FIELD_ID));"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"        reviewerInput.run(value);"},{"lineNumber":37,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"emer7"},"content":""},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"    public void setReviewInputTextField(String value) {"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"        ReviewInputHandle reviewInput \u003d new ReviewInputHandle(getChildNode(\"#\" + REVIEW_INPUT_FIELD_ID));"},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"        reviewInput.run(value);"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":43}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":"import java.util.LinkedList;"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import java.util.Queue;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import java.util.Timer;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import java.util.TimerTask;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import javafx.beans.value.ChangeListener;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import javafx.beans.value.ObservableValue;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.ui.ShowSuggestionEvent;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.ui.ToggleNotificationCenterEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.AddPhotoCommand;"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.AuthenCommand;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DismissCommand;"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EmailAllCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.ExportEmployeesCommand;"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":40,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":41,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":42,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":44,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.MyCalendarCommand;"},{"lineNumber":45,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.NotiCommand;"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":47,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.ReviewCommand;"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.TestAddEventCommand;"},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.TodoListCommand;"},{"lineNumber":54,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":60,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":61,"author":{"gitID":"-"},"content":" */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"    private static final int DOUBLE_KEY_TOLERANCE \u003d 300;"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"    private static final String[] allCommandsWord \u003d {AddCommand.COMMAND_WORD, EditCommand.COMMAND_WORD,"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"        RateCommand.COMMAND_WORD, ReviewCommand.COMMAND_WORD, SelectCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD,"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"        FindCommand.COMMAND_WORD, TestAddEventCommand.COMMAND_WORD, SortCommand.COMMAND_WORD,"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"        LockCommand.COMMAND_WORD, UnlockCommand.COMMAND_WORD, SetPasswordCommand.COMMAND_WORD,"},{"lineNumber":71,"author":{"gitID":"Yoochard"},"content":"        ChangeThemeCommand.COMMAND_WORD, DeleteEventCommand.COMMAND_WORD, ListCommand.COMMAND_WORD,"},{"lineNumber":72,"author":{"gitID":"Yoochard"},"content":"        HelpCommand.COMMAND_WORD, UndoCommand.COMMAND_WORD, RedoCommand.COMMAND_WORD, HistoryCommand.COMMAND_WORD,"},{"lineNumber":73,"author":{"gitID":"Yoochard"},"content":"        MyCalendarCommand.COMMAND_WORD, TodoListCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD,"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        NotiCommand.COMMAND_WORD, DismissCommand.COMMAND_WORD, AuthenCommand.COMMAND_WORD, AddPhotoCommand.COMMAND_WORD,"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        EmailCommand.COMMAND_WORD, EmailAllCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        ExportEmployeesCommand.COMMAND_WORD};"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"    private static final String[] allCommandsUsage \u003d {AddCommand.MESSAGE_USAGE, EditCommand.MESSAGE_USAGE,"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"        RateCommand.MESSAGE_USAGE, ReviewCommand.MESSAGE_USAGE, SelectCommand.MESSAGE_USAGE,"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"        DeleteCommand.MESSAGE_USAGE, FindCommand.MESSAGE_USAGE, TestAddEventCommand.MESSAGE_USAGE,"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"        SortCommand.MESSAGE_USAGE, LockCommand.MESSAGE_USAGE, UnlockCommand.MESSAGE_USAGE,"},{"lineNumber":82,"author":{"gitID":"Yoochard"},"content":"        SetPasswordCommand.MESSAGE_USAGE, ChangeThemeCommand.MESSAGE_USAGE, DeleteEventCommand.MESSAGE_USAGE,"},{"lineNumber":83,"author":{"gitID":"Yoochard"},"content":"        ListCommand.MESSAGE_USAGE, HelpCommand.MESSAGE_USAGE, UndoCommand.MESSAGE_USAGE, RedoCommand.MESSAGE_USAGE,"},{"lineNumber":84,"author":{"gitID":"Yoochard"},"content":"        HistoryCommand.MESSAGE_USAGE, MyCalendarCommand.MESSAGE_USAGE, TodoListCommand.MESSAGE_USAGE,"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        ClearCommand.MESSAGE_USAGE, NotiCommand.MESSAGE_USAGE, DismissCommand.MESSAGE_USAGE,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        AuthenCommand.MESSAGE_USAGE, AddPhotoCommand.MESSAGE_USAGE, EmailCommand.MESSAGE_USAGE,"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        EmailAllCommand.MESSAGE_USAGE, ExitCommand.MESSAGE_USAGE, ExportEmployeesCommand.MESSAGE_USAGE};"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":"    private Queue\u003cKeyEvent\u003e consecutiveShiftPressed;"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":101,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"        consecutiveShiftPressed \u003d new LinkedList\u003c\u003e();"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":"        commandTextField.textProperty().addListener(new ChangeListener\u003cString\u003e() {"},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"            @Override"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"            public void changed(ObservableValue\u003c? extends String\u003e observable, String oldValue, String newValue) {"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"                raiseSuggestionEventIfMatchesCommandWord(newValue);"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"        });"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"     * Raises a ShowSuggestionEvent if the {@param newValue } matches one of command word."},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"    private void raiseSuggestionEventIfMatchesCommandWord(String newValue) {"},{"lineNumber":118,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":"            newValue \u003d (new Scanner(newValue)).next();"},{"lineNumber":120,"author":{"gitID":"IzHoBX"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":121,"author":{"gitID":"IzHoBX"},"content":"            if (LogicManager.isLocked()) {"},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":"                raise(new ShowSuggestionEvent(ResultDisplay.WELCOME_MESSAGE));"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"            } else {"},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"                raise(new ShowSuggestionEvent(ResultDisplay.SUGGEST_HELP_MESSAGE));"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"            return;"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":"        boolean found \u003d false;"},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":"        for (int i \u003d 0; i \u003c allCommandsWord.length; i++) {"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"            if (newValue.equals(allCommandsWord[i])) {"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"                raise(new ShowSuggestionEvent(allCommandsUsage[i]));"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"                found \u003d true;"},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":"                break;"},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"IzHoBX"},"content":"        if (!found) {"},{"lineNumber":137,"author":{"gitID":"IzHoBX"},"content":"            raise(new ShowSuggestionEvent(\"\"));"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":149,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":159,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":160,"author":{"gitID":"IzHoBX"},"content":"        case SHIFT:"},{"lineNumber":161,"author":{"gitID":"IzHoBX"},"content":"            registerShiftPressed(keyEvent);"},{"lineNumber":162,"author":{"gitID":"IzHoBX"},"content":"            if (consecutiveShiftPressed.size() \u003d\u003d 2) {"},{"lineNumber":163,"author":{"gitID":"IzHoBX"},"content":"                resetWaitForSecondShift();"},{"lineNumber":164,"author":{"gitID":"IzHoBX"},"content":"                raise(new ToggleNotificationCenterEvent());"},{"lineNumber":165,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":166,"author":{"gitID":"IzHoBX"},"content":"            break;"},{"lineNumber":167,"author":{"gitID":"IzHoBX"},"content":"        //@@author"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // let JavaFx handle the keypress"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":174,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"IzHoBX"},"content":"     * Records SHIFT key has been registered and waits for the next SHIFT."},{"lineNumber":176,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"IzHoBX"},"content":"    private void registerShiftPressed(KeyEvent keyEvent) {"},{"lineNumber":178,"author":{"gitID":"IzHoBX"},"content":"        consecutiveShiftPressed.offer(keyEvent);"},{"lineNumber":179,"author":{"gitID":"IzHoBX"},"content":"        Timer timer \u003d new Timer();"},{"lineNumber":180,"author":{"gitID":"IzHoBX"},"content":"        timer.schedule(new TimerTask() {"},{"lineNumber":181,"author":{"gitID":"IzHoBX"},"content":"            @Override"},{"lineNumber":182,"author":{"gitID":"IzHoBX"},"content":"            public void run() {"},{"lineNumber":183,"author":{"gitID":"IzHoBX"},"content":"                resetWaitForSecondShift();"},{"lineNumber":184,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":185,"author":{"gitID":"IzHoBX"},"content":"        }, DOUBLE_KEY_TOLERANCE);"},{"lineNumber":186,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":188,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"IzHoBX"},"content":"     * Stops the wait for the second consecutive SHIFT (for double SHIFT keyEvent) and reset the metadata"},{"lineNumber":190,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"IzHoBX"},"content":"    private void resetWaitForSecondShift() {"},{"lineNumber":192,"author":{"gitID":"IzHoBX"},"content":"        for (KeyEvent ke: consecutiveShiftPressed) {"},{"lineNumber":193,"author":{"gitID":"IzHoBX"},"content":"            ke.consume();"},{"lineNumber":194,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"IzHoBX"},"content":"        consecutiveShiftPressed.clear();"},{"lineNumber":196,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":198,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"-"},"content":""},{"lineNumber":225,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":227,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":228,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":236,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    private void handleCommandInputChanged() {"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":241,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":242,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":246,"author":{"gitID":"Yoochard"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, true));"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":251,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":252,"author":{"gitID":"Yoochard"},"content":"            raise(new NewResultAvailableEvent(e.getMessage(), false));"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":263,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":268,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":274,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":275,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"-"},"content":""},{"lineNumber":283,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":4,"Yoochard":17,"IzHoBX":108,"-":156}},{"path":"src/test/java/guitests/guihandles/DetailPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A handler for the {@code DetailPanel} of the UI."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class DetailPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String BROWSER_ID \u003d \"#browser\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"    public static final String BROWSER_PANEL_ID \u003d \"#detailPanel\";"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"},{"lineNumber":23,"author":{"gitID":"emer7"},"content":""},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"    private final Label nameLabel;"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"    private final Label addressLabel;"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":""},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"    private Label oldNameLabel;"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"    private Label oldAddressLabel;"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"    //@@author"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private boolean isWebViewLoaded \u003d true;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private URL lastRememberedUrl;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public DetailPanelHandle(Node detailPanelNode) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(detailPanelNode);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        WebView webView \u003d getChildNode(BROWSER_ID);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        WebEngine engine \u003d webView.getEngine();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        new GuiRobot().interact(() -\u003e engine.getLoadWorker().stateProperty().addListener((obs, oldState, newState) -\u003e {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            if (newState \u003d\u003d Worker.State.RUNNING) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d false;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                isWebViewLoaded \u003d true;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return WebViewUtil.getLoadedUrl(getChildNode(BROWSER_ID));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Remembers the {@code URL} of the currently loaded page."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void rememberUrl() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        lastRememberedUrl \u003d getLoadedUrl();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Returns true if the current {@code URL} is different from the value remembered by the most recent"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * {@code rememberUrl()} call."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public boolean isUrlChanged() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return !lastRememberedUrl.equals(getLoadedUrl());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public boolean isLoaded() {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return isWebViewLoaded;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":83,"author":{"gitID":"emer7"},"content":"    public String getName() {"},{"lineNumber":84,"author":{"gitID":"emer7"},"content":"        return nameLabel.getText();"},{"lineNumber":85,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"emer7"},"content":""},{"lineNumber":87,"author":{"gitID":"emer7"},"content":"    public String getAddress() {"},{"lineNumber":88,"author":{"gitID":"emer7"},"content":"        return addressLabel.getText();"},{"lineNumber":89,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"emer7"},"content":""},{"lineNumber":91,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"emer7"},"content":"     * Remember the current Person details"},{"lineNumber":93,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"emer7"},"content":"    public void rememberPersonDetail() {"},{"lineNumber":95,"author":{"gitID":"emer7"},"content":"        oldNameLabel \u003d nameLabel;"},{"lineNumber":96,"author":{"gitID":"emer7"},"content":"        oldAddressLabel \u003d addressLabel;"},{"lineNumber":97,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"emer7"},"content":""},{"lineNumber":99,"author":{"gitID":"emer7"},"content":"    public boolean isDetailChanged() {"},{"lineNumber":100,"author":{"gitID":"emer7"},"content":"        return !(oldNameLabel.getText().equals(getName())"},{"lineNumber":101,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 oldAddressLabel.getText().equals(getAddress()));"},{"lineNumber":102,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"emer7"},"content":""},{"lineNumber":104,"author":{"gitID":"emer7"},"content":"    public boolean isFieldsEmpty() {"},{"lineNumber":105,"author":{"gitID":"emer7"},"content":"        return nameLabel.getText().equals(\"\")"},{"lineNumber":106,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 addressLabel.getText().equals(\"\");"},{"lineNumber":107,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"emer7"},"content":"    //@@author"},{"lineNumber":109,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":42,"-":67}},{"path":"src/main/java/seedu/address/ui/MyCalendarView.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import javafx.scene.Scene;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import javafx.stage.Stage;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":" * View the pop-up browser window of user\u0027s calendar."},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"public class MyCalendarView extends Application {"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    private Scene scene;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    public void start(Stage stage) {"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"        stage.setTitle(\"My Calendar\");"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"        CalendarBrowser calendarBrowser \u003d new CalendarBrowser();"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"        scene \u003d new Scene(calendarBrowser, calendarBrowser.computePrefWidth(750),"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"                calendarBrowser.computePrefHeight(600));"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        stage.setScene(scene);"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        stage.show();"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":23}},{"path":"src/test/java/guitests/guihandles/ReviewerInputHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":""},{"lineNumber":3,"author":{"gitID":"emer7"},"content":"package guitests.guihandles;"},{"lineNumber":4,"author":{"gitID":"emer7"},"content":""},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":7,"author":{"gitID":"emer7"},"content":""},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":" * A handle to the {@code ReviewDialog#reviewer} in the GUI."},{"lineNumber":10,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":11,"author":{"gitID":"emer7"},"content":"public class ReviewerInputHandle extends NodeHandle\u003cTextField\u003e {"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":""},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"    public static final String REVIEWER_INPUT_FIELD_ID \u003d \"reviewerInputTextField\";"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":""},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"    public ReviewerInputHandle(TextField reviewerInputNode) {"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":"        super(reviewerInputNode);"},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":""},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"     * Returns the text in the reviewer input box."},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"    public String getInput() {"},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"        return getRootNode().getText();"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":""},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"     * Enters the given value in the text field and presses enter."},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"    public void run(String value) {"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"        click();"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"        guiRobot.interact(() -\u003e getRootNode().setText(value));"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":""},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"        guiRobot.type(KeyCode.ENTER);"},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":36}},{"path":"src/main/java/seedu/address/ui/PasswordDialog.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import javafx.scene.control.ButtonBar;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import javafx.scene.control.ButtonType;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import javafx.scene.control.Dialog;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import javafx.scene.control.PasswordField;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import javafx.scene.layout.Priority;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":" * Pop-up dialog to prompt user to enter unlock password."},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"public class PasswordDialog extends Dialog\u003cString\u003e {"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    private PasswordField passwordField;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    public PasswordDialog() {"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        setTitle(\"Unlock ET\");"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        setHeaderText(\"Please Enter Unlock Password\");"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        setHeight(200.0);"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        setWidth(350.0);"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        ButtonType unlockButton \u003d new ButtonType(\"Unlock\", ButtonBar.ButtonData.OK_DONE);"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        getDialogPane().getButtonTypes().addAll(unlockButton);"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        passwordField \u003d new PasswordField();"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        passwordField.setPromptText(\"password\");"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        passwordField.setMinWidth(350.0);"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        HBox hBox \u003d new HBox();"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        hBox.getChildren().add(passwordField);"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        hBox.setMinHeight(200.0);"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        hBox.setMaxWidth(350.0);"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        HBox.setHgrow(passwordField, Priority.ALWAYS);"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        getDialogPane().setContent(hBox);"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"        Platform.runLater(() -\u003e passwordField.requestFocus());"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        setResultConverter(dialogButton -\u003e {"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"            if (dialogButton \u003d\u003d unlockButton) {"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"                return passwordField.getText();"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"            return null;"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        });"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":51}},{"path":"src/main/java/seedu/address/ui/ReviewDialog.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":""},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"import javafx.geometry.Insets;"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":"import javafx.scene.control.ButtonBar.ButtonData;"},{"lineNumber":11,"author":{"gitID":"emer7"},"content":"import javafx.scene.control.ButtonType;"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"import javafx.scene.control.Dialog;"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":""},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"import javafx.util.Pair;"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.events.logic.ReviewInputEvent;"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":""},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":" * Pop-up dialog to prompt user to enter the review."},{"lineNumber":25,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"public class ReviewDialog {"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":""},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"    public static final String REVIEW_DIALOG_PANE_FIELD_ID \u003d \"reviewDialogPane\";"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":""},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"    private Dialog\u003cPair\u003cString, String\u003e\u003e dialog;"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"    private ButtonType reviewButtonType;"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"    private TextField reviewer;"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"    private TextArea review;"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"    private GridPane grid;"},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"    private Node reviewButton;"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"    private Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":37,"author":{"gitID":"emer7"},"content":""},{"lineNumber":38,"author":{"gitID":"emer7"},"content":"    public ReviewDialog() {"},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"        dialog \u003d new Dialog\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"        dialog.getDialogPane().setId(REVIEW_DIALOG_PANE_FIELD_ID);"},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"        dialog.setTitle(\"Review Dialog\");"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"        dialog.setHeaderText(\"Reviewer must be a valid email address\""},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"                + \"\\n\""},{"lineNumber":44,"author":{"gitID":"emer7"},"content":"                + \"Review accepts any characters and has no length limit.\");"},{"lineNumber":45,"author":{"gitID":"emer7"},"content":""},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"        reviewButtonType \u003d new ButtonType(\"Review\", ButtonData.OK_DONE);"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"        dialog.getDialogPane().getButtonTypes().addAll(reviewButtonType, ButtonType.CANCEL);"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":""},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"        grid \u003d new GridPane();"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":"        grid.setHgap(10);"},{"lineNumber":51,"author":{"gitID":"emer7"},"content":"        grid.setVgap(10);"},{"lineNumber":52,"author":{"gitID":"emer7"},"content":"        grid.setPadding(new Insets(20, 150, 10, 10));"},{"lineNumber":53,"author":{"gitID":"emer7"},"content":""},{"lineNumber":54,"author":{"gitID":"emer7"},"content":"        reviewer \u003d new TextField();"},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"        reviewer.setPromptText(\"Enter your email address here\");"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":"        reviewer.setId(\"reviewerInputTextField\");"},{"lineNumber":57,"author":{"gitID":"emer7"},"content":"        review \u003d new TextArea();"},{"lineNumber":58,"author":{"gitID":"emer7"},"content":"        review.setPromptText(\"Enter your review here\");"},{"lineNumber":59,"author":{"gitID":"emer7"},"content":"        review.setId(\"reviewInputTextField\");"},{"lineNumber":60,"author":{"gitID":"emer7"},"content":""},{"lineNumber":61,"author":{"gitID":"emer7"},"content":"        grid.add(new Label(\"Reviewer:\"), 0, 0);"},{"lineNumber":62,"author":{"gitID":"emer7"},"content":"        grid.add(reviewer, 1, 0);"},{"lineNumber":63,"author":{"gitID":"emer7"},"content":"        grid.add(new Label(\"Review:\"), 0, 1);"},{"lineNumber":64,"author":{"gitID":"emer7"},"content":"        grid.add(review, 1, 1);"},{"lineNumber":65,"author":{"gitID":"emer7"},"content":""},{"lineNumber":66,"author":{"gitID":"emer7"},"content":"        reviewButton \u003d dialog.getDialogPane().lookupButton(reviewButtonType);"},{"lineNumber":67,"author":{"gitID":"emer7"},"content":"        reviewButton.setDisable(true);"},{"lineNumber":68,"author":{"gitID":"emer7"},"content":""},{"lineNumber":69,"author":{"gitID":"emer7"},"content":"        reviewer.textProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":70,"author":{"gitID":"emer7"},"content":"            reviewButton.setDisable(newValue.trim().isEmpty());"},{"lineNumber":71,"author":{"gitID":"emer7"},"content":"        });"},{"lineNumber":72,"author":{"gitID":"emer7"},"content":""},{"lineNumber":73,"author":{"gitID":"emer7"},"content":"        dialog.getDialogPane().setContent(grid);"},{"lineNumber":74,"author":{"gitID":"emer7"},"content":""},{"lineNumber":75,"author":{"gitID":"emer7"},"content":"        Platform.runLater(() -\u003e reviewer.requestFocus());"},{"lineNumber":76,"author":{"gitID":"emer7"},"content":""},{"lineNumber":77,"author":{"gitID":"emer7"},"content":"        dialog.setResultConverter(dialogButton -\u003e {"},{"lineNumber":78,"author":{"gitID":"emer7"},"content":"            if (dialogButton \u003d\u003d reviewButtonType) {"},{"lineNumber":79,"author":{"gitID":"emer7"},"content":"                return new Pair\u003c\u003e(reviewer.getText(), review.getText());"},{"lineNumber":80,"author":{"gitID":"emer7"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"emer7"},"content":"            return null;"},{"lineNumber":82,"author":{"gitID":"emer7"},"content":"        });"},{"lineNumber":83,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"emer7"},"content":""},{"lineNumber":85,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"emer7"},"content":"     * Show the pop-up dialog when called"},{"lineNumber":87,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"emer7"},"content":"    public void show() {"},{"lineNumber":89,"author":{"gitID":"emer7"},"content":"        Optional \u003cPair\u003cString, String\u003e\u003e result \u003d dialog.showAndWait();"},{"lineNumber":90,"author":{"gitID":"emer7"},"content":""},{"lineNumber":91,"author":{"gitID":"emer7"},"content":"        result.ifPresent(input -\u003e {"},{"lineNumber":92,"author":{"gitID":"emer7"},"content":"            EventsCenter.getInstance().post(new ReviewInputEvent(input.getKey(), input.getValue()));"},{"lineNumber":93,"author":{"gitID":"emer7"},"content":"        });"},{"lineNumber":94,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":95}},{"path":"src/main/java/seedu/address/ui/NotificationCenter.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import java.util.LinkedList;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import javafx.geometry.Insets;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":" * Encapsulates all the information and functionalities required for Notification Center."},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"public class NotificationCenter {"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    private static final int NOTIFICATION_CENTER_WIDTH \u003d NotificationCard.NOTIFICATION_CARD_WIDTH"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"            + NotificationCard.NOTIFICATION_CARD_X_OFFSET * 3;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    private static final int NOTIFICATION_CARD_HEIGHT_IN_CENTER \u003d NotificationCard.NOTIFICATION_CARD_HEIGHT;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    private static final int NOTIFICATION_CARD_WIDTH_IN_CENTER \u003d NotificationCard.NOTIFICATION_CARD_WIDTH;"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"    protected LinkedList\u003cjavafx.scene.layout.Region\u003e notificationCards;"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    protected LinkedList\u003cNotificationCard\u003e notificationCardCopy;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    protected HashMap\u003cString, LinkedList\u003cjavafx.scene.layout.Region\u003e\u003e idToCard;"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    private VBox notificationCardsBox;"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    private ScrollPane notificationCenterPlaceHolder;"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCenter() {"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCenter(VBox notificationCardsBox,"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"                              javafx.scene.control.ScrollPane notificationCenterPlaceHolder) {"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        notificationCards \u003d new LinkedList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"        idToCard \u003d new HashMap\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        notificationCards.add(null);"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"        //for 1 based index"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        notificationCardCopy \u003d new LinkedList\u003c\u003e();"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"        notificationCardCopy.add(null);"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"        this.notificationCardsBox \u003d notificationCardsBox;"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"        this.notificationCenterPlaceHolder \u003d notificationCenterPlaceHolder;"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"        setWidth();"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        hideNotificationCenter();"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"        setPadding();"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"    private void hideNotificationCenter() {"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"        notificationCenterPlaceHolder.setTranslateX(NOTIFICATION_CENTER_WIDTH);"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"    private void setWidth() {"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"        notificationCenterPlaceHolder.setMaxWidth(NOTIFICATION_CENTER_WIDTH);"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"        notificationCardsBox.setMaxWidth(NOTIFICATION_CENTER_WIDTH);"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"    private void setPadding() {"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"        notificationCardsBox.setPadding(new Insets(NotificationCard.NOTIFICATION_CARD_Y_OFFSET, 0, 0,"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"                NotificationCard.NOTIFICATION_CARD_X_OFFSET));"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"    public int getWidth() {"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"        return NOTIFICATION_CENTER_WIDTH;"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"    public LinkedList\u003cjavafx.scene.layout.Region\u003e getNotificationCards() {"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        return notificationCards;"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"    public int getTotalUndismmissedNotificationCards() {"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"        return notificationCards.size();"},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"     * Adds a notification to the Notification center"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"    public void add(NotificationCard newNotificationCard) {"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"        NotificationCard forCenter \u003d newNotificationCard.getCopyForCenter();"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"        javafx.scene.layout.Region notificationCard \u003d forCenter.getRoot();"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"        LinkedList\u003cjavafx.scene.layout.Region\u003e cards;"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"        if (idToCard.get(forCenter.getId()) \u003d\u003d null) {"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"            cards \u003d new LinkedList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"        } else {"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"            cards \u003d idToCard.get(forCenter.getId());"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"        cards.add(notificationCard);"},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"        idToCard.put(forCenter.getId(), cards);"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":"        notificationCards.add(notificationCard);"},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":"        notificationCardCopy.add(forCenter);"},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":"        Platform.runLater(new Runnable() {"},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":"            @Override"},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"            public void run() {"},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":"                notificationCardsBox.getChildren().add(notificationCard);"},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"        });"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":"    public ScrollPane getNotificationCenter() {"},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"        return notificationCenterPlaceHolder;"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"     * Deletes all notification records associated with the given eventId"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"    public void deleteNotification(String id) throws NullPointerException {"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":"        if (!idToCard.containsKey(id)) {"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"            return;"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"        for (javafx.scene.layout.Region nc: idToCard.get(id)) {"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"            notificationCardsBox.getChildren().remove(nc);"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"            notificationCards.remove(nc);"},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"        idToCard.remove(id);"},{"lineNumber":118,"author":{"gitID":"IzHoBX"},"content":"        Iterator\u003cNotificationCard\u003e iterator \u003d notificationCardCopy.iterator();"},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":"        iterator.next();"},{"lineNumber":120,"author":{"gitID":"IzHoBX"},"content":"        //to bypass the null at index 0"},{"lineNumber":121,"author":{"gitID":"IzHoBX"},"content":"        int toDecrement \u003d 0;"},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":"        while (iterator.hasNext()) {"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"            NotificationCard curr \u003d iterator.next();"},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"            if (curr.getId().equals(id)) {"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"                iterator.remove();"},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"                toDecrement++;"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"            } else if (toDecrement \u003e 0) {"},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":"                curr.decreaseIndex(toDecrement);"},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":"    public String getIdByIndex(Index index) {"},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"        return notificationCardCopy.get(index.getOneBased()).getId();"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":137,"author":{"gitID":"IzHoBX"},"content":"    public String getOwnerIdByIndex(Index index) {"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"        return notificationCardCopy.get(index.getOneBased()).getOwnerId();"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCard getNotificationCard(Index targetIndex) {"},{"lineNumber":143,"author":{"gitID":"IzHoBX"},"content":"        return notificationCardCopy.get(targetIndex.getOneBased());"},{"lineNumber":144,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":146,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"IzHoBX"},"content":"    * Delete the notification card at the given index"},{"lineNumber":148,"author":{"gitID":"IzHoBX"},"content":"    */"},{"lineNumber":149,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCard deleteNotificationByIndex(Index targetIndex) {"},{"lineNumber":150,"author":{"gitID":"IzHoBX"},"content":"        notificationCardsBox.getChildren().remove(targetIndex.getZeroBased());"},{"lineNumber":151,"author":{"gitID":"IzHoBX"},"content":"        idToCard.remove(notificationCards.get(targetIndex.getOneBased()).getId());"},{"lineNumber":152,"author":{"gitID":"IzHoBX"},"content":"        notificationCards.remove(targetIndex.getOneBased());"},{"lineNumber":153,"author":{"gitID":"IzHoBX"},"content":"        Iterator\u003cNotificationCard\u003e iterator \u003d notificationCardCopy.iterator();"},{"lineNumber":154,"author":{"gitID":"IzHoBX"},"content":"        for (int i \u003d 0; i \u003c notificationCardCopy.size(); i++) {"},{"lineNumber":155,"author":{"gitID":"IzHoBX"},"content":"            if (i \u003c\u003d targetIndex.getOneBased()) {"},{"lineNumber":156,"author":{"gitID":"IzHoBX"},"content":"                iterator.next();"},{"lineNumber":157,"author":{"gitID":"IzHoBX"},"content":"            } else {"},{"lineNumber":158,"author":{"gitID":"IzHoBX"},"content":"                NotificationCard curr \u003d iterator.next();"},{"lineNumber":159,"author":{"gitID":"IzHoBX"},"content":"                curr.decreaseIndex(1);"},{"lineNumber":160,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":161,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"IzHoBX"},"content":"        return notificationCardCopy.remove(targetIndex.getOneBased());"},{"lineNumber":163,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":165,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"IzHoBX"},"content":"     * Removes all notification cards associated with the given ownerId"},{"lineNumber":167,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":168,"author":{"gitID":"IzHoBX"},"content":"    public void removeNotificationForPerson(int targetId) {"},{"lineNumber":169,"author":{"gitID":"IzHoBX"},"content":"        System.out.println(\"TargetId: targetId\");"},{"lineNumber":170,"author":{"gitID":"IzHoBX"},"content":"        int totalRemoved \u003d 0;"},{"lineNumber":171,"author":{"gitID":"IzHoBX"},"content":"        LinkedList\u003cNotificationCard\u003e toDelete \u003d new LinkedList\u003c\u003e();"},{"lineNumber":172,"author":{"gitID":"IzHoBX"},"content":"        for (NotificationCard nc: notificationCardCopy) {"},{"lineNumber":173,"author":{"gitID":"IzHoBX"},"content":"            if (nc !\u003d null \u0026\u0026 nc.getOwnerId().equals(targetId + \"\")) {"},{"lineNumber":174,"author":{"gitID":"IzHoBX"},"content":"                toDelete.add(nc);"},{"lineNumber":175,"author":{"gitID":"IzHoBX"},"content":"                notificationCards.remove(nc.getRoot());"},{"lineNumber":176,"author":{"gitID":"IzHoBX"},"content":"                notificationCardsBox.getChildren().remove(nc.getRoot());"},{"lineNumber":177,"author":{"gitID":"IzHoBX"},"content":"                totalRemoved++;"},{"lineNumber":178,"author":{"gitID":"IzHoBX"},"content":"            } else if (totalRemoved \u003e 0) {"},{"lineNumber":179,"author":{"gitID":"IzHoBX"},"content":"                nc.decreaseIndex(totalRemoved);"},{"lineNumber":180,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":181,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"IzHoBX"},"content":"        for (NotificationCard nc: toDelete) {"},{"lineNumber":183,"author":{"gitID":"IzHoBX"},"content":"            notificationCardCopy.remove(nc);"},{"lineNumber":184,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":186}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import java.awt.AWTException;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import java.awt.SystemTray;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import java.awt.Toolkit;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import java.awt.TrayIcon;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import java.util.LinkedList;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import java.util.Queue;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"import javafx.beans.value.ChangeListener;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"import javafx.beans.value.ObservableValue;"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.logic.AddressBookUnlockedEvent;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.ui.ShowNotificationEvent;"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ShowTodoListEvent;"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.ui.ToggleNotificationCenterEvent;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":42,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":43,"author":{"gitID":"-"},"content":" */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /** Resource folder where FXML files are stored. */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/ET_icon.png\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"    private boolean isWindowMinimized;"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"    private Queue\u003cShowNotificationEvent\u003e delayedNotifications;"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"        isWindowMinimized \u003d false;"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        delayedNotifications \u003d new LinkedList\u003c\u003e();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":79,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"        primaryStage.iconifiedProperty().addListener(new ChangeListener\u003cBoolean\u003e() {"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":"            @Override"},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":"            public void changed(ObservableValue\u003c? extends Boolean\u003e ov, Boolean t, Boolean t1) {"},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":"                System.out.println(\"minimized:\" + t1.booleanValue());"},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"                isWindowMinimized \u003d t1;"},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":"                if (!isWindowMinimized \u0026\u0026 !LogicManager.isLocked()) {"},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":"                    showDelayedNotifications();"},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"                }"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":"        });"},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":"        //@@author"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":132,"author":{"gitID":"Yoochard"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/BrightTheme.css\");"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."},{"lineNumber":154,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        requireNonNull(fxmlFileName);"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        return requireNonNull(fxmlFileUrl);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"crizyli"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":171,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":172,"author":{"gitID":"IzHoBX"},"content":"    @Subscribe"},{"lineNumber":173,"author":{"gitID":"IzHoBX"},"content":"    private void handleShowNotificationEvent(ShowNotificationEvent event) {"},{"lineNumber":174,"author":{"gitID":"IzHoBX"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":175,"author":{"gitID":"IzHoBX"},"content":"        if (LogicManager.isLocked()) {"},{"lineNumber":176,"author":{"gitID":"IzHoBX"},"content":"            delayedNotifications.offer(event);"},{"lineNumber":177,"author":{"gitID":"IzHoBX"},"content":"        } else {"},{"lineNumber":178,"author":{"gitID":"IzHoBX"},"content":"            if (isWindowMinimized) {"},{"lineNumber":179,"author":{"gitID":"IzHoBX"},"content":"                showNotificationOnWindows(event);"},{"lineNumber":180,"author":{"gitID":"IzHoBX"},"content":"                delayedNotifications.offer(event);"},{"lineNumber":181,"author":{"gitID":"IzHoBX"},"content":"            } else {"},{"lineNumber":182,"author":{"gitID":"IzHoBX"},"content":"                showNotificationInApp(event);"},{"lineNumber":183,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":184,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":187,"author":{"gitID":"IzHoBX"},"content":"    @Subscribe"},{"lineNumber":188,"author":{"gitID":"IzHoBX"},"content":"    private void handleToggleNotificationEvent(ToggleNotificationCenterEvent event) {"},{"lineNumber":189,"author":{"gitID":"IzHoBX"},"content":"        if (!LogicManager.isLocked()) {"},{"lineNumber":190,"author":{"gitID":"IzHoBX"},"content":"            mainWindow.toggleNotificationCenter();"},{"lineNumber":191,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":194,"author":{"gitID":"IzHoBX"},"content":"    @Subscribe"},{"lineNumber":195,"author":{"gitID":"IzHoBX"},"content":"    private void handleAddressBookUnlockedEvent(AddressBookUnlockedEvent event) {"},{"lineNumber":196,"author":{"gitID":"IzHoBX"},"content":"        showDelayedNotifications();"},{"lineNumber":197,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":199,"author":{"gitID":"IzHoBX"},"content":"    private void showNotificationInApp(ShowNotificationEvent event) {"},{"lineNumber":200,"author":{"gitID":"IzHoBX"},"content":"        mainWindow.showNewNotification(event);"},{"lineNumber":201,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":203,"author":{"gitID":"IzHoBX"},"content":"    private void showDelayedNotifications() {"},{"lineNumber":204,"author":{"gitID":"IzHoBX"},"content":"        while (!delayedNotifications.isEmpty()) {"},{"lineNumber":205,"author":{"gitID":"IzHoBX"},"content":"            showNotificationInApp(delayedNotifications.poll());"},{"lineNumber":206,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":209,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":210,"author":{"gitID":"IzHoBX"},"content":"     * Shows notification on Windows System Tray"},{"lineNumber":211,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":212,"author":{"gitID":"IzHoBX"},"content":"    private void showNotificationOnWindows(ShowNotificationEvent event) {"},{"lineNumber":213,"author":{"gitID":"IzHoBX"},"content":"        SystemTray tray \u003d SystemTray.getSystemTray();"},{"lineNumber":214,"author":{"gitID":"IzHoBX"},"content":"        java.awt.Image image \u003d Toolkit.getDefaultToolkit().createImage(ICON_APPLICATION);"},{"lineNumber":215,"author":{"gitID":"IzHoBX"},"content":"        TrayIcon trayIcon \u003d new TrayIcon(image, \"E.T. timetable entry ended\");"},{"lineNumber":216,"author":{"gitID":"IzHoBX"},"content":"        trayIcon.setImageAutoSize(true);"},{"lineNumber":217,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":218,"author":{"gitID":"IzHoBX"},"content":"            tray.add(trayIcon);"},{"lineNumber":219,"author":{"gitID":"IzHoBX"},"content":"        } catch (AWTException e) {"},{"lineNumber":220,"author":{"gitID":"IzHoBX"},"content":"            e.printStackTrace();"},{"lineNumber":221,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":223,"author":{"gitID":"IzHoBX"},"content":"        trayIcon.displayMessage(\"Task ended\", event.getOwnerName() + \" has \" + event.getNotification().getTitle()"},{"lineNumber":224,"author":{"gitID":"IzHoBX"},"content":"                + \" ended at \" + event.getNotification().getEndDateDisplay(), TrayIcon.MessageType.INFO);"},{"lineNumber":225,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":226,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":228,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":229,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":230,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":231,"author":{"gitID":"crizyli"},"content":"    private void handleShowTodoListEvent(ShowTodoListEvent event) {"},{"lineNumber":232,"author":{"gitID":"crizyli"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":233,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":234,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":235,"author":{"gitID":"crizyli"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"TodoListWindow.fxml\"));"},{"lineNumber":236,"author":{"gitID":"crizyli"},"content":"            fxmlLoader.setLocation(getFxmlFileUrl(\"TodoListWindow.fxml\"));"},{"lineNumber":237,"author":{"gitID":"crizyli"},"content":"            try {"},{"lineNumber":238,"author":{"gitID":"crizyli"},"content":"                Parent root1 \u003d (Parent) fxmlLoader.load();"},{"lineNumber":239,"author":{"gitID":"crizyli"},"content":"                Stage stage \u003d new Stage();"},{"lineNumber":240,"author":{"gitID":"crizyli"},"content":"                stage.setScene(new Scene(root1));"},{"lineNumber":241,"author":{"gitID":"crizyli"},"content":"                stage.show();"},{"lineNumber":242,"author":{"gitID":"crizyli"},"content":"            } catch (IOException e1) {"},{"lineNumber":243,"author":{"gitID":"crizyli"},"content":"                e1.printStackTrace();"},{"lineNumber":244,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":245,"author":{"gitID":"crizyli"},"content":"        } catch (Exception e2) {"},{"lineNumber":246,"author":{"gitID":"crizyli"},"content":"            System.out.println(e2.getMessage());"},{"lineNumber":247,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":249,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":250,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":26,"Yoochard":2,"IzHoBX":89,"-":133}},{"path":"src/main/java/seedu/address/ui/CalendarBrowser.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import javafx.geometry.HPos;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import javafx.geometry.VPos;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":" * A pop-up browser window of the user\u0027s own calendar"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"class CalendarBrowser extends Region {"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    final WebView browser \u003d new WebView();"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    final WebEngine webEngine \u003d browser.getEngine();"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    public CalendarBrowser() {"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"        webEngine.load(\"https://calendar.google.com\");"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        getChildren().add(browser);"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    protected void layoutChildren() {"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"        double w \u003d getWidth();"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        double h \u003d getHeight();"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        layoutInArea(browser, 0, 0, w, h, 0, HPos.CENTER, VPos.CENTER);"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    protected double computePrefWidth(double height) {"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        return 750;"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    protected double computePrefHeight(double width) {"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        return 600;"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":38}},{"path":"src/main/java/seedu/address/ui/SetPasswordDialog.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import javafx.scene.control.ButtonBar;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import javafx.scene.control.ButtonType;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import javafx.scene.control.Dialog;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import javafx.scene.control.PasswordField;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import javafx.scene.layout.Priority;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":" * Pop-up dialog to prompt user to enter old and new password for SetPasswordCommand."},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"public class SetPasswordDialog extends Dialog\u003cString\u003e {"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    private PasswordField oldPsw;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    private PasswordField newPsw;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    public SetPasswordDialog() {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        setTitle(\"Set New Password\");"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        setHeaderText(\"Please Enter old Password and new password below\");"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"        setHeight(200.0);"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        setWidth(350.0);"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        ButtonType setButton \u003d new ButtonType(\"set\", ButtonBar.ButtonData.OK_DONE);"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        getDialogPane().getButtonTypes().addAll(setButton);"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        oldPsw \u003d new PasswordField();"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        oldPsw.setPromptText(\"old password\");"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        oldPsw.setMinWidth(350.0);"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        newPsw \u003d new PasswordField();"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        newPsw.setPromptText(\"new password\");"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        newPsw.setMinWidth(350.0);"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        HBox hBox \u003d new HBox();"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        hBox.getChildren().addAll(oldPsw, newPsw);"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        hBox.setMinHeight(200.0);"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"        hBox.setMaxWidth(350.0);"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        HBox.setHgrow(newPsw, Priority.ALWAYS);"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        getDialogPane().setContent(hBox);"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        Platform.runLater(() -\u003e newPsw.requestFocus());"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        setResultConverter(dialogButton -\u003e {"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"            if (dialogButton \u003d\u003d setButton) {"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"                String oldp \u003d oldPsw.getText();"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"                String newp \u003d newPsw.getText();"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"                if (oldp.isEmpty() || newp.isEmpty()) {"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"                    return \"incomplete\";"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"                }"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"                String toReturn \u003d oldp.concat(\",\").concat(newp);"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"                return toReturn;"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"            return null;"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"        });"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":62}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":1,"-":81}},{"path":"src/main/java/seedu/address/ui/TodoListWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ShowTodoListDisplayContentEvent;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.listevent.ListEvent;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":" * Controller for to do list window"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"public class TodoListWindow {"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(TodoListWindow.class);"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    private static final String FXML \u003d \"TodoListWindow.fxml\";"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    private ObservableList\u003cListEvent\u003e list \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    private ListView\u003cListEvent\u003e eventList;"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"     * Creates a new TodoListWindow."},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    public TodoListWindow() {"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    public void show() {"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        logger.fine(\"Showing to do list.\");"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"    protected void registerAsAnEventHandler(Object handler) {"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    private void handleShowTodoListDisplayContentEvent(ShowTodoListDisplayContentEvent e) {"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        ArrayList\u003cListEvent\u003e allEvents \u003d e.getListEvent();"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        for (int i \u003d 0; i \u003c allEvents.size(); i++) {"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"            list.add(allEvents.get(i));"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        eventList.setItems(list);"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":56}},{"path":"src/main/java/seedu/address/ui/NotificationCard.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":" * An UI component that displays information of a {@code Notification}."},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"public class NotificationCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    public static final int NOTIFICATION_CARD_X_OFFSET \u003d 15;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    public static final int NOTIFICATION_CARD_Y_OFFSET \u003d 15;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    public static final int NOTIFICATION_CARD_WIDTH \u003d 300 + NOTIFICATION_CARD_X_OFFSET;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    public static final int NOTIFICATION_CARD_HEIGHT \u003d 100 + NOTIFICATION_CARD_Y_OFFSET;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    private static final String FXML \u003d \"NotificationCard.fxml\";"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"    protected boolean isFirstStage;"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    private Label title;"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    private Label index;"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    private Label ownerName;"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    private Label endTime;"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    private VBox xOffset;"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"    private VBox yOffset;"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"    private GridPane content;"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"    private String ownerId;"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    private boolean isForCenter;"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    private String id;"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCard(String title, String displayedIndex, String ownerName, String endTime, String ownerId,"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"                            boolean isFirstStage, String id) {"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"        super(FXML);"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"        this.index.setText(displayedIndex + \". \");"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"        this.title.setText(title);"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"        this.ownerName.setText(ownerName);"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"        this.endTime.setText(endTime);"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"        this.ownerId \u003d ownerId;"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"        xOffset.setMaxWidth(NOTIFICATION_CARD_X_OFFSET);"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"        yOffset.setMaxWidth(NOTIFICATION_CARD_Y_OFFSET);"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"        this.isFirstStage \u003d isFirstStage;"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"        isForCenter \u003d false;"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"        setStyle();"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCard(String title, String displayedIndex, String ownerName, String endTime, String ownerId,"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"                            boolean isFirstStage, boolean isForCenter, String id) {"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"        super(FXML);"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"        this.index.setText(displayedIndex);"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"        this.title.setText(title);"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        this.ownerName.setText(ownerName);"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"        this.endTime.setText(endTime);"},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":"        this.ownerId \u003d ownerId;"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"        xOffset.setMaxWidth(NOTIFICATION_CARD_X_OFFSET);"},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":"        yOffset.setMaxWidth(NOTIFICATION_CARD_Y_OFFSET);"},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"        this.isFirstStage \u003d isFirstStage;"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"        this.isForCenter \u003d isForCenter;"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"        setStyle();"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"        // short circuit if same object"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"            return true;"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"        // instanceof handles nulls"},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"        if (!(other instanceof NotificationCard)) {"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":"            return false;"},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":"        // state check"},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"        NotificationCard card \u003d (NotificationCard) other;"},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":"        return index.getText().equals(card.index.getText())"},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 title.equals(((NotificationCard) other).title)"},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 ownerName.equals(((NotificationCard) other).ownerName)"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 endTime.equals(((NotificationCard) other).endTime);"},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"    public String getOwnerId() {"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":"        return ownerId;"},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"    public String getTitle() {"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"        return title.getText();"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"    public String getIndex() {"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"        return index.getText();"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"    public String getOwnerName() {"},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"        return ownerName.getText();"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":"    public String getEndTime() {"},{"lineNumber":120,"author":{"gitID":"IzHoBX"},"content":"        return endTime.getText();"},{"lineNumber":121,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"    public void setStyle() {"},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"        if (!isForCenter) {"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"            if (isFirstStage) {"},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"                content.getStyleClass().add(\"notification-card-first-stage\");"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"            } else {"},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":"                content.getStyleClass().add(\"notification-card-second-stage\");"},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"        } else {"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"            if (isFirstStage) {"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"                content.getStyleClass().add(\"notification-card-notification-center-first-stage\");"},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":"            } else {"},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"                content.getStyleClass().add(\"notification-card-notification-center-second-stage\");"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":136,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCard getCopyForCenter() {"},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"        return new NotificationCard(this.getTitle(), this.getIndex(), this.getOwnerName(), this.getEndTime(), this"},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":"                .getOwnerId(), isFirstStage, true, id);"},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":144,"author":{"gitID":"IzHoBX"},"content":"    public String getId() {"},{"lineNumber":145,"author":{"gitID":"IzHoBX"},"content":"        return id;"},{"lineNumber":146,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":148,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":149,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":150,"author":{"gitID":"IzHoBX"},"content":"        return \"Title: \" + title.getText() + \" Owner: \" + ownerName.getText();"},{"lineNumber":151,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":153,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"IzHoBX"},"content":"     * Decreases the index displayed on notification card."},{"lineNumber":155,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"IzHoBX"},"content":"    public void decreaseIndex(int i) {"},{"lineNumber":157,"author":{"gitID":"IzHoBX"},"content":"        String currIndex \u003d this.index.getText();"},{"lineNumber":158,"author":{"gitID":"IzHoBX"},"content":"        int j;"},{"lineNumber":159,"author":{"gitID":"IzHoBX"},"content":"        for (j \u003d 0; j \u003c currIndex.length(); j++) {"},{"lineNumber":160,"author":{"gitID":"IzHoBX"},"content":"            if (currIndex.charAt(j) \u003d\u003d \u0027.\u0027) {"},{"lineNumber":161,"author":{"gitID":"IzHoBX"},"content":"                break;"},{"lineNumber":162,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":163,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"IzHoBX"},"content":"        int currIndexNumeric \u003d Integer.parseInt(currIndex.substring(0, j));"},{"lineNumber":165,"author":{"gitID":"IzHoBX"},"content":"        this.index.setText((currIndexNumeric - i) + \". \");"},{"lineNumber":166,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":167}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.ui.ShowSuggestionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    public static final String SUGGESTION_STYLE_CLASS \u003d \"suggestion\";"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    public static final String WELCOME_MESSAGE \u003d \"Welcome to Employee Tracker (ET) ! Please unlock ET to use it! If \""},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"            + \"you need help, please press F1 or use help command!\";"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    public static final String SUGGEST_HELP_MESSAGE \u003d \"If you need help, please press F1 or use help command!\";"},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"        setStyleForSuggestion();"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        Platform.runLater(() -\u003e displayed.setValue(WELCOME_MESSAGE));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        removeStyleForSuggestion();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.message));"},{"lineNumber":50,"author":{"gitID":"Yoochard"},"content":"        if (event.isSuccessful) {"},{"lineNumber":51,"author":{"gitID":"Yoochard"},"content":"            setStyleToIndicateCommandSuccess();"},{"lineNumber":52,"author":{"gitID":"Yoochard"},"content":"        } else {"},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":54,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"    @Subscribe"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"    private void handleShowSuggestionEvent(ShowSuggestionEvent event) {"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"        setStyleForSuggestion();"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.getSuggestion()));"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":65,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":66,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Yoochard"},"content":"     * Sets the {@code ResultDisplay} style to indicate a failed command."},{"lineNumber":68,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"Yoochard"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":70,"author":{"gitID":"Yoochard"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":71,"author":{"gitID":"Yoochard"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":72,"author":{"gitID":"Yoochard"},"content":"            return;"},{"lineNumber":73,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"Yoochard"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":75,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":77,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"Yoochard"},"content":"     * Sets the {@code ResultDisplay} style to use the default style."},{"lineNumber":79,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"Yoochard"},"content":"    private void setStyleToIndicateCommandSuccess() {"},{"lineNumber":81,"author":{"gitID":"Yoochard"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":82,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"     * Sets the {@code ResultDisplay} style to use the suggestion style."},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"    private void setStyleForSuggestion() {"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"        if (!resultDisplay.getStyleClass().contains(SUGGESTION_STYLE_CLASS)) {"},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"            resultDisplay.getStyleClass().add(SUGGESTION_STYLE_CLASS);"},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":"     * Sets the {@code ResultDisplay} style to use the suggestion style."},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":"    private void removeStyleForSuggestion() {"},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":"        resultDisplay.getStyleClass().remove(SUGGESTION_STYLE_CLASS);"},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":29,"IzHoBX":32,"-":40}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import java.net.MalformedURLException;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\"};"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    public final Person person;"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    private HBox cardPane;"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    private Label name;"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"    private Label id;"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"    private Label phone;"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"    private Label email;"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    private Label rating;"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"    private FlowPane tags;"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"    private ImageView photo;"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":54,"author":{"gitID":"Yoochard"},"content":"    //Part of code is referenced to Developer Guide"},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":56,"author":{"gitID":"Yoochard"},"content":"        super(FXML);"},{"lineNumber":57,"author":{"gitID":"Yoochard"},"content":"        this.person \u003d person;"},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":59,"author":{"gitID":"Yoochard"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":60,"author":{"gitID":"Yoochard"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":61,"author":{"gitID":"Yoochard"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":62,"author":{"gitID":"Yoochard"},"content":"        rating.setText(person.getRatingDisplay());"},{"lineNumber":63,"author":{"gitID":"Yoochard"},"content":"        rating.setTextFill(Color.RED);"},{"lineNumber":64,"author":{"gitID":"Yoochard"},"content":"        initTags(person);"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        //@@author crizyli"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        Path currentRelativePath \u003d Paths.get(\"\");"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        String s \u003d currentRelativePath.toAbsolutePath().toString();"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"        File file \u003d new File(\"data/personphoto/\" + person.getPhotoName());"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"        Image image \u003d null;"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"            image \u003d new Image(file.toURI().toURL().toExternalForm(), 88, 88, false, false);"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"        } catch (MalformedURLException e) {"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"        photo.setImage(image);"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"        photo.preserveRatioProperty().set(true);"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"        //@@author"},{"lineNumber":78,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":80,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"Yoochard"},"content":"     * Creates the tag labels for {@code person}."},{"lineNumber":82,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"Yoochard"},"content":"    private void initTags(Person person) {"},{"lineNumber":84,"author":{"gitID":"Yoochard"},"content":"        person.getTags().forEach(tag -\u003e {"},{"lineNumber":85,"author":{"gitID":"Yoochard"},"content":"            Label tagLabel \u003d new Label(tag.tagName);"},{"lineNumber":86,"author":{"gitID":"Yoochard"},"content":"            tagLabel.getStyleClass().add(getTagColorStyleFor(tag.tagName));"},{"lineNumber":87,"author":{"gitID":"Yoochard"},"content":"            tags.getChildren().add(tagLabel);"},{"lineNumber":88,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":89,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":91,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"Yoochard"},"content":"     * Returns the color style for {@code tagName}\u0027s label."},{"lineNumber":93,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"Yoochard"},"content":"    private String getTagColorStyleFor(String tagName) {"},{"lineNumber":95,"author":{"gitID":"Yoochard"},"content":"        // we use the hash code of the tag name to generate a random color, so that the color remain consistent"},{"lineNumber":96,"author":{"gitID":"Yoochard"},"content":"        // between different runs of the program while still making it random enough between tags."},{"lineNumber":97,"author":{"gitID":"Yoochard"},"content":"        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":13,"Yoochard":32,"IzHoBX":52,"-":20}},{"path":"src/main/java/seedu/address/ui/DetailPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.HideDetailPanelEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonEditedEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class DetailPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    //default dummy page."},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    private static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"            \"https://calendar.google.com/calendar/embed?src\u003dck6s71ditb731dfepeporbnfb0@group.calendar\""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"                    + \".google.com\u0026ctz\u003dAsia%2FSingapore\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"DetailPanel.fxml\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String[] TAG_COLOR_STYLES \u003d {\"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\"};"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"    private GridPane detailPanel;"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"emer7"},"content":"    private Label name;"},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"    private Label address;"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"    private FlowPane reviews;"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"    //@@author"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public DetailPanel() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":55,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"        System.setProperty(\"sun.net.http.allowRestrictedHeaders\", \"true\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private void loadPersonPage(Person person) {"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"        loadPage(person.getPersonUrl());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"    public static String getSearchPageUrl() {"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"        return SEARCH_PAGE_URL;"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":87,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":88,"author":{"gitID":"emer7"},"content":"        name \u003d null;"},{"lineNumber":89,"author":{"gitID":"emer7"},"content":"        address \u003d null;"},{"lineNumber":90,"author":{"gitID":"emer7"},"content":"        reviews \u003d null;"},{"lineNumber":91,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"    private void handleHideDetailPanelEvent(HideDetailPanelEvent event) {"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"        name.setText(\"\");"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"        address.setText(\"\");"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"        reviews.getChildren().clear();"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"        loadDefaultPage();"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":108,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":109,"author":{"gitID":"emer7"},"content":"        Person person \u003d event.getNewSelection().person;"},{"lineNumber":110,"author":{"gitID":"emer7"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":111,"author":{"gitID":"emer7"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":112,"author":{"gitID":"emer7"},"content":"        reviews.getChildren().clear();"},{"lineNumber":113,"author":{"gitID":"emer7"},"content":"        person.getReviews().forEach(review -\u003e reviews.getChildren().add(new Label(review.toString())));"},{"lineNumber":114,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        loadPersonPage(event.getNewSelection().person);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":118,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":119,"author":{"gitID":"emer7"},"content":"    @Subscribe"},{"lineNumber":120,"author":{"gitID":"emer7"},"content":"    public void handlePersonEditedEvent(PersonEditedEvent event) {"},{"lineNumber":121,"author":{"gitID":"emer7"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":122,"author":{"gitID":"emer7"},"content":"        Person newPerson \u003d event.getNewPerson();"},{"lineNumber":123,"author":{"gitID":"emer7"},"content":"        name.setText(newPerson.getName().fullName);"},{"lineNumber":124,"author":{"gitID":"emer7"},"content":"        address.setText(newPerson.getAddress().value);"},{"lineNumber":125,"author":{"gitID":"emer7"},"content":"        reviews.getChildren().clear();"},{"lineNumber":126,"author":{"gitID":"emer7"},"content":"        newPerson.getReviews().forEach(review -\u003e reviews.getChildren().add(new Label(review.toString())));"},{"lineNumber":127,"author":{"gitID":"emer7"},"content":"        loadPersonPage(event.getNewPerson());"},{"lineNumber":128,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"emer7"},"content":"    //@@author"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":34,"crizyli":20,"IzHoBX":1,"-":75}},{"path":"src/main/java/seedu/address/commons/core/GuiSettings.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * A Serializable class that contains the GUI settings."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class GuiSettings implements Serializable {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Double windowWidth;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private Double windowHeight;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private Point windowCoordinates;"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"    private String theme;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":"        this.theme \u003d \"bright\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":31,"author":{"gitID":"Yoochard"},"content":"        this.theme \u003d \"bright\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":34,"author":{"gitID":"Yoochard"},"content":"    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition, String theme) {"},{"lineNumber":35,"author":{"gitID":"Yoochard"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":36,"author":{"gitID":"Yoochard"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":37,"author":{"gitID":"Yoochard"},"content":"        this.windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":38,"author":{"gitID":"Yoochard"},"content":"        this.theme \u003d theme;"},{"lineNumber":39,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"Yoochard"},"content":"    //@@author"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Double getWindowWidth() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return windowWidth;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public Double getWindowHeight() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return windowHeight;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return windowCoordinates;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":54,"author":{"gitID":"Yoochard"},"content":"    public String getTheme() {"},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":"        return theme;"},{"lineNumber":56,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Yoochard"},"content":"    //@@author"},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well."},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return Objects.equals(windowWidth, o.windowWidth)"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"},{"lineNumber":73,"author":{"gitID":"Yoochard"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y)"},{"lineNumber":74,"author":{"gitID":"Yoochard"},"content":"                \u0026\u0026 Objects.equals(theme, o.theme);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":79,"author":{"gitID":"Yoochard"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates, theme);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");"},{"lineNumber":87,"author":{"gitID":"Yoochard"},"content":"        sb.append(\"Position : \" + windowCoordinates + \"\\n\");"},{"lineNumber":88,"author":{"gitID":"Yoochard"},"content":"        sb.append(\"Theme : \" + theme);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":22,"-":69}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonEditedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        setConnections(personList);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in employee list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":72,"author":{"gitID":"emer7"},"content":"    @Subscribe"},{"lineNumber":73,"author":{"gitID":"emer7"},"content":"    public void handlePersonEditedEvent(PersonEditedEvent event) {"},{"lineNumber":74,"author":{"gitID":"emer7"},"content":"        scrollTo(event.getIndex());"},{"lineNumber":75,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"emer7"},"content":"    //@@author"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":6,"-":90}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    private static String appTitle \u003d \"ET - Employees Tracker\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The employee index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_INVALID_NOTIFICATION_CARD_INDEX \u003d \"The notification card index provided is \""},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"            + \"invalid. Please refer to index of notification cards in the Notification Center\";"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_INVALID_NOTIFICATION_CARD_INDEX_NON_POSITIVE \u003d \"The notification card index \""},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"            + \"provided is invalid. Indexes must be more than zero, e.g. 1, 2, 3, ...\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d employees listed!\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":4,"-":13}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class StringUtil {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     *       containsWordsIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *       containsWordsIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *       containsWordsIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @param words cannot be null, cannot be empty, must be a single word"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static boolean containsWordsIgnoreCase(String sentence, String words) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        requireNonNull(words);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"        String preppedWords \u003d words.trim();"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"        String[] wordsInPreppedWords \u003d preppedWords.split(\"\\\\s+\");"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"        checkArgument(!preppedWords.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":""},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":""},{"lineNumber":37,"author":{"gitID":"emer7"},"content":"        int howManyMatches \u003d 0;"},{"lineNumber":38,"author":{"gitID":"emer7"},"content":""},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"        for (String wordInWords: wordsInPreppedWords) {"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"            for (String wordInSentence : wordsInPreppedSentence) {"},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"                if (wordInSentence.equalsIgnoreCase(wordInWords)) {"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"                    howManyMatches++;"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"                }"},{"lineNumber":44,"author":{"gitID":"emer7"},"content":"            }"},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":""},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"        return howManyMatches \u003e\u003d wordsInPreppedWords.length;"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        requireNonNull(t);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(s);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":20,"-":58}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"import static seedu.address.logic.commands.ChangeThemeCommand.BRIGHT_THEME_CSS_FILE_NAME;"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":"import static seedu.address.logic.commands.ChangeThemeCommand.DARK_THEME_CSS_FILE_NAME;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.ui.NotificationCard.NOTIFICATION_CARD_HEIGHT;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.ui.NotificationCard.NOTIFICATION_CARD_WIDTH;"},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import java.util.LinkedList;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import java.util.Timer;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import java.util.TimerTask;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import java.util.concurrent.Semaphore;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"import javafx.animation.TranslateTransition;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"import javafx.application.Platform;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"import javafx.scene.Scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"import javafx.stage.FileChooser;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"import javafx.util.Duration;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":35,"author":{"gitID":"Yoochard"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.logic.FileChoosedEvent;"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.logic.PasswordEnteredEvent;"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.logic.SetPasswordEnteredEvent;"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.model.RequestForNotificationCenterEvent;"},{"lineNumber":42,"author":{"gitID":"Yoochard"},"content":"import seedu.address.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ShowFileChooserEvent;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ShowMyCalendarEvent;"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.ui.ShowNotificationEvent;"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ShowPasswordFieldEvent;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowReviewDialogEvent;"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ShowSetPasswordDialogEvent;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":56,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":57,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":58,"author":{"gitID":"-"},"content":" */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"    private static final int ENTER \u003d -1;"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"    private static final int EXIT \u003d 1;"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"    private static final int DOWN \u003d 1;"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":"    private static final int UP \u003d -1;"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"    private static final int NOTIFICATION_PANEL_WIDTH \u003d 330;"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"    private static final int NOTIFICATION_CARD_SHOW_TIME \u003d 5000;"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"    private static final int SHOW \u003d 1;"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"    private static final int HIDE \u003d 0;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private DetailPanel detailPanel;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"    private LinkedList\u003cRegion\u003e shownNotificationCards;"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"    private NotificationCenter notificationCenter;"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"    private int notificationCenterStatus;"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"    private Semaphore semaphore;"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":"    private StackPane mainStage;"},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"    private ScrollPane notificationCenterPlaceHolder;"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"    @FXML"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"    private VBox notificationCardsBox;"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"        shownNotificationCards \u003d new LinkedList\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":"        notificationCenter \u003d new NotificationCenter(notificationCardsBox, notificationCenterPlaceHolder);"},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"        logic.setNotificationCenter(notificationCenter);"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"        mainStage.getChildren().remove(notificationCenterPlaceHolder);"},{"lineNumber":136,"author":{"gitID":"IzHoBX"},"content":"        notificationCenterStatus \u003d HIDE;"},{"lineNumber":137,"author":{"gitID":"IzHoBX"},"content":"        semaphore \u003d new Semaphore(1);"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":"        return primaryStage;"},{"lineNumber":143,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":145,"author":{"gitID":"IzHoBX"},"content":"    private void setAccelerators() {"},{"lineNumber":146,"author":{"gitID":"IzHoBX"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":147,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":149,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"IzHoBX"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":151,"author":{"gitID":"IzHoBX"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":152,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"IzHoBX"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":154,"author":{"gitID":"IzHoBX"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":155,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":156,"author":{"gitID":"IzHoBX"},"content":"        /*"},{"lineNumber":157,"author":{"gitID":"IzHoBX"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":158,"author":{"gitID":"IzHoBX"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":159,"author":{"gitID":"IzHoBX"},"content":"         * is fixed in later version of SDK."},{"lineNumber":160,"author":{"gitID":"IzHoBX"},"content":"         *"},{"lineNumber":161,"author":{"gitID":"IzHoBX"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":162,"author":{"gitID":"IzHoBX"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":163,"author":{"gitID":"IzHoBX"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":164,"author":{"gitID":"IzHoBX"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":165,"author":{"gitID":"IzHoBX"},"content":"         * the TextInputControl(s)."},{"lineNumber":166,"author":{"gitID":"IzHoBX"},"content":"         *"},{"lineNumber":167,"author":{"gitID":"IzHoBX"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":168,"author":{"gitID":"IzHoBX"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":169,"author":{"gitID":"IzHoBX"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":170,"author":{"gitID":"IzHoBX"},"content":"         */"},{"lineNumber":171,"author":{"gitID":"IzHoBX"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":172,"author":{"gitID":"IzHoBX"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":173,"author":{"gitID":"IzHoBX"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":174,"author":{"gitID":"IzHoBX"},"content":"                event.consume();"},{"lineNumber":175,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":176,"author":{"gitID":"IzHoBX"},"content":"        });"},{"lineNumber":177,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":179,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"IzHoBX"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":181,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"IzHoBX"},"content":"    void fillInnerParts() {"},{"lineNumber":183,"author":{"gitID":"IzHoBX"},"content":"        detailPanel \u003d new DetailPanel();"},{"lineNumber":184,"author":{"gitID":"IzHoBX"},"content":"        browserPlaceholder.getChildren().add(detailPanel.getRoot());"},{"lineNumber":185,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":186,"author":{"gitID":"IzHoBX"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":187,"author":{"gitID":"IzHoBX"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":188,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":189,"author":{"gitID":"IzHoBX"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":190,"author":{"gitID":"IzHoBX"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":191,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":192,"author":{"gitID":"IzHoBX"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":193,"author":{"gitID":"IzHoBX"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":194,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":195,"author":{"gitID":"IzHoBX"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":196,"author":{"gitID":"IzHoBX"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":197,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":199,"author":{"gitID":"IzHoBX"},"content":"    void hide() {"},{"lineNumber":200,"author":{"gitID":"IzHoBX"},"content":"        primaryStage.hide();"},{"lineNumber":201,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":203,"author":{"gitID":"IzHoBX"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":204,"author":{"gitID":"IzHoBX"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":205,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":207,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"IzHoBX"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":209,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"IzHoBX"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":211,"author":{"gitID":"IzHoBX"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":212,"author":{"gitID":"IzHoBX"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":213,"author":{"gitID":"IzHoBX"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":214,"author":{"gitID":"IzHoBX"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":215,"author":{"gitID":"IzHoBX"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":216,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":219,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":220,"author":{"gitID":"IzHoBX"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":221,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"IzHoBX"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":223,"author":{"gitID":"IzHoBX"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":224,"author":{"gitID":"IzHoBX"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY(), Theme.getTheme());"},{"lineNumber":225,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":227,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":228,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"crizyli"},"content":"     * Opens calendar web page window."},{"lineNumber":230,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"crizyli"},"content":"    public void handleShowMyCalendar() {"},{"lineNumber":232,"author":{"gitID":"crizyli"},"content":"        MyCalendarView myCalendarView \u003d new MyCalendarView();"},{"lineNumber":233,"author":{"gitID":"crizyli"},"content":"        myCalendarView.start(new Stage());"},{"lineNumber":234,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":236,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":239,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":245,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":246,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":247,"author":{"gitID":"Yoochard"},"content":"    @FXML"},{"lineNumber":248,"author":{"gitID":"Yoochard"},"content":"    private void handleChangeDarkTheme() {"},{"lineNumber":249,"author":{"gitID":"Yoochard"},"content":"        EventsCenter.getInstance().post(new ChangeThemeEvent(\"dark\"));"},{"lineNumber":250,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":252,"author":{"gitID":"Yoochard"},"content":"    @FXML"},{"lineNumber":253,"author":{"gitID":"Yoochard"},"content":"    private void handleChangeBrightTheme() {"},{"lineNumber":254,"author":{"gitID":"Yoochard"},"content":"        EventsCenter.getInstance().post(new ChangeThemeEvent(\"bright\"));"},{"lineNumber":255,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":257,"author":{"gitID":"Yoochard"},"content":"    void show() {"},{"lineNumber":258,"author":{"gitID":"Yoochard"},"content":"        primaryStage.show();"},{"lineNumber":259,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":261,"author":{"gitID":"Yoochard"},"content":"    //@@author"},{"lineNumber":262,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":264,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":265,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        detailPanel.freeResources();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":280,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":281,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":283,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":284,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":285,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":286,"author":{"gitID":"crizyli"},"content":"    private void handleShowMyCalendarEvent(ShowMyCalendarEvent event) {"},{"lineNumber":287,"author":{"gitID":"crizyli"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":288,"author":{"gitID":"crizyli"},"content":"        handleShowMyCalendar();"},{"lineNumber":289,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":290,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":291,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":292,"author":{"gitID":"Yoochard"},"content":"    @Subscribe"},{"lineNumber":293,"author":{"gitID":"Yoochard"},"content":"    private void handleChangeThemeEvent (ChangeThemeEvent changeThemeEvent) {"},{"lineNumber":294,"author":{"gitID":"Yoochard"},"content":"        Scene scene \u003d primaryStage.getScene();"},{"lineNumber":295,"author":{"gitID":"Yoochard"},"content":"        // Clear the original theme"},{"lineNumber":296,"author":{"gitID":"Yoochard"},"content":"        scene.getStylesheets().clear();"},{"lineNumber":297,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":298,"author":{"gitID":"Yoochard"},"content":"        String newTheme \u003d changeThemeEvent.getTheme();"},{"lineNumber":299,"author":{"gitID":"Yoochard"},"content":"        String cssFileName \u003d null;"},{"lineNumber":300,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":301,"author":{"gitID":"Yoochard"},"content":"        // Get the associate CSS file path for theme"},{"lineNumber":302,"author":{"gitID":"Yoochard"},"content":"        switch (newTheme) {"},{"lineNumber":303,"author":{"gitID":"Yoochard"},"content":"        case \"dark\":"},{"lineNumber":304,"author":{"gitID":"Yoochard"},"content":"            cssFileName \u003d DARK_THEME_CSS_FILE_NAME;"},{"lineNumber":305,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":306,"author":{"gitID":"Yoochard"},"content":"        case \"bright\":"},{"lineNumber":307,"author":{"gitID":"Yoochard"},"content":"            cssFileName \u003d BRIGHT_THEME_CSS_FILE_NAME;"},{"lineNumber":308,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":309,"author":{"gitID":"Yoochard"},"content":"        default:"},{"lineNumber":310,"author":{"gitID":"Yoochard"},"content":"            cssFileName \u003d BRIGHT_THEME_CSS_FILE_NAME;"},{"lineNumber":311,"author":{"gitID":"Yoochard"},"content":"            //Theme.changeTheme(primaryStage, changeThemeEvent.getTheme());"},{"lineNumber":312,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":313,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":314,"author":{"gitID":"Yoochard"},"content":"        scene.getStylesheets().add(cssFileName);"},{"lineNumber":315,"author":{"gitID":"Yoochard"},"content":"        primaryStage.setScene(scene);"},{"lineNumber":316,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":318,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":319,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":320,"author":{"gitID":"IzHoBX"},"content":"     * Show in-app notification"},{"lineNumber":321,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":322,"author":{"gitID":"IzHoBX"},"content":"    public void showNewNotification(ShowNotificationEvent event) {"},{"lineNumber":323,"author":{"gitID":"IzHoBX"},"content":"        logger.info(\"Preparing in app notification\");"},{"lineNumber":324,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":325,"author":{"gitID":"IzHoBX"},"content":"        //metadata update"},{"lineNumber":326,"author":{"gitID":"IzHoBX"},"content":"        NotificationCard x \u003d new NotificationCard(event.getNotification().getTitle(),"},{"lineNumber":327,"author":{"gitID":"IzHoBX"},"content":"                notificationCenter.getTotalUndismmissedNotificationCards() + \"\","},{"lineNumber":328,"author":{"gitID":"IzHoBX"},"content":"                event.getOwnerName(),"},{"lineNumber":329,"author":{"gitID":"IzHoBX"},"content":"                event.getNotification().getEndDateDisplay(),"},{"lineNumber":330,"author":{"gitID":"IzHoBX"},"content":"                event.getNotification().getOwnerId(), event.isFirstSatge(), event.getNotification().getEventId());"},{"lineNumber":331,"author":{"gitID":"IzHoBX"},"content":"        Region notificationCard \u003d x.getRoot();"},{"lineNumber":332,"author":{"gitID":"IzHoBX"},"content":"        notificationCard.setMaxHeight(NOTIFICATION_CARD_HEIGHT);"},{"lineNumber":333,"author":{"gitID":"IzHoBX"},"content":"        notificationCard.setMaxWidth(NOTIFICATION_CARD_WIDTH);"},{"lineNumber":334,"author":{"gitID":"IzHoBX"},"content":"        notificationCenter.add(x);"},{"lineNumber":335,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":336,"author":{"gitID":"IzHoBX"},"content":"        //hides notificationCard away from screen"},{"lineNumber":337,"author":{"gitID":"IzHoBX"},"content":"        notificationCard.setTranslateX(NOTIFICATION_CARD_WIDTH);"},{"lineNumber":338,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":339,"author":{"gitID":"IzHoBX"},"content":"            semaphore.acquire();"},{"lineNumber":340,"author":{"gitID":"IzHoBX"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":341,"author":{"gitID":"IzHoBX"},"content":"            e.printStackTrace();"},{"lineNumber":342,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":343,"author":{"gitID":"IzHoBX"},"content":"        notificationCard.setTranslateY(UP * shownNotificationCards.size() * NOTIFICATION_CARD_HEIGHT);"},{"lineNumber":344,"author":{"gitID":"IzHoBX"},"content":"        shownNotificationCards.add(notificationCard);"},{"lineNumber":345,"author":{"gitID":"IzHoBX"},"content":"        semaphore.release();"},{"lineNumber":346,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":347,"author":{"gitID":"IzHoBX"},"content":"        //enter animation"},{"lineNumber":348,"author":{"gitID":"IzHoBX"},"content":"        Platform.runLater(new Runnable() {"},{"lineNumber":349,"author":{"gitID":"IzHoBX"},"content":"            @Override"},{"lineNumber":350,"author":{"gitID":"IzHoBX"},"content":"            public void run() {"},{"lineNumber":351,"author":{"gitID":"IzHoBX"},"content":"                mainStage.getChildren().add(notificationCard);"},{"lineNumber":352,"author":{"gitID":"IzHoBX"},"content":"                animateHorizontally(notificationCard, NOTIFICATION_CARD_WIDTH, ENTER);"},{"lineNumber":353,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":354,"author":{"gitID":"IzHoBX"},"content":"                Timer timer \u003d new Timer();"},{"lineNumber":355,"author":{"gitID":"IzHoBX"},"content":"                TimerTask timerTask \u003d new TimerTask() {"},{"lineNumber":356,"author":{"gitID":"IzHoBX"},"content":"                    @Override"},{"lineNumber":357,"author":{"gitID":"IzHoBX"},"content":"                    public void run() {"},{"lineNumber":358,"author":{"gitID":"IzHoBX"},"content":"                        //it should be the first notification card to exit first"},{"lineNumber":359,"author":{"gitID":"IzHoBX"},"content":"                        try {"},{"lineNumber":360,"author":{"gitID":"IzHoBX"},"content":"                            semaphore.acquire();"},{"lineNumber":361,"author":{"gitID":"IzHoBX"},"content":"                        } catch (InterruptedException e) {"},{"lineNumber":362,"author":{"gitID":"IzHoBX"},"content":"                            e.printStackTrace();"},{"lineNumber":363,"author":{"gitID":"IzHoBX"},"content":"                        }"},{"lineNumber":364,"author":{"gitID":"IzHoBX"},"content":"                        Region firstNotificationCard \u003d shownNotificationCards.removeFirst();"},{"lineNumber":365,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":366,"author":{"gitID":"IzHoBX"},"content":"                        //cards are reused later in notification center"},{"lineNumber":367,"author":{"gitID":"IzHoBX"},"content":"                        animateHorizontally(firstNotificationCard, NOTIFICATION_CARD_WIDTH, EXIT);"},{"lineNumber":368,"author":{"gitID":"IzHoBX"},"content":"                        moveAllNotificationCardsDown();"},{"lineNumber":369,"author":{"gitID":"IzHoBX"},"content":"                        semaphore.release();"},{"lineNumber":370,"author":{"gitID":"IzHoBX"},"content":"                    }"},{"lineNumber":371,"author":{"gitID":"IzHoBX"},"content":"                };"},{"lineNumber":372,"author":{"gitID":"IzHoBX"},"content":"                timer.schedule(timerTask, NOTIFICATION_CARD_SHOW_TIME);"},{"lineNumber":373,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":374,"author":{"gitID":"IzHoBX"},"content":"        });"},{"lineNumber":375,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":376,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":377,"author":{"gitID":"IzHoBX"},"content":"    private void moveAllNotificationCardsDown() {"},{"lineNumber":378,"author":{"gitID":"IzHoBX"},"content":"        for (Region r: shownNotificationCards) {"},{"lineNumber":379,"author":{"gitID":"IzHoBX"},"content":"            animateVertically(r, NOTIFICATION_CARD_HEIGHT, DOWN);"},{"lineNumber":380,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":381,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":382,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":383,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":384,"author":{"gitID":"IzHoBX"},"content":"     * Animates any Region object vertically according to predefined style."},{"lineNumber":385,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":386,"author":{"gitID":"IzHoBX"},"content":"    private void animateVertically(Region r, int distanceToMove, int direction) {"},{"lineNumber":387,"author":{"gitID":"IzHoBX"},"content":"        TranslateTransition enterAnimation \u003d new TranslateTransition(Duration.millis(250), r);"},{"lineNumber":388,"author":{"gitID":"IzHoBX"},"content":"        enterAnimation.setByY(direction * 0.25 * distanceToMove);"},{"lineNumber":389,"author":{"gitID":"IzHoBX"},"content":"        enterAnimation.play();"},{"lineNumber":390,"author":{"gitID":"IzHoBX"},"content":"        TranslateTransition enterAnimation1 \u003d new TranslateTransition(Duration.millis(250), r);"},{"lineNumber":391,"author":{"gitID":"IzHoBX"},"content":"        enterAnimation1.setByY(direction * 0.75 * distanceToMove);"},{"lineNumber":392,"author":{"gitID":"IzHoBX"},"content":"        enterAnimation1.play();"},{"lineNumber":393,"author":{"gitID":"IzHoBX"},"content":"        TranslateTransition enterAnimation2 \u003d new TranslateTransition(Duration.millis(250), r);"},{"lineNumber":394,"author":{"gitID":"IzHoBX"},"content":"        enterAnimation2.setByY(direction * distanceToMove);"},{"lineNumber":395,"author":{"gitID":"IzHoBX"},"content":"        enterAnimation2.play();"},{"lineNumber":396,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":397,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":398,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":399,"author":{"gitID":"IzHoBX"},"content":"     * Animates any Region object horizontally according to predefined style."},{"lineNumber":400,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":401,"author":{"gitID":"IzHoBX"},"content":"    private void animateHorizontally(Region component, double width, int direction) {"},{"lineNumber":402,"author":{"gitID":"IzHoBX"},"content":"        TranslateTransition enterAnimation \u003d new TranslateTransition(Duration.millis(250), component);"},{"lineNumber":403,"author":{"gitID":"IzHoBX"},"content":"        enterAnimation.setByX(direction * 0.25 * width);"},{"lineNumber":404,"author":{"gitID":"IzHoBX"},"content":"        enterAnimation.play();"},{"lineNumber":405,"author":{"gitID":"IzHoBX"},"content":"        TranslateTransition enterAnimation1 \u003d new TranslateTransition(Duration.millis(250), component);"},{"lineNumber":406,"author":{"gitID":"IzHoBX"},"content":"        enterAnimation1.setByX(direction * 0.75 * width);"},{"lineNumber":407,"author":{"gitID":"IzHoBX"},"content":"        enterAnimation1.play();"},{"lineNumber":408,"author":{"gitID":"IzHoBX"},"content":"        TranslateTransition enterAnimation2 \u003d new TranslateTransition(Duration.millis(250), component);"},{"lineNumber":409,"author":{"gitID":"IzHoBX"},"content":"        enterAnimation2.setByX(direction * width);"},{"lineNumber":410,"author":{"gitID":"IzHoBX"},"content":"        enterAnimation2.play();"},{"lineNumber":411,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":412,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":413,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":414,"author":{"gitID":"IzHoBX"},"content":"     * Show the notification panel with an animation"},{"lineNumber":415,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":416,"author":{"gitID":"IzHoBX"},"content":"    public void toggleNotificationCenter() {"},{"lineNumber":417,"author":{"gitID":"IzHoBX"},"content":"        if (notificationCenterStatus \u003d\u003d SHOW) {"},{"lineNumber":418,"author":{"gitID":"IzHoBX"},"content":"            animateHorizontally(notificationCenterPlaceHolder, NOTIFICATION_PANEL_WIDTH, EXIT);"},{"lineNumber":419,"author":{"gitID":"IzHoBX"},"content":"            mainStage.getChildren().remove(notificationCenterPlaceHolder);"},{"lineNumber":420,"author":{"gitID":"IzHoBX"},"content":"            notificationCenterStatus \u003d HIDE;"},{"lineNumber":421,"author":{"gitID":"IzHoBX"},"content":"        } else { //shows"},{"lineNumber":422,"author":{"gitID":"IzHoBX"},"content":"            assert(notificationCenterStatus \u003d\u003d HIDE);"},{"lineNumber":423,"author":{"gitID":"IzHoBX"},"content":"            notificationCenterPlaceHolder \u003d notificationCenter.getNotificationCenter();"},{"lineNumber":424,"author":{"gitID":"IzHoBX"},"content":"            mainStage.getChildren().add(notificationCenterPlaceHolder);"},{"lineNumber":425,"author":{"gitID":"IzHoBX"},"content":"            animateHorizontally(notificationCenterPlaceHolder, NOTIFICATION_PANEL_WIDTH, ENTER);"},{"lineNumber":426,"author":{"gitID":"IzHoBX"},"content":"            notificationCenterStatus \u003d SHOW;"},{"lineNumber":427,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":428,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":429,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":430,"author":{"gitID":"IzHoBX"},"content":"    public void deleteNotificationCard(String id) {"},{"lineNumber":431,"author":{"gitID":"IzHoBX"},"content":"        notificationCenter.deleteNotification(id);"},{"lineNumber":432,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":433,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":434,"author":{"gitID":"IzHoBX"},"content":"    @Subscribe"},{"lineNumber":435,"author":{"gitID":"IzHoBX"},"content":"    protected void provideNotificationCenter(RequestForNotificationCenterEvent event) {"},{"lineNumber":436,"author":{"gitID":"IzHoBX"},"content":"        logic.setNotificationCenter(notificationCenter);"},{"lineNumber":437,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":438,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":439,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":440,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":441,"author":{"gitID":"emer7"},"content":"    @Subscribe"},{"lineNumber":442,"author":{"gitID":"emer7"},"content":"    private void showReviewDialog(ShowReviewDialogEvent event) {"},{"lineNumber":443,"author":{"gitID":"emer7"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":444,"author":{"gitID":"emer7"},"content":"        ReviewDialog reviewDialog \u003d new ReviewDialog();"},{"lineNumber":445,"author":{"gitID":"emer7"},"content":"        reviewDialog.show();"},{"lineNumber":446,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":447,"author":{"gitID":"emer7"},"content":""},{"lineNumber":448,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":449,"author":{"gitID":"crizyli"},"content":"    @FXML"},{"lineNumber":450,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":451,"author":{"gitID":"crizyli"},"content":"    protected void showFileChooser(ShowFileChooserEvent event) {"},{"lineNumber":452,"author":{"gitID":"crizyli"},"content":"        FileChooser chooser \u003d new FileChooser();"},{"lineNumber":453,"author":{"gitID":"crizyli"},"content":"        chooser.setTitle(\"Choose a Photo\");"},{"lineNumber":454,"author":{"gitID":"crizyli"},"content":"        File file \u003d chooser.showOpenDialog(new Stage());"},{"lineNumber":455,"author":{"gitID":"crizyli"},"content":"        String filePath;"},{"lineNumber":456,"author":{"gitID":"crizyli"},"content":"        if (file !\u003d null) {"},{"lineNumber":457,"author":{"gitID":"crizyli"},"content":"            filePath \u003d file.getPath();"},{"lineNumber":458,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":459,"author":{"gitID":"crizyli"},"content":"            filePath \u003d \"NoFileChoosed\";"},{"lineNumber":460,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":461,"author":{"gitID":"crizyli"},"content":"        raise(new FileChoosedEvent(filePath));"},{"lineNumber":462,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":463,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":464,"author":{"gitID":"crizyli"},"content":"    @FXML"},{"lineNumber":465,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":466,"author":{"gitID":"crizyli"},"content":"    protected void handleShowPasswordFieldEvent(ShowPasswordFieldEvent event) {"},{"lineNumber":467,"author":{"gitID":"crizyli"},"content":"        PasswordDialog passwordDialog \u003d new PasswordDialog();"},{"lineNumber":468,"author":{"gitID":"crizyli"},"content":"        Optional\u003cString\u003e input \u003d passwordDialog.showAndWait();"},{"lineNumber":469,"author":{"gitID":"crizyli"},"content":"        if (input.isPresent()) {"},{"lineNumber":470,"author":{"gitID":"crizyli"},"content":"            raise(new PasswordEnteredEvent(input.get()));"},{"lineNumber":471,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":472,"author":{"gitID":"crizyli"},"content":"            raise(new PasswordEnteredEvent(\"nopassword\"));"},{"lineNumber":473,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":474,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":475,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":476,"author":{"gitID":"crizyli"},"content":"    @FXML"},{"lineNumber":477,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":478,"author":{"gitID":"crizyli"},"content":"    protected void handleShowSetPasswordDialogEvent(ShowSetPasswordDialogEvent event) {"},{"lineNumber":479,"author":{"gitID":"crizyli"},"content":"        SetPasswordDialog setPasswordDialog \u003d new SetPasswordDialog();"},{"lineNumber":480,"author":{"gitID":"crizyli"},"content":"        Optional\u003cString\u003e input \u003d setPasswordDialog.showAndWait();"},{"lineNumber":481,"author":{"gitID":"crizyli"},"content":"        if (input.isPresent() \u0026\u0026 !input.get().equals(\"incomplete\")) {"},{"lineNumber":482,"author":{"gitID":"crizyli"},"content":"            raise(new SetPasswordEnteredEvent(input.get()));"},{"lineNumber":483,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":484,"author":{"gitID":"crizyli"},"content":"            raise(new SetPasswordEnteredEvent(\"incomplete\"));"},{"lineNumber":485,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":486,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":487,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":488,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":8,"crizyli":68,"Yoochard":50,"IzHoBX":258,"-":104}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowNotificationEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" * This event is raised when we need to display notification in Windows 10 notification tray"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"public class ShowNotificationEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    private String ownerName;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    private Notification notification;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    private boolean isFirstSatge;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    public ShowNotificationEvent(String ownerName, Notification notification) {"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"        this.ownerName \u003d ownerName;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"        this.notification \u003d notification;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"        isFirstSatge \u003d false;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    public ShowNotificationEvent(String ownerName, Notification notification, boolean isFirstSatge) {"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"        this.ownerName \u003d ownerName;"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"        this.notification \u003d notification;"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"        this.isFirstSatge \u003d isFirstSatge;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    public String getOwnerName() {"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"        return ownerName;"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    public Notification getNotification() {"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        return notification;"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        return \"ShowNotificationEvent: \" + notification.toString();"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    public boolean isFirstSatge() {"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        return isFirstSatge;"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":43}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowReviewDialogEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":""},{"lineNumber":6,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"emer7"},"content":" * An event requesting to show the review dialog."},{"lineNumber":8,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"public class ShowReviewDialogEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":""},{"lineNumber":11,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"emer7"},"content":""},{"lineNumber":16,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":16}},{"path":"src/main/java/seedu/address/commons/events/ui/ToggleNotificationCenterEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * Indicates the request to toggle Notification Center"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"public class ToggleNotificationCenterEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    public ToggleNotificationCenterEvent() {"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"        super();"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"        return \"Toggling Notification Center\";"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":18}},{"path":"src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"//@@author Yoochard"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":" * Indicates that a new result is available."},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":"    public final String message;"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"    public final boolean isSuccessful;"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"    public NewResultAvailableEvent(String message, boolean isSuccessful) {"},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":"        this.message \u003d message;"},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"        this.isSuccessful \u003d isSuccessful;"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":23,"-":2}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowFileChooserEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" * An event requesting to show the file chooser."},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class ShowFileChooserEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":15}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowTodoListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import seedu.address.ui.TodoListWindow;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" * An event requesting to show to do list window."},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class ShowTodoListEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    private TodoListWindow todoListWindow;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    public ShowTodoListEvent() {"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    public TodoListWindow getTodoListWindow() {"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        return this.todoListWindow;"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":25}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowSetPasswordDialogEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" * An event requesting to show the set password dialog."},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class ShowSetPasswordDialogEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":14}},{"path":"src/main/java/seedu/address/commons/events/ui/HideDetailPanelEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" * Represents an event to free resources in Browser Panel"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class HideDetailPanelEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    public HideDetailPanelEvent() { }"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":17}},{"path":"src/main/java/seedu/address/commons/events/ui/PersonEditedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":""},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":" * Represents a person edited change"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":"public class PersonEditedEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"emer7"},"content":""},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"    private final int index;"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"    private final Person newPerson;"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":""},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"    public PersonEditedEvent(int index, Person newPerson) {"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":"        this.index \u003d index;"},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"        this.newPerson \u003d newPerson;"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":""},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":""},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"    public Person getNewPerson() {"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"        return newPerson;"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":""},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"    public int getIndex() {"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"        return index;"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":32}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowMyCalendarEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" * An event requesting to view my calendar page."},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class ShowMyCalendarEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":15}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowTodoListDisplayContentEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.listevent.ListEvent;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":" * Indicates a request to load calendar events to to do list window."},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"public class ShowTodoListDisplayContentEvent extends BaseEvent {"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    private final ArrayList\u003cListEvent\u003e eventList;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    public ShowTodoListDisplayContentEvent(ArrayList\u003cListEvent\u003e eventList) {"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"        this.eventList \u003d eventList;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    public ArrayList\u003cListEvent\u003e getListEvent() {"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        return this.eventList;"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":27}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowPasswordFieldEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" * An event requesting to show the password input dialog."},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class ShowPasswordFieldEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":14}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowSuggestionEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * Indicates a new suggestion is available."},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"public class ShowSuggestionEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    private String suggestion;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    public ShowSuggestionEvent(String suggestion) {"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"        this.suggestion \u003d suggestion;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    public String getSuggestion() {"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"        return suggestion;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":24}},{"path":"src/main/java/seedu/address/commons/events/ui/ResetPersonCardsEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" * Represents an event indicate person card changed."},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class ResetPersonCardsEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":14}},{"path":"src/main/java/seedu/address/commons/events/ui/ChangeThemeEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"//@@author Yoochard"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":" * Indicates a request for Changing theme"},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"public class ChangeThemeEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":"    private String theme;"},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"    public ChangeThemeEvent(String theme) {"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":"        this.theme \u003d theme;"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"    public String getTheme() {"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"        return theme;"},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":25}},{"path":"src/main/java/seedu/address/commons/events/ui/TestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":" * Indicates a request for Changing theme"},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"public class TestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"        return null;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"Yoochard":2,"IzHoBX":10,"-":1}},{"path":"src/main/java/seedu/address/commons/events/logic/RequestToDeleteNotificationEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.commons.events.logic;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * Indicates timetable entry added/removed*/"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"public class RequestToDeleteNotificationEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    public final String id;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    public final boolean deleteFromAddressbookOnly;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    public RequestToDeleteNotificationEvent(String id, boolean deleteFromAddressbookOnly) {"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"        this.deleteFromAddressbookOnly \u003d deleteFromAddressbookOnly;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"        return \"timetable entry deleted: \" + id;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":22}},{"path":"src/main/java/seedu/address/commons/events/logic/AddressBookUnlockedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.commons.events.logic;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * Indicates the request to toggle Notification Center"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"public class AddressBookUnlockedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    public AddressBookUnlockedEvent() {"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"        super();"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"        return \"Employees Tracker unlocked!\";"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":18}},{"path":"src/main/java/seedu/address/commons/events/logic/ReviewInputEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.commons.events.logic;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":""},{"lineNumber":6,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"emer7"},"content":" * An event to inform review input is available."},{"lineNumber":8,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"public class ReviewInputEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":""},{"lineNumber":11,"author":{"gitID":"emer7"},"content":"    private String reviewerInput;"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"    private String reviewInput;"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":""},{"lineNumber":14,"author":{"gitID":"emer7"},"content":"    public ReviewInputEvent(String reviewerInput, String reviewInput) {"},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"        this.reviewerInput \u003d reviewerInput;"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":"        this.reviewInput \u003d reviewInput;"},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":""},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"    public String getReviewerInput() {"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"        return reviewerInput;"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":""},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"    public String getReviewInput() {"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"        return reviewInput;"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":""},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":""},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":32}},{"path":"src/main/java/seedu/address/commons/events/logic/FileChoosedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.logic;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" * An event to inform AddPhotoCommand the photo is chosen."},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class FileChoosedEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    private final String filePath;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public FileChoosedEvent(String filePath) {"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    public String getFilePath() {"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        return filePath;"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":24}},{"path":"src/main/java/seedu/address/commons/events/model/RequestForNotificationCenterEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":" * Will be raised if Model Manager has null NotificationCenter."},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"public class RequestForNotificationCenterEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"        return \"Requesting for Notification Center\";"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":11,"-":3}},{"path":"src/main/java/seedu/address/commons/events/logic/PasswordEnteredEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.logic;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" * An event to inform UnlockCommand password is entered."},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class PasswordEnteredEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    private final String password;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public PasswordEnteredEvent(String password) {"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"        this.password \u003d password;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    public String getPassword() {"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        return password;"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":24}},{"path":"src/main/java/seedu/address/commons/events/logic/GetEmployeesRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.logic;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" *  Event to request current list of employees"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class GetEmployeesRequestEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":15}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookPasswordChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" * Indicates password changed"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":" * */"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class AddressBookPasswordChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    public final String password;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    public AddressBookPasswordChangedEvent(String password, ReadOnlyAddressBook data) {"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"        this.password \u003d password;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"        this.data \u003d data;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        return \"number of employees \" + data.getPersonList().size() + \", number of tags \" + data.getTagList().size();"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":23}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.NotificationCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    void setNotificationCenter(NotificationCenter notificationCenter);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":4,"-":27}},{"path":"src/main/java/seedu/address/commons/events/model/NotificationAddedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" * Indicates timetable entry added/removed*/"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"public class NotificationAddedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    public final Notification notification;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    public NotificationAddedEvent(Notification notification) {"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"        this.notification \u003d notification;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"        return \"timetable entry added: \" + notification.toString();"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":21}},{"path":"src/main/java/seedu/address/logic/CreateNewCalendar.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.model.Calendar;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":" * Create a calendar for a person."},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"public class CreateNewCalendar {"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"     * Create a new calendar for person with personName."},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"     *"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public static String execute(String personName) throws IOException {"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"        // Build a new authorized API client service."},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"        com.google.api.services.calendar.Calendar service \u003d null;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        service \u003d Authentication.getCalendarService();"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        // Create a new calendar"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        com.google.api.services.calendar.model.Calendar calendar \u003d new Calendar();"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"        calendar.setSummary(personName);"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        calendar.setTimeZone(\"Asia/Singapore\");"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"        // Insert the new calendar"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        String calendarId \u003d \"primary\";"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"            Calendar createdCalendar \u003d service.calendars().insert(calendar).execute();"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"            calendarId \u003d createdCalendar.getId();"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"            System.out.println(calendarId);"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        assert calendarId !\u003d null;"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        return calendarId;"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":42}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.CreateNewCalendar;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"            //@@author crizyli"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"            String calendarId;"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"            if (!LogicManager.isLocked()) {"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"                try {"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"                    calendarId \u003d CreateNewCalendar.execute(name.fullName);"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"                } catch (IOException e) { //not signed in"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"                    calendarId \u003d \"\";"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"                }"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"            } else {"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"                calendarId \u003d \"\";"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"            assert calendarId !\u003d null;"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"            //@@author"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"            Person person \u003d new Person(name, phone, email, address, tagList, calendarId);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return new AddCommand(person);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"     * overload parse method for test use."},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"    public AddCommand parse(String args, boolean isTest) throws ParseException {"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"            String calendarId;"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"            if (!isTest) {"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"                try {"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"                    calendarId \u003d CreateNewCalendar.execute(name.fullName);"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"                } catch (IOException e) { //not signed in"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"                    calendarId \u003d \"\";"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"                }"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":"            } else {"},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"                calendarId \u003d \"\";"},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":107,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":108,"author":{"gitID":"crizyli"},"content":"            Person person \u003d new Person(name, phone, email, address, tagList, calendarId);"},{"lineNumber":109,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":"            return new AddCommand(person);"},{"lineNumber":111,"author":{"gitID":"crizyli"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":112,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":60,"-":65}},{"path":"src/main/java/seedu/address/commons/events/logic/SetPasswordEnteredEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.logic;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" * An event to inform UnlockCommand password is entered."},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class SetPasswordEnteredEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    private final String mixPsw;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public SetPasswordEnteredEvent(String mixPsw) {"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"        this.mixPsw \u003d mixPsw;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    public String getPassword() {"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        return mixPsw;"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":24}},{"path":"src/main/java/seedu/address/commons/events/model/ReturnedEmployeesEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":" * Indicates employees list returned."},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"public class ReturnedEmployeesEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    private final ObservableList\u003cPerson\u003e employees;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public ReturnedEmployeesEvent(ObservableList\u003cPerson\u003e employees) {"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"        this.employees \u003d employees;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    public ObservableList\u003cPerson\u003e getEmployees() {"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"        return employees;"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":26}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.FieldContainKeyphrasesPredicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG, PREFIX_RATING);"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":""},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"        if (!(arePrefixesPresent(argMultimap, PREFIX_NAME)"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"                || arePrefixesPresent(argMultimap, PREFIX_TAG)"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"                || arePrefixesPresent(argMultimap, PREFIX_RATING))"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":""},{"lineNumber":37,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e nameKeyphrases \u003d argMultimap.getAllValues(PREFIX_NAME);"},{"lineNumber":38,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e tagKeyphrases \u003d argMultimap.getAllValues(PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"        List\u003cString\u003e ratingKeyphrases \u003d argMultimap.getAllValues(PREFIX_RATING);"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":""},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"        if (nameKeyphrases.contains(\"\") || tagKeyphrases.contains(\"\") || ratingKeyphrases.contains(\"\")) {"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"emer7"},"content":""},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"        return new FindCommand(new FieldContainKeyphrasesPredicate(nameKeyphrases, tagKeyphrases, ratingKeyphrases));"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":""},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":51,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"emer7"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"    //@@author"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":31,"-":25}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.AddPhotoCommand;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.AuthenCommand;"},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.DismissCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.EmailAllCommand;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.ExportEmployeesCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.MyCalendarCommand;"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.NotiCommand;"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ReviewCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":35,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.TestAddEventCommand;"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.TodoListCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":44,"author":{"gitID":"-"},"content":" */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"        case RateCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"            return new RateCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":78,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":79,"author":{"gitID":"emer7"},"content":"        case ReviewCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitID":"emer7"},"content":"            return new ReviewCommandParser().parse(arguments);"},{"lineNumber":81,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"        case TestAddEventCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"            return new TestAddEventCommandParser().parse(arguments);"},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":116,"author":{"gitID":"Yoochard"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":117,"author":{"gitID":"Yoochard"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":118,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":"        case LockCommand.COMMAND_WORD:"},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"            return new LockCommand();"},{"lineNumber":121,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":122,"author":{"gitID":"crizyli"},"content":"        case UnlockCommand.COMMAND_WORD:"},{"lineNumber":123,"author":{"gitID":"crizyli"},"content":"            return new UnlockCommandParser().parse(arguments);"},{"lineNumber":124,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":125,"author":{"gitID":"crizyli"},"content":"        case SetPasswordCommand.COMMAND_WORD:"},{"lineNumber":126,"author":{"gitID":"crizyli"},"content":"            return new SetPasswordCommandParser().parse(arguments);"},{"lineNumber":127,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":128,"author":{"gitID":"Yoochard"},"content":"        case ChangeThemeCommand.COMMAND_WORD:"},{"lineNumber":129,"author":{"gitID":"Yoochard"},"content":"            return new ChangeThemeCommandParser().parse(arguments);"},{"lineNumber":130,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":131,"author":{"gitID":"crizyli"},"content":"        case AddCommand.TEST_COMMAND_WORD:"},{"lineNumber":132,"author":{"gitID":"crizyli"},"content":"            return new AddCommandParser().parse(arguments, true);"},{"lineNumber":133,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":134,"author":{"gitID":"crizyli"},"content":"        case DeleteEventCommand.COMMAND_WORD:"},{"lineNumber":135,"author":{"gitID":"crizyli"},"content":"            return new DeleteEventCommandParser().parse(arguments);"},{"lineNumber":136,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":137,"author":{"gitID":"IzHoBX"},"content":"        case NotiCommand.COMMAND_WORD:"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"            return new NotiCommand();"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":140,"author":{"gitID":"crizyli"},"content":"        case TodoListCommand.COMMAND_WORD:"},{"lineNumber":141,"author":{"gitID":"crizyli"},"content":"            return new TodoListCommand();"},{"lineNumber":142,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":143,"author":{"gitID":"crizyli"},"content":"        case MyCalendarCommand.COMMAND_WORD:"},{"lineNumber":144,"author":{"gitID":"crizyli"},"content":"            return new MyCalendarCommand();"},{"lineNumber":145,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":146,"author":{"gitID":"crizyli"},"content":"        case AddPhotoCommand.COMMAND_WORD:"},{"lineNumber":147,"author":{"gitID":"crizyli"},"content":"            return new AddPhotoCommandParser().parse(arguments);"},{"lineNumber":148,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":149,"author":{"gitID":"crizyli"},"content":"        case AuthenCommand.COMMAND_WORD:"},{"lineNumber":150,"author":{"gitID":"crizyli"},"content":"            return new AuthenCommand();"},{"lineNumber":151,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":152,"author":{"gitID":"IzHoBX"},"content":"        case DismissCommand.COMMAND_WORD:"},{"lineNumber":153,"author":{"gitID":"IzHoBX"},"content":"            return new DismissCommandParser().parse(arguments);"},{"lineNumber":154,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":155,"author":{"gitID":"IzHoBX"},"content":"        case EmailCommand.COMMAND_WORD:"},{"lineNumber":156,"author":{"gitID":"IzHoBX"},"content":"            return new EmailCommandParser().parse(arguments);"},{"lineNumber":157,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":158,"author":{"gitID":"IzHoBX"},"content":"        case EmailAllCommand.COMMAND_WORD:"},{"lineNumber":159,"author":{"gitID":"IzHoBX"},"content":"            return new EmailAllCommand();"},{"lineNumber":160,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":161,"author":{"gitID":"crizyli"},"content":"        case ExportEmployeesCommand.COMMAND_WORD:"},{"lineNumber":162,"author":{"gitID":"crizyli"},"content":"            return new ExportEmployeesCommand();"},{"lineNumber":163,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":4,"crizyli":44,"Yoochard":8,"IzHoBX":19,"-":94}},{"path":"src/main/java/seedu/address/logic/parser/RateCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.RateCommand;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":" * Parses input arguments and creates a new RateCommand object"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"public class RateCommandParser implements Parser\u003cRateCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"     * Parses the given {@code String} of arguments in the context of the RateCommand"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"     * and returns an RateCommand object for execution."},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"    public RateCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"        Scanner sc \u003d new Scanner(args);"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"        if (!sc.hasNextInt()) {"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        Index index;"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"            index \u003d ParserUtil.parseIndex(((Integer) sc.nextInt()).toString());"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        if (!sc.hasNextInt()) {"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"        Integer rating \u003d sc.nextInt();"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"        if (!Rating.isValidInputRating(rating)) {"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RateCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"        editPersonDescriptor.setRating(new Rating(rating.toString()));"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"        return new RateCommand(index, editPersonDescriptor);"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":53}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"IzHoBX"},"content":"     * Parses a {@code String rating} into an {@code Rating}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":122,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"     * @throws IllegalValueException if the given {@code rating} is invalid."},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"    public static Rating parseRating(String rating) throws IllegalValueException {"},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"        requireNonNull(rating);"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"        Integer trimmedRating \u003d Integer.parseInt(rating.trim());"},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":"        if (!Rating.isValidInputRating(trimmedRating)) {"},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"        return new Rating(trimmedRating.toString());"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"     * Parses a {@code Optional\u003cString\u003e value} into an {@code Optional\u003cRating\u003e} if {@code address} is present."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":137,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"    public static Optional\u003cRating\u003e parseRating(Optional\u003cString\u003e value) throws IllegalValueException {"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":"        requireNonNull(value);"},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"        return value.isPresent() ? Optional.of(parseRating(value.get())) : Optional.empty();"},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":145,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":146,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":170,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":21,"-":172}},{"path":"src/main/java/seedu/address/logic/parser/TestAddEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCCRIPTION;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.TestAddEventCommand;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":" * Parses input arguments and creates a new TestAddEventCommand object"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"public class TestAddEventCommandParser implements Parser\u003cTestAddEventCommand\u003e {"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"     * Parses the given {@code String} of arguments in the context of the TestAddEventCommand"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"     * and returns a TestAddEventCommand object for execution."},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    public TestAddEventCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        requireNonNull(args);"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        Scanner sc \u003d new Scanner(args);"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        if (!sc.hasNextInt()) {"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TestAddEventCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        Index index;"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"            index \u003d ParserUtil.parseIndex(((Integer) sc.nextInt()).toString());"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TestAddEventCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        String temp \u003d args.trim();"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"        int i;"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        for (i \u003d 0; i \u003c temp.length(); i++) {"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"            if (temp.charAt(i) \u003d\u003d 32) {"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"                break;"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        String behindArgs \u003d temp.substring(i);"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"                ArgumentTokenizer.tokenize(behindArgs, PREFIX_TITLE, PREFIX_LOCATION, PREFIX_STARTTIME,"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"                        PREFIX_ENDTIME, PREFIX_DESCCRIPTION);"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_LOCATION, PREFIX_STARTTIME, PREFIX_ENDTIME,"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"                PREFIX_DESCCRIPTION)"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TestAddEventCommand.MESSAGE_USAGE));"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"        String title \u003d argMultimap.getValue(PREFIX_TITLE).get();"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        String location \u003d argMultimap.getValue(PREFIX_LOCATION).get();"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        String sTime \u003d argMultimap.getValue(PREFIX_STARTTIME).get();"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        String eTime \u003d argMultimap.getValue(PREFIX_ENDTIME).get();"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"            DateTime.parseRfc3339(sTime);"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"        } catch (NumberFormatException n) {"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(\"Invalid date/time format: \" + sTime);"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"            DateTime.parseRfc3339(eTime);"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"        } catch (NumberFormatException n) {"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(\"Invalid date/time format: \" + eTime);"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"        String description \u003d argMultimap.getValue(PREFIX_DESCCRIPTION).get();"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"        return new TestAddEventCommand(index, title, location, sTime, eTime, description);"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":94}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"title/\");"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"loca/\");"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    public static final Prefix PREFIX_STARTTIME \u003d new Prefix(\"stime/\");"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    public static final Prefix PREFIX_ENDTIME \u003d new Prefix(\"etime/\");"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public static final Prefix PREFIX_DESCCRIPTION \u003d new Prefix(\"descrip/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":5,"IzHoBX":1,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/DismissCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_NOTIFICATION_CARD_INDEX_NON_POSITIVE;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.DismissCommand;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":" * Parses input arguments and creates a new DismissCommand object"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"public class DismissCommandParser implements Parser\u003cDismissCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"     * Parses the given {@code String} of arguments in the context of the DismissCommand"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"     * and returns an DismissCommand object for execution."},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    public DismissCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"            return new DismissCommand(index);"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException(MESSAGE_INVALID_NOTIFICATION_CARD_INDEX_NON_POSITIVE);"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":29}},{"path":"src/main/java/seedu/address/logic/parser/ReviewCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":""},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":""},{"lineNumber":11,"author":{"gitID":"emer7"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":""},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.events.logic.ReviewInputEvent;"},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.events.ui.ShowReviewDialogEvent;"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.commands.ReviewCommand;"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"import seedu.address.model.review.Review;"},{"lineNumber":23,"author":{"gitID":"emer7"},"content":""},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":" * Parses input arguments and creates a new Review object"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"public class ReviewCommandParser implements Parser\u003cReviewCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":""},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":""},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"    private String reviewerInput;"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"    private String reviewInput;"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":""},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"     * Parses the given {@code String} of arguments in the context of the ReviewCommand"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"     * and returns a ReviewCommand object for execution."},{"lineNumber":37,"author":{"gitID":"emer7"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"    public ReviewCommand parse(String args) throws ParseException {"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"        requireNonNull(args);"},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"        Scanner sc \u003d new Scanner(args);"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"        if (!sc.hasNextInt()) {"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"        Index index;"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"            index \u003d ParserUtil.parseIndex(((Integer) sc.nextInt()).toString());"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReviewCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"emer7"},"content":""},{"lineNumber":52,"author":{"gitID":"emer7"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"        EventsCenter.getInstance().post(new ShowReviewDialogEvent());"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":""},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":"            assert reviewerInput !\u003d null;"},{"lineNumber":57,"author":{"gitID":"emer7"},"content":"            assert !reviewerInput.isEmpty();"},{"lineNumber":58,"author":{"gitID":"emer7"},"content":""},{"lineNumber":59,"author":{"gitID":"emer7"},"content":"            String reviewer \u003d ParserUtil.parseEmail(reviewerInput).value;"},{"lineNumber":60,"author":{"gitID":"emer7"},"content":""},{"lineNumber":61,"author":{"gitID":"emer7"},"content":"            assert reviewInput !\u003d null;"},{"lineNumber":62,"author":{"gitID":"emer7"},"content":""},{"lineNumber":63,"author":{"gitID":"emer7"},"content":"            if (reviewInput.isEmpty()) {"},{"lineNumber":64,"author":{"gitID":"emer7"},"content":"                reviewInput \u003d \"-\";"},{"lineNumber":65,"author":{"gitID":"emer7"},"content":"            }"},{"lineNumber":66,"author":{"gitID":"emer7"},"content":"            String review \u003d reviewInput.trim();"},{"lineNumber":67,"author":{"gitID":"emer7"},"content":""},{"lineNumber":68,"author":{"gitID":"emer7"},"content":"            String combined \u003d reviewer + \"\\n\" + review;"},{"lineNumber":69,"author":{"gitID":"emer7"},"content":"            HashSet\u003cReview\u003e combinedSet \u003d new HashSet\u003cReview\u003e();"},{"lineNumber":70,"author":{"gitID":"emer7"},"content":"            combinedSet.add(new Review(combined));"},{"lineNumber":71,"author":{"gitID":"emer7"},"content":""},{"lineNumber":72,"author":{"gitID":"emer7"},"content":"            EditCommand.EditPersonDescriptor editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor();"},{"lineNumber":73,"author":{"gitID":"emer7"},"content":"            editPersonDescriptor.setReviews(combinedSet);"},{"lineNumber":74,"author":{"gitID":"emer7"},"content":"            if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":75,"author":{"gitID":"emer7"},"content":"                throw new ParseException(ReviewCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":76,"author":{"gitID":"emer7"},"content":"            }"},{"lineNumber":77,"author":{"gitID":"emer7"},"content":""},{"lineNumber":78,"author":{"gitID":"emer7"},"content":"            return new ReviewCommand(index, editPersonDescriptor);"},{"lineNumber":79,"author":{"gitID":"emer7"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":80,"author":{"gitID":"emer7"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":81,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"emer7"},"content":""},{"lineNumber":84,"author":{"gitID":"emer7"},"content":"    @Subscribe"},{"lineNumber":85,"author":{"gitID":"emer7"},"content":"    private void getReviewInput(ReviewInputEvent event) {"},{"lineNumber":86,"author":{"gitID":"emer7"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":87,"author":{"gitID":"emer7"},"content":"        reviewerInput \u003d event.getReviewerInput();"},{"lineNumber":88,"author":{"gitID":"emer7"},"content":"        reviewInput \u003d event.getReviewInput();"},{"lineNumber":89,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":90}},{"path":"src/main/java/seedu/address/logic/parser/AddPhotoCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.AddPhotoCommand;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":" * Parses arguments for the AddPhotoCommand\u0027"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"public class AddPhotoCommandParser implements Parser\u003cAddPhotoCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPhotoCommand"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"     * and returns an AddPhotoCommand object for execution."},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public AddPhotoCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"            return new AddPhotoCommand(index);"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPhotoCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":28}},{"path":"src/main/java/seedu/address/logic/parser/UnlockCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":" * Parses arguments for the UnlockCommand\u0027"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"public class UnlockCommandParser implements Parser\u003cUnlockCommand\u003e {"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"     * Parses the given {@code String} of arguments in the context of the UnlockCommand"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"     * and returns an UnlockCommand object for execution."},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    public UnlockCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        if (!args.trim().isEmpty()) {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnlockCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        return new UnlockCommand();"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":25}},{"path":"src/main/java/seedu/address/logic/parser/ChangeThemeCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"//@@author Yoochard"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.ChangeThemeCommand;"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":" *  Creates a ChangeThemeCommand object"},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"public class ChangeThemeCommandParser implements Parser\u003cChangeThemeCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"     * Parses the given {@code String} of arguments in the context of the ChangeThemeCommand"},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":"     * and returns an ChangeThemeCommand object for execution."},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"    public ChangeThemeCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":"            throw new ParseException("},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ChangeThemeCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"        return new ChangeThemeCommand(trimmedArgs);"},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":28}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"//@@author Yoochard"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":" * Parses input arguments and creates a new SortCommand object"},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"     * Parses the given {@code String} of arguments in the context of the Sort"},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":"     * and returns an SortCommand object for execution."},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"     * @throws ParseException if the input field does not conform the expected format"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"        return new SortCommand(trimmedArgs);"},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":27}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitID":"-"},"content":" */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"                        PREFIX_RATING, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"            ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING)).ifPresent(editPersonDescriptor::setRating);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"IzHoBX":4,"-":78}},{"path":"src/main/java/seedu/address/logic/parser/SetPasswordCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.SetPasswordCommand;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":" * Parses arguments for the SetPasswordCommand\u0027"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"public class SetPasswordCommandParser implements Parser\u003cSetPasswordCommand\u003e {"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"     * Parses the given {@code String} of arguments in the context of the SetPasswordCommand"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"     * and returns an SetPasswordCommand object for execution."},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    public SetPasswordCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        if (!args.trim().isEmpty()) {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPasswordCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        return new SetPasswordCommand();"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":25}},{"path":"src/main/java/seedu/address/logic/parser/EmailCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.EmailCommand;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":" * Parses input arguments and creates a new DismissCommand object"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"public class EmailCommandParser implements Parser\u003cEmailCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"     * Parses the given {@code String} of arguments in the context of the EmailCommand"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"     * and returns an EmailCommand object for execution."},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    public EmailCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"            return new EmailCommand(index);"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EmailCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":30}},{"path":"src/main/java/seedu/address/logic/parser/LockCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.LockCommand;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":" * Parse arguments for LockCommand"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"public class LockCommandParser implements Parser\u003cLockCommand\u003e {"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    public LockCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        if (!args.trim().isEmpty()) {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LockCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        return new LockCommand();"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":25}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.DeleteCalendar;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \": Deletes the employee identified by the index number used in the last employees listing.\\n\""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Employee has been permanently deleted with\""},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"            + \" his calendar, please DO NOT undo this command, or his calendar will become invalid. \""},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":"            + \" Instead, you can mannualy add it back. \\nDeleted Employee: %1$s\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Person personToDelete;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            model.deletePerson(personToDelete);"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"            if (personToDelete.getCalendarId().endsWith(\"@group.calendar.google.com\")) {"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"                DeleteCalendar.execute(personToDelete.getCalendarId());"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target employee cannot be missing\");"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        } catch (IOException ioe) {"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"            ioe.printStackTrace();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":72,"author":{"gitID":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":7,"Yoochard":3,"-":66}},{"path":"src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.DeleteEventCommand;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":" * Parses arguments for the DeleteEventCommand\u0027"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"     * and returns an DeleteEventCommand object for execution."},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    public DeleteEventCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"        requireNonNull(args);"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        Scanner sc \u003d new Scanner(trimmedArgs);"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        if (!sc.hasNextInt()) {"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        Index index;"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"            index \u003d ParserUtil.parseIndex(((Integer) sc.nextInt()).toString());"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        if (!sc.hasNextLine()) {"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        String title \u003d sc.nextLine().trim();"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"        return new DeleteEventCommand(index, title);"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":44}},{"path":"src/main/java/seedu/address/logic/commands/AuthenCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.Authentication;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" * To authorize ET."},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class AuthenCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"authenET\";"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You have authorized ET!\";"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_FAILURE \u003d \"You haven\u0027t authorized ET successfully,\""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"            + \" please try it again later\";"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"            + \": Authorize ET with your google calendar service.\\n\""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() {"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        boolean isSuccessful \u003d Authentication.authen();"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        if (isSuccessful) {"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":32}},{"path":"src/main/java/seedu/address/logic/commands/ChangeThemeCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"//@@author Yoochard"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"import seedu.address.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":" * Change existing theme"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":"public class ChangeThemeCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"    public static final String COMMAND_WORD \u003d \"changeTheme\";"},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"    public static final String DARK_THEME_CSS_FILE_NAME \u003d \"view/DarkTheme.css\";"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"    public static final String BRIGHT_THEME_CSS_FILE_NAME \u003d \"view/BrightTheme.css\";"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":"    public static final String[] THEME_NAMES \u003d {\"dark\", \"bright\"};"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the theme of the application.\\n\""},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"            + \"Parameters: \" + \"THEME\\n\""},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":"            + \"Example: \" + COMMAND_WORD + \" dark\";"},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_INVALID_THEME_NAME \u003d \"%1$s theme is not supported. \""},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":"            + \"You can change your theme to one of these: \""},{"lineNumber":31,"author":{"gitID":"Yoochard"},"content":"            + Arrays.toString(THEME_NAMES);"},{"lineNumber":32,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":33,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_CHANGE_THEME_SUCCESS \u003d \"You have successfully changed your theme.\";"},{"lineNumber":34,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":35,"author":{"gitID":"Yoochard"},"content":"    private final String theme;"},{"lineNumber":36,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":37,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Yoochard"},"content":"     * Constructor"},{"lineNumber":39,"author":{"gitID":"Yoochard"},"content":"     * @param theme the new theme"},{"lineNumber":40,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"Yoochard"},"content":"    public ChangeThemeCommand(String theme) {"},{"lineNumber":42,"author":{"gitID":"Yoochard"},"content":"        requireNonNull(theme);"},{"lineNumber":43,"author":{"gitID":"Yoochard"},"content":"        this.theme \u003d theme;"},{"lineNumber":44,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":46,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"Yoochard"},"content":"     * Returns true if the input string is valid"},{"lineNumber":48,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"Yoochard"},"content":"    public static boolean isValidThemeName(String theme) {"},{"lineNumber":50,"author":{"gitID":"Yoochard"},"content":"        return Arrays.asList(THEME_NAMES).contains(theme);"},{"lineNumber":51,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"Yoochard"},"content":"    protected CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":56,"author":{"gitID":"Yoochard"},"content":"        // Check whether a given theme name is valid"},{"lineNumber":57,"author":{"gitID":"Yoochard"},"content":"        if (!isValidThemeName(theme)) {"},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":"            throw new CommandException(String.format(MESSAGE_INVALID_THEME_NAME, theme));"},{"lineNumber":59,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":61,"author":{"gitID":"Yoochard"},"content":"        EventsCenter.getInstance().post(new ChangeThemeEvent(theme));"},{"lineNumber":62,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":63,"author":{"gitID":"Yoochard"},"content":"        return new CommandResult(String.format(MESSAGE_CHANGE_THEME_SUCCESS, theme));"},{"lineNumber":64,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":65}},{"path":"src/main/java/seedu/address/logic/commands/ExportEmployeesCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import java.io.BufferedWriter;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.logic.GetEmployeesRequestEvent;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.model.ReturnedEmployeesEvent;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" * export employees to a csv file."},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"public class ExportEmployeesCommand extends Command {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"export\";"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exports current employees to a csv file.\\n\""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"All Employees Exported to employees.csv! Check it in data folder.\";"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_FAIL \u003d \"Export fail! Make sure you haven\u0027t opened employees.csv and try again!\";"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    public static final String EXPORT_FILE_PATH \u003d \"data/employees.csv\";"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"    private ObservableList\u003cPerson\u003e employees;"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    private boolean isTest;"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    public ExportEmployeesCommand() {"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"    public ExportEmployeesCommand(boolean isTest) {"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"        this.isTest \u003d isTest;"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() {"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().post(new GetEmployeesRequestEvent());"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        File csv;"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        if (isTest) {"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"            csv \u003d new File(\"employees.csv\");"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"            csv \u003d new File(EXPORT_FILE_PATH);"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"        BufferedWriter bw \u003d null;"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"            bw \u003d new BufferedWriter(new FileWriter(csv));"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"            bw.write(\"Name,Phone,Email,Address,Tags\\n\");"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"            for (Person p : employees) {"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"                String temp \u003d p.getName().fullName + \",\" + p.getPhone().value + \",\" + p.getEmail().value + \",\""},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"                        + p.getAddress().value.replaceAll(\",\", \" \");"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"                if (!p.getTags().isEmpty()) {"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"                    temp \u003d temp + \",\" + p.getTags().toString()"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"                            .replaceAll(\", \", \" | \");"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"                }"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"                temp \u003d temp + \"\\n\";"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"                bw.write(temp);"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_FAIL);"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"            bw.close();"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"    protected void registerAsAnEventHandler(Object handler) {"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"    private void handleReturnedEmployeesEvent(ReturnedEmployeesEvent event) {"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"        this.employees \u003d event.getEmployees();"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":93}},{"path":"src/main/java/seedu/address/logic/commands/LockCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.HideDetailPanelEvent;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.HideAllPersonPredicate;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":" * Locks the app with a password"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":" * */"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"public class LockCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"lock\";"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Locks Employees Tracker.\\n\""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Employees Tracker has been locked!\";"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    private final HideAllPersonPredicate predicate \u003d new HideAllPersonPredicate();"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() {"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().post(new HideDetailPanelEvent());"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"        LogicManager.lock();"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"                || (other instanceof LockCommand);"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":37}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"//@@author Yoochard"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":" * Sorts the employees by any field"},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":"    public static final String[] SORT_FIELD_LIST \u003d {\"name\", \"phone\", \"email\", \"address\", \"tag\", \"rate\"};"},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts employees by a specific field.\\n\""},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"            + \"Parameters: FIELD\\n\""},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"            + \"Example: \" + COMMAND_WORD + \" name\";"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_SORT_EMPLOYEE_SUCCESS \u003d \"Employees have been sorted.\";"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_SORT_INVALID_FIELD \u003d \"Your input field is invalid, please check again.\";"},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":"    private final String sortField;"},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"    public SortCommand(String field) {"},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":"        this.sortField \u003d field;"},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"Yoochard"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":32,"author":{"gitID":"Yoochard"},"content":"        switch (sortField) {"},{"lineNumber":33,"author":{"gitID":"Yoochard"},"content":"        case \"name\":"},{"lineNumber":34,"author":{"gitID":"Yoochard"},"content":"        case \"phone\":"},{"lineNumber":35,"author":{"gitID":"Yoochard"},"content":"        case \"email\":"},{"lineNumber":36,"author":{"gitID":"Yoochard"},"content":"        case \"address\":"},{"lineNumber":37,"author":{"gitID":"Yoochard"},"content":"        case \"tag\":"},{"lineNumber":38,"author":{"gitID":"Yoochard"},"content":"        case \"rate\":"},{"lineNumber":39,"author":{"gitID":"Yoochard"},"content":"            model.sort(sortField);"},{"lineNumber":40,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":41,"author":{"gitID":"Yoochard"},"content":"        default:"},{"lineNumber":42,"author":{"gitID":"Yoochard"},"content":"            throw new CommandException(MESSAGE_SORT_INVALID_FIELD);"},{"lineNumber":43,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"Yoochard"},"content":"        return new CommandResult(MESSAGE_SORT_EMPLOYEE_SUCCESS);"},{"lineNumber":45,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":47,"author":{"gitID":"Yoochard"},"content":"    public String getField() {"},{"lineNumber":48,"author":{"gitID":"Yoochard"},"content":"        return sortField;"},{"lineNumber":49,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":51,"author":{"gitID":"Yoochard"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"Yoochard"},"content":"    public boolean equals(Object o) {"},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"        return o \u003d\u003d this"},{"lineNumber":54,"author":{"gitID":"Yoochard"},"content":"                || (o instanceof SortCommand"},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":"                \u0026\u0026 this.getField().equals(((SortCommand) o).getField())); // state check"},{"lineNumber":56,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":57}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the address book."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Employees Tracker has been cleared!\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \": Clears all employees from Employees Tracker.\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":1,"-":24}},{"path":"src/main/java/seedu/address/logic/Authentication.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import java.io.InputStreamReader;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.auth.oauth2.Credential;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.http.HttpTransport;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.json.JsonFactory;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.json.jackson2.JacksonFactory;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.util.store.FileDataStoreFactory;"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.CalendarScopes;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.TestAddEventCommand;"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":" * To create an authorized google calendar service to be used in commands that require this service."},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":" * Solution below adpated from https://developers.google.com/calendar/quickstart/java"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"public class Authentication {"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Authentication.class);"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"    /** Directory to store user credentials for this application. */"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    private static final java.io.File DATA_STORE_DIR \u003d new java.io.File("},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"            System.getProperty(\"user.home\"), \".credentials/calendar-java-quickstart\");"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    /** Global instance of the {@link FileDataStoreFactory}. */"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    private static FileDataStoreFactory dataStoreFactory;"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    /** Global instance of the JSON factory. */"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"    private static final JsonFactory JSON_FACTORY \u003d"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"            JacksonFactory.getDefaultInstance();"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    /** Global instance of the HTTP transport. */"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"    private static HttpTransport httpTransport;"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"     *  Global instance of the scopes."},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"    private static final List\u003cString\u003e SCOPES \u003d"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"            Arrays.asList(CalendarScopes.CALENDAR);"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"    /** Application name. */"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"    private static final String APPLICATION_NAME \u003d \"Employees Tracker\";"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"    static {"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"            httpTransport \u003d GoogleNetHttpTransport.newTrustedTransport();"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"            dataStoreFactory \u003d new FileDataStoreFactory(DATA_STORE_DIR);"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"        } catch (Throwable t) {"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"            t.printStackTrace();"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"            System.exit(1);"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"     * Creates an authorized Credential object."},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"     * @return an authorized Credential object."},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"     * @throws IOException"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"    public static Credential authorize() throws IOException {"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"        // Load client secrets."},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"        InputStream in \u003d"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"                TestAddEventCommand.class.getResourceAsStream(\"/client_secret.json\");"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"        GoogleClientSecrets clientSecrets \u003d"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"                GoogleClientSecrets.load(JSON_FACTORY, new InputStreamReader(in));"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"        // Build flow and trigger user authorization request."},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"        GoogleAuthorizationCodeFlow flow \u003d"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"                new GoogleAuthorizationCodeFlow.Builder("},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"                        httpTransport, JSON_FACTORY, clientSecrets, SCOPES)"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"                        .setDataStoreFactory(dataStoreFactory)"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"                        .setAccessType(\"offline\")"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"                        .build();"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"        Credential credential \u003d new AuthorizationCodeInstalledApp("},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"                flow, new LocalServerReceiver()).authorize(\"user\");"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"        logger.info(\"Credentials saved to \" + DATA_STORE_DIR.getAbsolutePath());"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"        return credential;"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"     * Build and return an authorized Calendar client service."},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"     * @return an authorized Calendar client service"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"     * @throws IOException"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"    public static com.google.api.services.calendar.Calendar"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"        getCalendarService() throws IOException {"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"        Credential credential \u003d authorize();"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"        return new com.google.api.services.calendar.Calendar.Builder("},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"                httpTransport, JSON_FACTORY, credential)"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"                .setApplicationName(APPLICATION_NAME)"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"                .build();"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"crizyli"},"content":"     * authenticate the service and return its state."},{"lineNumber":108,"author":{"gitID":"crizyli"},"content":"     * @return authentication success or not"},{"lineNumber":109,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":"    public static boolean authen() {"},{"lineNumber":111,"author":{"gitID":"crizyli"},"content":"        com.google.api.services.calendar.Calendar service \u003d null;"},{"lineNumber":112,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"            service \u003d getCalendarService();"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":"            return false;"},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"crizyli"},"content":"        assert service !\u003d null;"},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":"        return true;"},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":121}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Adds a person to the address book."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class AddCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    public static final String TEST_COMMAND_WORD \u003d \"testAdd\";"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an employee to Employees Tracker.\\n\""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"87438807 \""},{"lineNumber":33,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitID":"-"},"content":"            + PREFIX_ADDRESS + \"Blk 30 Geylang Street 29, #06-40 \""},{"lineNumber":35,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"sales \""},{"lineNumber":36,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"associate\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New employee added: %1$s\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This employee already exists in Employees Tracker\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":2,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/SetPasswordCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.logic.SetPasswordEnteredEvent;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ShowSetPasswordDialogEvent;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":" * Set the application password"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":" * */"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"public class SetPasswordCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"setPassword\";"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets new application password. \""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"            + \"Old password required.\\n\""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New password has been set!\";"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_INCORRECT_OLDPASSWORD \u003d \"Incorrect old password!\";"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_INCOMPLETE_FIELD \u003d \"Input field(s) not complete!\";"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    private String oldPassword;"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    private String newPassword;"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    private boolean isComplete;"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"    private boolean isTestMode;"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    public SetPasswordCommand() {"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        isComplete \u003d true;"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() {"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        if (!isTestMode) {"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"            EventsCenter.getInstance().post(new ShowSetPasswordDialogEvent());"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"            this.oldPassword \u003d \"admin\";"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"            this.newPassword \u003d \"newpsw\";"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        if (!isComplete) {"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_INCOMPLETE_FIELD);"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"        if (this.oldPassword.compareTo(LogicManager.getPassword()) \u003d\u003d 0) {"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"            LogicManager.setPassword(this.newPassword);"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"            model.setPassword(this.newPassword);"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_INCORRECT_OLDPASSWORD);"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"    public String getOldPassword() {"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"        return this.oldPassword;"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"    public String getNewPassword() {"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"        return this.newPassword;"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"                || (other instanceof SetPasswordCommand);"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"    protected void registerAsAnEventHandler(Object handler) {"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"    private void handleSetPasswordEnteredEvent(SetPasswordEnteredEvent event) {"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"        if (event.getPassword().equals(\"incomplete\")) {"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"            isComplete \u003d false;"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"        this.oldPassword \u003d event.getPassword().substring(0, event.getPassword().lastIndexOf(\",\"));"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"        this.newPassword \u003d event.getPassword().substring(event.getPassword().lastIndexOf(\",\") + 1);"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"    public void setTestMode() {"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"        this.isTestMode \u003d true;"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":95}},{"path":"src/main/java/seedu/address/logic/commands/EmailAllCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import java.awt.Desktop;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import java.net.URI;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":" * Email to the person associated with the notification card identified using index in Notification Center."},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"public class EmailAllCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    public static final String COMMAND_WORD \u003d \"emailall\";"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"            + \": Emails to remind about all notification cards.\\n\""},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Directing to email app...\";"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_ERROR \u003d \"Error occurred. Please try again later.\";"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    public static final String EMAIL_TEMPLATE \u003d \"Dear%20all,\""},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"            + \"%0D%0A%0D%0AThis%20email%20is%20to%20remind%20you%20that%20you%20have%20a%20task%20expired.%0D%0A%0D%0A\";"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    private String allEmails \u003d \"\";"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    public CommandResult execute() {"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        //notificationCards in notification center is 1-based"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"        for (int i \u003d 1; i \u003c model.getNotificationCenter().getTotalUndismmissedNotificationCards(); i++) {"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"            Index targetIndex \u003d Index.fromOneBased(i);"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"            String ownerId \u003d model.getNotificationCenter().getOwnerIdByIndex(targetIndex);"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"            allEmails +\u003d model.getAddressBook().findPersonById(Integer.parseInt(ownerId)).getEmail().toString() + \",\";"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        Desktop desktop \u003d Desktop.getDesktop();"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"        String message \u003d \"mailto:\" + allEmails + \"?subject\u003d\" + \"Reminder%20for%20Task%20Expiry\""},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"                + \"\u0026body\u003d\" + EMAIL_TEMPLATE;"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"        URI uri \u003d URI.create(message);"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"            desktop.mail(uri);"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"        } catch (IOException e) {"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"            LogsCenter.getLogger(EmailAllCommand.class).info(\"IOException\");"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"            return new CommandResult(MESSAGE_ERROR);"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":51}},{"path":"src/main/java/seedu/address/logic/commands/NotiCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.ui.ToggleNotificationCenterEvent;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" * Toggles the notification center."},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"public class NotiCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    public static final String COMMAND_WORD \u003d \"noti\";"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"\";"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"            + \": Toggles the notification center, or you can double press SHIFT.\\n\""},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    public CommandResult execute() {"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"        EventsCenter.getInstance().post(new ToggleNotificationCenterEvent());"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":25}},{"path":"src/main/java/seedu/address/logic/commands/TodoListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.model.Event;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.model.Events;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ShowTodoListDisplayContentEvent;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ShowTodoListEvent;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.Authentication;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.listevent.ListEvent;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":" * Show to do list window."},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"public class TodoListCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"todoList\";"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"            + \": Displays the To-Do List in a new window.\\n\""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"To do list window is loaded.\";"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    private ArrayList\u003cListEvent\u003e eventList;"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    public TodoListCommand() {"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        eventList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() {"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        // Build a new authorized API client service."},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"        com.google.api.services.calendar.Calendar service \u003d null;"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"            service \u003d Authentication.getCalendarService();"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        String calendarId \u003d \"primary\";"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        String pageToken \u003d null;"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        do {"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"            Events events \u003d null;"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"            try {"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"                events \u003d service.events().list(calendarId).setPageToken(pageToken).execute();"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"            } catch (IOException e) {"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"                e.printStackTrace();"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"            List\u003cEvent\u003e items \u003d events.getItems();"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"            for (Event event : items) {"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"                eventList.add(new ListEvent(event.getSummary(), event.getLocation(), event.getStart().getDateTime()));"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"            pageToken \u003d events.getNextPageToken();"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"        } while (pageToken !\u003d null);"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().post(new ShowTodoListEvent());"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().post(new ShowTodoListDisplayContentEvent(eventList));"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":68}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":"import seedu.address.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":"import seedu.address.model.theme.Theme;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"    private static String previousTheme \u003d Theme.getTheme();"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":31,"author":{"gitID":"Yoochard"},"content":"        previousTheme \u003d Theme.getTheme();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        model.resetData(previousAddressBook);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":50,"author":{"gitID":"Yoochard"},"content":"        //@@author Yoochard"},{"lineNumber":51,"author":{"gitID":"Yoochard"},"content":"        if (this instanceof ChangeThemeCommand) {"},{"lineNumber":52,"author":{"gitID":"Yoochard"},"content":"            Theme.changeCurrentTheme(previousTheme);"},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"            EventsCenter.getInstance().post(new ChangeThemeEvent(previousTheme));"},{"lineNumber":54,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":"        //@@author"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":68,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public final CommandResult execute() throws CommandException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":14,"-":65}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Selects a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Selects the employee identified by the index number used in the last employees listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected employee: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        System.out.println(lastShownList.get(targetIndex.getZeroBased()));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":1,"-":51}},{"path":"src/main/java/seedu/address/logic/commands/MyCalendarCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ShowMyCalendarEvent;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" * Show my own calendar"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":" * */"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class MyCalendarCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"myCalendar\";"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays my own calendar.\\n\""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Your calendar is loaded.\";"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().post(new ShowMyCalendarEvent());"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":25}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.Photo;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.review.Review;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class EditCommand extends UndoableCommand {"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the employee identified \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last employees listing. \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"            + \"[\" + PREFIX_RATING + \"RATING] \""},{"lineNumber":51,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":52,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":54,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited employee: %1$s\";"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This employee already exists in Employees Tracker.\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target employee cannot be missing\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"        Rating updatedRating \u003d editPersonDescriptor.getRating().orElse(personToEdit.getRating());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Set\u003cReview\u003e updatedReviews \u003d editPersonDescriptor.getReviews().orElse(personToEdit.getReviews());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":119,"author":{"gitID":"emer7"},"content":"        Person toReturn \u003d new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"},{"lineNumber":120,"author":{"gitID":"emer7"},"content":"                personToEdit.getCalendarId());"},{"lineNumber":121,"author":{"gitID":"emer7"},"content":"        toReturn.setRating(updatedRating);"},{"lineNumber":122,"author":{"gitID":"emer7"},"content":"        toReturn.setReviews(updatedReviews);"},{"lineNumber":123,"author":{"gitID":"emer7"},"content":"        toReturn.setId(personToEdit.getId());"},{"lineNumber":124,"author":{"gitID":"emer7"},"content":"        toReturn.setPhotoName(personToEdit.getPhotoName());"},{"lineNumber":125,"author":{"gitID":"emer7"},"content":"        return toReturn;"},{"lineNumber":126,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":145,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        private Address address;"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        private Set\u003cReview\u003e reviews;"},{"lineNumber":159,"author":{"gitID":"IzHoBX"},"content":"        private Rating rating;"},{"lineNumber":160,"author":{"gitID":"crizyli"},"content":"        private Photo photo;"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":165,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":166,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":167,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":173,"author":{"gitID":"IzHoBX"},"content":"            setRating(toCopy.rating);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"            setReviews(toCopy.reviews);"},{"lineNumber":176,"author":{"gitID":"crizyli"},"content":"            setPhoto(toCopy.photo);"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":181,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.rating,"},{"lineNumber":184,"author":{"gitID":"-"},"content":"                    this.reviews, this.tags);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            this.address \u003d address;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"crizyli"},"content":"        public void setPhoto(Photo photo) {"},{"lineNumber":220,"author":{"gitID":"crizyli"},"content":"            this.photo \u003d photo;"},{"lineNumber":221,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":223,"author":{"gitID":"crizyli"},"content":"        public Optional\u003cPhoto\u003e getPhoto() {"},{"lineNumber":224,"author":{"gitID":"crizyli"},"content":"            return Optional.ofNullable(photo);"},{"lineNumber":225,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":227,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":228,"author":{"gitID":"IzHoBX"},"content":"        public void setRating(Rating rating) {"},{"lineNumber":229,"author":{"gitID":"IzHoBX"},"content":"            this.rating \u003d rating;"},{"lineNumber":230,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":232,"author":{"gitID":"IzHoBX"},"content":"        public Optional\u003cRating\u003e getRating() {"},{"lineNumber":233,"author":{"gitID":"IzHoBX"},"content":"            return Optional.ofNullable(rating);"},{"lineNumber":234,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":235,"author":{"gitID":"IzHoBX"},"content":"        //@@author"},{"lineNumber":236,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":237,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":240,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":241,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":243,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":247,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":248,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":249,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":250,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":256,"author":{"gitID":"emer7"},"content":"        /**"},{"lineNumber":257,"author":{"gitID":"emer7"},"content":"         * Sets {@code reviews} to this object\u0027s {@code reviews}."},{"lineNumber":258,"author":{"gitID":"emer7"},"content":"         * A defensive copy of {@code reviews} is used internally."},{"lineNumber":259,"author":{"gitID":"emer7"},"content":"         */"},{"lineNumber":260,"author":{"gitID":"emer7"},"content":"        public void setReviews(Set\u003cReview\u003e reviews) {"},{"lineNumber":261,"author":{"gitID":"emer7"},"content":"            this.reviews \u003d (reviews !\u003d null) ? new HashSet\u003c\u003e(reviews) : null;"},{"lineNumber":262,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":263,"author":{"gitID":"emer7"},"content":""},{"lineNumber":264,"author":{"gitID":"emer7"},"content":"        /**"},{"lineNumber":265,"author":{"gitID":"emer7"},"content":"         * Returns an unmodifiable review set, which throws {@code UnsupportedOperationException}"},{"lineNumber":266,"author":{"gitID":"emer7"},"content":"         * if modification is attempted."},{"lineNumber":267,"author":{"gitID":"emer7"},"content":"         * Returns {@code Optional#empty()} if {@code reviews} is null."},{"lineNumber":268,"author":{"gitID":"emer7"},"content":"         */"},{"lineNumber":269,"author":{"gitID":"emer7"},"content":"        public Optional\u003cSet\u003cReview\u003e\u003e getReviews() {"},{"lineNumber":270,"author":{"gitID":"emer7"},"content":"            return (reviews !\u003d null) ? Optional.of(Collections.unmodifiableSet(reviews)) : Optional.empty();"},{"lineNumber":271,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":277,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":279,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":282,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":283,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":284,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":287,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":288,"author":{"gitID":"-"},"content":""},{"lineNumber":289,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":290,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":291,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":292,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":293,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":27,"crizyli":11,"IzHoBX":17,"-":241}},{"path":"src/main/java/seedu/address/logic/commands/EmailCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import java.awt.Desktop;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import java.net.URI;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.NotificationCard;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":" * Email to the person associated with the notification card identified using index in Notification Center."},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"public class EmailCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    public static final String COMMAND_WORD \u003d \"email\";"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"            + \": Emails to remind the corresponding employee \""},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"            + \"about the notification card identified by the index number \""},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"            + \"used in Notification Center.\\n\""},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Directing to email app...\";"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_ERROR \u003d \"Error occurred. Please try again later.\";"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    public static final String[] EMAIL_TEMPLATE \u003d {\"Dear%20\","},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        \",%0D%0A%0D%0AThis%20email%20is%20to%20remind%20you%20about%20\","},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"        \"%20happening%20at%20\","},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"        \".%0D%0A%0D%0A\"};"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    private final Index targetIndex;"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    private Person owner;"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    private NotificationCard notificationCard;"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    public EmailCommand(Index targetIndex) {"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"        Desktop desktop \u003d Desktop.getDesktop();"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"        String message \u003d \"mailto:\" + owner.getEmail().toString() + \"?subject\u003d\" + \"Reminder%20for%20\""},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"                + replaceSpaceWithHexa(notificationCard.getTitle()) + \"\u0026body\u003d\""},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"                + EMAIL_TEMPLATE[0] + replaceSpaceWithHexa(notificationCard.getOwnerName())"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"                + EMAIL_TEMPLATE[1] + replaceSpaceWithHexa(notificationCard.getTitle())"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"                + EMAIL_TEMPLATE[2] + replaceSpaceWithHexa(notificationCard.getEndTime())"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"                + EMAIL_TEMPLATE[3];"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"        URI uri \u003d URI.create(message);"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"            desktop.mail(uri);"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"        } catch (IOException e) {"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"            e.printStackTrace();"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"            return new CommandResult(MESSAGE_ERROR);"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d model.getNotificationCenter().getTotalUndismmissedNotificationCards() - 1) {"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_NOTIFICATION_CARD_INDEX);"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        notificationCard \u003d model.getNotificationCenter().getNotificationCard(targetIndex);"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"        String ownerId \u003d model.getNotificationCenter().getOwnerIdByIndex(targetIndex);"},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":"        owner \u003d model.getAddressBook().findPersonById(Integer.parseInt(ownerId));"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"                || (other instanceof EmailCommand // instanceof handles nulls"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 this.targetIndex.equals(((EmailCommand) other).targetIndex)); // state check"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"     * Replaces all space characters with URI space character"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"    public String replaceSpaceWithHexa(String input) {"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"        String[] parts \u003d input.split(\" \");"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"        String toReturn \u003d \"\";"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"        for (int i \u003d 0; i \u003c parts.length; i++) {"},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"            toReturn +\u003d parts[i];"},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"            toReturn +\u003d \"%20\";"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":"        return toReturn;"},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":95}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Employees Tracker as requested ...\";"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \": Exits Employees Tracker.\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":1,"-":24}},{"path":"src/main/java/seedu/address/logic/commands/AddPhotoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import java.io.BufferedInputStream;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import java.io.BufferedOutputStream;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import java.io.FileInputStream;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import java.io.FileOutputStream;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.logic.FileChoosedEvent;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ResetPersonCardsEvent;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ShowFileChooserEvent;"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.Photo;"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":" * Adds a photo to an employee."},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"public class AddPhotoCommand extends UndoableCommand {"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"addPhoto\";"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"    public static final String IMAGE_FOLDER \u003d \"data/personphoto/\";"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a photo to an employee.\\n\""},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"            + \"Choose a photo in the file chooser. Acceptable photo file type are jpg, jprg, png, bmp.\\n\""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New photo added!\";"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_INVALID_PHOTO_TYPE \u003d \"The photo type is unacceptable!\";"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_PHOTO_NOT_CHOSEN \u003d \"You have not chosen one photo!\";"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SAME_PHOTO \u003d \"You are adding a photo with same name, please rename\""},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"            + \"it and retry!\";"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"    private final Index targetIndex;"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"    private Person targetPerson;"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"    private Person editedPerson;"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"    private String path;"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"    private String photoNameWithExtension;"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"    private boolean isTestMode;"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"    private int osType;"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"     * Creates an AddPhotoCommand to add the specified {@code Photo}"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"    public AddPhotoCommand(Index index) {"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"        isTestMode \u003d false;"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"        //check if it is test mode."},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"        if (!isTestMode) {"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"            EventsCenter.getInstance().post(new ShowFileChooserEvent());"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"            String currentDir \u003d System.getProperty(\"user.dir\");"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"            path \u003d currentDir + \"/src/main/java/resources/images/personphoto/DefaultPerson.png\";"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"        //make sure path is initialized."},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"        assert path !\u003d null;"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"        //check if the photo is chosen."},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"        if (path.equals(\"NoFileChoosed\")) {"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_PHOTO_NOT_CHOSEN);"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"        //check if the photo is of right type."},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"        if (!Photo.isValidPhotoName(path)) {"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_INVALID_PHOTO_TYPE);"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"        targetPerson \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"        if (!path.contains(\"/\"))  { //windows"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"            this.osType \u003d 1;"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"            photoNameWithExtension \u003d path.substring(path.lastIndexOf(\"\\\\\") + 1);"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"            this.osType \u003d 0;"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":"            photoNameWithExtension \u003d path.substring(path.lastIndexOf(\"/\") + 1);"},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":107,"author":{"gitID":"crizyli"},"content":"        if (!model.getPhotoList().contains(new Photo(photoNameWithExtension))) {"},{"lineNumber":108,"author":{"gitID":"crizyli"},"content":"            copyPhotoFileToStorage(photoNameWithExtension);"},{"lineNumber":109,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":111,"author":{"gitID":"crizyli"},"content":"        editedPerson \u003d createEditedPerson(targetPerson, photoNameWithExtension);"},{"lineNumber":112,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"            model.updatePerson(targetPerson, editedPerson);"},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_SAME_PHOTO);"},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":118,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":121,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().post(new ResetPersonCardsEvent());"},{"lineNumber":122,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":123,"author":{"gitID":"crizyli"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":124,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":126,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":127,"author":{"gitID":"crizyli"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":128,"author":{"gitID":"crizyli"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":129,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":130,"author":{"gitID":"crizyli"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":131,"author":{"gitID":"crizyli"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":132,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":134,"author":{"gitID":"crizyli"},"content":"        targetPerson \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":135,"author":{"gitID":"crizyli"},"content":"        editedPerson \u003d createEditedPerson(targetPerson, photoNameWithExtension);"},{"lineNumber":136,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":138,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"crizyli"},"content":"     * create a person with photo updated."},{"lineNumber":140,"author":{"gitID":"crizyli"},"content":"     * @param targetPerson"},{"lineNumber":141,"author":{"gitID":"crizyli"},"content":"     * @param photoNameWithExtension"},{"lineNumber":142,"author":{"gitID":"crizyli"},"content":"     * @return editedPerson"},{"lineNumber":143,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"crizyli"},"content":"    private Person createEditedPerson(Person targetPerson, String photoNameWithExtension) {"},{"lineNumber":145,"author":{"gitID":"crizyli"},"content":"        Photo newPhoto \u003d new Photo(photoNameWithExtension);"},{"lineNumber":146,"author":{"gitID":"crizyli"},"content":"        targetPerson.setPhotoName(newPhoto.getName());"},{"lineNumber":147,"author":{"gitID":"crizyli"},"content":"        Person editedPerson \u003d new Person(targetPerson.getName(), targetPerson.getPhone(), targetPerson.getEmail(),"},{"lineNumber":148,"author":{"gitID":"crizyli"},"content":"                targetPerson.getAddress(), targetPerson.getTags(), targetPerson.getCalendarId());"},{"lineNumber":149,"author":{"gitID":"crizyli"},"content":"        editedPerson.setRating(targetPerson.getRating());"},{"lineNumber":150,"author":{"gitID":"crizyli"},"content":"        editedPerson.setId(targetPerson.getId());"},{"lineNumber":151,"author":{"gitID":"crizyli"},"content":"        editedPerson.setReviews(targetPerson.getReviews());"},{"lineNumber":152,"author":{"gitID":"crizyli"},"content":"        editedPerson.setPhotoName(newPhoto.getName());"},{"lineNumber":153,"author":{"gitID":"crizyli"},"content":"        return editedPerson;"},{"lineNumber":154,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":156,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":157,"author":{"gitID":"crizyli"},"content":"     * copy the file chosen by user to application\u0027s storage."},{"lineNumber":158,"author":{"gitID":"crizyli"},"content":"     * @param photoNameWithExtension"},{"lineNumber":159,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"crizyli"},"content":"    private void copyPhotoFileToStorage(String photoNameWithExtension) {"},{"lineNumber":161,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":162,"author":{"gitID":"crizyli"},"content":"        String src \u003d path;"},{"lineNumber":163,"author":{"gitID":"crizyli"},"content":"        String dest;"},{"lineNumber":164,"author":{"gitID":"crizyli"},"content":"        if (osType \u003d\u003d 1) {"},{"lineNumber":165,"author":{"gitID":"crizyli"},"content":"            dest \u003d IMAGE_FOLDER + photoNameWithExtension;"},{"lineNumber":166,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":167,"author":{"gitID":"crizyli"},"content":"            dest \u003d IMAGE_FOLDER + photoNameWithExtension;"},{"lineNumber":168,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":170,"author":{"gitID":"crizyli"},"content":"        byte[] buffer \u003d new byte[1024];"},{"lineNumber":171,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"crizyli"},"content":"            FileInputStream fis \u003d new FileInputStream(src);"},{"lineNumber":173,"author":{"gitID":"crizyli"},"content":"            BufferedInputStream bis \u003d new BufferedInputStream(fis);"},{"lineNumber":174,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":175,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":176,"author":{"gitID":"crizyli"},"content":"            FileOutputStream fos \u003d new FileOutputStream(dest);"},{"lineNumber":177,"author":{"gitID":"crizyli"},"content":"            BufferedOutputStream bos \u003d new BufferedOutputStream(fos);"},{"lineNumber":178,"author":{"gitID":"crizyli"},"content":"            int len;"},{"lineNumber":179,"author":{"gitID":"crizyli"},"content":"            while ((len \u003d bis.read(buffer)) \u003e 0) {"},{"lineNumber":180,"author":{"gitID":"crizyli"},"content":"                bos.write(buffer, 0, len);"},{"lineNumber":181,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":182,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":183,"author":{"gitID":"crizyli"},"content":"            bis.close();"},{"lineNumber":184,"author":{"gitID":"crizyli"},"content":"            bos.close();"},{"lineNumber":185,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":186,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":187,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":190,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":192,"author":{"gitID":"crizyli"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":193,"author":{"gitID":"crizyli"},"content":"                || (other instanceof AddPhotoCommand // instanceof handles nulls"},{"lineNumber":194,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 targetIndex.equals(((AddPhotoCommand) other).targetIndex)"},{"lineNumber":195,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 (path \u003d\u003d null || path.equals(((AddPhotoCommand) other).path)));"},{"lineNumber":196,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":198,"author":{"gitID":"crizyli"},"content":"    protected void registerAsAnEventHandler(Object handler) {"},{"lineNumber":199,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":200,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":202,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":203,"author":{"gitID":"crizyli"},"content":"    private void handleFileChoosedEvent(FileChoosedEvent event) {"},{"lineNumber":204,"author":{"gitID":"crizyli"},"content":"        this.path \u003d event.getFilePath();"},{"lineNumber":205,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":207,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":208,"author":{"gitID":"crizyli"},"content":"     *  set this command to test mode."},{"lineNumber":209,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"crizyli"},"content":"    public void setTestMode() {"},{"lineNumber":211,"author":{"gitID":"crizyli"},"content":"        this.isTestMode \u003d true;"},{"lineNumber":212,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":213}},{"path":"src/main/java/seedu/address/logic/commands/TestAddEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDTIME;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTTIME;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.model.Event;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.model.EventDateTime;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.Authentication;"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.CreateNewCalendar;"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":" * Adds an event to a person."},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"public class TestAddEventCommand extends Command {"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"addEvent\";"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"            + \": Adds an event to the employee identified by the index number used in the last employees listing.\\n\""},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"            + \"Parameters: INDEX (must be a positive integer)\""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"            + PREFIX_TITLE + \"TITLE \""},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"            + PREFIX_LOCATION + \"LOCATION \""},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"            + PREFIX_STARTTIME + \"STARTTIME (must follow given format) \""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"            + PREFIX_ENDTIME + \"ENDTIME (must follow given format)\\n\""},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 title/Project Meeting loca/NUS, Singapore stime/2017-03-19T08:00:00\""},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"            + \" etime/2017-03-19T10:00:00 descrip/Discuss about product launch\";"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Event added!\";"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Unable to add event, please try again later.\";"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"    private final Index targetIndex;"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"    private final String title;"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"    private final String location;"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"    private final String startTime;"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"    private final String endTime;"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"    private final String description;"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(TestAddEventCommand.class);"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"    public TestAddEventCommand(Index index, String title, String location, String startTime,"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"                               String endTime, String description) {"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"        this.title \u003d title;"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"        this.location \u003d location;"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        this.description \u003d description;"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"        Person personToAddEvent \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"        // Build a new authorized API client service."},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"        com.google.api.services.calendar.Calendar service \u003d null;"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"            service \u003d Authentication.getCalendarService();"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"            logger.warning(\"Couldn\u0027t authenticate Google Calendar Service\");"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"        //Solution below adpated from https://developers.google.com/calendar/quickstart/java"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"        Event event \u003d new Event()"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"                .setSummary(title)"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"                .setLocation(location)"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"                .setDescription(description);"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"        String startTimeFormat \u003d startTime + \"+08:00\";"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"        DateTime startDateTime \u003d new DateTime(startTimeFormat);"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"        EventDateTime start \u003d new EventDateTime()"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"                .setDateTime(startDateTime)"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"                .setTimeZone(\"Asia/Singapore\");"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"        event.setStart(start);"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"        String endTimeFormat \u003d endTime + \"+08:00\";"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"        DateTime endDateTime \u003d new DateTime(endTimeFormat);"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"        EventDateTime end \u003d new EventDateTime()"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"                .setDateTime(endDateTime)"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"                .setTimeZone(\"Asia/Singapore\");"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"        event.setEnd(end);"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"        String calendarId \u003d personToAddEvent.getCalendarId();"},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":"        Logger logger \u003d LogsCenter.getLogger(TestAddEventCommand.class);"},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"        if (calendarId \u003d\u003d null || calendarId.equals(\"\") || calendarId.equals(\"null\")) {"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"            logger.info(\"calendarId null, attempting to create calendar\");"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":"            try {"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"                calendarId \u003d CreateNewCalendar.execute(personToAddEvent.getName().fullName);"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"                logger.info(\"calendar created successfully\");"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"            } catch (IOException e) {"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"                logger.info(\"unable to create calendar\");"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"                return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"            Person newWithCalendar \u003d new Person(personToAddEvent.getName(),"},{"lineNumber":118,"author":{"gitID":"IzHoBX"},"content":"                    personToAddEvent.getPhone(),"},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":"                    personToAddEvent.getEmail(),"},{"lineNumber":120,"author":{"gitID":"IzHoBX"},"content":"                    personToAddEvent.getAddress(),"},{"lineNumber":121,"author":{"gitID":"IzHoBX"},"content":"                    personToAddEvent.getTags(),"},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":"                    calendarId);"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"            //retain the oldId"},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"            newWithCalendar.setId(personToAddEvent.getId());"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"            try {"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"                model.updatePerson(personToAddEvent, newWithCalendar);"},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":"            } catch (PersonNotFoundException e) {"},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":"                logger.info(\"Unable to find original employee in model manager\");"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"                return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"                logger.info(\"newly created employee (with calendarId) is same as original employee\");"},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":"                return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"crizyli"},"content":"        //@@author crizyli"},{"lineNumber":137,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":138,"author":{"gitID":"crizyli"},"content":"        assert calendarId.endsWith(\"@group.calendar.google.com\");"},{"lineNumber":139,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"crizyli"},"content":"            event \u003d service.events().insert(calendarId, event).execute();"},{"lineNumber":141,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":142,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":143,"author":{"gitID":"crizyli"},"content":"            logger.info(\"failed to add event to calendarId\");"},{"lineNumber":144,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_FAILURE);"},{"lineNumber":145,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":147,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":148,"author":{"gitID":"IzHoBX"},"content":"        Notification notification \u003d new Notification(title, calendarId, event.getId(), event.getEnd().toString(),"},{"lineNumber":149,"author":{"gitID":"IzHoBX"},"content":"                model.getPerson(targetIndex.getZeroBased()).getId().toString());"},{"lineNumber":150,"author":{"gitID":"IzHoBX"},"content":"        model.addNotification(notification);"},{"lineNumber":151,"author":{"gitID":"crizyli"},"content":"        //@@author crizyli"},{"lineNumber":152,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":153,"author":{"gitID":"crizyli"},"content":"        logger.info(\"Event created: \" + event.getHtmlLink());"},{"lineNumber":154,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":155,"author":{"gitID":"crizyli"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":156,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":158,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":159,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":160,"author":{"gitID":"crizyli"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":161,"author":{"gitID":"crizyli"},"content":"                || (other instanceof TestAddEventCommand // instanceof handles nulls"},{"lineNumber":162,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 targetIndex.equals(((TestAddEventCommand) other).targetIndex)"},{"lineNumber":163,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 title.equals(((TestAddEventCommand) other).title)"},{"lineNumber":164,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 location.equals(((TestAddEventCommand) other).location)"},{"lineNumber":165,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 startTime.equals(((TestAddEventCommand) other).startTime)"},{"lineNumber":166,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 endTime.equals(((TestAddEventCommand) other).endTime)"},{"lineNumber":167,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 description.equals(((TestAddEventCommand) other).description));"},{"lineNumber":168,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":136,"IzHoBX":33}},{"path":"src/main/java/seedu/address/logic/commands/UnlockCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.logic.AddressBookUnlockedEvent;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.logic.PasswordEnteredEvent;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.ui.ShowPasswordFieldEvent;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":" * Unlocks ET"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"public class UnlockCommand extends Command {"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"unlock\";"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Unlocks Employees Tracker.\\n\""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Employees Tracker has been unlocked!\";"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_INCORRECT_PASSWORD \u003d \"Incorrect unlock password!\";"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_MISSING_PASSWORD \u003d \"Password cannot be missing!\";"},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_ALREADY_UNLOCKED \u003d \"Employees Tracker is already unlocked!\";"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    private String password;"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"    private boolean isTestMode;"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    private boolean hasInput;"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    public UnlockCommand() {"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"        isTestMode \u003d false;"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() {"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        if (!LogicManager.isLocked()) {"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_ALREADY_UNLOCKED);"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        if (!isTestMode) {"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"            EventsCenter.getInstance().post(new ShowPasswordFieldEvent());"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"            this.password \u003d hasInput ? \"admin\" : \"nopassword\";"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"        if (this.password.equals(\"nopassword\")) {"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_MISSING_PASSWORD);"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"        if (this.password.compareTo(LogicManager.getPassword()) \u003d\u003d 0) {"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"            LogicManager.unLock();"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"            EventsCenter.getInstance().post(new AddressBookUnlockedEvent());"},{"lineNumber":61,"author":{"gitID":"emer7"},"content":"            //@@author emer7"},{"lineNumber":62,"author":{"gitID":"emer7"},"content":"            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"            //@@author crizyli"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_INCORRECT_PASSWORD);"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"    public String getPassword() {"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"        return password;"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"                || (other instanceof UnlockCommand);"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"    protected void registerAsAnEventHandler(Object handler) {"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"     * handle the event to get the input password."},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"    private void handlePasswordEnteredEvent(PasswordEnteredEvent event) {"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"        this.password \u003d event.getPassword();"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"    public void setTestMode(boolean hasInput) {"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"        isTestMode \u003d true;"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"        this.hasInput \u003d hasInput;"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"emer7":2,"crizyli":94}},{"path":"src/main/java/seedu/address/logic/DeleteCalendar.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" * Delete calendar of a person."},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class DeleteCalendar {"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"     * Delete a calendar specified by calendarId."},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"     *"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    public static void execute(String calendarId) throws IOException {"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"        // Build a new authorized API client service."},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"        com.google.api.services.calendar.Calendar service \u003d null;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"        service \u003d Authentication.getCalendarService();"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        // Delete the calendar."},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"        service.calendars().delete(calendarId).execute();"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":26}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import java.util.Calendar;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import java.util.Timer;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import java.util.TimerTask;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.logic.RequestToDeleteNotificationEvent;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.model.NotificationAddedEvent;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.ui.ShowNotificationEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.UnlockCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.NotificationTime;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.storage.NotificationTimeParserUtil;"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.NotificationCenter;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":35,"author":{"gitID":"-"},"content":" */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_LOCKED \u003d \"Employees Tracker has been locked,\""},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"            + \"please unlock it first!\";"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    private static boolean isLocked \u003d false;"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    private static String password;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    private HashMap\u003cTimerTask, Boolean\u003e timetableEntriesStatus;"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    private HashMap\u003cTimerTask, Notification\u003e timerTaskToTimetableEntryMap;"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"    private HashMap\u003cString, TimerTask\u003e scheduledTimerTasks;"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        isLocked \u003d true;"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"        password \u003d model.getPassword();"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"        timetableEntriesStatus \u003d new HashMap\u003c\u003e();"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"        scheduledTimerTasks \u003d new HashMap\u003c\u003e();"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"        timerTaskToTimetableEntryMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"     * Constructor for test use."},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"    public LogicManager(Model model, boolean initialLock) {"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"        this.model \u003d model;"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"        isLocked \u003d initialLock;"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"        password \u003d model.getPassword();"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"        timetableEntriesStatus \u003d new HashMap\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"        scheduledTimerTasks \u003d new HashMap\u003c\u003e();"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"        timerTaskToTimetableEntryMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"            Command command;"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"            CommandResult result \u003d new CommandResult(\"\");"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"            command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"            if (isLocked \u0026\u0026 !(command instanceof HelpCommand)) {"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"                command.setData(model, history, undoRedoStack);"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"                if (command instanceof UnlockCommand) {"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"                    UnlockCommand unlockCommand \u003d (UnlockCommand) command;"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"                    result \u003d unlockCommand.execute();"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"                } else {"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"                    result \u003d new CommandResult(MESSAGE_LOCKED);"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"                }"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"            } else {"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"                command.setData(model, history, undoRedoStack);"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"                result \u003d command.execute();"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"                undoRedoStack.push(command);"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"            return result;"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"        } finally {"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"            history.add(commandText);"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":107,"author":{"gitID":"crizyli"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":108,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"crizyli"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":112,"author":{"gitID":"crizyli"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":"    public static String getPassword() {"},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"        return password;"},{"lineNumber":118,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"    public static void setPassword(String psw) {"},{"lineNumber":121,"author":{"gitID":"crizyli"},"content":"        password \u003d psw;"},{"lineNumber":122,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":124,"author":{"gitID":"crizyli"},"content":"    public static void unLock() {"},{"lineNumber":125,"author":{"gitID":"crizyli"},"content":"        isLocked \u003d false;"},{"lineNumber":126,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":128,"author":{"gitID":"crizyli"},"content":"    public static void lock() {"},{"lineNumber":129,"author":{"gitID":"crizyli"},"content":"        isLocked \u003d true;"},{"lineNumber":130,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":132,"author":{"gitID":"crizyli"},"content":"    public static boolean isLocked() {"},{"lineNumber":133,"author":{"gitID":"crizyli"},"content":"        return isLocked;"},{"lineNumber":134,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":136,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":137,"author":{"gitID":"IzHoBX"},"content":"    @Subscribe"},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"    private void handleTimetableEntryAddedEvent(NotificationAddedEvent event) {"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"        NotificationTime parsedTime \u003d NotificationTimeParserUtil.parseTime(event.notification.getEndDate());"},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":"        Calendar c \u003d Calendar.getInstance();"},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":"        c.set(parsedTime.getYear(), parsedTime.getMonth(), parsedTime.getDate(), parsedTime.getHour(),"},{"lineNumber":143,"author":{"gitID":"IzHoBX"},"content":"                parsedTime.getMinute());"},{"lineNumber":144,"author":{"gitID":"IzHoBX"},"content":"        Timer timer \u003d new Timer();"},{"lineNumber":145,"author":{"gitID":"IzHoBX"},"content":"        TimerTask task \u003d new TimerTask() {"},{"lineNumber":146,"author":{"gitID":"IzHoBX"},"content":"            @Override"},{"lineNumber":147,"author":{"gitID":"IzHoBX"},"content":"            public void run() {"},{"lineNumber":148,"author":{"gitID":"IzHoBX"},"content":"                if (timetableEntriesStatus.get(this)) {"},{"lineNumber":149,"author":{"gitID":"IzHoBX"},"content":"                    logger.info(\"An event ended at: \" + (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")).format"},{"lineNumber":150,"author":{"gitID":"IzHoBX"},"content":"                            (Calendar.getInstance().getTimeInMillis()));"},{"lineNumber":151,"author":{"gitID":"IzHoBX"},"content":"                } else {"},{"lineNumber":152,"author":{"gitID":"IzHoBX"},"content":"                    logger.info(\"A cancelled event ended at: \" + (new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\"))"},{"lineNumber":153,"author":{"gitID":"IzHoBX"},"content":"                            .format(Calendar.getInstance().getTimeInMillis()));"},{"lineNumber":154,"author":{"gitID":"IzHoBX"},"content":"                }"},{"lineNumber":155,"author":{"gitID":"IzHoBX"},"content":"                Notification notification \u003d timerTaskToTimetableEntryMap.get(this);"},{"lineNumber":156,"author":{"gitID":"IzHoBX"},"content":"                String ownerName;"},{"lineNumber":157,"author":{"gitID":"IzHoBX"},"content":"                try {"},{"lineNumber":158,"author":{"gitID":"IzHoBX"},"content":"                    ownerName \u003d ((ModelManager) model).getNameById(notification.getOwnerId());"},{"lineNumber":159,"author":{"gitID":"IzHoBX"},"content":"                    raise(new ShowNotificationEvent(ownerName, notification));"},{"lineNumber":160,"author":{"gitID":"IzHoBX"},"content":"                } catch (NullPointerException e) {"},{"lineNumber":161,"author":{"gitID":"IzHoBX"},"content":"                    logger.info(\"Corresponding employee is deleted. Ignoring this notification\");"},{"lineNumber":162,"author":{"gitID":"IzHoBX"},"content":"                    raise(new RequestToDeleteNotificationEvent(notification.getEventId(), true));"},{"lineNumber":163,"author":{"gitID":"IzHoBX"},"content":"                }"},{"lineNumber":164,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":165,"author":{"gitID":"IzHoBX"},"content":"        };"},{"lineNumber":166,"author":{"gitID":"IzHoBX"},"content":"        timetableEntriesStatus.put(task, true);"},{"lineNumber":167,"author":{"gitID":"IzHoBX"},"content":"        scheduledTimerTasks.put(event.notification.getEventId(), task);"},{"lineNumber":168,"author":{"gitID":"IzHoBX"},"content":"        timerTaskToTimetableEntryMap.put(task, event.notification);"},{"lineNumber":169,"author":{"gitID":"IzHoBX"},"content":"        System.out.println(\"An event scheduled at \" + c.getTime() + \" \" + (c.getTimeInMillis() - System"},{"lineNumber":170,"author":{"gitID":"IzHoBX"},"content":"                .currentTimeMillis()));"},{"lineNumber":171,"author":{"gitID":"IzHoBX"},"content":"        long duration \u003d c.getTimeInMillis() - System.currentTimeMillis();"},{"lineNumber":172,"author":{"gitID":"IzHoBX"},"content":"        if (duration \u003e\u003d 0) {"},{"lineNumber":173,"author":{"gitID":"IzHoBX"},"content":"            if (parsedTime.isToday()) {"},{"lineNumber":174,"author":{"gitID":"IzHoBX"},"content":"                String ownerName \u003d ((ModelManager) model).getNameById(event.notification.getOwnerId());"},{"lineNumber":175,"author":{"gitID":"IzHoBX"},"content":"                raise(new ShowNotificationEvent(ownerName, event.notification, true));"},{"lineNumber":176,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":177,"author":{"gitID":"IzHoBX"},"content":"            timer.schedule(task, duration);"},{"lineNumber":178,"author":{"gitID":"IzHoBX"},"content":"        } else {"},{"lineNumber":179,"author":{"gitID":"IzHoBX"},"content":"            task.run();"},{"lineNumber":180,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":183,"author":{"gitID":"IzHoBX"},"content":"    @Subscribe"},{"lineNumber":184,"author":{"gitID":"IzHoBX"},"content":"    private void handleTimetableEntryDeletedEvent(RequestToDeleteNotificationEvent event) {"},{"lineNumber":185,"author":{"gitID":"IzHoBX"},"content":"        TimerTask associatedTimerTask \u003d scheduledTimerTasks.get(event.id);"},{"lineNumber":186,"author":{"gitID":"IzHoBX"},"content":"        timetableEntriesStatus.put(associatedTimerTask, false);"},{"lineNumber":187,"author":{"gitID":"IzHoBX"},"content":"        scheduledTimerTasks.remove(event.id);"},{"lineNumber":188,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":190,"author":{"gitID":"IzHoBX"},"content":"    public void setNotificationCenter(NotificationCenter notificationCenter) {"},{"lineNumber":191,"author":{"gitID":"IzHoBX"},"content":"        this.model.setNotificationCenter(notificationCenter);"},{"lineNumber":192,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":194,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":195,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":80,"IzHoBX":83,"-":32}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPassword.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.storage;"},{"lineNumber":2,"content":"//@@author crizyli-unused"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" * JAXB-friendly adapted version of the Password."},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class XmlAdaptedPassword {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    @XmlValue"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    private String password;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"     * Constructs an XmlAdaptedPassword."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    public XmlAdaptedPassword() {}"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"     * Constructs a {@code XmlAdaptedPassword} with the given {@code password}."},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    public XmlAdaptedPassword(String password) {"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"        this.password \u003d password;"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    * Converts this jaxb-friendly adapted password object into the model\u0027s password object."},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    */"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    public String toModelType() {"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"        return this.password;"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"null":1,"crizyli":29,"-":2}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.model.AddressBookPasswordChangedEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    String getAddressBookFilePath();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    void handleAddressBookPasswordChangedEvent(AddressBookPasswordChangedEvent e);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":3,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/DeleteEventCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.model.Event;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import com.google.api.services.calendar.model.Events;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.logic.RequestToDeleteNotificationEvent;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.Authentication;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":" * Deletes an event with specified title in a person\u0027s calendar."},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"public class DeleteEventCommand extends Command {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    public static final String COMMAND_WORD \u003d \"deleteEvent\";"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"            + \": Deletes an event specified by title of the employee identified by the index number used \""},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"            + \"in the last employees listing.\\n\""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"            + \"Parameters: INDEX (must be a positive integer)\""},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"            + \" TITLE (event title)\\n\""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 Weekly Meeting\";"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Event deleted!\";"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_NO_SUCH_EVENT \u003d \"There is no such event!\";"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Unable to deleteNotification event, please try again later.\";"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    private final Index targetIndex;"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"    private final String title;"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    public DeleteEventCommand(Index index, String title) {"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        this.targetIndex \u003d index;"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        this.title \u003d title;"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"        Person targetPerson \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        // Build a new authorized API client service."},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        com.google.api.services.calendar.Calendar service \u003d null;"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"            service \u003d Authentication.getCalendarService();"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        String calendarId \u003d targetPerson.getCalendarId();"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"        String pageToken \u003d null;"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"        String eventId \u003d null;"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"        do {"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"            Events events \u003d null;"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"            try {"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"                events \u003d service.events().list(calendarId).setPageToken(pageToken).execute();"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"            } catch (IOException e) {"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"                e.printStackTrace();"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"            List\u003cEvent\u003e items \u003d events.getItems();"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":"            for (Event event : items) {"},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"                if (event.getSummary().compareTo(title) \u003d\u003d 0) {"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"                    eventId \u003d event.getId();"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":"                    break;"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"                }"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"            pageToken \u003d events.getNextPageToken();"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"        } while (pageToken !\u003d null);"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"        if (eventId !\u003d null) {"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"            try {"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"                service.events().delete(calendarId, eventId).execute();"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"                EventsCenter.getInstance().post(new RequestToDeleteNotificationEvent(eventId, false));"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"            } catch (IOException e) {"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"                e.printStackTrace();"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"        } else {"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"            return new CommandResult(MESSAGE_NO_SUCH_EVENT);"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"    public Index getTargetIndex() {"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"        return this.targetIndex;"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"    public String getTitle() {"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"        return this.title;"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"                || (other instanceof DeleteEventCommand // instanceof handles nulls"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 this.targetIndex.equals(((DeleteEventCommand) other).getTargetIndex())"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 this.title.equals(((DeleteEventCommand) other).getTitle())); // state check"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":105}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.model.AddressBookPasswordChangedEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            saveAddressBook(event.data);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"    public void handleAddressBookPasswordChangedEvent(AddressBookPasswordChangedEvent event) {"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Password changed, saving to file\"));"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"            saveAddressBook(event.data);"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":13,"-":92}},{"path":"src/main/java/seedu/address/logic/commands/RateCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":" * Updates the rating of an existing person in the address book."},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"public class RateCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"    public static final String COMMAND_WORD \u003d \"rate\";"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Rates the employee identified \""},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"            + \"by the index number used in the last employees listing. \""},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"            + \"Parameters: INDEX must be positive integer \""},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"            + \"RATING (must be 1, 2, 3, 4, or 5) \\n\""},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"            + \"5\";"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_RATE_PERSON_SUCCESS \u003d \"Rated employee: %1$s\";"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This employee already exists in Employees Tracker.\";"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    private final Index index;"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    private final EditCommand.EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    private Person personToEdit;"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    private Person editedPerson;"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    public RateCommand(Index index, EditCommand.EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"        requireNonNull(index);"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"        this.index \u003d index;"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"        this.editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"            throw new AssertionError(\"The target employee cannot be missing\");"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"        return new CommandResult(String.format(MESSAGE_RATE_PERSON_SUCCESS, editedPerson));"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"    private static Person createEditedPerson(Person personToEdit,"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"                                             EditCommand.EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"        Rating updatedRating \u003d editPersonDescriptor.getRating().orElse(new Rating());"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":89,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":90,"author":{"gitID":"emer7"},"content":"        Person toReturn \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":91,"author":{"gitID":"emer7"},"content":"                personToEdit.getAddress(), personToEdit.getTags(), personToEdit.getCalendarId());"},{"lineNumber":92,"author":{"gitID":"emer7"},"content":"        toReturn.setRating(updatedRating);"},{"lineNumber":93,"author":{"gitID":"emer7"},"content":"        toReturn.setReviews(personToEdit.getReviews());"},{"lineNumber":94,"author":{"gitID":"emer7"},"content":"        toReturn.setId(personToEdit.getId());"},{"lineNumber":95,"author":{"gitID":"emer7"},"content":"        toReturn.setPhotoName(personToEdit.getPhotoName());"},{"lineNumber":96,"author":{"gitID":"emer7"},"content":"        return toReturn;"},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":"    public boolean equals(Object other) {"},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"        // short circuit if same object"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":"            return true;"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"        // instanceof handles nulls"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"        if (!(other instanceof RateCommand)) {"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":"            return false;"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"        // state check"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"        RateCommand e \u003d (RateCommand) other;"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"        return index.equals(e.index)"},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":118,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"emer7":8,"IzHoBX":111}},{"path":"src/main/java/seedu/address/logic/commands/DismissCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.exceptions.NotificationNotFoundException;"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.NotificationCard;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":" * Deletes a person identified using it\u0027s last displayed index from the address book."},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"public class DismissCommand extends UndoableCommand {"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    public static final String COMMAND_WORD \u003d \"dismiss\";"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"            + \": Dismisses the notification card identified by the index number used in Notification Center.\\n\""},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_DISMISS_SUCCESS \u003d \"Dismissed notification card: %1$s\";"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_ERROR \u003d \"Error occurred. Please try again later.\";"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    public DismissCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"        NotificationCard toDelete;"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"            toDelete \u003d model.deleteNotificationByIndex(targetIndex);"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"        } catch (NotificationNotFoundException e) {"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"            //should not happen, because id is obtained from NotificationCenter"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"            LogsCenter.getLogger(DismissCommand.class).info(\"No local copy of notification in AddressBook\");"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"            return new CommandResult(MESSAGE_ERROR);"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        return new CommandResult(String.format(MESSAGE_DISMISS_SUCCESS, toDelete));"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d model.getNotificationCenter().getTotalUndismmissedNotificationCards() - 1) {"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_NOTIFICATION_CARD_INDEX);"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"                || (other instanceof DismissCommand // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 this.targetIndex.equals(((DismissCommand) other).targetIndex)); // state check"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":59}},{"path":"src/main/java/seedu/address/logic/commands/ReviewCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":""},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"emer7"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":""},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"import seedu.address.model.review.Review;"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":""},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":" * Updates the review of an existing person in the address book."},{"lineNumber":23,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"public class ReviewCommand extends UndoableCommand {"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":""},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"    public static final String COMMAND_WORD \u003d \"review\";"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":""},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reviews the employee identified \""},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"            + \"by the index number used in the last employees listing. \""},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\\n\""},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"            + \"A separate pop-up dialog will appear to request for the review.\";"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":""},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"    public static final String MESSAGE_REVIEW_PERSON_SUCCESS \u003d \"Reviewed employee: %1$s\";"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"INDEX, REVIEWER, and REVIEW must be provided.\";"},{"lineNumber":37,"author":{"gitID":"emer7"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This employee already exists in Employees Tracker.\";"},{"lineNumber":38,"author":{"gitID":"emer7"},"content":""},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"    private final Index index;"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"    private final EditCommand.EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":41,"author":{"gitID":"emer7"},"content":""},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"    private Person personToEdit;"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"    private Person editedPerson;"},{"lineNumber":44,"author":{"gitID":"emer7"},"content":""},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"    public ReviewCommand(Index index, EditCommand.EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":"        requireNonNull(index);"},{"lineNumber":51,"author":{"gitID":"emer7"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":52,"author":{"gitID":"emer7"},"content":""},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"        this.index \u003d index;"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":"        this.editPersonDescriptor \u003d new EditCommand.EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":""},{"lineNumber":57,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":58,"author":{"gitID":"emer7"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"emer7"},"content":"        try {"},{"lineNumber":60,"author":{"gitID":"emer7"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":61,"author":{"gitID":"emer7"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":62,"author":{"gitID":"emer7"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":63,"author":{"gitID":"emer7"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":64,"author":{"gitID":"emer7"},"content":"            throw new AssertionError(\"The target employee cannot be missing\");"},{"lineNumber":65,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"emer7"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":67,"author":{"gitID":"emer7"},"content":"        return new CommandResult(String.format(MESSAGE_REVIEW_PERSON_SUCCESS, editedPerson));"},{"lineNumber":68,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"emer7"},"content":""},{"lineNumber":70,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"emer7"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":72,"author":{"gitID":"emer7"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":73,"author":{"gitID":"emer7"},"content":""},{"lineNumber":74,"author":{"gitID":"emer7"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":75,"author":{"gitID":"emer7"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"emer7"},"content":""},{"lineNumber":78,"author":{"gitID":"emer7"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":79,"author":{"gitID":"emer7"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":80,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"emer7"},"content":""},{"lineNumber":82,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"emer7"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":84,"author":{"gitID":"emer7"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":85,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"emer7"},"content":"    private static Person createEditedPerson(Person personToEdit,"},{"lineNumber":87,"author":{"gitID":"emer7"},"content":"                                             EditCommand.EditPersonDescriptor editPersonDescriptor"},{"lineNumber":88,"author":{"gitID":"emer7"},"content":"    ) throws CommandException {"},{"lineNumber":89,"author":{"gitID":"emer7"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":90,"author":{"gitID":"emer7"},"content":"        assert editPersonDescriptor.getReviews().isPresent();"},{"lineNumber":91,"author":{"gitID":"emer7"},"content":""},{"lineNumber":92,"author":{"gitID":"emer7"},"content":"        Set\u003cReview\u003e oldReviews \u003d personToEdit.getReviews();"},{"lineNumber":93,"author":{"gitID":"emer7"},"content":"        Set\u003cReview\u003e newReviews \u003d editPersonDescriptor.getReviews().get();"},{"lineNumber":94,"author":{"gitID":"emer7"},"content":"        HashSet\u003cReview\u003e updatedReviews \u003d new HashSet\u003cReview\u003e();"},{"lineNumber":95,"author":{"gitID":"emer7"},"content":""},{"lineNumber":96,"author":{"gitID":"emer7"},"content":"        Review newReview \u003d newReviews.iterator().next();"},{"lineNumber":97,"author":{"gitID":"emer7"},"content":"        String newReviewer \u003d newReview.reviewer;"},{"lineNumber":98,"author":{"gitID":"emer7"},"content":"        String newValue \u003d newReview.value;"},{"lineNumber":99,"author":{"gitID":"emer7"},"content":"        Iterator\u003cReview\u003e iterator \u003d oldReviews.iterator();"},{"lineNumber":100,"author":{"gitID":"emer7"},"content":"        while (iterator.hasNext()) {"},{"lineNumber":101,"author":{"gitID":"emer7"},"content":"            Review oldReview \u003d iterator.next();"},{"lineNumber":102,"author":{"gitID":"emer7"},"content":"            String oldReviewer \u003d oldReview.reviewer;"},{"lineNumber":103,"author":{"gitID":"emer7"},"content":"            if (!oldReviewer.equals(newReviewer)) {"},{"lineNumber":104,"author":{"gitID":"emer7"},"content":"                updatedReviews.add(oldReview);"},{"lineNumber":105,"author":{"gitID":"emer7"},"content":"            }"},{"lineNumber":106,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"emer7"},"content":"        updatedReviews.add(newReview);"},{"lineNumber":108,"author":{"gitID":"emer7"},"content":""},{"lineNumber":109,"author":{"gitID":"emer7"},"content":"        Person toReturn \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":110,"author":{"gitID":"emer7"},"content":"                personToEdit.getAddress(), personToEdit.getTags(), personToEdit.getCalendarId());"},{"lineNumber":111,"author":{"gitID":"emer7"},"content":"        toReturn.setRating(personToEdit.getRating());"},{"lineNumber":112,"author":{"gitID":"emer7"},"content":"        toReturn.setReviews(updatedReviews);"},{"lineNumber":113,"author":{"gitID":"emer7"},"content":"        toReturn.setId(personToEdit.getId());"},{"lineNumber":114,"author":{"gitID":"emer7"},"content":"        toReturn.setPhotoName(personToEdit.getPhotoName());"},{"lineNumber":115,"author":{"gitID":"emer7"},"content":"        return toReturn;"},{"lineNumber":116,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"emer7"},"content":""},{"lineNumber":118,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"emer7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitID":"emer7"},"content":"        // short circuit if same object"},{"lineNumber":121,"author":{"gitID":"emer7"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":122,"author":{"gitID":"emer7"},"content":"            return true;"},{"lineNumber":123,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"emer7"},"content":""},{"lineNumber":125,"author":{"gitID":"emer7"},"content":"        // instanceof handles nulls"},{"lineNumber":126,"author":{"gitID":"emer7"},"content":"        if (!(other instanceof ReviewCommand)) {"},{"lineNumber":127,"author":{"gitID":"emer7"},"content":"            return false;"},{"lineNumber":128,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"emer7"},"content":""},{"lineNumber":130,"author":{"gitID":"emer7"},"content":"        // state check"},{"lineNumber":131,"author":{"gitID":"emer7"},"content":"        ReviewCommand e \u003d (ReviewCommand) other;"},{"lineNumber":132,"author":{"gitID":"emer7"},"content":"        return index.equals(e.index)"},{"lineNumber":133,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":134,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":135,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":136}},{"path":"src/main/java/seedu/address/storage/NotificationTimeParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.NotificationTime;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" * Parses timetable endtime to separated fields of time."},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"public class NotificationTimeParserUtil {"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    private static final int YEAR_BEGIN_INDEX \u003d 0;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    private static final int MONTH_BEGIN_INDEX \u003d 5;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    private static final int DAY_BEGIN_INDEX \u003d 8;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    private static final int HOUR_BEGIN_INDEX \u003d 11;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    private static final int MINUTE_BEGIN_INDEX \u003d 14;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    private static final int SECOND_BEGIN_INDEX \u003d 17;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    private static final int YEAR_END_INDEX \u003d 4;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    private static final int MONTH_END_INDEX \u003d 7;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    private static final int DAY_END_INDEX \u003d 10;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    private static final int HOUR_END_INDEX \u003d 13;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    private static final int MINUTE_END_INDEX \u003d 16;"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"    private static final int SECOND_END_INDEX \u003d 19;"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    //the menu of Month in Calendar is zero based"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"    private static final int MONTH_INDEX_OFFSET \u003d -1;"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    private static final int TIMEZONE_HOUR_OFFSET \u003d 0;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"     * Parses the input time string into time fields."},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"     * @params input that a string containing time information in the format:"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"     * Default format: {\"dateTime\":\"YYYY-MM-DDTHH:MM:SS.000+08:00timeZone:\"Asia/Singapore\"}"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"     * Acceptable format: YYYY-MM-DDTHH:MM:SS"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"     * @return NotificationTime containing the parsed time fields."},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    public static NotificationTime parseTime(String input) {"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        int firstIntegerOffset \u003d findFirstIntegerOffset(input);"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"        assert(firstIntegerOffset !\u003d -1 \u0026\u0026 SECOND_END_INDEX + firstIntegerOffset \u003c\u003d input.length());"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"            NotificationTime tet \u003d new NotificationTime(Integer.parseInt(input.substring(YEAR_BEGIN_INDEX"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"                            + firstIntegerOffset,"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"                    YEAR_END_INDEX + firstIntegerOffset)),"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"                    Integer.parseInt(input.substring(MONTH_BEGIN_INDEX + firstIntegerOffset, MONTH_END_INDEX"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"                            + firstIntegerOffset)) + MONTH_INDEX_OFFSET,"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"                    Integer.parseInt(input.substring(DAY_BEGIN_INDEX + firstIntegerOffset,"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"                            DAY_END_INDEX + firstIntegerOffset)),"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"                    Integer.parseInt(input.substring(HOUR_BEGIN_INDEX + firstIntegerOffset,"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"                            HOUR_END_INDEX + firstIntegerOffset)) + TIMEZONE_HOUR_OFFSET,"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"                    Integer.parseInt(input.substring(MINUTE_BEGIN_INDEX + firstIntegerOffset,"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"                            MINUTE_END_INDEX + firstIntegerOffset)),"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"                    Integer.parseInt(input.substring(SECOND_BEGIN_INDEX + firstIntegerOffset,"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"                            SECOND_END_INDEX + firstIntegerOffset)));"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"            return tet;"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"            LogsCenter.getLogger(NotificationTimeParserUtil.class).info(\"Time format in notification mismatch\");"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"            assert(false);"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"        //should not be returned"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"        return null;"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":"     * Finds the position of the first integer character"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"    private static int findFirstIntegerOffset(String input) {"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"        for (int i \u003d 0; i \u003c input.length(); i++) {"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"            if (input.charAt(i) - \u00270\u0027 \u003e\u003d 0 \u0026\u0026 input.charAt(i) - \u00270\u0027 \u003c\u003d 9) {"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"                return i;"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":"        return -1;"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":75}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Rating;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.Photo;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.review.Review;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Employee\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    private String calendarId;"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    private String rating;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"    private String photoName;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedReview\u003e reviewed \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    private int id;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"     * To retain until XmlAdaptedPersonTest is updated."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged,"},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"                            String calendarId, String photoName) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d Person.UNINITIALISED_ID;"},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"        this.photoName \u003d photoName;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"    public XmlAdaptedPerson(String name,"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"                            String phone,"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"                            String email,"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"                            String address,"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"                            String rating,"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                            List\u003cXmlAdaptedReview\u003e reviewed,"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged,"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"                            int id,"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"                            String photoName) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"        this.rating \u003d rating;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (reviewed !\u003d null) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            this.reviewed \u003d new ArrayList\u003c\u003e(reviewed);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"        this.photoName \u003d photoName;"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"        rating \u003d source.getRating().value.toString();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        reviewed \u003d new ArrayList\u003c\u003e();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        for (Review review : source.getReviews()) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            reviewed.add(new XmlAdaptedReview(review));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"crizyli"},"content":"        calendarId \u003d source.getCalendarId();"},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":"        id \u003d source.getId();"},{"lineNumber":123,"author":{"gitID":"crizyli"},"content":"        photoName \u003d source.getPhotoName();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        final List\u003cReview\u003e personReviews \u003d new ArrayList\u003c\u003e();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        for (XmlAdaptedReview review : reviewed) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            personReviews.add(review.toModelType());"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":175,"author":{"gitID":"IzHoBX"},"content":"        if (this.rating \u003d\u003d null) {"},{"lineNumber":176,"author":{"gitID":"IzHoBX"},"content":"            this.rating \u003d (new Rating()).toString();"},{"lineNumber":177,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":178,"author":{"gitID":"IzHoBX"},"content":"        if (!Rating.isValidRating(this.rating)) {"},{"lineNumber":179,"author":{"gitID":"IzHoBX"},"content":"            throw new IllegalValueException(Rating.MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":182,"author":{"gitID":"IzHoBX"},"content":"        final Rating rating \u003d new Rating(this.rating);"},{"lineNumber":183,"author":{"gitID":"crizyli"},"content":"        //@@author crizyli"},{"lineNumber":184,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":185,"author":{"gitID":"crizyli"},"content":"        final Photo photo \u003d new Photo(this.photoName);"},{"lineNumber":186,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":187,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":188,"author":{"gitID":"emer7"},"content":"        final Set\u003cReview\u003e reviews \u003d new HashSet\u003c\u003e(personReviews);"},{"lineNumber":189,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":194,"author":{"gitID":"emer7"},"content":"        Person toReturn \u003d new Person(name, phone, email, address, tags, calendarId);"},{"lineNumber":195,"author":{"gitID":"emer7"},"content":"        toReturn.setRating(rating);"},{"lineNumber":196,"author":{"gitID":"emer7"},"content":"        toReturn.setReviews(reviews);"},{"lineNumber":197,"author":{"gitID":"emer7"},"content":"        toReturn.setId(id);"},{"lineNumber":198,"author":{"gitID":"emer7"},"content":"        toReturn.setPhotoName(photo.getName());"},{"lineNumber":199,"author":{"gitID":"emer7"},"content":"        //System.out.println(toReturn.getName().fullName + \"  \" + toReturn.getPhotoName());"},{"lineNumber":200,"author":{"gitID":"emer7"},"content":""},{"lineNumber":201,"author":{"gitID":"emer7"},"content":"        return toReturn;"},{"lineNumber":202,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitID":"-"},"content":""},{"lineNumber":211,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":217,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":218,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":219,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":220,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":13,"crizyli":16,"IzHoBX":28,"-":165}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    private List\u003cXmlAdaptedPhoto\u003e photos;"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"    @XmlElement"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    private List\u003cXmlAdaptedNotification\u003e notifications;"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    private Integer nextId;"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    @XmlElement"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    private String password;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"        photos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"        notifications \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        nextId \u003d 0;"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"        password \u003d \"admin\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"        photos.addAll(src.getPhotoList().stream().map(XmlAdaptedPhoto::new).collect(Collectors.toList()));"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"        for (Notification t: src.getNotificationsList()) {"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"            notifications.add(new XmlAdaptedNotification(t.getTitle(), t.getCalendarId(), t.getEventId(), t"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"                    .getEndDate(),"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"                    t.getOwnerId()));"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"        nextId \u003d src.getNextId();"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"        password \u003d src.getPassword();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"        //@@author crizyli"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"        for (XmlAdaptedPhoto p : photos) {"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"            addressBook.addPhoto(p.toModelType());"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"        //@@author"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"        for (XmlAdaptedNotification t : notifications) {"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"            addressBook.addNotification(t.toModelType());"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"        addressBook.setNextId(nextId);"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"        addressBook.setPassword(password);"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":90,"author":{"gitID":"IzHoBX"},"content":"        return addressBook;"},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":"    public boolean equals(Object other) {"},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"            return true;"},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"            return false;"},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":"        return persons.equals(otherAb.persons)"},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 tags.equals(otherAb.tags)"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 photos.equals(otherAb.photos)"},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 notifications.equals(otherAb.notifications);"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"crizyli":13,"IzHoBX":40,"-":56}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import java.io.BufferedInputStream;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import java.io.BufferedOutputStream;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import java.io.FileOutputStream;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.HideDetailPanelEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.HideAllPersonPredicate;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":45,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":46,"author":{"gitID":"-"},"content":" */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":63,"author":{"gitID":"Yoochard"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Employees Tracker ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"        //@@author crizyli"},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"        File dataDir \u003d new File(\"data/\");"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"        FileUtil.createDirs(dataDir);"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"        File photoDir \u003d new File(\"data/personphoto\");"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"        if (!photoDir.exists()) {"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"            photoDir.mkdir();"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"            copyDefaultPhoto();"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":93,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":94,"author":{"gitID":"emer7"},"content":"        model.updateFilteredPersonList(new HideAllPersonPredicate());"},{"lineNumber":95,"author":{"gitID":"emer7"},"content":"        EventsCenter.getInstance().post(new HideDetailPanelEvent());"},{"lineNumber":96,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"     *  copy the default photo from resources to data folder."},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"    private void copyDefaultPhoto() {"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"        String dest \u003d \"data/personphoto/DefaultPerson.png\";"},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":107,"author":{"gitID":"crizyli"},"content":"        byte[] buffer \u003d new byte[1024];"},{"lineNumber":108,"author":{"gitID":"crizyli"},"content":"        try {"},{"lineNumber":109,"author":{"gitID":"crizyli"},"content":"            BufferedInputStream bis \u003d new BufferedInputStream(this.getClass().getClassLoader()"},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":"                    .getResourceAsStream(\"images/DefaultPerson.png\"));"},{"lineNumber":111,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":112,"author":{"gitID":"crizyli"},"content":"            FileOutputStream fos \u003d new FileOutputStream(dest);"},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"            BufferedOutputStream bos \u003d new BufferedOutputStream(fos);"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"            int len;"},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":"            while ((len \u003d bis.read(buffer)) \u003e 0) {"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":"                bos.write(buffer, 0, len);"},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":118,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":"            bis.close();"},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"            bos.close();"},{"lineNumber":121,"author":{"gitID":"crizyli"},"content":"        } catch (IOException e) {"},{"lineNumber":122,"author":{"gitID":"crizyli"},"content":"            e.printStackTrace();"},{"lineNumber":123,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":124,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":126,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with an empty Employees Tracker\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElse(new AddressBook());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":147,"author":{"gitID":"Yoochard"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty Employees Tracker\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":150,"author":{"gitID":"Yoochard"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Employees Tracker\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":184,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":212,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":215,"author":{"gitID":"Yoochard"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty Employees Tracker\");"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":221,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":223,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":235,"author":{"gitID":"Yoochard"},"content":"        logger.info(\"Starting Employees Tracker \" + MainApp.VERSION);"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":237,"author":{"gitID":"IzHoBX"},"content":"        model.findAllSavedNotifications();"},{"lineNumber":238,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":242,"author":{"gitID":"Yoochard"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Employees Tracker ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":243,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":255,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":256,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":257,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":4,"crizyli":43,"Yoochard":6,"IzHoBX":1,"-":208}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedReview.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":""},{"lineNumber":6,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"import seedu.address.model.review.Review;"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":""},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":" * JAXB-friendly adapted version of the Review."},{"lineNumber":11,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"public class XmlAdaptedReview {"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":""},{"lineNumber":14,"author":{"gitID":"emer7"},"content":"    @XmlValue"},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"    private String review;"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":""},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"     * Constructs an XmlAdaptedReview."},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"    public XmlAdaptedReview() {}"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":""},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"     * Constructs a {@code XmlAdaptedReview} with the given {@code review}."},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"    public XmlAdaptedReview(String review) {"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"        this.review \u003d review;"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":""},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"     * Converts a given Review into this class for JAXB use."},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"     *"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"    public XmlAdaptedReview(Review source) {"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"        review \u003d source.toString();"},{"lineNumber":37,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"emer7"},"content":""},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"     * Converts this jaxb-friendly adapted review object into the model\u0027s Review object."},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted review"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"emer7"},"content":"    public Review toModelType() throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"        if (!Review.isValidCombined(review)) {"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"            throw new IllegalValueException(Review.MESSAGE_REVIEW_CONSTRAINTS);"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"        return new Review(review);"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":""},{"lineNumber":51,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"emer7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":""},{"lineNumber":57,"author":{"gitID":"emer7"},"content":"        if (!(other instanceof XmlAdaptedReview)) {"},{"lineNumber":58,"author":{"gitID":"emer7"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"emer7"},"content":""},{"lineNumber":61,"author":{"gitID":"emer7"},"content":"        return review.equals(((XmlAdaptedReview) other).review);"},{"lineNumber":62,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":63}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedNotification.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.storage;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":" * JAXB-friendly adapted version of the Notification."},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"public class XmlAdaptedNotification {"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    private String title;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    private String calendarId;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    private String endDate;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    private String ownerId;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    private String eventId;"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"     * Constructs an XmlAdaptedNotification."},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    public XmlAdaptedNotification() {}"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"     * Constructs a {@code XmlAdaptedNotification} with the given timetable entry details."},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    public XmlAdaptedNotification(String title, String calendarId, String eventId, String endDate, String ownerId) {"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"        this.title \u003d title;"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"        this.eventId \u003d eventId;"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"        this.ownerId \u003d ownerId;"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"     * Converts a given Notification into this class for JAXB use."},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    public XmlAdaptedNotification(Notification source) {"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"        this.title \u003d title;"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        this.calendarId \u003d source.getCalendarId();"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"        this.endDate \u003d source.getEndDate();"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"        this.ownerId \u003d source.getOwnerId();"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"        this.eventId \u003d source.getEventId();"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"     * Converts this jaxb-friendly adapted timetable entry object into the model\u0027s Notification object."},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"    public Notification toModelType() {"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"        return new Notification(title, calendarId, eventId, endDate, ownerId);"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":61}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.review.Review;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            new Person(new Name(\"John Doe\"), new Phone(\"87438807\"), new Email(\"johnd@example.com\"),"},{"lineNumber":24,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":25,"author":{"gitID":"-"},"content":"                getTagSet(\"sales\", \"associate\"), \"null\"),"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Jane Doe\"), new Phone(\"99272758\"), new Email(\"janed@example.com\"),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":28,"author":{"gitID":"-"},"content":"                getTagSet(\"developer\", \"iOS\"), \"null\"),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bill Mark\"), new Phone(\"93210283\"), new Email(\"billm@example.com\"),"},{"lineNumber":30,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                getTagSet(\"marketing\", \"new\"), \"null\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Anne Sue\"), new Phone(\"91031282\"), new Email(\"annes@example.com\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"                getTagSet(\"developer\", \"android\"), \"primary\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Tan Ling\"), new Phone(\"92492021\"), new Email(\"tanlg@example.com\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                getTagSet(\"marketing\", \"senior\"), \"null\"),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Tan Seng\"), new Phone(\"92624417\"), new Email(\"tansg@example.com\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                getTagSet(\"marketing\", \"junior\"), \"null\")"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate employees\", e);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":69,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"emer7"},"content":"     * Returns a review set containing the list of strings given."},{"lineNumber":71,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"emer7"},"content":"    public static Set\u003cReview\u003e getReviewSet(String... strings) {"},{"lineNumber":73,"author":{"gitID":"emer7"},"content":"        HashSet\u003cReview\u003e reviews \u003d new HashSet\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"emer7"},"content":"        for (String s : strings) {"},{"lineNumber":75,"author":{"gitID":"emer7"},"content":"            reviews.add(new Review(s));"},{"lineNumber":76,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"emer7"},"content":""},{"lineNumber":78,"author":{"gitID":"emer7"},"content":"        return reviews;"},{"lineNumber":79,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"emer7"},"content":"    //@@author"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":13,"-":69}},{"path":"src/main/java/seedu/address/model/person/HideAllPersonPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"* For hiding persons during lock"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"*/"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":"public class HideAllPersonPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    public HideAllPersonPredicate() {}"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public boolean test(Person person) {"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"        return false;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        return false;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":19,"IzHoBX":3,"-":1}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPhoto.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.Photo;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":" * JAXB-friendly adapted version of the Photo."},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"public class XmlAdaptedPhoto {"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    @XmlValue"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"    private String photoName;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"     * Constructs an XmlAdaptedPhoto."},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public XmlAdaptedPhoto() {}"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"     * Constructs a {@code XmlAdaptedPhoto} with the given {@code photoName}."},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    public XmlAdaptedPhoto(String photoName) {"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        this.photoName \u003d photoName;"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"     * Converts a given Photo into this class for JAXB use."},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"    public XmlAdaptedPhoto(Photo source) {"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"        photoName \u003d source.name;"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"     * Converts this jaxb-friendly adapted photo object into the model\u0027s Photo object."},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"    public Photo toModelType() throws IllegalValueException {"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"        if (!Photo.isValidPhotoName(photoName)) {"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"            throw new IllegalValueException(Photo.MESSAGE_PHOTO_CONSTRAINTS);"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        return new Photo(photoName);"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"            return true;"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        if (!(other instanceof XmlAdaptedPhoto)) {"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"            return false;"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"        return photoName.equals(((XmlAdaptedPhoto) other).photoName);"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":61}},{"path":"src/main/java/seedu/address/model/person/TagContainsKeyphrasesPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import java.util.Iterator;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"emer7"},"content":""},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":""},{"lineNumber":10,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"emer7"},"content":" * Tests that a {@code Person}\u0027s {@code UniqueTagList} matches any of the keyphrases given."},{"lineNumber":12,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"public class TagContainsKeyphrasesPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":"    private final List\u003cString\u003e keyphrases;"},{"lineNumber":15,"author":{"gitID":"emer7"},"content":""},{"lineNumber":16,"author":{"gitID":"emer7"},"content":"    public TagContainsKeyphrasesPredicate(List\u003cString\u003e keyphrases) {"},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"        this.keyphrases \u003d keyphrases;"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":""},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"    public boolean test(Person person) {"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"        Iterator tagsSetIterator \u003d person.getTags().iterator();"},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"        sb.append(tagsSetIterator.next());"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"        while (tagsSetIterator.hasNext()) {"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"            sb.append(\" \" + tagsSetIterator.next());"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"        String tagStringList \u003d sb.toString()"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"                .replace(\"[\", \"\")"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"                .replace(\"]\", \"\");"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"        return keyphrases.isEmpty()"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"                ||  keyphrases.stream()"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"                .anyMatch(keyphrase -\u003e StringUtil.containsWordsIgnoreCase(tagStringList, keyphrase));"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"emer7"},"content":""},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"emer7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"emer7"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"                || (other instanceof TagContainsKeyphrasesPredicate // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 this.keyphrases.equals(((TagContainsKeyphrasesPredicate) other).keyphrases)); // state check"},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":""},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":43}},{"path":"src/main/java/seedu/address/model/person/RatingContainsKeyphrasesPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":""},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":""},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":" * Tests that a {@code Person}\u0027s {@code Rating} matches any of the keyphrases given."},{"lineNumber":11,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"public class RatingContainsKeyphrasesPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"    private final List\u003cString\u003e keyphrases;"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":""},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"    public RatingContainsKeyphrasesPredicate(List\u003cString\u003e keyphrases) {"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":"        this.keyphrases \u003d keyphrases;"},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":""},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"        return keyphrases.isEmpty()"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"                || keyphrases.stream()"},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"                .anyMatch(keyphrase -\u003e StringUtil.containsWordsIgnoreCase("},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"                        person.getRating().value.toString(), keyphrase));"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":""},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"                || (other instanceof RatingContainsKeyphrasesPredicate // instanceof handles nulls"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 this.keyphrases.equals(((RatingContainsKeyphrasesPredicate) other).keyphrases)); // state check"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":""},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":34}},{"path":"src/main/java/seedu/address/model/person/CalendarId.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":3,"content":"//@@author crizyli-unused"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":" * Represents a Person\u0027s calendarId"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"public class CalendarId {"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public final String value;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public CalendarId(String calendarId) {"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"        requireNonNull(calendarId);"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"        this.value \u003d calendarId;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"    public String getValue() {"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"        return value;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"null":1,"crizyli":21}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":""},{"lineNumber":2,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.review.Review;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.review.UniqueReviewList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"    public static final int UNINITIALISED_ID \u003d -1;"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    public static final String DEFAULT_PHOTO \u003d \"DefaultPerson.png\";"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    private Rating rating;"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"    private int id;"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    private String photoName;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private UniqueReviewList reviews;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    private final String calendarId;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * All fields except Rating and Review is not provided"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, String calendarId) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.reviews \u003d new UniqueReviewList();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"        this.rating \u003d new Rating();"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"        this.photoName \u003d DEFAULT_PHOTO;"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d UNINITIALISED_ID;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"    public Rating getRating() {"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":"        return rating;"},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"    public String getRatingDisplay() {"},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":"        return rating.getRatingDisplay();"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"    public Integer getId() {"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"        return id;"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"    public String getCalendarId() {"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"        return calendarId;"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"    public String getPhotoName() {"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":"        return photoName;"},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"emer7"},"content":"    //@@author emer7"},{"lineNumber":104,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"emer7"},"content":"     * Returns an immutable review set, which throws {@code UnsupportedOperationException}"},{"lineNumber":106,"author":{"gitID":"emer7"},"content":"     * if modification is attempted."},{"lineNumber":107,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"emer7"},"content":"    public Set\u003cReview\u003e getReviews() {"},{"lineNumber":109,"author":{"gitID":"emer7"},"content":"        return Collections.unmodifiableSet(reviews.toSet());"},{"lineNumber":110,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"emer7"},"content":""},{"lineNumber":112,"author":{"gitID":"emer7"},"content":"    public void setReviews(Set\u003cReview\u003e reviews) {"},{"lineNumber":113,"author":{"gitID":"emer7"},"content":"        this.reviews \u003d new UniqueReviewList(reviews);"},{"lineNumber":114,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"emer7"},"content":""},{"lineNumber":116,"author":{"gitID":"emer7"},"content":"    public String getPersonUrl() {"},{"lineNumber":117,"author":{"gitID":"emer7"},"content":"        return \"https://calendar.google.com/calendar/embed?src\u003d\""},{"lineNumber":118,"author":{"gitID":"emer7"},"content":"                + calendarId.replaceAll(\"@\", \"%40\") + \"\u0026ctz\u003dAsia%2FSingapore\";"},{"lineNumber":119,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"emer7"},"content":""},{"lineNumber":121,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"emer7"},"content":"     * Set the photo field which is the path to the photo."},{"lineNumber":123,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"emer7"},"content":"    public void setPhotoName(String photoName) {"},{"lineNumber":125,"author":{"gitID":"emer7"},"content":"        this.photoName \u003d photoName;"},{"lineNumber":126,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"emer7"},"content":""},{"lineNumber":128,"author":{"gitID":"emer7"},"content":"    public void setRating(Rating rating) {"},{"lineNumber":129,"author":{"gitID":"emer7"},"content":"        this.rating \u003d rating;"},{"lineNumber":130,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"emer7"},"content":"    //@@author"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":"    public void setId(int id) {"},{"lineNumber":134,"author":{"gitID":"IzHoBX"},"content":"        this.id \u003d id;"},{"lineNumber":135,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":151,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":166,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":167,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":168,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":169,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":170,"author":{"gitID":"IzHoBX"},"content":"                .append(\" Rating: \")"},{"lineNumber":171,"author":{"gitID":"IzHoBX"},"content":"                .append(getRatingDisplay())"},{"lineNumber":172,"author":{"gitID":"-"},"content":"                .append(\"\\n\")"},{"lineNumber":173,"author":{"gitID":"-"},"content":"                .append(\"Reviews:\")"},{"lineNumber":174,"author":{"gitID":"-"},"content":"                .append(\"\\n\");"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        getReviews().forEach(review -\u003e builder.append(review).append(\"\\n\"));"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        builder.append(\" Tags: \");"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":181,"author":{"gitID":"IzHoBX"},"content":"    public boolean isInitialized() {"},{"lineNumber":182,"author":{"gitID":"IzHoBX"},"content":"        return id !\u003d UNINITIALISED_ID;"},{"lineNumber":183,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"emer7":29,"crizyli":16,"IzHoBX":30,"-":109}},{"path":"src/main/java/seedu/address/model/person/FieldContainKeyphrasesPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"emer7"},"content":""},{"lineNumber":4,"author":{"gitID":"emer7"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":""},{"lineNumber":7,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"emer7"},"content":" * Tests that a {@code Person}\u0027s fields matches any of the keyphrases given."},{"lineNumber":9,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":"public class FieldContainKeyphrasesPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":11,"author":{"gitID":"emer7"},"content":"    private final Predicate\u003cPerson\u003e namePredicate;"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"    private final Predicate\u003cPerson\u003e tagPredicate;"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"    private final Predicate\u003cPerson\u003e ratingPredicate;"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":""},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"    public FieldContainKeyphrasesPredicate(List\u003cString\u003e nameKeyphrases,"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":"                                           List\u003cString\u003e tagKeyphrases,"},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"                                           List\u003cString\u003e ratingKeyphrases) {"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"        this.namePredicate \u003d new NameContainsKeyphrasesPredicate(nameKeyphrases);"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"        this.tagPredicate \u003d new TagContainsKeyphrasesPredicate(tagKeyphrases);"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":"        this.ratingPredicate \u003d new RatingContainsKeyphrasesPredicate(ratingKeyphrases);"},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":""},{"lineNumber":23,"author":{"gitID":"emer7"},"content":""},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"    public boolean test(Person person) {"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"        return namePredicate.test(person) \u0026\u0026 tagPredicate.test(person) \u0026\u0026 ratingPredicate.test(person);"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":""},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"                || (other instanceof FieldContainKeyphrasesPredicate // instanceof handles nulls"},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 this.namePredicate.equals(((FieldContainKeyphrasesPredicate) other).namePredicate)"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 this.tagPredicate.equals(((FieldContainKeyphrasesPredicate) other).tagPredicate)"},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 this.ratingPredicate.equals((("},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"                        FieldContainKeyphrasesPredicate) other).ratingPredicate)); // state check"},{"lineNumber":37,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"emer7"},"content":""},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":39}},{"path":"src/main/java/seedu/address/model/notification/Notification.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.notification;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * Represents a timetable entry added to Employees Tracker"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"public class Notification {"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    private String title;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    private String calendarId;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    private String eventId;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    private String endDate;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    private String ownerId;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    public Notification(String title, String calendarId, String eventId, String endDate, String ownerId) {"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"        assert(title !\u003d null \u0026\u0026 eventId !\u003d null \u0026\u0026 endDate !\u003d null \u0026\u0026 ownerId !\u003d null \u0026\u0026 !ownerId.equals(Person"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"                .UNINITIALISED_ID + \"\"));"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"        this.title \u003d title;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"        this.calendarId \u003d calendarId;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"        this.eventId \u003d eventId;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"        this.ownerId \u003d ownerId;"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"    public String getCalendarId() {"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"        return calendarId;"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"    public String getEventId() {"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"        return eventId;"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    public String getEndDate() {"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"        return endDate;"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    public String getOwnerId() {"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"        return ownerId;"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    public String getTitle() {"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        return title;"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    public String toDisplayString() {"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"        return \"Event \" + getTitle() + \" ended at \" + getEndDateDisplay();"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"    public String getEndDateDisplay() {"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"        return getEndDate().substring(13, 23) + \" \" + getEndDate().substring(24, 32);"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"        return title;"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":58}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":"import java.util.LinkedList;"},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.Photo;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    ObservableList\u003cPhoto\u003e getPhotoList();"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"     * Returns an unmodifiable view of the notification list."},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    LinkedList\u003cNotification\u003e getNotificationsList();"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    int getNextId();"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"    String getPassword();"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    Person findPersonById(int id);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":10,"IzHoBX":14,"-":24}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private String addressBookFilePath \u003d \"data/addressbook.xml\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String addressBookName \u003d \"MyAddressBook\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":"        this.setGuiSettings(500, 500, 0, 0, \"bright\");"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":"    public void setGuiSettings(double width, double height, int x, int y, String theme) {"},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y, theme);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Yoochard":3,"-":75}},{"path":"src/main/java/seedu/address/model/notification/NotificationTime.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.notification;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import java.util.Calendar;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":" * Container for different time fields"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"public class NotificationTime {"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":"    private int year;"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":"    private int month;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"    private int date;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    private int hour;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    private int minute;"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    private int seconds;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    public NotificationTime(int year, int month, int date, int hour, int minute, int seconds) {"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"        this.year \u003d year;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"        this.month \u003d month;"},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"        this.date \u003d date;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":"        this.hour \u003d hour;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"        this.minute \u003d minute;"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"        this.seconds \u003d seconds;"},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    public int getYear() {"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":"        return year;"},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"    public int getMonth() {"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"        return month;"},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    public int getDate() {"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"        return date;"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    public int getHour() {"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"        return hour;"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"    public int getMinute() {"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"        return minute;"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"    public int getSeconds() {"},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"        return seconds;"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":"     * Checks if the date contained refers to today\u0027s date"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"    public boolean isToday() {"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"        Calendar cal \u003d Calendar.getInstance();"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"        int year \u003d cal.get(Calendar.YEAR);"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":"        int month \u003d cal.get(Calendar.MONTH);"},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"        int day \u003d cal.get(Calendar.DAY_OF_MONTH);"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"        return this.year \u003d\u003d year \u0026\u0026 this.month \u003d\u003d month \u0026\u0026 this.date \u003d\u003d day;"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":61}},{"path":"src/main/java/seedu/address/model/person/Rating.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.person;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import com.vdurmont.emoji.EmojiParser;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":" * Represents a Person\u0027s rating in the address book."},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)}"},{"lineNumber":11,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"public class Rating {"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"    public static final String MESSAGE_RATING_CONSTRAINTS \u003d \"Rating must be 1, 2, 3, 4 or 5\";"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"    public static final String RATING_VALIDATION_REGEX \u003d \"-?\\\\d*\";"},{"lineNumber":15,"author":{"gitID":"IzHoBX"},"content":"    public static final int DEFAULT_NULL_RATING \u003d -1;"},{"lineNumber":16,"author":{"gitID":"IzHoBX"},"content":"    public static final String INVALID_RATING_DISPLAY \u003d \"-\";"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"    public static final String RATING_DISPLAY \u003d \":star2: \";"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"    public static final int MAX_RATING \u003d 5;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":20,"author":{"gitID":"IzHoBX"},"content":"    public final Integer value;"},{"lineNumber":21,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"     * Constructs a {@code Rating} for a new person who hasn\u0027t been assigned a rating."},{"lineNumber":24,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"    public Rating() {"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"        value \u003d DEFAULT_NULL_RATING;"},{"lineNumber":27,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":29,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"IzHoBX"},"content":"     * Constructs a {@code Rating}."},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"     * @param rating A valid rating."},{"lineNumber":33,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"IzHoBX"},"content":"    public Rating(String rating) {"},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"        checkArgument(isValidRating(rating), MESSAGE_RATING_CONSTRAINTS);"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"        value \u003d Integer.parseInt(rating);"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"     * Returns true if a given string is a valid person rating."},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    public static boolean isValidRating(String test) {"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"        return test.matches(RATING_VALIDATION_REGEX);"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":46,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"IzHoBX"},"content":"     * Returns true if a given string is a valid input of person rating."},{"lineNumber":48,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"IzHoBX"},"content":"    public static boolean isValidInputRating(int test) {"},{"lineNumber":50,"author":{"gitID":"IzHoBX"},"content":"        return test \u003e 0 \u0026\u0026 test \u003c\u003d MAX_RATING;"},{"lineNumber":51,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitID":"IzHoBX"},"content":"        return value.toString();"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":58,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"IzHoBX"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"IzHoBX"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":61,"author":{"gitID":"IzHoBX"},"content":"                || ((other instanceof Rating) // instanceof handles nulls"},{"lineNumber":62,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 this.value \u003d\u003d ((Rating) other).value); // state check"},{"lineNumber":63,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":65,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"IzHoBX"},"content":"    public int hashCode() {"},{"lineNumber":67,"author":{"gitID":"IzHoBX"},"content":"        return value.hashCode();"},{"lineNumber":68,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":70,"author":{"gitID":"IzHoBX"},"content":"    public String getRatingDisplay() {"},{"lineNumber":71,"author":{"gitID":"IzHoBX"},"content":"        if (value \u003d\u003d -1) {"},{"lineNumber":72,"author":{"gitID":"IzHoBX"},"content":"            return INVALID_RATING_DISPLAY;"},{"lineNumber":73,"author":{"gitID":"IzHoBX"},"content":"        } else {"},{"lineNumber":74,"author":{"gitID":"IzHoBX"},"content":"            return convertRatingToStars(value);"},{"lineNumber":75,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"     * Converts numerical rating into respective number of stars"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":"    private String convertRatingToStars(int rating) {"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"        while (rating-- \u003e 0) {"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"            sb.append(RATING_DISPLAY);"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"        return EmojiParser.parseToUnicode(sb.toString());"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"IzHoBX":88}},{"path":"src/main/java/seedu/address/model/notification/exceptions/NotificationNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"IzHoBX"},"content":"//@@author IzHoBX"},{"lineNumber":2,"author":{"gitID":"IzHoBX"},"content":"package seedu.address.model.notification.exceptions;"},{"lineNumber":3,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":4,"author":{"gitID":"IzHoBX"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"IzHoBX"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":" */"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"public class NotificationNotFoundException extends Exception {}"}],"authorContributionMap":{"IzHoBX":7}},{"path":"src/main/java/seedu/address/model/person/UniqueEmployeeList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"import java.util.Comparator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonEditedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":21,"author":{"gitID":"-"},"content":" *"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":23,"author":{"gitID":"-"},"content":" *"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"public class UniqueEmployeeList implements Iterable\u003cPerson\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new PersonEditedEvent(index, editedPerson));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"Yoochard"},"content":"    public void setPersons(UniqueEmployeeList replacement) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":94,"author":{"gitID":"Yoochard"},"content":"        final UniqueEmployeeList replacement \u003d new UniqueEmployeeList();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitID":"Yoochard"},"content":"                || (other instanceof UniqueEmployeeList // instanceof handles nulls"},{"lineNumber":117,"author":{"gitID":"Yoochard"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueEmployeeList) other).internalList));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":120,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":121,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"Yoochard"},"content":"     * Sorts existing persons, check sort field here"},{"lineNumber":123,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"Yoochard"},"content":"    public void sort(String field) {"},{"lineNumber":125,"author":{"gitID":"Yoochard"},"content":"        switch (field) {"},{"lineNumber":126,"author":{"gitID":"Yoochard"},"content":"        case \"name\":"},{"lineNumber":127,"author":{"gitID":"Yoochard"},"content":"            sortByName();"},{"lineNumber":128,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":129,"author":{"gitID":"Yoochard"},"content":"        case \"phone\":"},{"lineNumber":130,"author":{"gitID":"Yoochard"},"content":"            sortByPhone();"},{"lineNumber":131,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":132,"author":{"gitID":"Yoochard"},"content":"        case \"email\":"},{"lineNumber":133,"author":{"gitID":"Yoochard"},"content":"            sortByEmail();"},{"lineNumber":134,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":135,"author":{"gitID":"Yoochard"},"content":"        case \"address\":"},{"lineNumber":136,"author":{"gitID":"Yoochard"},"content":"            sortByAddress();"},{"lineNumber":137,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":138,"author":{"gitID":"Yoochard"},"content":"        case \"tag\":"},{"lineNumber":139,"author":{"gitID":"Yoochard"},"content":"            sortByTag();"},{"lineNumber":140,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":141,"author":{"gitID":"Yoochard"},"content":"        case \"rate\":"},{"lineNumber":142,"author":{"gitID":"Yoochard"},"content":"            sortByRate();"},{"lineNumber":143,"author":{"gitID":"Yoochard"},"content":"            break;"},{"lineNumber":144,"author":{"gitID":"Yoochard"},"content":"        default:"},{"lineNumber":145,"author":{"gitID":"Yoochard"},"content":"            throw new AssertionError(\"Sort field should be name, phone, email, tag, address or rate.\");"},{"lineNumber":146,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"Yoochard"},"content":"     * Specific sort method for every field, sort by name"},{"lineNumber":150,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"Yoochard"},"content":"    public void sortByName() {"},{"lineNumber":152,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":153,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":154,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getName().toString().compareToIgnoreCase(p2.getName().toString());"},{"lineNumber":155,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":156,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":157,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":158,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":160,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"Yoochard"},"content":"     * when the input field is phone, sort by phone"},{"lineNumber":162,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"Yoochard"},"content":"    public void sortByPhone() {"},{"lineNumber":164,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":165,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":166,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getPhone().toString().compareToIgnoreCase(p2.getPhone().toString());"},{"lineNumber":167,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":168,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":169,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":170,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":172,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"Yoochard"},"content":"     * when the input field is email, sort by email"},{"lineNumber":174,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"Yoochard"},"content":"    public void sortByEmail() {"},{"lineNumber":176,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":177,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":178,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getEmail().toString().compareToIgnoreCase(p2.getEmail().toString());"},{"lineNumber":179,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":180,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":181,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":182,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":184,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"Yoochard"},"content":"     * when the input field is address, sort by address"},{"lineNumber":186,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"Yoochard"},"content":"    public void sortByAddress() {"},{"lineNumber":188,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":189,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":190,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getAddress().toString().compareToIgnoreCase(p2.getAddress().toString());"},{"lineNumber":191,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":192,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":193,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":194,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":196,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"Yoochard"},"content":"     * when the input field is tag, sort by tag"},{"lineNumber":198,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"Yoochard"},"content":"    public void sortByTag() {"},{"lineNumber":200,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":201,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":202,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p1.getTags().toString().compareToIgnoreCase(p2.getTags().toString());"},{"lineNumber":203,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":204,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":205,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":206,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":208,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"Yoochard"},"content":"     * when the input field is rate, sort by rate in descending order"},{"lineNumber":210,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"Yoochard"},"content":"    public void sortByRate() {"},{"lineNumber":212,"author":{"gitID":"Yoochard"},"content":"        Collections.sort(internalList, new Comparator\u003cPerson\u003e() {"},{"lineNumber":213,"author":{"gitID":"Yoochard"},"content":"            public int compare(Person p1, Person p2) {"},{"lineNumber":214,"author":{"gitID":"Yoochard"},"content":"                int num \u003d p2.getRating().toString().compareToIgnoreCase(p1.getRating().toString());"},{"lineNumber":215,"author":{"gitID":"Yoochard"},"content":"                return num;"},{"lineNumber":216,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":217,"author":{"gitID":"Yoochard"},"content":"        });"},{"lineNumber":218,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":220,"author":{"gitID":"Yoochard"},"content":"    @Override"},{"lineNumber":221,"author":{"gitID":"Yoochard"},"content":"    public int hashCode() {"},{"lineNumber":222,"author":{"gitID":"Yoochard"},"content":"        return internalList.hashCode();"},{"lineNumber":223,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":224,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":114,"IzHoBX":1,"-":109}},{"path":"src/main/java/seedu/address/model/listevent/ListEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.model.listevent;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import com.google.api.client.util.DateTime;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" * Represents a event that is to be loaded in to-do list window."},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class ListEvent {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    private String title;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"    private String location;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    private DateTime startTime;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public ListEvent(String title, String location, DateTime startTime) {"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"        this.setTitle(title);"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"        this.setLocation(location);"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":"        this.setStartTime(startTime);"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"    public String getTitle() {"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"        return title;"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    public void setTitle(String title) {"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        this.title \u003d title;"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    public String getLocation() {"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"        return location;"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"    public void setLocation(String location) {"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        this.location \u003d location;"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"    public DateTime getStartTime() {"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        return startTime;"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    public void setStartTime(DateTime startTime) {"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"        String toReturn \u003d \"\";"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"        if (title !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"            toReturn +\u003d \"EVENT: \" + title + \"  ||  \";"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        if (location !\u003d null) {"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"            toReturn +\u003d \" LOCATION: \" + location + \"  ||  \";"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"        if (startTime !\u003d null) {"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"            toReturn +\u003d \" START AT: \""},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"                    + startTime.toString().substring(0, startTime.toString()"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"                    .lastIndexOf(\"+\")).replaceAll(\"T\", \" \");"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"        return toReturn;"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":60}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import java.util.LinkedList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"IzHoBX"},"content":"import java.util.concurrent.Semaphore;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":18,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.exceptions.NotificationNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"import seedu.address.model.person.UniqueEmployeeList;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.Photo;"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.UniquePhotoList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":31,"author":{"gitID":"-"},"content":" */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Yoochard"},"content":"    private final UniqueEmployeeList persons;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"    private final UniquePhotoList photos;"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":"    private LinkedList\u003cNotification\u003e notifications;"},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    private int nextId;"},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    private String password;"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    private Semaphore semaphore;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":50,"author":{"gitID":"Yoochard"},"content":"        persons \u003d new UniqueEmployeeList();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"        photos \u003d new UniquePhotoList();"},{"lineNumber":53,"author":{"gitID":"IzHoBX"},"content":"        notifications \u003d new LinkedList\u003c\u003e();"},{"lineNumber":54,"author":{"gitID":"IzHoBX"},"content":"        nextId \u003d 0;"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        password \u003d \"admin\";"},{"lineNumber":56,"author":{"gitID":"IzHoBX"},"content":"        semaphore \u003d new Semaphore(1);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":"    public void setPhotos(Set\u003cPhoto\u003e photos) {"},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"        this.photos.setPhotos(photos);"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"    public void setNotificationsList(LinkedList\u003cNotification\u003e notifications) {"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"        this.notifications \u003d notifications;"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":88,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"        setPhotos(new HashSet\u003c\u003e(newData.getPhotoList()));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":97,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"        setNotificationsList(newData.getNotificationsList());"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"        this.nextId \u003d newData.getNextId();"},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"        this.password \u003d newData.getPassword();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Employees Tracker should not have duplicate employees\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"        //@@author IzHoBX"},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"        if (!person.isInitialized()) {"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"            person.setId(nextId);"},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"            nextId++;"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":"        //@@author"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":150,"author":{"gitID":"crizyli"},"content":"        syncedEditedPerson.setPhotoName(editedPerson.getPhotoName());"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":158,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":169,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":171,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":172,"author":{"gitID":"crizyli"},"content":"        //@@author crizyli"},{"lineNumber":173,"author":{"gitID":"crizyli"},"content":"        Photo toAdd \u003d new Photo(person.getPhotoName());"},{"lineNumber":174,"author":{"gitID":"crizyli"},"content":"        if (!photos.contains(toAdd)) {"},{"lineNumber":175,"author":{"gitID":"crizyli"},"content":"            try {"},{"lineNumber":176,"author":{"gitID":"crizyli"},"content":"                photos.add(toAdd);"},{"lineNumber":177,"author":{"gitID":"crizyli"},"content":"            } catch (UniquePhotoList.DuplicatePhotoException e) {"},{"lineNumber":178,"author":{"gitID":"crizyli"},"content":"                e.printStackTrace();"},{"lineNumber":179,"author":{"gitID":"crizyli"},"content":"            }"},{"lineNumber":180,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":182,"author":{"gitID":"emer7"},"content":"        //@@author emer7"},{"lineNumber":183,"author":{"gitID":"emer7"},"content":"        Person toReturn \u003d new Person("},{"lineNumber":184,"author":{"gitID":"emer7"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"},{"lineNumber":185,"author":{"gitID":"emer7"},"content":"                correctTagReferences, person.getCalendarId());"},{"lineNumber":186,"author":{"gitID":"emer7"},"content":"        toReturn.setRating(person.getRating());"},{"lineNumber":187,"author":{"gitID":"emer7"},"content":"        toReturn.setReviews(person.getReviews());"},{"lineNumber":188,"author":{"gitID":"emer7"},"content":"        toReturn.setId(person.getId());"},{"lineNumber":189,"author":{"gitID":"emer7"},"content":"        toReturn.setPhotoName(person.getPhotoName());"},{"lineNumber":190,"author":{"gitID":"emer7"},"content":"        return toReturn;"},{"lineNumber":191,"author":{"gitID":"emer7"},"content":"        //@@author"},{"lineNumber":192,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":200,"author":{"gitID":"IzHoBX"},"content":"        removeNotificationsWithOwnerId(key.getId());"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":215,"author":{"gitID":"crizyli"},"content":"    public void addPhoto(Photo p) throws UniquePhotoList.DuplicatePhotoException {"},{"lineNumber":216,"author":{"gitID":"crizyli"},"content":"        photos.add(p);"},{"lineNumber":217,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":219,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":220,"author":{"gitID":"IzHoBX"},"content":"    // timetable entry level operations"},{"lineNumber":221,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"IzHoBX"},"content":"     * Adds a notification to the address book."},{"lineNumber":223,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"IzHoBX"},"content":"    public void addNotification(Notification notification) {"},{"lineNumber":225,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":226,"author":{"gitID":"IzHoBX"},"content":"            semaphore.acquire();"},{"lineNumber":227,"author":{"gitID":"IzHoBX"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":228,"author":{"gitID":"IzHoBX"},"content":"            e.printStackTrace();"},{"lineNumber":229,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"IzHoBX"},"content":"        notifications.add(notification);"},{"lineNumber":231,"author":{"gitID":"IzHoBX"},"content":"        semaphore.release();"},{"lineNumber":232,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":234,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"IzHoBX"},"content":"     * Removes a timetable entry from the address book."},{"lineNumber":236,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"IzHoBX"},"content":"    public void deleteNotification(String notificationId) throws NotificationNotFoundException {"},{"lineNumber":238,"author":{"gitID":"IzHoBX"},"content":"        boolean found \u003d false;"},{"lineNumber":239,"author":{"gitID":"IzHoBX"},"content":"        LinkedList\u003cNotification\u003e toDelete \u003d new LinkedList\u003c\u003e();"},{"lineNumber":240,"author":{"gitID":"IzHoBX"},"content":"        for (Notification n: notifications) {"},{"lineNumber":241,"author":{"gitID":"IzHoBX"},"content":"            if (n.getEventId().equals(notificationId)) {"},{"lineNumber":242,"author":{"gitID":"IzHoBX"},"content":"                toDelete.add(n);"},{"lineNumber":243,"author":{"gitID":"IzHoBX"},"content":"                found \u003d true;"},{"lineNumber":244,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":245,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":246,"author":{"gitID":"IzHoBX"},"content":"        if (found) {"},{"lineNumber":247,"author":{"gitID":"IzHoBX"},"content":"            for (Notification n: toDelete) {"},{"lineNumber":248,"author":{"gitID":"IzHoBX"},"content":"                notifications.remove(n);"},{"lineNumber":249,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":250,"author":{"gitID":"IzHoBX"},"content":"        } else {"},{"lineNumber":251,"author":{"gitID":"IzHoBX"},"content":"            throw new NotificationNotFoundException();"},{"lineNumber":252,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":253,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":255,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":256,"author":{"gitID":"IzHoBX"},"content":"     * Removes all notifications associated with a person id."},{"lineNumber":257,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"IzHoBX"},"content":"    private void removeNotificationsWithOwnerId (Integer id) {"},{"lineNumber":259,"author":{"gitID":"IzHoBX"},"content":"        LinkedList\u003cNotification\u003e toDelete \u003d new LinkedList\u003c\u003e();"},{"lineNumber":260,"author":{"gitID":"IzHoBX"},"content":"        for (Notification n: notifications) {"},{"lineNumber":261,"author":{"gitID":"IzHoBX"},"content":"            if (n.getOwnerId().equals(id + \"\")) {"},{"lineNumber":262,"author":{"gitID":"IzHoBX"},"content":"                toDelete.add(n);"},{"lineNumber":263,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":264,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":265,"author":{"gitID":"IzHoBX"},"content":"        for (Notification n: toDelete) {"},{"lineNumber":266,"author":{"gitID":"IzHoBX"},"content":"            notifications.remove(n);"},{"lineNumber":267,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":268,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":270,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":271,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":272,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":275,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" employees, \" + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":277,"author":{"gitID":"crizyli"},"content":"                + notifications.size() + \" notifications\" + photos.asObservableList().size() + \" photos.\";"},{"lineNumber":278,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":281,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":286,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":291,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":292,"author":{"gitID":"crizyli"},"content":"    public ObservableList\u003cPhoto\u003e getPhotoList() {"},{"lineNumber":293,"author":{"gitID":"crizyli"},"content":"        return photos.asObservableList();"},{"lineNumber":294,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":296,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":297,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":298,"author":{"gitID":"IzHoBX"},"content":"    public LinkedList\u003cNotification\u003e getNotificationsList() {"},{"lineNumber":299,"author":{"gitID":"IzHoBX"},"content":"        return notifications;"},{"lineNumber":300,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":303,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":305,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":306,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":307,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags))"},{"lineNumber":308,"author":{"gitID":"IzHoBX"},"content":"                \u0026\u0026 this.notifications.equals(((AddressBook) other).notifications);"},{"lineNumber":309,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":316,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":317,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":318,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":319,"author":{"gitID":"IzHoBX"},"content":"    public int getNextId() {"},{"lineNumber":320,"author":{"gitID":"IzHoBX"},"content":"        return nextId;"},{"lineNumber":321,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":322,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":323,"author":{"gitID":"IzHoBX"},"content":"    public void setNextId(int nextId) {"},{"lineNumber":324,"author":{"gitID":"IzHoBX"},"content":"        this.nextId \u003d nextId;"},{"lineNumber":325,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":326,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":327,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":328,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":329,"author":{"gitID":"crizyli"},"content":"    public String getPassword() {"},{"lineNumber":330,"author":{"gitID":"crizyli"},"content":"        return password;"},{"lineNumber":331,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":332,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":333,"author":{"gitID":"crizyli"},"content":"    public void setPassword(String password) {"},{"lineNumber":334,"author":{"gitID":"crizyli"},"content":"        this.password \u003d password;"},{"lineNumber":335,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":336,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":337,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":338,"author":{"gitID":"Yoochard"},"content":"    /** sort the existing persons in specific field"},{"lineNumber":339,"author":{"gitID":"Yoochard"},"content":"     *"},{"lineNumber":340,"author":{"gitID":"Yoochard"},"content":"     * @param field must be String and not null"},{"lineNumber":341,"author":{"gitID":"Yoochard"},"content":"     *"},{"lineNumber":342,"author":{"gitID":"Yoochard"},"content":"     * */"},{"lineNumber":343,"author":{"gitID":"Yoochard"},"content":"    public void sort(String field) {"},{"lineNumber":344,"author":{"gitID":"Yoochard"},"content":"        persons.sort(field);"},{"lineNumber":345,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":347,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":348,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":349,"author":{"gitID":"IzHoBX"},"content":"     * Returns a person with the given id."},{"lineNumber":350,"author":{"gitID":"IzHoBX"},"content":"     *"},{"lineNumber":351,"author":{"gitID":"IzHoBX"},"content":"     * @param id must be a valid id."},{"lineNumber":352,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":353,"author":{"gitID":"IzHoBX"},"content":"    public Person findPersonById(int id) {"},{"lineNumber":354,"author":{"gitID":"IzHoBX"},"content":"        for (Person p: persons) {"},{"lineNumber":355,"author":{"gitID":"IzHoBX"},"content":"            if (p.getId() \u003d\u003d id) {"},{"lineNumber":356,"author":{"gitID":"IzHoBX"},"content":"                return p;"},{"lineNumber":357,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":358,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":359,"author":{"gitID":"IzHoBX"},"content":"        return null;"},{"lineNumber":360,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":361,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":362,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":363,"author":{"gitID":"IzHoBX"},"content":"}"}],"authorContributionMap":{"emer7":10,"crizyli":49,"Yoochard":13,"IzHoBX":113,"-":178}},{"path":"src/main/java/seedu/address/model/review/Review.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":""},{"lineNumber":3,"author":{"gitID":"emer7"},"content":"package seedu.address.model.review;"},{"lineNumber":4,"author":{"gitID":"emer7"},"content":""},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":"import static seedu.address.model.person.Email.EMAIL_VALIDATION_REGEX;"},{"lineNumber":7,"author":{"gitID":"emer7"},"content":""},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":" * Represents a Person\u0027s review in the address book."},{"lineNumber":10,"author":{"gitID":"emer7"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidCombined(String)}"},{"lineNumber":11,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"public class Review {"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"    public static final String MESSAGE_REVIEW_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":"            \"Employee reviewer and review can take any values, and they should not be blank.\";"},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"    private static final String DEFAULT_REVIEWER \u003d \"-\";"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":"    private static final String DEFAULT_REVIEW \u003d \"-\";"},{"lineNumber":17,"author":{"gitID":"emer7"},"content":""},{"lineNumber":18,"author":{"gitID":"emer7"},"content":"    public final String reviewer;"},{"lineNumber":19,"author":{"gitID":"emer7"},"content":"    public final String value;"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":""},{"lineNumber":21,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":"     * Constructs a {@code Review} for a new person who hasn\u0027t been assigned a review."},{"lineNumber":23,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"    public Review() {"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":"        reviewer \u003d DEFAULT_REVIEWER;"},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"        value \u003d DEFAULT_REVIEW;"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"emer7"},"content":""},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"     * Constructs a {@code Review}."},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":"     * @param combined A valid combined reviewer and review."},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"    public Review(String combined) {"},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"        checkArgument(isValidCombined(combined), MESSAGE_REVIEW_CONSTRAINTS);"},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"        this.reviewer \u003d combined.split(\"[\\\\r\\\\n]+\", 2)[0].trim();"},{"lineNumber":37,"author":{"gitID":"emer7"},"content":"        this.value \u003d combined.split(\"[\\\\r\\\\n]+\", 2)[1].trim();"},{"lineNumber":38,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"emer7"},"content":""},{"lineNumber":40,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"     * Returns true if a given string is a valid combined reviewer and review."},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":"    public static boolean isValidCombined(String test) {"},{"lineNumber":44,"author":{"gitID":"emer7"},"content":"        return test.split(\"[\\\\r\\\\n]+\", 2).length \u003d\u003d 2"},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 (isValidReviewer(test.split(\"[\\\\r\\\\n]+\", 2)[0].trim()));"},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"emer7"},"content":""},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"     * Returns true if a given string is a valid reviewer."},{"lineNumber":50,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"emer7"},"content":"    public static boolean isValidReviewer(String test) {"},{"lineNumber":52,"author":{"gitID":"emer7"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":""},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitID":"emer7"},"content":"        return reviewer + \"\\n\" + value;"},{"lineNumber":58,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"emer7"},"content":""},{"lineNumber":60,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"emer7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitID":"emer7"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitID":"emer7"},"content":"                || (other instanceof Review // instanceof handles nulls"},{"lineNumber":64,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 this.reviewer.equals(((Review) other).reviewer)"},{"lineNumber":65,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 this.value.equals(((Review) other).value)); // state check"},{"lineNumber":66,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"emer7"},"content":""},{"lineNumber":68,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"emer7"},"content":"    public int hashCode() {"},{"lineNumber":70,"author":{"gitID":"emer7"},"content":"        return toString().hashCode();"},{"lineNumber":71,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":72}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"IzHoBX"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.logic.GetEmployeesRequestEvent;"},{"lineNumber":19,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.logic.RequestToDeleteNotificationEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.model.AddressBookPasswordChangedEvent;"},{"lineNumber":22,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.model.NotificationAddedEvent;"},{"lineNumber":23,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.events.model.RequestForNotificationCenterEvent;"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.events.model.ReturnedEmployeesEvent;"},{"lineNumber":25,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":26,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.exceptions.NotificationNotFoundException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.Photo;"},{"lineNumber":31,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.NotificationCard;"},{"lineNumber":32,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.NotificationCenter;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":36,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"    private NotificationCenter notificationCenter;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with Employees Tracker: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":79,"author":{"gitID":"IzHoBX"},"content":"     * Deletes all records of a Person, including Notification related to it"},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"        int targetId \u003d target.getId();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"        ensureNotificationCenterNonNull();"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":"        if (notificationCenter !\u003d null) {"},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"            notificationCenter.removeNotificationForPerson(targetId);"},{"lineNumber":87,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":89,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":92,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":93,"author":{"gitID":"IzHoBX"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"IzHoBX"},"content":"     * Ensures Notification Center is non-null. Attempts to assign notification center if so."},{"lineNumber":95,"author":{"gitID":"IzHoBX"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"IzHoBX"},"content":"    private void ensureNotificationCenterNonNull() {"},{"lineNumber":97,"author":{"gitID":"IzHoBX"},"content":"        if (notificationCenter \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitID":"IzHoBX"},"content":"            raise(new RequestForNotificationCenterEvent());"},{"lineNumber":99,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"IzHoBX"},"content":"    public synchronized void deleteNotification(String id, boolean deleteFromAddressBookOnly) throws"},{"lineNumber":103,"author":{"gitID":"IzHoBX"},"content":"            NotificationNotFoundException {"},{"lineNumber":104,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"IzHoBX"},"content":"            addressBook.deleteNotification(id);"},{"lineNumber":106,"author":{"gitID":"IzHoBX"},"content":"        } catch (Exception e) {"},{"lineNumber":107,"author":{"gitID":"IzHoBX"},"content":"            e.printStackTrace();"},{"lineNumber":108,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"IzHoBX"},"content":"        if (!deleteFromAddressBookOnly) {"},{"lineNumber":110,"author":{"gitID":"IzHoBX"},"content":"            try {"},{"lineNumber":111,"author":{"gitID":"IzHoBX"},"content":"                ensureNotificationCenterNonNull();"},{"lineNumber":112,"author":{"gitID":"IzHoBX"},"content":"                notificationCenter.deleteNotification(id);"},{"lineNumber":113,"author":{"gitID":"IzHoBX"},"content":"            } catch (NullPointerException e) {"},{"lineNumber":114,"author":{"gitID":"IzHoBX"},"content":"                logger.info(\"NullPointerException encountered when deleting notification for deleted employee\");"},{"lineNumber":115,"author":{"gitID":"IzHoBX"},"content":"            }"},{"lineNumber":116,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"IzHoBX"},"content":"        indicateAddressBookChanged();"},{"lineNumber":118,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":120,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":121,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCard deleteNotificationByIndex(Index targetIndex) throws NotificationNotFoundException {"},{"lineNumber":122,"author":{"gitID":"IzHoBX"},"content":"        ensureNotificationCenterNonNull();"},{"lineNumber":123,"author":{"gitID":"IzHoBX"},"content":"        addressBook.deleteNotification(notificationCenter.getIdByIndex(targetIndex));"},{"lineNumber":124,"author":{"gitID":"IzHoBX"},"content":"        indicateAddressBookChanged();"},{"lineNumber":125,"author":{"gitID":"IzHoBX"},"content":"        NotificationCard toDelete \u003d notificationCenter.deleteNotificationByIndex(targetIndex);"},{"lineNumber":126,"author":{"gitID":"IzHoBX"},"content":"        return toDelete;"},{"lineNumber":127,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":129,"author":{"gitID":"IzHoBX"},"content":"    private void indicateNotificationAdded(Notification e) {"},{"lineNumber":130,"author":{"gitID":"IzHoBX"},"content":"        raise(new NotificationAddedEvent(e));"},{"lineNumber":131,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":133,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":134,"author":{"gitID":"crizyli"},"content":"    private void indicatePasswordChangedEvent(String p) {"},{"lineNumber":135,"author":{"gitID":"crizyli"},"content":"        raise(new AddressBookPasswordChangedEvent(p, addressBook));"},{"lineNumber":136,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":138,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":139,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":140,"author":{"gitID":"IzHoBX"},"content":"    public void addNotification(Notification e) {"},{"lineNumber":141,"author":{"gitID":"IzHoBX"},"content":"        addressBook.addNotification(e);"},{"lineNumber":142,"author":{"gitID":"IzHoBX"},"content":"        indicateAddressBookChanged();"},{"lineNumber":143,"author":{"gitID":"IzHoBX"},"content":"        indicateNotificationAdded(e);"},{"lineNumber":144,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":146,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":147,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":148,"author":{"gitID":"crizyli"},"content":"    public void setPassword(String password) {"},{"lineNumber":149,"author":{"gitID":"crizyli"},"content":"        addressBook.setPassword(password);"},{"lineNumber":150,"author":{"gitID":"crizyli"},"content":"        indicatePasswordChangedEvent(password);"},{"lineNumber":151,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":153,"author":{"gitID":"crizyli"},"content":"    public String getPassword() {"},{"lineNumber":154,"author":{"gitID":"crizyli"},"content":"        return addressBook.getPassword();"},{"lineNumber":155,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":157,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":158,"author":{"gitID":"crizyli"},"content":"    public ObservableList\u003cPhoto\u003e getPhotoList() {"},{"lineNumber":159,"author":{"gitID":"crizyli"},"content":"        return addressBook.getPhotoList();"},{"lineNumber":160,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":179,"author":{"gitID":"IzHoBX"},"content":"    public Person getPerson(int index) throws IndexOutOfBoundsException {"},{"lineNumber":180,"author":{"gitID":"IzHoBX"},"content":"        return addressBook.getPersonList().get(index);"},{"lineNumber":181,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":183,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":184,"author":{"gitID":"IzHoBX"},"content":"    public String getNameById(String id) {"},{"lineNumber":185,"author":{"gitID":"IzHoBX"},"content":"        return addressBook.findPersonById(Integer.parseInt(id)).getName().toString();"},{"lineNumber":186,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":188,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":207,"author":{"gitID":"Yoochard"},"content":"    @Override"},{"lineNumber":208,"author":{"gitID":"Yoochard"},"content":"    public void sort(String field) {"},{"lineNumber":209,"author":{"gitID":"Yoochard"},"content":"        addressBook.sort(field);"},{"lineNumber":210,"author":{"gitID":"Yoochard"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":211,"author":{"gitID":"Yoochard"},"content":"        indicateAddressBookChanged();"},{"lineNumber":212,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"Yoochard"},"content":"    //@@author"},{"lineNumber":214,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":228,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":230,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":234,"author":{"gitID":"IzHoBX"},"content":"    @Subscribe"},{"lineNumber":235,"author":{"gitID":"IzHoBX"},"content":"    private void handleRequestToDeleteNotificationEvent(RequestToDeleteNotificationEvent event) {"},{"lineNumber":236,"author":{"gitID":"IzHoBX"},"content":"        try {"},{"lineNumber":237,"author":{"gitID":"IzHoBX"},"content":"            deleteNotification(event.id, event.deleteFromAddressbookOnly);"},{"lineNumber":238,"author":{"gitID":"IzHoBX"},"content":"        } catch (NotificationNotFoundException e) {"},{"lineNumber":239,"author":{"gitID":"IzHoBX"},"content":"            e.printStackTrace();"},{"lineNumber":240,"author":{"gitID":"IzHoBX"},"content":"            logger.info(\"Notification is not stored locally\");"},{"lineNumber":241,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":244,"author":{"gitID":"IzHoBX"},"content":"    @Override"},{"lineNumber":245,"author":{"gitID":"IzHoBX"},"content":"    public void findAllSavedNotifications() {"},{"lineNumber":246,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":247,"author":{"gitID":"IzHoBX"},"content":"        //schedule all notification"},{"lineNumber":248,"author":{"gitID":"IzHoBX"},"content":"        for (Notification n: getAddressBook().getNotificationsList()) {"},{"lineNumber":249,"author":{"gitID":"IzHoBX"},"content":"            indicateNotificationAdded(n);"},{"lineNumber":250,"author":{"gitID":"IzHoBX"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":253,"author":{"gitID":"IzHoBX"},"content":"    public void setNotificationCenter(NotificationCenter notificationCenter) {"},{"lineNumber":254,"author":{"gitID":"IzHoBX"},"content":"        assert(notificationCenter !\u003d null);"},{"lineNumber":255,"author":{"gitID":"IzHoBX"},"content":"        this.notificationCenter \u003d notificationCenter;"},{"lineNumber":256,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":258,"author":{"gitID":"IzHoBX"},"content":"    public NotificationCenter getNotificationCenter() {"},{"lineNumber":259,"author":{"gitID":"IzHoBX"},"content":"        return  notificationCenter;"},{"lineNumber":260,"author":{"gitID":"IzHoBX"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":262,"author":{"gitID":"IzHoBX"},"content":"    //@@author"},{"lineNumber":263,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":264,"author":{"gitID":"crizyli"},"content":"    @Subscribe"},{"lineNumber":265,"author":{"gitID":"crizyli"},"content":"    public void handleGetEmployeesRequestEvent(GetEmployeesRequestEvent event) {"},{"lineNumber":266,"author":{"gitID":"crizyli"},"content":"        EventsCenter.getInstance().post(new ReturnedEmployeesEvent(addressBook.getPersonList()));"},{"lineNumber":267,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":268,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":31,"Yoochard":9,"IzHoBX":112,"-":116}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.Notification;"},{"lineNumber":8,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.model.notification.exceptions.NotificationNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.model.photo.Photo;"},{"lineNumber":13,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.NotificationCard;"},{"lineNumber":14,"author":{"gitID":"IzHoBX"},"content":"import seedu.address.ui.NotificationCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"IzHoBX"},"content":"    /** Returns a person given an index*/"},{"lineNumber":36,"author":{"gitID":"IzHoBX"},"content":"    Person getPerson(int index) throws IndexOutOfBoundsException;"},{"lineNumber":37,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":38,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":39,"author":{"gitID":"IzHoBX"},"content":"    /** Deletes a timetable entry given its id. */"},{"lineNumber":40,"author":{"gitID":"IzHoBX"},"content":"    void deleteNotification(String id, boolean deleteFromAddressBookOnly) throws NotificationNotFoundException;"},{"lineNumber":41,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":42,"author":{"gitID":"IzHoBX"},"content":"    /** Adds the given person */"},{"lineNumber":43,"author":{"gitID":"IzHoBX"},"content":"    void addNotification(Notification e);"},{"lineNumber":44,"author":{"gitID":"IzHoBX"},"content":"    //@@author IzHoBX"},{"lineNumber":45,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    //@@author crizyli"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"    /** Adds the given password */"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"    void setPassword(String e);"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"    /** Gets the password */"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"    String getPassword();"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"    //@@author"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"    ObservableList\u003cPhoto\u003e getPhotoList();"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":56,"author":{"gitID":"Yoochard"},"content":"    //@@author Yoochard"},{"lineNumber":57,"author":{"gitID":"Yoochard"},"content":"    /** Sort existing employees by any field in alphabetical order */"},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":"    void sort(String field);"},{"lineNumber":59,"author":{"gitID":"Yoochard"},"content":"    //@@author"},{"lineNumber":60,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"IzHoBX"},"content":"    void findAllSavedNotifications();"},{"lineNumber":81,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":82,"author":{"gitID":"IzHoBX"},"content":"    void setNotificationCenter(NotificationCenter notificationCenter);"},{"lineNumber":83,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":84,"author":{"gitID":"IzHoBX"},"content":"    NotificationCenter getNotificationCenter();"},{"lineNumber":85,"author":{"gitID":"IzHoBX"},"content":""},{"lineNumber":86,"author":{"gitID":"IzHoBX"},"content":"    NotificationCard deleteNotificationByIndex(Index targetIndex) throws NotificationNotFoundException;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"crizyli":11,"Yoochard":5,"IzHoBX":23,"-":48}},{"path":"src/main/java/seedu/address/model/theme/Theme.java","lines":[{"lineNumber":1,"author":{"gitID":"Yoochard"},"content":"package seedu.address.model.theme;"},{"lineNumber":2,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":3,"author":{"gitID":"Yoochard"},"content":"//@@author Yoochard"},{"lineNumber":4,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":5,"author":{"gitID":"Yoochard"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":7,"author":{"gitID":"Yoochard"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":9,"author":{"gitID":"Yoochard"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitID":"Yoochard"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitID":"Yoochard"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"Yoochard"},"content":"import seedu.address.commons.events.ui.ChangeThemeEvent;"},{"lineNumber":13,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":14,"author":{"gitID":"Yoochard"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Yoochard"},"content":" * Represents a Tag in the address book."},{"lineNumber":16,"author":{"gitID":"Yoochard"},"content":" * Guarantees: notnull; name is valid as declared in {@link #isValidThemeName(String)} (String)}"},{"lineNumber":17,"author":{"gitID":"Yoochard"},"content":" */"},{"lineNumber":18,"author":{"gitID":"Yoochard"},"content":"public class Theme {"},{"lineNumber":19,"author":{"gitID":"Yoochard"},"content":"    public static final String[] ALL_THEME \u003d {\"dark\", \"bright\"};"},{"lineNumber":20,"author":{"gitID":"Yoochard"},"content":"    public static final String DARK_THEME_CSS_FILE_NAME \u003d \"view/DarkTheme.css\";"},{"lineNumber":21,"author":{"gitID":"Yoochard"},"content":"    public static final String BRIGHT_THEME_CSS_FILE_NAME \u003d \"view/BrightTheme.css\";"},{"lineNumber":22,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":23,"author":{"gitID":"Yoochard"},"content":"    private static String currentTheme;"},{"lineNumber":24,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":25,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Yoochard"},"content":"     * Change current theme"},{"lineNumber":27,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Yoochard"},"content":"    public static void changeCurrentTheme(String curTheme) {"},{"lineNumber":29,"author":{"gitID":"Yoochard"},"content":"        EventsCenter.getInstance().post(new ChangeThemeEvent(curTheme));"},{"lineNumber":30,"author":{"gitID":"Yoochard"},"content":"        requireNonNull(curTheme);"},{"lineNumber":31,"author":{"gitID":"Yoochard"},"content":"        assert (isValidThemeName(curTheme));"},{"lineNumber":32,"author":{"gitID":"Yoochard"},"content":"        if (isValidThemeName(curTheme)) {"},{"lineNumber":33,"author":{"gitID":"Yoochard"},"content":"            Theme.currentTheme \u003d curTheme;"},{"lineNumber":34,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":37,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Yoochard"},"content":"     * Get current theme"},{"lineNumber":39,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Yoochard"},"content":"    public static String getTheme() {"},{"lineNumber":41,"author":{"gitID":"Yoochard"},"content":"        return currentTheme;"},{"lineNumber":42,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":44,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"Yoochard"},"content":"     * Returns true if input theme is valid"},{"lineNumber":46,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"Yoochard"},"content":"    public static boolean isValidThemeName(String inputTheme) {"},{"lineNumber":48,"author":{"gitID":"Yoochard"},"content":"        return Arrays.asList(ALL_THEME).contains(inputTheme);"},{"lineNumber":49,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":51,"author":{"gitID":"Yoochard"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"Yoochard"},"content":"     * Change theme"},{"lineNumber":53,"author":{"gitID":"Yoochard"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Yoochard"},"content":"    public static void changeTheme(Stage primaryStage, String inputTheme) {"},{"lineNumber":55,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":56,"author":{"gitID":"Yoochard"},"content":"        if (isValidThemeName(inputTheme)) {"},{"lineNumber":57,"author":{"gitID":"Yoochard"},"content":"            Scene scene \u003d primaryStage.getScene();"},{"lineNumber":58,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":59,"author":{"gitID":"Yoochard"},"content":"            String cssFileName;"},{"lineNumber":60,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":61,"author":{"gitID":"Yoochard"},"content":"            switch (inputTheme) {"},{"lineNumber":62,"author":{"gitID":"Yoochard"},"content":"            case \"dark\":"},{"lineNumber":63,"author":{"gitID":"Yoochard"},"content":"                cssFileName \u003d DARK_THEME_CSS_FILE_NAME;"},{"lineNumber":64,"author":{"gitID":"Yoochard"},"content":"                break;"},{"lineNumber":65,"author":{"gitID":"Yoochard"},"content":"            case \"bright\":"},{"lineNumber":66,"author":{"gitID":"Yoochard"},"content":"                cssFileName \u003d BRIGHT_THEME_CSS_FILE_NAME;"},{"lineNumber":67,"author":{"gitID":"Yoochard"},"content":"                break;"},{"lineNumber":68,"author":{"gitID":"Yoochard"},"content":"            default:"},{"lineNumber":69,"author":{"gitID":"Yoochard"},"content":"                cssFileName \u003d BRIGHT_THEME_CSS_FILE_NAME;"},{"lineNumber":70,"author":{"gitID":"Yoochard"},"content":"            }"},{"lineNumber":71,"author":{"gitID":"Yoochard"},"content":""},{"lineNumber":72,"author":{"gitID":"Yoochard"},"content":"            scene.getStylesheets().add(cssFileName);"},{"lineNumber":73,"author":{"gitID":"Yoochard"},"content":"            primaryStage.setScene(scene);"},{"lineNumber":74,"author":{"gitID":"Yoochard"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"Yoochard"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Yoochard"},"content":"}"}],"authorContributionMap":{"Yoochard":76}},{"path":"src/main/java/seedu/address/model/photo/Photo.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.model.photo;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":" * Represents a Person\u0027s photo."},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhotoName(String)}"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"public class Photo {"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"    public static final String DEFAULT_PHOTO_FOLDER \u003d \"/data/personphoto/\";"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"    public static final String MESSAGE_PHOTO_CONSTRAINTS \u003d \"only accepts jpg, jpeg, png and bmp.\";"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":"    public final String path;"},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":"    public final String name;"},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":"     * Constructs a {@code Photo}."},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":"     * @param name A photo name in images folder."},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":"    public Photo(String name) {"},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"        this.name \u003d name;"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":"        this.path \u003d DEFAULT_PHOTO_FOLDER + name;"},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"     * Returns true if a given string is a valid photo path."},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    public static boolean isValidPhotoName(String test) {"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"        String extension \u003d test.substring(test.lastIndexOf(\".\") + 1);"},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"        return extension.compareToIgnoreCase(\"jpg\") \u003d\u003d 0"},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"                || extension.compareToIgnoreCase(\"png\") \u003d\u003d 0"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"                || extension.compareToIgnoreCase(\"jpeg\") \u003d\u003d 0"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"                || extension.compareToIgnoreCase(\"bmp\") \u003d\u003d 0;"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"    public String getName() {"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"        return this.name;"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"        return path;"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"                || (other instanceof Photo // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 this.path.equals(((Photo) other).path)); // state check"},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":55}},{"path":"src/main/java/seedu/address/model/review/UniqueReviewList.java","lines":[{"lineNumber":1,"author":{"gitID":"emer7"},"content":"//@@author emer7"},{"lineNumber":2,"author":{"gitID":"emer7"},"content":""},{"lineNumber":3,"author":{"gitID":"emer7"},"content":"package seedu.address.model.review;"},{"lineNumber":4,"author":{"gitID":"emer7"},"content":""},{"lineNumber":5,"author":{"gitID":"emer7"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":6,"author":{"gitID":"emer7"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":7,"author":{"gitID":"emer7"},"content":""},{"lineNumber":8,"author":{"gitID":"emer7"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"emer7"},"content":"import java.util.Iterator;"},{"lineNumber":10,"author":{"gitID":"emer7"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"emer7"},"content":""},{"lineNumber":12,"author":{"gitID":"emer7"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":13,"author":{"gitID":"emer7"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":15,"author":{"gitID":"emer7"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":16,"author":{"gitID":"emer7"},"content":""},{"lineNumber":17,"author":{"gitID":"emer7"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"emer7"},"content":" * A list of reviews that enforces no nulls and uniqueness between its elements."},{"lineNumber":19,"author":{"gitID":"emer7"},"content":" *"},{"lineNumber":20,"author":{"gitID":"emer7"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":21,"author":{"gitID":"emer7"},"content":" *"},{"lineNumber":22,"author":{"gitID":"emer7"},"content":" * @see Review#equals(Object)"},{"lineNumber":23,"author":{"gitID":"emer7"},"content":" */"},{"lineNumber":24,"author":{"gitID":"emer7"},"content":"public class UniqueReviewList implements Iterable\u003cReview\u003e {"},{"lineNumber":25,"author":{"gitID":"emer7"},"content":""},{"lineNumber":26,"author":{"gitID":"emer7"},"content":"    private final ObservableList\u003cReview\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitID":"emer7"},"content":""},{"lineNumber":28,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"emer7"},"content":"     * Constructs empty ReviewList."},{"lineNumber":30,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"emer7"},"content":"    public UniqueReviewList() {}"},{"lineNumber":32,"author":{"gitID":"emer7"},"content":""},{"lineNumber":33,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"emer7"},"content":"     * Creates a UniqueReviewList using given reviews."},{"lineNumber":35,"author":{"gitID":"emer7"},"content":"     * Enforces no nulls."},{"lineNumber":36,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"emer7"},"content":"    public UniqueReviewList(Set\u003cReview\u003e reviews) {"},{"lineNumber":38,"author":{"gitID":"emer7"},"content":"        requireAllNonNull(reviews);"},{"lineNumber":39,"author":{"gitID":"emer7"},"content":"        internalList.addAll(reviews);"},{"lineNumber":40,"author":{"gitID":"emer7"},"content":""},{"lineNumber":41,"author":{"gitID":"emer7"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":42,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"emer7"},"content":""},{"lineNumber":44,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"emer7"},"content":"     * Returns all Reviews in this list as a Set."},{"lineNumber":46,"author":{"gitID":"emer7"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":47,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"emer7"},"content":"    public Set\u003cReview\u003e toSet() {"},{"lineNumber":49,"author":{"gitID":"emer7"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":50,"author":{"gitID":"emer7"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":51,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"emer7"},"content":""},{"lineNumber":53,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"emer7"},"content":"     * Replaces the Reviews in this list with those in the argument reviews list."},{"lineNumber":55,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"emer7"},"content":"    public void setReviews(Set\u003cReview\u003e reviews) {"},{"lineNumber":57,"author":{"gitID":"emer7"},"content":"        requireAllNonNull(reviews);"},{"lineNumber":58,"author":{"gitID":"emer7"},"content":"        internalList.setAll(reviews);"},{"lineNumber":59,"author":{"gitID":"emer7"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":60,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"emer7"},"content":""},{"lineNumber":62,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"emer7"},"content":"     * Ensures every review in the argument list exists in this object."},{"lineNumber":64,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"emer7"},"content":"    public void mergeFrom(UniqueReviewList from) {"},{"lineNumber":66,"author":{"gitID":"emer7"},"content":"        final Set\u003cReview\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":67,"author":{"gitID":"emer7"},"content":"        from.internalList.stream()"},{"lineNumber":68,"author":{"gitID":"emer7"},"content":"                .filter(review -\u003e !alreadyInside.contains(review))"},{"lineNumber":69,"author":{"gitID":"emer7"},"content":"                .forEach(internalList::add);"},{"lineNumber":70,"author":{"gitID":"emer7"},"content":""},{"lineNumber":71,"author":{"gitID":"emer7"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":72,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"emer7"},"content":""},{"lineNumber":74,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"emer7"},"content":"     * Returns true if the list contains an equivalent Review as the given argument."},{"lineNumber":76,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"emer7"},"content":"    public boolean contains(Review toCheck) {"},{"lineNumber":78,"author":{"gitID":"emer7"},"content":"        requireNonNull(toCheck);"},{"lineNumber":79,"author":{"gitID":"emer7"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":80,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"emer7"},"content":""},{"lineNumber":82,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"emer7"},"content":"     * Adds a Review to the list."},{"lineNumber":84,"author":{"gitID":"emer7"},"content":"     *"},{"lineNumber":85,"author":{"gitID":"emer7"},"content":"     * @throws DuplicateReviewException if the Review to add is a duplicate of an existing Review in the list."},{"lineNumber":86,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"emer7"},"content":"    public void add(Review toAdd) throws DuplicateReviewException {"},{"lineNumber":88,"author":{"gitID":"emer7"},"content":"        requireNonNull(toAdd);"},{"lineNumber":89,"author":{"gitID":"emer7"},"content":"        if (contains(toAdd)) {"},{"lineNumber":90,"author":{"gitID":"emer7"},"content":"            throw new DuplicateReviewException();"},{"lineNumber":91,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"emer7"},"content":"        internalList.add(toAdd);"},{"lineNumber":93,"author":{"gitID":"emer7"},"content":""},{"lineNumber":94,"author":{"gitID":"emer7"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":95,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"emer7"},"content":""},{"lineNumber":97,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"emer7"},"content":"    public Iterator\u003cReview\u003e iterator() {"},{"lineNumber":99,"author":{"gitID":"emer7"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":100,"author":{"gitID":"emer7"},"content":"        return internalList.iterator();"},{"lineNumber":101,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"emer7"},"content":""},{"lineNumber":103,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"emer7"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":105,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"emer7"},"content":"    public ObservableList\u003cReview\u003e asObservableList() {"},{"lineNumber":107,"author":{"gitID":"emer7"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":108,"author":{"gitID":"emer7"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":109,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"emer7"},"content":""},{"lineNumber":111,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"emer7"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"emer7"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":114,"author":{"gitID":"emer7"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitID":"emer7"},"content":"                || (other instanceof UniqueReviewList // instanceof handles nulls"},{"lineNumber":116,"author":{"gitID":"emer7"},"content":"                \u0026\u0026 this.internalList.equals(((UniqueReviewList) other).internalList));"},{"lineNumber":117,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"emer7"},"content":""},{"lineNumber":119,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"emer7"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":121,"author":{"gitID":"emer7"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":122,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"emer7"},"content":"    public boolean equalsOrderInsensitive(UniqueReviewList other) {"},{"lineNumber":124,"author":{"gitID":"emer7"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":125,"author":{"gitID":"emer7"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":126,"author":{"gitID":"emer7"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":127,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"emer7"},"content":""},{"lineNumber":129,"author":{"gitID":"emer7"},"content":"    @Override"},{"lineNumber":130,"author":{"gitID":"emer7"},"content":"    public int hashCode() {"},{"lineNumber":131,"author":{"gitID":"emer7"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":132,"author":{"gitID":"emer7"},"content":"        return internalList.hashCode();"},{"lineNumber":133,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"emer7"},"content":""},{"lineNumber":135,"author":{"gitID":"emer7"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"emer7"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":137,"author":{"gitID":"emer7"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"emer7"},"content":"    public static class DuplicateReviewException extends DuplicateDataException {"},{"lineNumber":139,"author":{"gitID":"emer7"},"content":"        protected DuplicateReviewException() {"},{"lineNumber":140,"author":{"gitID":"emer7"},"content":"            super(\"Operation would result in duplicate reviews\");"},{"lineNumber":141,"author":{"gitID":"emer7"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"emer7"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"emer7"},"content":""},{"lineNumber":144,"author":{"gitID":"emer7"},"content":"}"}],"authorContributionMap":{"emer7":144}},{"path":"src/main/java/seedu/address/model/photo/UniquePhotoList.java","lines":[{"lineNumber":1,"author":{"gitID":"crizyli"},"content":"package seedu.address.model.photo;"},{"lineNumber":2,"author":{"gitID":"crizyli"},"content":"//@@author crizyli"},{"lineNumber":3,"author":{"gitID":"crizyli"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"crizyli"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":6,"author":{"gitID":"crizyli"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"crizyli"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"crizyli"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":10,"author":{"gitID":"crizyli"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"crizyli"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"crizyli"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":15,"author":{"gitID":"crizyli"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"crizyli"},"content":" * A list of photos that enforces no nulls and uniqueness between its elements."},{"lineNumber":17,"author":{"gitID":"crizyli"},"content":" *"},{"lineNumber":18,"author":{"gitID":"crizyli"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":19,"author":{"gitID":"crizyli"},"content":" *"},{"lineNumber":20,"author":{"gitID":"crizyli"},"content":" * @see Photo#equals(Object)"},{"lineNumber":21,"author":{"gitID":"crizyli"},"content":" */"},{"lineNumber":22,"author":{"gitID":"crizyli"},"content":"public class UniquePhotoList implements Iterable\u003cPhoto\u003e {"},{"lineNumber":23,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":24,"author":{"gitID":"crizyli"},"content":"    private final ObservableList\u003cPhoto\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":25,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":26,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"crizyli"},"content":"     * Constructs empty PhotoList."},{"lineNumber":28,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"crizyli"},"content":"    public UniquePhotoList() {}"},{"lineNumber":30,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":31,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"crizyli"},"content":"     * Creates a UniquePhotoList using given photos."},{"lineNumber":33,"author":{"gitID":"crizyli"},"content":"     * Enforces no nulls."},{"lineNumber":34,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"crizyli"},"content":"    public UniquePhotoList(Set\u003cPhoto\u003e photos) {"},{"lineNumber":36,"author":{"gitID":"crizyli"},"content":"        requireAllNonNull(photos);"},{"lineNumber":37,"author":{"gitID":"crizyli"},"content":"        internalList.addAll(photos);"},{"lineNumber":38,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":39,"author":{"gitID":"crizyli"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":40,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":42,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"crizyli"},"content":"     * Returns all photos in this list as a Set."},{"lineNumber":44,"author":{"gitID":"crizyli"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":45,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"crizyli"},"content":"    public Set\u003cPhoto\u003e toSet() {"},{"lineNumber":47,"author":{"gitID":"crizyli"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":48,"author":{"gitID":"crizyli"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":49,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":51,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"crizyli"},"content":"     * Replaces the Photos in this list with those in the argument photo list."},{"lineNumber":53,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"crizyli"},"content":"    public void setPhotos(Set\u003cPhoto\u003e photos) {"},{"lineNumber":55,"author":{"gitID":"crizyli"},"content":"        requireAllNonNull(photos);"},{"lineNumber":56,"author":{"gitID":"crizyli"},"content":"        internalList.setAll(photos);"},{"lineNumber":57,"author":{"gitID":"crizyli"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":58,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":60,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"crizyli"},"content":"     * Ensures every photo in the argument list exists in this object."},{"lineNumber":62,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"crizyli"},"content":"    public void mergeFrom(UniquePhotoList from) {"},{"lineNumber":64,"author":{"gitID":"crizyli"},"content":"        final Set\u003cPhoto\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":65,"author":{"gitID":"crizyli"},"content":"        from.internalList.stream()"},{"lineNumber":66,"author":{"gitID":"crizyli"},"content":"                .filter(photo -\u003e !alreadyInside.contains(photo))"},{"lineNumber":67,"author":{"gitID":"crizyli"},"content":"                .forEach(internalList::add);"},{"lineNumber":68,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":69,"author":{"gitID":"crizyli"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":70,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":72,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"crizyli"},"content":"     * Returns true if the list contains an equivalent Photo as the given argument."},{"lineNumber":74,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"crizyli"},"content":"    public boolean contains(Photo toCheck) {"},{"lineNumber":76,"author":{"gitID":"crizyli"},"content":"        requireNonNull(toCheck);"},{"lineNumber":77,"author":{"gitID":"crizyli"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":78,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":80,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"crizyli"},"content":"     * Adds a Photo to the list."},{"lineNumber":82,"author":{"gitID":"crizyli"},"content":"     *"},{"lineNumber":83,"author":{"gitID":"crizyli"},"content":"     * @throws UniquePhotoList.DuplicatePhotoException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":84,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"crizyli"},"content":"    public void add(Photo toAdd) throws UniquePhotoList.DuplicatePhotoException {"},{"lineNumber":86,"author":{"gitID":"crizyli"},"content":"        requireNonNull(toAdd);"},{"lineNumber":87,"author":{"gitID":"crizyli"},"content":"        if (contains(toAdd)) {"},{"lineNumber":88,"author":{"gitID":"crizyli"},"content":"            throw new UniquePhotoList.DuplicatePhotoException();"},{"lineNumber":89,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"crizyli"},"content":"        internalList.add(toAdd);"},{"lineNumber":91,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":92,"author":{"gitID":"crizyli"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":93,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":95,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"crizyli"},"content":"    public Iterator\u003cPhoto\u003e iterator() {"},{"lineNumber":97,"author":{"gitID":"crizyli"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":98,"author":{"gitID":"crizyli"},"content":"        return internalList.iterator();"},{"lineNumber":99,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":101,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"crizyli"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"crizyli"},"content":"    public ObservableList\u003cPhoto\u003e asObservableList() {"},{"lineNumber":105,"author":{"gitID":"crizyli"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":106,"author":{"gitID":"crizyli"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":107,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":109,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"crizyli"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitID":"crizyli"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":112,"author":{"gitID":"crizyli"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"crizyli"},"content":"                || (other instanceof UniquePhotoList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"crizyli"},"content":"                \u0026\u0026 this.internalList.equals(((UniquePhotoList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":117,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"crizyli"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":119,"author":{"gitID":"crizyli"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":120,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"crizyli"},"content":"    public boolean equalsOrderInsensitive(UniquePhotoList other) {"},{"lineNumber":122,"author":{"gitID":"crizyli"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":123,"author":{"gitID":"crizyli"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":124,"author":{"gitID":"crizyli"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":125,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":127,"author":{"gitID":"crizyli"},"content":"    @Override"},{"lineNumber":128,"author":{"gitID":"crizyli"},"content":"    public int hashCode() {"},{"lineNumber":129,"author":{"gitID":"crizyli"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":130,"author":{"gitID":"crizyli"},"content":"        return internalList.hashCode();"},{"lineNumber":131,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":133,"author":{"gitID":"crizyli"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"crizyli"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":135,"author":{"gitID":"crizyli"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"crizyli"},"content":"    public static class DuplicatePhotoException extends DuplicateDataException {"},{"lineNumber":137,"author":{"gitID":"crizyli"},"content":"        protected DuplicatePhotoException() {"},{"lineNumber":138,"author":{"gitID":"crizyli"},"content":"            super(\"Operation would result in duplicate photos\");"},{"lineNumber":139,"author":{"gitID":"crizyli"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"crizyli"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"crizyli"},"content":""},{"lineNumber":142,"author":{"gitID":"crizyli"},"content":"}"}],"authorContributionMap":{"crizyli":142}}]
