var resultJson = [{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatform;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.ui.ResultDisplay;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":50,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":51,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":52,"author":{"gitID":"-"},"content":" */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e RESULT_DISPLAY_DEFAULT_STYLE \u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-area\", \"result-display\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e RESULT_DISPLAY_ERROR_STYLE \u003d"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-area\", \"result-display\", ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return TypicalPersons.getTypicalAddressBook();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":140,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":157,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":165,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":173,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * of the previously selected person."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":216,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"Nethergale"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"},{"lineNumber":218,"author":{"gitID":"Nethergale"},"content":"     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":219,"author":{"gitID":"Nethergale"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":220,"author":{"gitID":"Nethergale"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":221,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":222,"author":{"gitID":"Nethergale"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":223,"author":{"gitID":"Nethergale"},"content":"        String selectedBrowserLink \u003d \"\";"},{"lineNumber":224,"author":{"gitID":"Nethergale"},"content":"        Map\u003cString, SocialMediaPlatform\u003e selectedPersonSmpMap \u003d getModel().getFilteredPersonList().get("},{"lineNumber":225,"author":{"gitID":"Nethergale"},"content":"                expectedSelectedCardIndex.getZeroBased()).getSocialMediaPlatformMap();"},{"lineNumber":226,"author":{"gitID":"Nethergale"},"content":"        List\u003cString\u003e keyList \u003d new ArrayList\u003c\u003e(selectedPersonSmpMap.keySet());"},{"lineNumber":227,"author":{"gitID":"Nethergale"},"content":"        if (!keyList.isEmpty()) {"},{"lineNumber":228,"author":{"gitID":"Nethergale"},"content":"            selectedBrowserLink \u003d selectedPersonSmpMap.get(keyList.get(0)).getLink().value;"},{"lineNumber":229,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":231,"author":{"gitID":"Nethergale"},"content":"        URL expectedUrl;"},{"lineNumber":232,"author":{"gitID":"Nethergale"},"content":"        URL actualUrl;"},{"lineNumber":233,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":234,"author":{"gitID":"Nethergale"},"content":"        try {"},{"lineNumber":235,"author":{"gitID":"Nethergale"},"content":"            expectedUrl \u003d getExpectedUrl(selectedBrowserLink);"},{"lineNumber":236,"author":{"gitID":"Nethergale"},"content":"            actualUrl \u003d getBrowserPanel().getLoadedUrl(Link.getLinkType(selectedBrowserLink));"},{"lineNumber":237,"author":{"gitID":"Nethergale"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":238,"author":{"gitID":"Nethergale"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":239,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":240,"author":{"gitID":"Nethergale"},"content":"        assertEquals(expectedUrl, actualUrl);"},{"lineNumber":241,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":242,"author":{"gitID":"Nethergale"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":243,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":245,"author":{"gitID":"Nethergale"},"content":"    //@@author"},{"lineNumber":246,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":247,"author":{"gitID":"-"},"content":"     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":249,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":250,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":251,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":265,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":267,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":271,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":272,"author":{"gitID":"shadow2496"},"content":"     * Asserts that the result display\u0027s shows the default style."},{"lineNumber":273,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":274,"author":{"gitID":"shadow2496"},"content":"    protected void assertResultDisplayShowsDefaultStyle() {"},{"lineNumber":275,"author":{"gitID":"shadow2496"},"content":"        assertEquals(RESULT_DISPLAY_DEFAULT_STYLE, getResultDisplay().getStyleClass());"},{"lineNumber":276,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":278,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":279,"author":{"gitID":"shadow2496"},"content":"     * Asserts that the result display\u0027s shows the error style."},{"lineNumber":280,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":281,"author":{"gitID":"shadow2496"},"content":"    protected void assertResultDisplayShowsErrorStyle() {"},{"lineNumber":282,"author":{"gitID":"shadow2496"},"content":"        assertEquals(RESULT_DISPLAY_ERROR_STYLE, getResultDisplay().getStyleClass());"},{"lineNumber":283,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":285,"author":{"gitID":"shadow2496"},"content":"    //@@author"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":289,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":290,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":297,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":298,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":299,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":301,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":302,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":303,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":304,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":305,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":306,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":309,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":310,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":312,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":314,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":315,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":316,"author":{"gitID":"-"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"},{"lineNumber":317,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":318,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":319,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":320,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":321,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":322,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":325,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":326,"author":{"gitID":"Nethergale"},"content":"     * Returns the expected URL in the correct format when provided with a String type {@code url}."},{"lineNumber":327,"author":{"gitID":"Nethergale"},"content":"     * {@code personName} is utilised when no URLs of the available platforms can be constructed."},{"lineNumber":328,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":329,"author":{"gitID":"Nethergale"},"content":"    protected URL getExpectedUrl(String url) throws MalformedURLException {"},{"lineNumber":330,"author":{"gitID":"Nethergale"},"content":"        if (Link.getLinkType(url).equals(Link.FACEBOOK_LINK_TYPE)) {"},{"lineNumber":331,"author":{"gitID":"Nethergale"},"content":"            return new URL(\"https://m.\" + url.substring(url.indexOf(Link.FACEBOOK_LINK_TYPE)));"},{"lineNumber":332,"author":{"gitID":"Nethergale"},"content":"        } else if (Link.getLinkType(url).equals(Link.TWITTER_LINK_TYPE)) {"},{"lineNumber":333,"author":{"gitID":"Nethergale"},"content":"            return new URL(\"https://\" + url);"},{"lineNumber":334,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":335,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":336,"author":{"gitID":"Nethergale"},"content":"        return MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\");"},{"lineNumber":337,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":338,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":339,"author":{"gitID":"Nethergale"},"content":"    //@@author"},{"lineNumber":340,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":341,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":342,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":343,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":344,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":345,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":346,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Nethergale":47,"shadow2496":16,"-":283}},{"path":"src/test/java/systemtests/FindWithTagCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_ARMYBUDDY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindWithTagCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"KevinChuangCH"},"content":"//@@author KevinChuangCH"},{"lineNumber":21,"author":{"gitID":"KevinChuangCH"},"content":"public class FindWithTagCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":22,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":23,"author":{"gitID":"KevinChuangCH"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"KevinChuangCH"},"content":"    public void find() {"},{"lineNumber":25,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":26,"author":{"gitID":"KevinChuangCH"},"content":"         * -\u003e 2 persons found"},{"lineNumber":27,"author":{"gitID":"KevinChuangCH"},"content":"         */"},{"lineNumber":28,"author":{"gitID":"KevinChuangCH"},"content":"        String command \u003d \"   \" + FindWithTagCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_ARMYBUDDY + \"   \";"},{"lineNumber":29,"author":{"gitID":"KevinChuangCH"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":30,"author":{"gitID":"KevinChuangCH"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // Benson and Daniel have the tag \"armyBuddy\""},{"lineNumber":31,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":32,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":33,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":34,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":35,"author":{"gitID":"KevinChuangCH"},"content":"         * -\u003e 2 persons found"},{"lineNumber":36,"author":{"gitID":"KevinChuangCH"},"content":"         */"},{"lineNumber":37,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_ARMYBUDDY;"},{"lineNumber":38,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":39,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":40,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":41,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":42,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" classmate\";"},{"lineNumber":43,"author":{"gitID":"KevinChuangCH"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":44,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":45,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":46,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":47,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":48,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" owesMoney roommate\";"},{"lineNumber":49,"author":{"gitID":"KevinChuangCH"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":50,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":51,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":53,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":54,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" roommate owesMoney\";"},{"lineNumber":55,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":56,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":57,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":58,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":59,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" roommate owesMoney roommate\";"},{"lineNumber":60,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":61,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":62,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":63,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":64,"author":{"gitID":"KevinChuangCH"},"content":"         * -\u003e 2 persons found"},{"lineNumber":65,"author":{"gitID":"KevinChuangCH"},"content":"         */"},{"lineNumber":66,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" roommate owesMoney NonMatchingKeyWord\";"},{"lineNumber":67,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":70,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":71,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitID":"KevinChuangCH"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":73,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":75,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":77,"author":{"gitID":"KevinChuangCH"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":78,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":80,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":81,"author":{"gitID":"KevinChuangCH"},"content":"        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":82,"author":{"gitID":"KevinChuangCH"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":83,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_ARMYBUDDY;"},{"lineNumber":84,"author":{"gitID":"KevinChuangCH"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":85,"author":{"gitID":"KevinChuangCH"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":86,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":87,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":88,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":89,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find person in address book, keyword is same as tag but of different case -\u003e 1 person found */"},{"lineNumber":90,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" ArMyBuDdY\";"},{"lineNumber":91,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":92,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":93,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":94,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find person in address book, keyword is substring of tag -\u003e 0 persons found */"},{"lineNumber":95,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" armyBud\";"},{"lineNumber":96,"author":{"gitID":"KevinChuangCH"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":97,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":98,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":99,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":100,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":101,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" armyBuddies\";"},{"lineNumber":102,"author":{"gitID":"KevinChuangCH"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":103,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":104,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":106,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":107,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" girlfriend\";"},{"lineNumber":108,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":109,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":110,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":111,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find name of person in address book -\u003e 0 persons found */"},{"lineNumber":112,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" \" + DANIEL.getName().fullName;"},{"lineNumber":113,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":114,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":115,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":116,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":117,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":118,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":119,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":120,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":121,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find address of person in address book -\u003e 0 persons found */"},{"lineNumber":122,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"},{"lineNumber":123,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":124,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":126,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":127,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":128,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":129,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":130,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":131,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":132,"author":{"gitID":"KevinChuangCH"},"content":"        showAllPersons();"},{"lineNumber":133,"author":{"gitID":"KevinChuangCH"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":134,"author":{"gitID":"KevinChuangCH"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":135,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" roommate\";"},{"lineNumber":136,"author":{"gitID":"KevinChuangCH"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":137,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":138,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":139,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":140,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":141,"author":{"gitID":"KevinChuangCH"},"content":"        deleteAllPersons();"},{"lineNumber":142,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d FindWithTagCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_ARMYBUDDY;"},{"lineNumber":143,"author":{"gitID":"KevinChuangCH"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":144,"author":{"gitID":"KevinChuangCH"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":145,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":146,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":147,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":148,"author":{"gitID":"KevinChuangCH"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"KevinChuangCH"},"content":"        command \u003d \"FiNdTaG armyBuddy\";"},{"lineNumber":150,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":151,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":153,"author":{"gitID":"KevinChuangCH"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"KevinChuangCH"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":155,"author":{"gitID":"KevinChuangCH"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":156,"author":{"gitID":"KevinChuangCH"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":157,"author":{"gitID":"KevinChuangCH"},"content":"     * These verifications are done by"},{"lineNumber":158,"author":{"gitID":"KevinChuangCH"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"KevinChuangCH"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":160,"author":{"gitID":"KevinChuangCH"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":161,"author":{"gitID":"KevinChuangCH"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":162,"author":{"gitID":"KevinChuangCH"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"KevinChuangCH"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":164,"author":{"gitID":"KevinChuangCH"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":165,"author":{"gitID":"KevinChuangCH"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":166,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":167,"author":{"gitID":"KevinChuangCH"},"content":"        executeCommand(command);"},{"lineNumber":168,"author":{"gitID":"KevinChuangCH"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":169,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":170,"author":{"gitID":"KevinChuangCH"},"content":"        assertResultDisplayShowsDefaultStyle();"},{"lineNumber":171,"author":{"gitID":"KevinChuangCH"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":172,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":174,"author":{"gitID":"KevinChuangCH"},"content":"    /**"},{"lineNumber":175,"author":{"gitID":"KevinChuangCH"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":176,"author":{"gitID":"KevinChuangCH"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":177,"author":{"gitID":"KevinChuangCH"},"content":"     * These verifications are done by"},{"lineNumber":178,"author":{"gitID":"KevinChuangCH"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":179,"author":{"gitID":"KevinChuangCH"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":180,"author":{"gitID":"KevinChuangCH"},"content":"     * error style."},{"lineNumber":181,"author":{"gitID":"KevinChuangCH"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":182,"author":{"gitID":"KevinChuangCH"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"KevinChuangCH"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":184,"author":{"gitID":"KevinChuangCH"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":185,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":186,"author":{"gitID":"KevinChuangCH"},"content":"        executeCommand(command);"},{"lineNumber":187,"author":{"gitID":"KevinChuangCH"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":188,"author":{"gitID":"KevinChuangCH"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":189,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":190,"author":{"gitID":"KevinChuangCH"},"content":"        assertResultDisplayShowsErrorStyle();"},{"lineNumber":191,"author":{"gitID":"KevinChuangCH"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":192,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"KevinChuangCH"},"content":"}"}],"authorContributionMap":{"KevinChuangCH":174,"-":19}},{"path":"src/test/java/seedu/address/ui/ResultDisplayTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ResultDisplayTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":17,"author":{"gitID":"shadow2496"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_NON_ERROR \u003d"},{"lineNumber":18,"author":{"gitID":"shadow2496"},"content":"            new NewResultAvailableEvent(\"Non Error\", false);"},{"lineNumber":19,"author":{"gitID":"shadow2496"},"content":"    private static final NewResultAvailableEvent NEW_RESULT_EVENT_ERROR \u003d"},{"lineNumber":20,"author":{"gitID":"shadow2496"},"content":"            new NewResultAvailableEvent(\"Error\", true);"},{"lineNumber":21,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":22,"author":{"gitID":"shadow2496"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfResultDisplay;"},{"lineNumber":23,"author":{"gitID":"shadow2496"},"content":"    private ArrayList\u003cString\u003e errorStyleOfResultDisplay;"},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":"    //@@author"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private ResultDisplayHandle resultDisplayHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":34,"author":{"gitID":"shadow2496"},"content":"        //@@author shadow2496"},{"lineNumber":35,"author":{"gitID":"shadow2496"},"content":"        uiPartRule.setUiPart(resultDisplay);"},{"lineNumber":36,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":37,"author":{"gitID":"shadow2496"},"content":"        defaultStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"},{"lineNumber":38,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":39,"author":{"gitID":"shadow2496"},"content":"        errorStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(defaultStyleOfResultDisplay);"},{"lineNumber":40,"author":{"gitID":"shadow2496"},"content":"        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"},{"lineNumber":41,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":42,"author":{"gitID":"shadow2496"},"content":"        //@@author"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // default result text"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(\"\", resultDisplayHandle.getText());"},{"lineNumber":50,"author":{"gitID":"shadow2496"},"content":"        //@@author shadow2496"},{"lineNumber":51,"author":{"gitID":"shadow2496"},"content":"        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":52,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":53,"author":{"gitID":"shadow2496"},"content":"        // new error result received"},{"lineNumber":54,"author":{"gitID":"shadow2496"},"content":"        postNow(NEW_RESULT_EVENT_ERROR);"},{"lineNumber":55,"author":{"gitID":"shadow2496"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":56,"author":{"gitID":"shadow2496"},"content":"        assertBehaviorForErrorResult();"},{"lineNumber":57,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":58,"author":{"gitID":"shadow2496"},"content":"        // new non-error result received"},{"lineNumber":59,"author":{"gitID":"shadow2496"},"content":"        postNow(NEW_RESULT_EVENT_NON_ERROR);"},{"lineNumber":60,"author":{"gitID":"shadow2496"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":61,"author":{"gitID":"shadow2496"},"content":"        assertBehaviorForNonErrorResult();"},{"lineNumber":62,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":63,"author":{"gitID":"shadow2496"},"content":"        //@@author"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":67,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"shadow2496"},"content":"     * Verifies a result which has an error that \u003cbr\u003e"},{"lineNumber":69,"author":{"gitID":"shadow2496"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":70,"author":{"gitID":"shadow2496"},"content":"     *      - the result display\u0027s style is the same as {@code errorStyleOfResultDisplay}."},{"lineNumber":71,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"shadow2496"},"content":"    private void assertBehaviorForErrorResult() {"},{"lineNumber":73,"author":{"gitID":"shadow2496"},"content":"        assertEquals(NEW_RESULT_EVENT_ERROR.message, resultDisplayHandle.getText());"},{"lineNumber":74,"author":{"gitID":"shadow2496"},"content":"        assertEquals(errorStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":75,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":77,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"shadow2496"},"content":"     * Verifies a result which doesn\u0027t have an error that \u003cbr\u003e"},{"lineNumber":79,"author":{"gitID":"shadow2496"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":80,"author":{"gitID":"shadow2496"},"content":"     *      - the result display\u0027s style is the same as {@code defaultStyleOfResultDisplay}."},{"lineNumber":81,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"shadow2496"},"content":"    private void assertBehaviorForNonErrorResult() {"},{"lineNumber":83,"author":{"gitID":"shadow2496"},"content":"        assertEquals(NEW_RESULT_EVENT_NON_ERROR.message, resultDisplayHandle.getText());"},{"lineNumber":84,"author":{"gitID":"shadow2496"},"content":"        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"},{"lineNumber":85,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":54,"-":32}},{"path":"src/test/java/seedu/address/ui/PersonCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Facebook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatform;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class PersonCardTest extends GuiUnitTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithNoTags, 1);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Person personWithTags \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        personCard \u003d new PersonCard(personWithTags, 2);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCardDisplay(personCard, personWithTags, 2);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"        //@@author Nethergale"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":"        // with platforms"},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"        String[] links \u003d {\"www.facebook.com/examplepage\", \"www.twitter.com/examplepage\"};"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":"        Person personWithPlatforms \u003d new PersonBuilder().withPlatforms(links).build();"},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":"        personCard \u003d new PersonCard(personWithPlatforms, 3);"},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":"        assertCardDisplay(personCard, personWithPlatforms, 3);"},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":"        // with platforms purposely put into wrong key, should not display any icons"},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":"        Map\u003cString, SocialMediaPlatform\u003e customSmpMap \u003d new HashMap\u003cString, SocialMediaPlatform\u003e();"},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":"        customSmpMap.put(Link.UNKNOWN_LINK_TYPE, new Facebook(new Link(\"www.facebook.com/testlink\")));"},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":"        Set\u003cTag\u003e defaultTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":55,"author":{"gitID":"Nethergale"},"content":"        defaultTags.add(new Tag(\"friends\"));"},{"lineNumber":56,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":57,"author":{"gitID":"Nethergale"},"content":"        Person personWithIncorrectSmpMap \u003d new Person("},{"lineNumber":58,"author":{"gitID":"Nethergale"},"content":"                new Name(\"Alice Pauline\"), new Phone(\"85355255\"),"},{"lineNumber":59,"author":{"gitID":"Nethergale"},"content":"                new Email(\"alice@gmail.com\"), new Address(\"123, Jurong West Ave 6, #08-111\"),"},{"lineNumber":60,"author":{"gitID":"Nethergale"},"content":"                customSmpMap, defaultTags);"},{"lineNumber":61,"author":{"gitID":"Nethergale"},"content":"        personCard \u003d new PersonCard(personWithIncorrectSmpMap, 4);"},{"lineNumber":62,"author":{"gitID":"Nethergale"},"content":"        uiPartRule.setUiPart(personCard);"},{"lineNumber":63,"author":{"gitID":"Nethergale"},"content":"        assertCardDisplay(personCard, personWithIncorrectSmpMap, 4);"},{"lineNumber":64,"author":{"gitID":"Nethergale"},"content":"        //@@author"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        PersonCard personCard \u003d new PersonCard(person, 0);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        PersonCard copy \u003d new PersonCard(person, 0);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // different person, same index -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        // same person, different index -\u003e returns false"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(new PersonCard(person, 1)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private void assertCardDisplay(PersonCard personCard, Person expectedPerson, int expectedId) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        // verify person details are displayed correctly"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCardDisplaysPerson(expectedPerson, personCardHandle);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Nethergale":22,"-":86}},{"path":"src/test/java/seedu/address/logic/parser/FindWithTagCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindWithTagCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"KevinChuangCH"},"content":"//@@author KevinChuangCH"},{"lineNumber":15,"author":{"gitID":"KevinChuangCH"},"content":"public class FindWithTagCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":17,"author":{"gitID":"KevinChuangCH"},"content":"    private FindWithTagCommandParser parser \u003d new FindWithTagCommandParser();"},{"lineNumber":18,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":19,"author":{"gitID":"KevinChuangCH"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"KevinChuangCH"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitID":"KevinChuangCH"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"KevinChuangCH"},"content":"                FindWithTagCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":25,"author":{"gitID":"KevinChuangCH"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"KevinChuangCH"},"content":"    public void parse_validArgs_returnsFindWithTagCommand() {"},{"lineNumber":27,"author":{"gitID":"KevinChuangCH"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"KevinChuangCH"},"content":"        FindWithTagCommand expectedFindWithTagCommand \u003d"},{"lineNumber":29,"author":{"gitID":"KevinChuangCH"},"content":"                new FindWithTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"neighbour\", \"owesMoney\")));"},{"lineNumber":30,"author":{"gitID":"KevinChuangCH"},"content":"        assertParseSuccess(parser, \"neighbour owesMoney\", expectedFindWithTagCommand);"},{"lineNumber":31,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":32,"author":{"gitID":"KevinChuangCH"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"KevinChuangCH"},"content":"        assertParseSuccess(parser, \" \\n neighbour \\n \\t owesMoney  \\t\", expectedFindWithTagCommand);"},{"lineNumber":34,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":36,"author":{"gitID":"KevinChuangCH"},"content":"}"}],"authorContributionMap":{"KevinChuangCH":23,"-":13}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddPlatformCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemovePlatformCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AccountBuilder;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AccountUtil;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":58,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"shadow2496"},"content":"    public void parseCommand_login() throws Exception {"},{"lineNumber":60,"author":{"gitID":"shadow2496"},"content":"        Account account \u003d new AccountBuilder().build();"},{"lineNumber":61,"author":{"gitID":"shadow2496"},"content":"        LoginCommand command \u003d (LoginCommand) parser.parseCommand("},{"lineNumber":62,"author":{"gitID":"shadow2496"},"content":"                LoginCommand.COMMAND_WORD + \" \" + AccountUtil.getAccountDetails(account));"},{"lineNumber":63,"author":{"gitID":"shadow2496"},"content":"        assertEquals(new LoginCommand(account), command);"},{"lineNumber":64,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":66,"author":{"gitID":"shadow2496"},"content":"    //@@author"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"Nethergale"},"content":"        //@@author Nethergale"},{"lineNumber":75,"author":{"gitID":"Nethergale"},"content":"        AddCommand commandAlias \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommandAlias(person));"},{"lineNumber":76,"author":{"gitID":"Nethergale"},"content":"        assertEquals(new AddCommand(person), commandAlias);"},{"lineNumber":77,"author":{"gitID":"Nethergale"},"content":"        //@@author"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":89,"author":{"gitID":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":98,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":112,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":142,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"Nethergale"},"content":"    public void parseCommand_sort() throws Exception {"},{"lineNumber":144,"author":{"gitID":"Nethergale"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD) instanceof SortCommand);"},{"lineNumber":145,"author":{"gitID":"Nethergale"},"content":"        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" 3\") instanceof SortCommand);"},{"lineNumber":146,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":148,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"Nethergale"},"content":"    public void parseCommand_addPlatform() throws Exception {"},{"lineNumber":150,"author":{"gitID":"Nethergale"},"content":"        String testLink \u003d \"www.facebook.com/example\";"},{"lineNumber":151,"author":{"gitID":"Nethergale"},"content":"        Map\u003cString, Link\u003e linkMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":152,"author":{"gitID":"Nethergale"},"content":"        linkMap.put(Link.getLinkType(testLink), new Link(testLink));"},{"lineNumber":153,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand command \u003d (AddPlatformCommand) parser.parseCommand(AddPlatformCommand.COMMAND_WORD"},{"lineNumber":154,"author":{"gitID":"Nethergale"},"content":"                + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":155,"author":{"gitID":"Nethergale"},"content":"                + \" \" + CliSyntax.PREFIX_LINK + testLink);"},{"lineNumber":156,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":157,"author":{"gitID":"Nethergale"},"content":"        assertEquals(new AddPlatformCommand(INDEX_FIRST_PERSON, linkMap), command);"},{"lineNumber":158,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":160,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"Nethergale"},"content":"    public void parseCommand_removePlatform() throws Exception {"},{"lineNumber":162,"author":{"gitID":"Nethergale"},"content":"        String platform \u003d \"facebook\";"},{"lineNumber":163,"author":{"gitID":"Nethergale"},"content":"        Set\u003cString\u003e platformSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":164,"author":{"gitID":"Nethergale"},"content":"        platformSet.add(platform);"},{"lineNumber":165,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand command \u003d (RemovePlatformCommand) parser.parseCommand(RemovePlatformCommand.COMMAND_WORD"},{"lineNumber":166,"author":{"gitID":"Nethergale"},"content":"                + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":167,"author":{"gitID":"Nethergale"},"content":"                + \" \" + CliSyntax.PREFIX_SOCIAL_MEDIA_PLATFORM + platform);"},{"lineNumber":168,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":169,"author":{"gitID":"Nethergale"},"content":"        assertEquals(new RemovePlatformCommand(INDEX_FIRST_PERSON, platformSet), command);"},{"lineNumber":170,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":172,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"Nethergale"},"content":"    public void parseCommand_search() throws Exception {"},{"lineNumber":174,"author":{"gitID":"Nethergale"},"content":"        String searchName \u003d \"foo\";"},{"lineNumber":175,"author":{"gitID":"Nethergale"},"content":"        SearchCommand command \u003d (SearchCommand) parser.parseCommand("},{"lineNumber":176,"author":{"gitID":"Nethergale"},"content":"                SearchCommand.COMMAND_WORD + \" \" + searchName);"},{"lineNumber":177,"author":{"gitID":"Nethergale"},"content":"        assertEquals(new SearchCommand(\"all\", searchName), command);"},{"lineNumber":178,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Nethergale"},"content":"    //@@author"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":183,"author":{"gitID":"-"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":""},{"lineNumber":199,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Nethergale":43,"shadow2496":10,"-":159}},{"path":"src/test/java/seedu/address/logic/parser/SearchCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":12,"author":{"gitID":"Nethergale"},"content":"public class SearchCommandParserTest {"},{"lineNumber":13,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":14,"author":{"gitID":"Nethergale"},"content":"    private static final String INVALID_SEARCH_NAME \u003d \"a%b2$c\";"},{"lineNumber":15,"author":{"gitID":"Nethergale"},"content":"    private static final String VALID_SEARCH_NAME \u003d \"abc\";"},{"lineNumber":16,"author":{"gitID":"Nethergale"},"content":"    private static final String TWITTER_PLATFORM \u003d \"twitter\";"},{"lineNumber":17,"author":{"gitID":"Nethergale"},"content":"    private static final String FACEBOOK_PLATFORM_ALIAS \u003d \"fb\";"},{"lineNumber":18,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":"    private SearchCommandParser parser \u003d new SearchCommandParser();"},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":"    public void parse_noPlatformSpecifiedInvalidSearchName_failure() {"},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, INVALID_SEARCH_NAME,"},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"    public void parse_noPlatformSpecifiedValidSearchName_success() {"},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":"        assertParseSuccess(parser, VALID_SEARCH_NAME, new SearchCommand(\"all\", VALID_SEARCH_NAME));"},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":"    public void parse_validPlatformSpecifiedInvalidSearchName_failure() {"},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, TWITTER_PLATFORM + \", \" + INVALID_SEARCH_NAME,"},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"    public void parse_validPlatformSpecifiedValidSearchName_success() {"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":"        assertParseSuccess(parser, FACEBOOK_PLATFORM_ALIAS + \", \" + VALID_SEARCH_NAME,"},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":"                new SearchCommand(FACEBOOK_PLATFORM_ALIAS, VALID_SEARCH_NAME));"},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"    public void parse_invalidPlatformSpecifiedValidSearchName_failure() {"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":"        String invalidPlatform \u003d \"aha\";"},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, invalidPlatform + \", \" + VALID_SEARCH_NAME,"},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser,  \"yo, test, this, command\","},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":46,"-":10}},{"path":"src/test/java/seedu/address/logic/parser/LoginCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AccountBuilder;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":"//@@author shadow2496"},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"public class LoginCommandParserTest {"},{"lineNumber":27,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":28,"author":{"gitID":"shadow2496"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":29,"author":{"gitID":"shadow2496"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE);"},{"lineNumber":30,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":31,"author":{"gitID":"shadow2496"},"content":"    private LoginCommandParser parser \u003d new LoginCommandParser();"},{"lineNumber":32,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":33,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"shadow2496"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":35,"author":{"gitID":"shadow2496"},"content":"        Account account \u003d new AccountBuilder().withUsername(VALID_USERNAME_BOB)"},{"lineNumber":36,"author":{"gitID":"shadow2496"},"content":"                .withPassword(VALID_PASSWORD_BOB).build();"},{"lineNumber":37,"author":{"gitID":"shadow2496"},"content":"        LoginCommand expectedCommand \u003d new LoginCommand(account);"},{"lineNumber":38,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":39,"author":{"gitID":"shadow2496"},"content":"        // whitespace only preamble"},{"lineNumber":40,"author":{"gitID":"shadow2496"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + USERNAME_DESC_BOB + PASSWORD_DESC_BOB,"},{"lineNumber":41,"author":{"gitID":"shadow2496"},"content":"                expectedCommand);"},{"lineNumber":42,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":43,"author":{"gitID":"shadow2496"},"content":"        // multiple usernames - last username accepted"},{"lineNumber":44,"author":{"gitID":"shadow2496"},"content":"        assertParseSuccess(parser, USERNAME_DESC_AMY + USERNAME_DESC_BOB + PASSWORD_DESC_BOB,"},{"lineNumber":45,"author":{"gitID":"shadow2496"},"content":"                expectedCommand);"},{"lineNumber":46,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":47,"author":{"gitID":"shadow2496"},"content":"        // multiple passwords - last password accepted"},{"lineNumber":48,"author":{"gitID":"shadow2496"},"content":"        assertParseSuccess(parser, USERNAME_DESC_BOB + PASSWORD_DESC_AMY + PASSWORD_DESC_BOB,"},{"lineNumber":49,"author":{"gitID":"shadow2496"},"content":"                expectedCommand);"},{"lineNumber":50,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":52,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"shadow2496"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":54,"author":{"gitID":"shadow2496"},"content":"        // missing username prefix"},{"lineNumber":55,"author":{"gitID":"shadow2496"},"content":"        assertParseFailure(parser, VALID_USERNAME_BOB + PASSWORD_DESC_BOB, MESSAGE_INVALID_FORMAT);"},{"lineNumber":56,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":57,"author":{"gitID":"shadow2496"},"content":"        // missing password prefix"},{"lineNumber":58,"author":{"gitID":"shadow2496"},"content":"        assertParseFailure(parser, USERNAME_DESC_BOB + VALID_PASSWORD_BOB, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":61,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"shadow2496"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":63,"author":{"gitID":"shadow2496"},"content":"        // invalid username"},{"lineNumber":64,"author":{"gitID":"shadow2496"},"content":"        assertParseFailure(parser, INVALID_USERNAME_DESC + PASSWORD_DESC_BOB,"},{"lineNumber":65,"author":{"gitID":"shadow2496"},"content":"                Username.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":67,"author":{"gitID":"shadow2496"},"content":"        // invalid password"},{"lineNumber":68,"author":{"gitID":"shadow2496"},"content":"        assertParseFailure(parser, USERNAME_DESC_BOB + INVALID_PASSWORD_DESC,"},{"lineNumber":69,"author":{"gitID":"shadow2496"},"content":"                Password.MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":70,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":71,"author":{"gitID":"shadow2496"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":72,"author":{"gitID":"shadow2496"},"content":"        assertParseFailure(parser, INVALID_USERNAME_DESC + INVALID_PASSWORD_DESC,"},{"lineNumber":73,"author":{"gitID":"shadow2496"},"content":"                Username.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":74,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":76,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"shadow2496"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":78,"author":{"gitID":"shadow2496"},"content":"        // non-empty preamble"},{"lineNumber":79,"author":{"gitID":"shadow2496"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + USERNAME_DESC_BOB + PASSWORD_DESC_BOB,"},{"lineNumber":80,"author":{"gitID":"shadow2496"},"content":"                MESSAGE_INVALID_FORMAT);"},{"lineNumber":81,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":58,"-":24}},{"path":"src/test/java/seedu/address/logic/commands/LoginCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AccountBuilder;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"shadow2496"},"content":"//@@author shadow2496"},{"lineNumber":23,"author":{"gitID":"shadow2496"},"content":"public class LoginCommandTest {"},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"    public void execute_login_success() {"},{"lineNumber":27,"author":{"gitID":"shadow2496"},"content":"        Account validAccount \u003d new AccountBuilder().build();"},{"lineNumber":28,"author":{"gitID":"shadow2496"},"content":"        LoginCommand command \u003d new LoginCommand(validAccount);"},{"lineNumber":29,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":30,"author":{"gitID":"shadow2496"},"content":"        String expectedMessage \u003d String.format(LoginCommand.MESSAGE_SUCCESS, validAccount);"},{"lineNumber":31,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":32,"author":{"gitID":"shadow2496"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"shadow2496"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":35,"author":{"gitID":"shadow2496"},"content":"        assertCommandSuccess(command, model, expectedMessage, model);"},{"lineNumber":36,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":38,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"shadow2496"},"content":"    public void equals() {"},{"lineNumber":40,"author":{"gitID":"shadow2496"},"content":"        Account account \u003d new AccountBuilder().withUsername(VALID_USERNAME_AMY)"},{"lineNumber":41,"author":{"gitID":"shadow2496"},"content":"                .withPassword(VALID_PASSWORD_AMY).build();"},{"lineNumber":42,"author":{"gitID":"shadow2496"},"content":"        Account accountWithDiffUsername \u003d new AccountBuilder().withUsername(VALID_USERNAME_BOB)"},{"lineNumber":43,"author":{"gitID":"shadow2496"},"content":"                .withPassword(VALID_PASSWORD_AMY).build();"},{"lineNumber":44,"author":{"gitID":"shadow2496"},"content":"        Account accountWithDiffPassword \u003d new AccountBuilder().withUsername(VALID_USERNAME_AMY)"},{"lineNumber":45,"author":{"gitID":"shadow2496"},"content":"                .withPassword(VALID_PASSWORD_BOB).build();"},{"lineNumber":46,"author":{"gitID":"shadow2496"},"content":"        LoginCommand standardCommand \u003d new LoginCommand(account);"},{"lineNumber":47,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":48,"author":{"gitID":"shadow2496"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitID":"shadow2496"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":50,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":51,"author":{"gitID":"shadow2496"},"content":"        // same values -\u003e returns true"},{"lineNumber":52,"author":{"gitID":"shadow2496"},"content":"        LoginCommand commandWithSameValues \u003d new LoginCommand(account);"},{"lineNumber":53,"author":{"gitID":"shadow2496"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":54,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":55,"author":{"gitID":"shadow2496"},"content":"        // different types -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"shadow2496"},"content":"        assertFalse(standardCommand.equals(1));"},{"lineNumber":57,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":58,"author":{"gitID":"shadow2496"},"content":"        // null -\u003e returns false"},{"lineNumber":59,"author":{"gitID":"shadow2496"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":60,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":61,"author":{"gitID":"shadow2496"},"content":"        // different values -\u003e returns false"},{"lineNumber":62,"author":{"gitID":"shadow2496"},"content":"        LoginCommand commandWithDiffUsername \u003d new LoginCommand(accountWithDiffUsername);"},{"lineNumber":63,"author":{"gitID":"shadow2496"},"content":"        LoginCommand commandWithDiffPassword \u003d new LoginCommand(accountWithDiffPassword);"},{"lineNumber":64,"author":{"gitID":"shadow2496"},"content":"        assertFalse(standardCommand.equals(commandWithDiffUsername));"},{"lineNumber":65,"author":{"gitID":"shadow2496"},"content":"        assertFalse(standardCommand.equals(commandWithDiffPassword));"},{"lineNumber":66,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":46,"-":21}},{"path":"src/test/java/seedu/address/logic/parser/RemovePlatformCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SOCIAL_MEDIA_PLATFORM;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemovePlatformCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":18,"author":{"gitID":"Nethergale"},"content":"public class RemovePlatformCommandParserTest {"},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":"    private static final String FACEBOOK_PLATFORM_FIELD \u003d \" \" + PREFIX_SOCIAL_MEDIA_PLATFORM + Link.FACEBOOK_LINK_TYPE;"},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":"    private static final String TWITTER_PLATFORM_FIELD \u003d \" \" + PREFIX_SOCIAL_MEDIA_PLATFORM + Link.TWITTER_LINK_TYPE;"},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":"    private RemovePlatformCommandParser parser \u003d new RemovePlatformCommandParser();"},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"    private Set\u003cString\u003e platformSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":"    public void parse_validArgsNoPlatformFieldsSpecified_returnsRemovePlatformCommand() {"},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"        assertParseSuccess(parser, \"1\", new RemovePlatformCommand(INDEX_FIRST_PERSON, platformSet));"},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":"    public void parse_validArgsPlatformFieldsSpecified_returnsRemovePlatformCommand() {"},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":"        platformSet.add(Link.FACEBOOK_LINK_TYPE);"},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":"        platformSet.add(Link.TWITTER_LINK_TYPE);"},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"        assertParseSuccess(parser, \"1\" + FACEBOOK_PLATFORM_FIELD + TWITTER_PLATFORM_FIELD,"},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":"                new RemovePlatformCommand(INDEX_FIRST_PERSON, platformSet));"},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"a\","},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemovePlatformCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":28,"-":16}},{"path":"src/test/java/seedu/address/logic/commands/FindWithTagCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"KevinChuangCH"},"content":"//@@author KevinChuangCH"},{"lineNumber":28,"author":{"gitID":"KevinChuangCH"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"KevinChuangCH"},"content":" * Contains integration tests (interaction with the Model) for {@code FindWithTagCommand}."},{"lineNumber":30,"author":{"gitID":"KevinChuangCH"},"content":" */"},{"lineNumber":31,"author":{"gitID":"KevinChuangCH"},"content":"public class FindWithTagCommandTest {"},{"lineNumber":32,"author":{"gitID":"KevinChuangCH"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":34,"author":{"gitID":"KevinChuangCH"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"KevinChuangCH"},"content":"    public void equals() {"},{"lineNumber":36,"author":{"gitID":"KevinChuangCH"},"content":"        TagContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"KevinChuangCH"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":38,"author":{"gitID":"KevinChuangCH"},"content":"        TagContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"KevinChuangCH"},"content":"                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":40,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":41,"author":{"gitID":"KevinChuangCH"},"content":"        FindWithTagCommand findFirstCommand \u003d new FindWithTagCommand(firstPredicate);"},{"lineNumber":42,"author":{"gitID":"KevinChuangCH"},"content":"        FindWithTagCommand findSecondCommand \u003d new FindWithTagCommand(secondPredicate);"},{"lineNumber":43,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":44,"author":{"gitID":"KevinChuangCH"},"content":"        // same object -\u003e returns true"},{"lineNumber":45,"author":{"gitID":"KevinChuangCH"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":46,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":47,"author":{"gitID":"KevinChuangCH"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitID":"KevinChuangCH"},"content":"        FindWithTagCommand findFirstCommandCopy \u003d new FindWithTagCommand(firstPredicate);"},{"lineNumber":49,"author":{"gitID":"KevinChuangCH"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":50,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":51,"author":{"gitID":"KevinChuangCH"},"content":"        // different types -\u003e returns false"},{"lineNumber":52,"author":{"gitID":"KevinChuangCH"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":53,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":54,"author":{"gitID":"KevinChuangCH"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitID":"KevinChuangCH"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":56,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":57,"author":{"gitID":"KevinChuangCH"},"content":"        // different person -\u003e returns false"},{"lineNumber":58,"author":{"gitID":"KevinChuangCH"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":59,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":61,"author":{"gitID":"KevinChuangCH"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"KevinChuangCH"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":63,"author":{"gitID":"KevinChuangCH"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":64,"author":{"gitID":"KevinChuangCH"},"content":"        FindWithTagCommand command \u003d prepareCommand(\" \");"},{"lineNumber":65,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":66,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":68,"author":{"gitID":"KevinChuangCH"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"KevinChuangCH"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitID":"KevinChuangCH"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitID":"KevinChuangCH"},"content":"        FindWithTagCommand command \u003d prepareCommand(\"classmate PC3196 labPartner\");"},{"lineNumber":72,"author":{"gitID":"KevinChuangCH"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":73,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":75,"author":{"gitID":"KevinChuangCH"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"KevinChuangCH"},"content":"     * Parses {@code userInput} into a {@code FindWithTagCommand}."},{"lineNumber":77,"author":{"gitID":"KevinChuangCH"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"KevinChuangCH"},"content":"    private FindWithTagCommand prepareCommand(String userInput) {"},{"lineNumber":79,"author":{"gitID":"KevinChuangCH"},"content":"        FindWithTagCommand command \u003d"},{"lineNumber":80,"author":{"gitID":"KevinChuangCH"},"content":"                new FindWithTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":81,"author":{"gitID":"KevinChuangCH"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":82,"author":{"gitID":"KevinChuangCH"},"content":"        return command;"},{"lineNumber":83,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":85,"author":{"gitID":"KevinChuangCH"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"KevinChuangCH"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"KevinChuangCH"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"KevinChuangCH"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":89,"author":{"gitID":"KevinChuangCH"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":90,"author":{"gitID":"KevinChuangCH"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"KevinChuangCH"},"content":"    private void assertCommandSuccess(FindWithTagCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":92,"author":{"gitID":"KevinChuangCH"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":93,"author":{"gitID":"KevinChuangCH"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":94,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":95,"author":{"gitID":"KevinChuangCH"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":96,"author":{"gitID":"KevinChuangCH"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":97,"author":{"gitID":"KevinChuangCH"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":98,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"KevinChuangCH"},"content":"}"}],"authorContributionMap":{"KevinChuangCH":73,"-":26}},{"path":"src/test/java/seedu/address/logic/parser/AddPlatformCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FACEBOOK_LINK_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TWITTER_LINK_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TWITTER_LINK_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddPlatformCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":"public class AddPlatformCommandParserTest {"},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":"    private static final String FACEBOOK_LINK_FIELD_AMY \u003d \" \" + PREFIX_LINK + VALID_FACEBOOK_LINK_AMY;"},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"    private static final String TWITTER_LINK_FIELD_AMY \u003d \" \" + PREFIX_LINK + VALID_TWITTER_LINK_AMY;"},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":"    private static final String TWITTER_LINK_FIELD_BOB \u003d \" \" + PREFIX_LINK + VALID_TWITTER_LINK_BOB;"},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":"    private static final String INVALID_LINK_1 \u003d \" \" + PREFIX_LINK + \"www.google.com\";"},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":"    private static final String INVALID_LINK_2 \u003d \" \" + PREFIX_LINK + \"www.facebook.com\";"},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":"    private static final String INVALID_LINK_3 \u003d \" \" + PREFIX_LINK + \"www.twitter.com\";"},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"    private static final String LINK_EMPTY \u003d \" \" + PREFIX_LINK;"},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPlatformCommand.MESSAGE_USAGE);"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":"    private AddPlatformCommandParser parser \u003d new AddPlatformCommandParser();"},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":"        // no index specified"},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, VALID_FACEBOOK_LINK_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":"        // no field specified"},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"1\", AddPlatformCommand.MESSAGE_LINK_COLLECTION_EMPTY);"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":"        // no index and no field specified"},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"Nethergale"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":56,"author":{"gitID":"Nethergale"},"content":"        // negative index"},{"lineNumber":57,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"-5\" + FACEBOOK_LINK_FIELD_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":58,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":59,"author":{"gitID":"Nethergale"},"content":"        // zero index"},{"lineNumber":60,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"0\" + FACEBOOK_LINK_FIELD_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":61,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":62,"author":{"gitID":"Nethergale"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":63,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":64,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":65,"author":{"gitID":"Nethergale"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":66,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":67,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":69,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"Nethergale"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":71,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LINK_1, Link.MESSAGE_INVALID_LINK); // unrecognised link"},{"lineNumber":72,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LINK_2, Link.MESSAGE_INVALID_LINK); // invalid facebook link"},{"lineNumber":73,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LINK_3, Link.MESSAGE_INVALID_LINK); // invalid twitter link"},{"lineNumber":74,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":75,"author":{"gitID":"Nethergale"},"content":"        // valid facebook link followed by invalid facebook link"},{"lineNumber":76,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"1\" + FACEBOOK_LINK_FIELD_AMY + INVALID_LINK_2, Link.MESSAGE_INVALID_LINK);"},{"lineNumber":77,"author":{"gitID":"Nethergale"},"content":"        // invalid facebook link followed by valid facebook link"},{"lineNumber":78,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LINK_2 + FACEBOOK_LINK_FIELD_AMY, Link.MESSAGE_INVALID_LINK);"},{"lineNumber":79,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":80,"author":{"gitID":"Nethergale"},"content":"        // valid twitter link followed by invalid twitter link"},{"lineNumber":81,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"1\" + TWITTER_LINK_FIELD_AMY + INVALID_LINK_3, Link.MESSAGE_INVALID_LINK);"},{"lineNumber":82,"author":{"gitID":"Nethergale"},"content":"        // invalid twitter link followed by valid twitter link"},{"lineNumber":83,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"1\" + INVALID_LINK_3 + TWITTER_LINK_FIELD_AMY, Link.MESSAGE_INVALID_LINK);"},{"lineNumber":84,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":85,"author":{"gitID":"Nethergale"},"content":"        //multiple empty link fields"},{"lineNumber":86,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser, \"1\" + LINK_EMPTY + LINK_EMPTY, Link.MESSAGE_INVALID_LINK);"},{"lineNumber":87,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":89,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":90,"author":{"gitID":"Nethergale"},"content":"    public void parse_multipleLinksForSamePlatform_failure() {"},{"lineNumber":91,"author":{"gitID":"Nethergale"},"content":"        assertParseFailure(parser,"},{"lineNumber":92,"author":{"gitID":"Nethergale"},"content":"                \"1\" + TWITTER_LINK_FIELD_AMY + TWITTER_LINK_FIELD_BOB, Link.MESSAGE_LINK_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":95,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"Nethergale"},"content":"    public void parse_oneLinkFieldSpecified_success() {"},{"lineNumber":97,"author":{"gitID":"Nethergale"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":98,"author":{"gitID":"Nethergale"},"content":"        String userInput \u003d targetIndex.getOneBased() + FACEBOOK_LINK_FIELD_AMY;"},{"lineNumber":99,"author":{"gitID":"Nethergale"},"content":"        Map\u003cString, Link\u003e linkMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":100,"author":{"gitID":"Nethergale"},"content":"        linkMap.put(Link.getLinkType(VALID_FACEBOOK_LINK_AMY), new Link(VALID_FACEBOOK_LINK_AMY));"},{"lineNumber":101,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand expectedCommand \u003d new AddPlatformCommand(targetIndex, linkMap);"},{"lineNumber":102,"author":{"gitID":"Nethergale"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":103,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":104,"author":{"gitID":"Nethergale"},"content":"        userInput \u003d targetIndex.getOneBased() + TWITTER_LINK_FIELD_AMY;"},{"lineNumber":105,"author":{"gitID":"Nethergale"},"content":"        linkMap.clear();"},{"lineNumber":106,"author":{"gitID":"Nethergale"},"content":"        linkMap.put(Link.getLinkType(VALID_TWITTER_LINK_AMY), new Link(VALID_TWITTER_LINK_AMY));"},{"lineNumber":107,"author":{"gitID":"Nethergale"},"content":"        expectedCommand \u003d new AddPlatformCommand(targetIndex, linkMap);"},{"lineNumber":108,"author":{"gitID":"Nethergale"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":109,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":111,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"Nethergale"},"content":"    public void parse_multipleLinkFieldsSpecified_success() {"},{"lineNumber":113,"author":{"gitID":"Nethergale"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":114,"author":{"gitID":"Nethergale"},"content":"        String userInput \u003d targetIndex.getOneBased() + FACEBOOK_LINK_FIELD_AMY + TWITTER_LINK_FIELD_AMY;"},{"lineNumber":115,"author":{"gitID":"Nethergale"},"content":"        Map\u003cString, Link\u003e linkMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":116,"author":{"gitID":"Nethergale"},"content":"        linkMap.put(Link.getLinkType(VALID_FACEBOOK_LINK_AMY), new Link(VALID_FACEBOOK_LINK_AMY));"},{"lineNumber":117,"author":{"gitID":"Nethergale"},"content":"        linkMap.put(Link.getLinkType(VALID_TWITTER_LINK_AMY), new Link(VALID_TWITTER_LINK_AMY));"},{"lineNumber":118,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand expectedCommand \u003d new AddPlatformCommand(targetIndex, linkMap);"},{"lineNumber":119,"author":{"gitID":"Nethergale"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":122,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"Nethergale"},"content":"    public void parse_clearPlatforms_success() {"},{"lineNumber":124,"author":{"gitID":"Nethergale"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":125,"author":{"gitID":"Nethergale"},"content":"        String userInput \u003d targetIndex.getOneBased() + LINK_EMPTY;"},{"lineNumber":126,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":127,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand expectedCommand \u003d new AddPlatformCommand(targetIndex, Collections.emptyMap());"},{"lineNumber":128,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":129,"author":{"gitID":"Nethergale"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":130,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":108,"-":23}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":"/**"},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":" * Contains integration tests (interaction with the Model) and unit tests for SortCommand."},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":" */"},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":"public class SortCommandTest {"},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":"    private Model model;"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"    private Model customModel;"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":"    private Model expectedModel;"},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":"    private SortCommand sortCommand;"},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"    @Before"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":"    public void setUp() throws Exception {"},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":"        customModel \u003d new ModelManager(generateModelWithPersons(generatePersonList("},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":"                TypicalPersons.JOHN3, TypicalPersons.JOHN2, TypicalPersons.JANE, TypicalPersons.BLAKE,"},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"                TypicalPersons.HOB2, TypicalPersons.JOHN1, TypicalPersons.LEONARD, TypicalPersons.HOB1"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":"        )).getAddressBook(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":"        expectedModel \u003d new ModelManager(generateModelWithPersons(generatePersonList("},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":"                TypicalPersons.BLAKE, TypicalPersons.HOB1, TypicalPersons.HOB2, TypicalPersons.JANE,"},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":"                TypicalPersons.JOHN1, TypicalPersons.JOHN2, TypicalPersons.JOHN3, TypicalPersons.LEONARD"},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":"        )).getAddressBook(), new UserPrefs());"},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":"        sortCommand \u003d new SortCommand();"},{"lineNumber":55,"author":{"gitID":"Nethergale"},"content":"        sortCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":56,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":58,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"Nethergale"},"content":"    public void execute_unfilteredListAlreadySorted_failure() {"},{"lineNumber":60,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(sortCommand, model, SortCommand.MESSAGE_FAILURE);"},{"lineNumber":61,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":63,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"Nethergale"},"content":"    public void execute_filteredListAlreadySorted_failure() {"},{"lineNumber":65,"author":{"gitID":"Nethergale"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":66,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(sortCommand, model, SortCommand.MESSAGE_FAILURE);"},{"lineNumber":67,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":69,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"Nethergale"},"content":"    public void execute_emptyList_failure() {"},{"lineNumber":71,"author":{"gitID":"Nethergale"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":72,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(sortCommand, model, Messages.MESSAGE_ADDRESS_BOOK_EMPTY);"},{"lineNumber":73,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":75,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"Nethergale"},"content":"    public void execute_unfilteredListUnsorted_success() {"},{"lineNumber":77,"author":{"gitID":"Nethergale"},"content":"        model.resetData(customModel.getAddressBook());"},{"lineNumber":78,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":79,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":81,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"Nethergale"},"content":"    public void execute_filteredListUnsorted_success() {"},{"lineNumber":83,"author":{"gitID":"Nethergale"},"content":"        String[] keywords \u003d {\"jane\", \"blake\", \"hob\"};"},{"lineNumber":84,"author":{"gitID":"Nethergale"},"content":"        Predicate\u003cPerson\u003e predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(keywords));"},{"lineNumber":85,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":86,"author":{"gitID":"Nethergale"},"content":"        model.resetData(customModel.getAddressBook());"},{"lineNumber":87,"author":{"gitID":"Nethergale"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":88,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":89,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":90,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":92,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":93,"author":{"gitID":"Nethergale"},"content":"    public void executeUndoRedo_unfilteredList_success() throws Exception {"},{"lineNumber":94,"author":{"gitID":"Nethergale"},"content":"        model.resetData(customModel.getAddressBook());"},{"lineNumber":95,"author":{"gitID":"Nethergale"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":96,"author":{"gitID":"Nethergale"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":97,"author":{"gitID":"Nethergale"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":98,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":99,"author":{"gitID":"Nethergale"},"content":"        // sort -\u003e sorts all persons in address book"},{"lineNumber":100,"author":{"gitID":"Nethergale"},"content":"        sortCommand.execute();"},{"lineNumber":101,"author":{"gitID":"Nethergale"},"content":"        undoRedoStack.push(sortCommand);"},{"lineNumber":102,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":103,"author":{"gitID":"Nethergale"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":104,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, customModel);"},{"lineNumber":105,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":106,"author":{"gitID":"Nethergale"},"content":"        // redo -\u003e sorts all persons in address book again"},{"lineNumber":107,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":108,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":110,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":111,"author":{"gitID":"Nethergale"},"content":"     * 1. Sorts all persons from a filtered list, such that the list is kept."},{"lineNumber":112,"author":{"gitID":"Nethergale"},"content":"     * 2. Undo the sorting."},{"lineNumber":113,"author":{"gitID":"Nethergale"},"content":"     * 3. The unfiltered list should be shown now. Verify that the list is reverted to before it is sorted."},{"lineNumber":114,"author":{"gitID":"Nethergale"},"content":"     * 4. Redo the sorting. The list shown should still be unfiltered."},{"lineNumber":115,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"Nethergale"},"content":"    public void executeUndoRedo_filteredList_success() {"},{"lineNumber":118,"author":{"gitID":"Nethergale"},"content":"        model.resetData(customModel.getAddressBook());"},{"lineNumber":119,"author":{"gitID":"Nethergale"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":120,"author":{"gitID":"Nethergale"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":121,"author":{"gitID":"Nethergale"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":122,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":123,"author":{"gitID":"Nethergale"},"content":"        showPersonAtIndex(model, INDEX_THIRD_PERSON);"},{"lineNumber":124,"author":{"gitID":"Nethergale"},"content":"        showPersonAtIndex(expectedModel, Index.fromZeroBased("},{"lineNumber":125,"author":{"gitID":"Nethergale"},"content":"                expectedModel.getFilteredPersonList().indexOf(model.getFilteredPersonList().get(0))));"},{"lineNumber":126,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":127,"author":{"gitID":"Nethergale"},"content":"        // sort -\u003e sorts all persons in address book"},{"lineNumber":128,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(sortCommand, model, SortCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":129,"author":{"gitID":"Nethergale"},"content":"        undoRedoStack.push(sortCommand);"},{"lineNumber":130,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":131,"author":{"gitID":"Nethergale"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":132,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, customModel);"},{"lineNumber":133,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":134,"author":{"gitID":"Nethergale"},"content":"        // redo -\u003e sorts all persons in address book again"},{"lineNumber":135,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updateFilteredPersonList(unused -\u003e true);"},{"lineNumber":136,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":137,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":139,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale-reused"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    //Reused from https://github.com/nus-cs2103-AY1718S2/addressbook-level3/"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    //blob/master/test/java/seedu/addressbook/logic/LogicTest.java with minor modifications"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * Creates a list of Persons based on the given Person objects."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private List\u003cPerson\u003e generatePersonList(Person... persons) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        for (Person p : persons) {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            personList.add(p);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        return personList;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":154,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":155,"author":{"gitID":"Nethergale"},"content":"     * Creates a model with all persons found in the list added."},{"lineNumber":156,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"Nethergale"},"content":"    private Model generateModelWithPersons(List\u003cPerson\u003e personList) throws Exception {"},{"lineNumber":158,"author":{"gitID":"Nethergale"},"content":"        Model m \u003d new ModelManager();"},{"lineNumber":159,"author":{"gitID":"Nethergale"},"content":"        for (Person p : personList) {"},{"lineNumber":160,"author":{"gitID":"Nethergale"},"content":"            m.addPerson(p);"},{"lineNumber":161,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":162,"author":{"gitID":"Nethergale"},"content":"        return m;"},{"lineNumber":163,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":120,"-":44}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class AddCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        new AddCommand(null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        getAddCommandForPerson(validPerson, modelStub).execute();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Generates a new AddCommand with the details of the given person."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    private AddCommand getAddCommandForPerson(Person person, Model model) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddCommand command \u003d new AddCommand(person);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"shadow2496"},"content":"        //@@author shadow2496"},{"lineNumber":117,"author":{"gitID":"shadow2496"},"content":"        @Override"},{"lineNumber":118,"author":{"gitID":"shadow2496"},"content":"        public void loginAccount(Account account) {"},{"lineNumber":119,"author":{"gitID":"shadow2496"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitID":"shadow2496"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":122,"author":{"gitID":"shadow2496"},"content":"        @Override"},{"lineNumber":123,"author":{"gitID":"shadow2496"},"content":"        public void setVerificationCode(String code) {"},{"lineNumber":124,"author":{"gitID":"shadow2496"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitID":"shadow2496"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":127,"author":{"gitID":"shadow2496"},"content":"        //@@author"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                throws DuplicatePersonException {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        public void sortAllPersons() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":148,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shadow2496":12,"-":178}},{"path":"src/test/java/seedu/address/model/smplatform/LinkTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.smplatform;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":11,"author":{"gitID":"Nethergale"},"content":"public class LinkTest {"},{"lineNumber":12,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"Nethergale"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"Nethergale"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Link(null));"},{"lineNumber":15,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":17,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Nethergale"},"content":"    public void isValidLink() {"},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":"        // null link"},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Link.isValidLink(null));"},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":"        // invalid links"},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":"        assertFalse(Link.isValidLink(\"\")); // empty string"},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"        assertFalse(Link.isValidLink(\" \")); // spaces only"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":"        assertFalse(Link.isValidLink(\"www.google.com/\")); // unknown link"},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":"        assertFalse(Link.isValidLink(\"www.facebook.com/\")); // facebook link without any path specified"},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":"        assertFalse(Link.isValidLink(\"www.facebook.com////\")); // facebook link with slashes only"},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"        assertFalse(Link.isValidLink(\"www.facebook.com/ /\")); // facebook link with space as profile username"},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":"        assertFalse(Link.isValidLink(\"www.twitter.com/\")); // twitter link without any path specified"},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":"        assertFalse(Link.isValidLink(\"www.twitter.com////\")); // twitter link with slashes only"},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":"        assertFalse(Link.isValidLink(\"www.twitter.com/ /\")); // twitter link with space as username handle"},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":"        // valid links"},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":"        assertTrue(Link.isValidLink(\"https://www.facebook.com/abc\")); // facebook page with protocol and subdomain"},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"        assertTrue(Link.isValidLink(\"http://facebook.com/abc\")); // facebook page with protocol only"},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":"        assertTrue(Link.isValidLink(\"www.facebook.com/teo.yong\")); // facebook page with subdomain only"},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":"        assertTrue(Link.isValidLink(\"facebook.com/abc\")); // facebook page with profile username only"},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":"        assertTrue(Link.isValidLink(\"facebook.com/profile.php?id\u003d100008354955053\")); // facebook page with ID"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"        assertTrue(Link.isValidLink(\"https://www.twitter.com/abc\")); // twitter page with protocol and subdomain"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":"        assertTrue(Link.isValidLink(\"http://twitter.com/__ChrisLee\")); // twitter page with protocol only"},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":"        assertTrue(Link.isValidLink(\"www.twitter.com/yosp\")); // twitter page with subdomain only"},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":"        assertTrue(Link.isValidLink(\"twitter.com/abc\")); // twitter page with username handle only"},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":35,"-":9}},{"path":"src/test/java/seedu/address/model/account/UsernameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.account;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"shadow2496"},"content":"//@@author shadow2496"},{"lineNumber":11,"author":{"gitID":"shadow2496"},"content":"public class UsernameTest {"},{"lineNumber":12,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":13,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"shadow2496"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"shadow2496"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Username(null));"},{"lineNumber":16,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":18,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"shadow2496"},"content":"    public void constructor_invalidUsername_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"shadow2496"},"content":"        String invalidUsername \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"shadow2496"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Username(invalidUsername));"},{"lineNumber":22,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":"    public void isValidUsername() {"},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"        // null username"},{"lineNumber":27,"author":{"gitID":"shadow2496"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Username.isValidUsername(null));"},{"lineNumber":28,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":29,"author":{"gitID":"shadow2496"},"content":"        // invalid usernames"},{"lineNumber":30,"author":{"gitID":"shadow2496"},"content":"        assertFalse(Username.isValidUsername(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"shadow2496"},"content":"        assertFalse(Username.isValidUsername(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":33,"author":{"gitID":"shadow2496"},"content":"        // valid usernames"},{"lineNumber":34,"author":{"gitID":"shadow2496"},"content":"        assertTrue(Username.isValidUsername(\"amybee\"));"},{"lineNumber":35,"author":{"gitID":"shadow2496"},"content":"        assertTrue(Username.isValidUsername(\"-\")); // one character"},{"lineNumber":36,"author":{"gitID":"shadow2496"},"content":"        assertTrue(Username.isValidUsername(\"amybee@very-very-very-long-example.com\")); // long username"},{"lineNumber":37,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":29,"-":9}},{"path":"src/test/java/seedu/address/model/account/PasswordTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.account;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"shadow2496"},"content":"//@@author shadow2496"},{"lineNumber":11,"author":{"gitID":"shadow2496"},"content":"public class PasswordTest {"},{"lineNumber":12,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":13,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"shadow2496"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitID":"shadow2496"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Password(null));"},{"lineNumber":16,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":18,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"shadow2496"},"content":"    public void constructor_invalidPassword_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitID":"shadow2496"},"content":"        String invalidPassword \u003d \"\";"},{"lineNumber":21,"author":{"gitID":"shadow2496"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Password(invalidPassword));"},{"lineNumber":22,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":"    public void isValidPassword() {"},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"        // null password"},{"lineNumber":27,"author":{"gitID":"shadow2496"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"},{"lineNumber":28,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":29,"author":{"gitID":"shadow2496"},"content":"        // invalid passwords"},{"lineNumber":30,"author":{"gitID":"shadow2496"},"content":"        assertFalse(Password.isValidPassword(\"\")); // empty string"},{"lineNumber":31,"author":{"gitID":"shadow2496"},"content":"        assertFalse(Password.isValidPassword(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":33,"author":{"gitID":"shadow2496"},"content":"        // valid passwords"},{"lineNumber":34,"author":{"gitID":"shadow2496"},"content":"        assertTrue(Password.isValidPassword(\"amy1111\"));"},{"lineNumber":35,"author":{"gitID":"shadow2496"},"content":"        assertTrue(Password.isValidPassword(\"-\")); // one character"},{"lineNumber":36,"author":{"gitID":"shadow2496"},"content":"        assertTrue(Password.isValidPassword(\"amy1111!very!very!very!long!example\")); // long password"},{"lineNumber":37,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":29,"-":9}},{"path":"src/test/java/seedu/address/testutil/AccountUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"shadow2496"},"content":"//@@author shadow2496"},{"lineNumber":9,"author":{"gitID":"shadow2496"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"shadow2496"},"content":" * A utility class for Account."},{"lineNumber":11,"author":{"gitID":"shadow2496"},"content":" */"},{"lineNumber":12,"author":{"gitID":"shadow2496"},"content":"public class AccountUtil {"},{"lineNumber":13,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":14,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"shadow2496"},"content":"     * Returns the part of command string for the given {@code account}\u0027s details."},{"lineNumber":16,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"shadow2496"},"content":"    public static String getAccountDetails(Account account) {"},{"lineNumber":18,"author":{"gitID":"shadow2496"},"content":"        return PREFIX_USERNAME + account.getUsername().value + \" \""},{"lineNumber":19,"author":{"gitID":"shadow2496"},"content":"                + PREFIX_PASSWORD + account.getPassword().value;"},{"lineNumber":20,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":14,"-":7}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * A utility class for Person."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class PersonUtil {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":"     * Returns an add command alias string for adding the {@code person}."},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"    public static String getAddCommandAlias(Person person) {"},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":"        return AddCommand.COMMAND_ALIAS + \" \" + getPersonDetails(person);"},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":"    //@@author"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":43,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Nethergale":9,"-":38}},{"path":"src/test/java/seedu/address/testutil/AccountBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"shadow2496"},"content":"//@@author shadow2496"},{"lineNumber":8,"author":{"gitID":"shadow2496"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"shadow2496"},"content":" * A utility class to help with building Account objects."},{"lineNumber":10,"author":{"gitID":"shadow2496"},"content":" */"},{"lineNumber":11,"author":{"gitID":"shadow2496"},"content":"public class AccountBuilder {"},{"lineNumber":12,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":13,"author":{"gitID":"shadow2496"},"content":"    private static final String DEFAULT_USERNAME \u003d \"alicepauline\";"},{"lineNumber":14,"author":{"gitID":"shadow2496"},"content":"    private static final String DEFAULT_PASSWORD \u003d \"alice8535\";"},{"lineNumber":15,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":16,"author":{"gitID":"shadow2496"},"content":"    private Username username;"},{"lineNumber":17,"author":{"gitID":"shadow2496"},"content":"    private Password password;"},{"lineNumber":18,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":19,"author":{"gitID":"shadow2496"},"content":"    public AccountBuilder() {"},{"lineNumber":20,"author":{"gitID":"shadow2496"},"content":"        username \u003d new Username(DEFAULT_USERNAME);"},{"lineNumber":21,"author":{"gitID":"shadow2496"},"content":"        password \u003d new Password(DEFAULT_PASSWORD);"},{"lineNumber":22,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":"     * Sets the {@code Username} of the {@code Account} that we are building."},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"shadow2496"},"content":"    public AccountBuilder withUsername(String username) {"},{"lineNumber":28,"author":{"gitID":"shadow2496"},"content":"        this.username \u003d new Username(username);"},{"lineNumber":29,"author":{"gitID":"shadow2496"},"content":"        return this;"},{"lineNumber":30,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":32,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"shadow2496"},"content":"     * Sets the {@code Password} of the {@code Account} that we are building."},{"lineNumber":34,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"shadow2496"},"content":"    public AccountBuilder withPassword(String password) {"},{"lineNumber":36,"author":{"gitID":"shadow2496"},"content":"        this.password \u003d new Password(password);"},{"lineNumber":37,"author":{"gitID":"shadow2496"},"content":"        return this;"},{"lineNumber":38,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":40,"author":{"gitID":"shadow2496"},"content":"    public Account build() {"},{"lineNumber":41,"author":{"gitID":"shadow2496"},"content":"        return new Account(username, password);"},{"lineNumber":42,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":37,"-":6}},{"path":"src/test/java/guitests/guihandles/ResultDisplayHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * A handler for the {@code ResultDisplay} of the UI"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle(TextArea resultDisplayNode) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        super(resultDisplayNode);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns the text in the result display."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public String getText() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return getRootNode().getText();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"     * Returns the list of style classes present in the result display."},{"lineNumber":27,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"shadow2496"},"content":"    public ObservableList\u003cString\u003e getStyleClass() {"},{"lineNumber":29,"author":{"gitID":"shadow2496"},"content":"        return getRootNode().getStyleClass();"},{"lineNumber":30,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":8,"-":23}},{"path":"src/test/java/guitests/guihandles/BrowserPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebEngine;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A handler for the {@code BrowserPanel} of the UI."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":"    public static final String FACEBOOK_BROWSER_ID \u003d \"#facebookBrowser\";"},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":"    public static final String TWITTER_BROWSER_ID \u003d \"#twitterBrowser\";"},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":"    public static final String TAB_PANE_ID \u003d \"#tabPane\";"},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"    private boolean isWebViewLoaded \u003d true;"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":"    private URL lastRememberedUrl;"},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"    private WebView facebookWebView;"},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":"    private WebView twitterWebView;"},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":"    public BrowserPanelHandle(Node browserPanelNode) {"},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":"        super(browserPanelNode);"},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":"        facebookWebView \u003d getChildNode(FACEBOOK_BROWSER_ID); // browser for facebookTab"},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"        WebEngine facebookEngine \u003d facebookWebView.getEngine();"},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":"        new GuiRobot().interact(() -\u003e facebookEngine.getLoadWorker().stateProperty().addListener(("},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":"                obs, oldState, newState) -\u003e {"},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":"            if (newState \u003d\u003d Worker.State.RUNNING) {"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"                isWebViewLoaded \u003d false;"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":"            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":"                isWebViewLoaded \u003d true;"},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"        }));"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"        twitterWebView \u003d getChildNode(TWITTER_BROWSER_ID); // browser for twitterTab"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":"        WebEngine twitterEngine \u003d twitterWebView.getEngine();"},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":"        new GuiRobot().interact(() -\u003e twitterEngine.getLoadWorker().stateProperty().addListener(("},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"                obs, oldState, newState) -\u003e {"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":"            if (newState \u003d\u003d Worker.State.RUNNING) {"},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":"                isWebViewLoaded \u003d false;"},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":"            } else if (newState \u003d\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":"                isWebViewLoaded \u003d true;"},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":"        }));"},{"lineNumber":55,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":57,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"Nethergale"},"content":"     * Returns the {@code URL} of the currently loaded page for the default browser tab (i.e. facebookTab)."},{"lineNumber":59,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"Nethergale"},"content":"    public URL getLoadedUrl() {"},{"lineNumber":61,"author":{"gitID":"Nethergale"},"content":"        URL loadedUrl \u003d WebViewUtil.getLoadedUrl(twitterWebView);"},{"lineNumber":62,"author":{"gitID":"Nethergale"},"content":"        if (Link.isValidLink(loadedUrl.toExternalForm())) {"},{"lineNumber":63,"author":{"gitID":"Nethergale"},"content":"            String completeUrl \u003d BrowserPanel.parseUrl(loadedUrl.toExternalForm());"},{"lineNumber":64,"author":{"gitID":"Nethergale"},"content":"            try {"},{"lineNumber":65,"author":{"gitID":"Nethergale"},"content":"                loadedUrl \u003d new URL(completeUrl);"},{"lineNumber":66,"author":{"gitID":"Nethergale"},"content":"                return loadedUrl;"},{"lineNumber":67,"author":{"gitID":"Nethergale"},"content":"            } catch (MalformedURLException mue) {"},{"lineNumber":68,"author":{"gitID":"Nethergale"},"content":"                throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":69,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"Nethergale"},"content":"        return WebViewUtil.getLoadedUrl(facebookWebView);"},{"lineNumber":72,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":74,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"Nethergale"},"content":"     * Returns the {@code URL} of the currently loaded page for the specified {@code browserTab}."},{"lineNumber":76,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"Nethergale"},"content":"    public URL getLoadedUrl(String browserTab) {"},{"lineNumber":78,"author":{"gitID":"Nethergale"},"content":"        if (browserTab.equals(Link.TWITTER_LINK_TYPE)) {"},{"lineNumber":79,"author":{"gitID":"Nethergale"},"content":"            URL loadedUrl \u003d WebViewUtil.getLoadedUrl(twitterWebView);"},{"lineNumber":80,"author":{"gitID":"Nethergale"},"content":"            if (Link.isValidLink(loadedUrl.toExternalForm())) {"},{"lineNumber":81,"author":{"gitID":"Nethergale"},"content":"                String completeUrl \u003d BrowserPanel.parseUrl(loadedUrl.toExternalForm());"},{"lineNumber":82,"author":{"gitID":"Nethergale"},"content":"                try {"},{"lineNumber":83,"author":{"gitID":"Nethergale"},"content":"                    loadedUrl \u003d new URL(completeUrl);"},{"lineNumber":84,"author":{"gitID":"Nethergale"},"content":"                    return loadedUrl;"},{"lineNumber":85,"author":{"gitID":"Nethergale"},"content":"                } catch (MalformedURLException mue) {"},{"lineNumber":86,"author":{"gitID":"Nethergale"},"content":"                    throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":87,"author":{"gitID":"Nethergale"},"content":"                }"},{"lineNumber":88,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"Nethergale"},"content":"        return getLoadedUrl();"},{"lineNumber":91,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":93,"author":{"gitID":"Nethergale"},"content":"    //@@author"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Remembers the {@code URL} of the currently loaded page."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void rememberUrl() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        lastRememberedUrl \u003d getLoadedUrl();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Returns true if the current {@code URL} is different from the value remembered by the most recent"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * {@code rememberUrl()} call."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public boolean isUrlChanged() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return !lastRememberedUrl.equals(getLoadedUrl());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Returns true if the browser is done loading a page, or if this browser has yet to load any page."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public boolean isLoaded() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return isWebViewLoaded;"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Nethergale":75,"-":40}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.beans.value.ObservableValue;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.concurrent.Worker;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.scene.control.Tab;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.scene.control.TabPane;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.SearchPersonEvent;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowLoginDialogRequestEvent;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Facebook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Twitter;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String LOADING_PAGE_URL \u003d \"https://cs2103jan2018-f12-b3.github.io/main/LoadingPage.html\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static final String FACEBOOK_SEARCH_PAGE_URL \u003d"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            \"https://www.facebook.com/search/people?q\u003d\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String TWITTER_SEARCH_PAGE_URL \u003d"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            \"https://twitter.com/search?f\u003dusers\u0026vertical\u003dnews\u0026q\u003d\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String SUCCESS_URL \u003d \"https://www.facebook.com/connect/login_success.html\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final String FACEBOOK_TAB_ID \u003d \"facebookTab\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private static final String TWITTER_TAB_ID \u003d \"twitterTab\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private static final String FUNCTION_ADD \u003d \"add\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private static final String FUNCTION_REMOVE \u003d \"remove\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + \"default.html\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private Set\u003cString\u003e openTabIdSet;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private TabPane tabPane;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private Tab facebookTab;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private Tab twitterTab;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private WebView facebookBrowser;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    private WebView twitterBrowser;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public BrowserPanel(Logic logic) {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"Nethergale"},"content":"        //@@author Nethergale"},{"lineNumber":78,"author":{"gitID":"Nethergale"},"content":"        openTabIdSet \u003d tabPane.getTabs().stream().map(tab -\u003e tab.getId()).collect(Collectors.toSet());"},{"lineNumber":79,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":80,"author":{"gitID":"Nethergale"},"content":"        //@@author"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":82,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":89,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"Nethergale"},"content":"     * Updates the display of social media browser tabs."},{"lineNumber":91,"author":{"gitID":"Nethergale"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"Nethergale"},"content":"     * @param function defines an add or remove function"},{"lineNumber":93,"author":{"gitID":"Nethergale"},"content":"     * @param tabId id of the fxml tab"},{"lineNumber":94,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Nethergale"},"content":"    private void updateBrowserTabs(String function, String tabId) {"},{"lineNumber":96,"author":{"gitID":"Nethergale"},"content":"        switch (function) {"},{"lineNumber":97,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":98,"author":{"gitID":"Nethergale"},"content":"        case FUNCTION_ADD:"},{"lineNumber":99,"author":{"gitID":"Nethergale"},"content":"            addBrowserTab(tabId);"},{"lineNumber":100,"author":{"gitID":"Nethergale"},"content":"            break;"},{"lineNumber":101,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":102,"author":{"gitID":"Nethergale"},"content":"        case FUNCTION_REMOVE:"},{"lineNumber":103,"author":{"gitID":"Nethergale"},"content":"            removeBrowserTab(tabId);"},{"lineNumber":104,"author":{"gitID":"Nethergale"},"content":"            break;"},{"lineNumber":105,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":106,"author":{"gitID":"Nethergale"},"content":"        default:"},{"lineNumber":107,"author":{"gitID":"Nethergale"},"content":"            // Do nothing"},{"lineNumber":108,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":111,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"Nethergale"},"content":"     * Adds the specified browser tab to the UI using the {@code tabId} if it is not open;"},{"lineNumber":113,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"Nethergale"},"content":"    private void addBrowserTab(String tabId) {"},{"lineNumber":115,"author":{"gitID":"Nethergale"},"content":"        if (!openTabIdSet.contains(tabId)) {"},{"lineNumber":116,"author":{"gitID":"Nethergale"},"content":"            openTabIdSet.add(tabId);"},{"lineNumber":117,"author":{"gitID":"Nethergale"},"content":"            switch (tabId) {"},{"lineNumber":118,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":119,"author":{"gitID":"Nethergale"},"content":"            case FACEBOOK_TAB_ID:"},{"lineNumber":120,"author":{"gitID":"Nethergale"},"content":"                tabPane.getTabs().add(0, facebookTab);"},{"lineNumber":121,"author":{"gitID":"Nethergale"},"content":"                break;"},{"lineNumber":122,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":123,"author":{"gitID":"Nethergale"},"content":"            case TWITTER_TAB_ID:"},{"lineNumber":124,"author":{"gitID":"Nethergale"},"content":"                tabPane.getTabs().add(twitterTab);"},{"lineNumber":125,"author":{"gitID":"Nethergale"},"content":"                break;"},{"lineNumber":126,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":127,"author":{"gitID":"Nethergale"},"content":"            default:"},{"lineNumber":128,"author":{"gitID":"Nethergale"},"content":"                // Do nothing"},{"lineNumber":129,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":130,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":133,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"Nethergale"},"content":"     * Removes the specified browser tab from the UI using the {@code tabId};"},{"lineNumber":135,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"Nethergale"},"content":"    private void removeBrowserTab(String tabId) {"},{"lineNumber":137,"author":{"gitID":"Nethergale"},"content":"        openTabIdSet.remove(tabId);"},{"lineNumber":138,"author":{"gitID":"Nethergale"},"content":"        switch (tabId) {"},{"lineNumber":139,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":140,"author":{"gitID":"Nethergale"},"content":"        case FACEBOOK_TAB_ID:"},{"lineNumber":141,"author":{"gitID":"Nethergale"},"content":"            tabPane.getTabs().remove(facebookTab);"},{"lineNumber":142,"author":{"gitID":"Nethergale"},"content":"            break;"},{"lineNumber":143,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":144,"author":{"gitID":"Nethergale"},"content":"        case TWITTER_TAB_ID:"},{"lineNumber":145,"author":{"gitID":"Nethergale"},"content":"            tabPane.getTabs().remove(twitterTab);"},{"lineNumber":146,"author":{"gitID":"Nethergale"},"content":"            break;"},{"lineNumber":147,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":148,"author":{"gitID":"Nethergale"},"content":"        default:"},{"lineNumber":149,"author":{"gitID":"Nethergale"},"content":"            //Do nothing"},{"lineNumber":150,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":153,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"Nethergale"},"content":"     * Returns the given {@code url} with a protocol and subdomain if unspecified."},{"lineNumber":155,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":156,"author":{"gitID":"Nethergale"},"content":"    public static String parseUrl(String url) {"},{"lineNumber":157,"author":{"gitID":"Nethergale"},"content":"        if (!url.contains(\"://\")) {"},{"lineNumber":158,"author":{"gitID":"Nethergale"},"content":"            if (!url.contains(\"www\")) {"},{"lineNumber":159,"author":{"gitID":"Nethergale"},"content":"                return \"https://www.\" + url;"},{"lineNumber":160,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":161,"author":{"gitID":"Nethergale"},"content":"            return \"https://\" + url;"},{"lineNumber":162,"author":{"gitID":"Nethergale"},"content":"        } else {"},{"lineNumber":163,"author":{"gitID":"Nethergale"},"content":"            if (!url.contains(\"www\")) {"},{"lineNumber":164,"author":{"gitID":"Nethergale"},"content":"                String[] splitUrl \u003d url.split(\"://\");"},{"lineNumber":165,"author":{"gitID":"Nethergale"},"content":"                return \"https://www.\" + splitUrl[1];"},{"lineNumber":166,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":167,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":169,"author":{"gitID":"Nethergale"},"content":"        return url;"},{"lineNumber":170,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":172,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"Nethergale"},"content":"     * Loads the Facebook profile page for the browser on the Facebook tab if it exists."},{"lineNumber":174,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"Nethergale"},"content":"    private void loadFacebookBrowserProfilePage(Person person) {"},{"lineNumber":176,"author":{"gitID":"Nethergale"},"content":"        if (person.getSocialMediaPlatformMap().containsKey(Link.FACEBOOK_LINK_TYPE)) {"},{"lineNumber":177,"author":{"gitID":"Nethergale"},"content":"            updateBrowserTabs(FUNCTION_ADD, FACEBOOK_TAB_ID);"},{"lineNumber":178,"author":{"gitID":"Nethergale"},"content":"            String url \u003d person.getSocialMediaPlatformMap().get(Link.FACEBOOK_LINK_TYPE).getLink().value;"},{"lineNumber":179,"author":{"gitID":"Nethergale"},"content":"            loadFacebookBrowserPage(parseUrl(url));"},{"lineNumber":180,"author":{"gitID":"Nethergale"},"content":"        } else {"},{"lineNumber":181,"author":{"gitID":"Nethergale"},"content":"            updateBrowserTabs(FUNCTION_REMOVE, FACEBOOK_TAB_ID);"},{"lineNumber":182,"author":{"gitID":"Nethergale"},"content":"            loadFacebookBrowserPage(defaultPage.toExternalForm());"},{"lineNumber":183,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":186,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"Nethergale"},"content":"     * Loads the Twitter profile page for the browser on the Twitter tab if it exists."},{"lineNumber":188,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":189,"author":{"gitID":"Nethergale"},"content":"    private void loadTwitterBrowserProfilePage(Person person) {"},{"lineNumber":190,"author":{"gitID":"Nethergale"},"content":"        if (person.getSocialMediaPlatformMap().containsKey(Link.TWITTER_LINK_TYPE)) {"},{"lineNumber":191,"author":{"gitID":"Nethergale"},"content":"            updateBrowserTabs(FUNCTION_ADD, TWITTER_TAB_ID);"},{"lineNumber":192,"author":{"gitID":"Nethergale"},"content":"            String url \u003d person.getSocialMediaPlatformMap().get(Link.TWITTER_LINK_TYPE).getLink().value;"},{"lineNumber":193,"author":{"gitID":"Nethergale"},"content":"            loadTwitterBrowserPage(parseUrl(url));"},{"lineNumber":194,"author":{"gitID":"Nethergale"},"content":"        } else {"},{"lineNumber":195,"author":{"gitID":"Nethergale"},"content":"            updateBrowserTabs(FUNCTION_REMOVE, TWITTER_TAB_ID);"},{"lineNumber":196,"author":{"gitID":"Nethergale"},"content":"            loadTwitterBrowserPage(defaultPage.toExternalForm());"},{"lineNumber":197,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":198,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":200,"author":{"gitID":"KevinChuangCH"},"content":"    //@@author KevinChuangCH"},{"lineNumber":201,"author":{"gitID":"KevinChuangCH"},"content":"    private void loadBrowserSearchPage(String searchName) {"},{"lineNumber":202,"author":{"gitID":"KevinChuangCH"},"content":"        loadFacebookBrowserPage(FACEBOOK_SEARCH_PAGE_URL + searchName);"},{"lineNumber":203,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"KevinChuangCH"},"content":"    private void loadBrowser1SearchPage(String searchName) {"},{"lineNumber":205,"author":{"gitID":"KevinChuangCH"},"content":"        loadTwitterBrowserPage(TWITTER_SEARCH_PAGE_URL + searchName);"},{"lineNumber":206,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":208,"author":{"gitID":"KevinChuangCH"},"content":"    //@@author"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public void loadFacebookBrowserPage(String url) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e facebookBrowser.getEngine().load(url));"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    public void loadTwitterBrowserPage(String url) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e twitterBrowser.getEngine().load(url));"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":217,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":218,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        loadFacebookBrowserPage(defaultPage.toExternalForm());"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        loadTwitterBrowserPage(defaultPage.toExternalForm());"},{"lineNumber":222,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":""},{"lineNumber":224,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":225,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":226,"author":{"gitID":"shadow2496"},"content":"     * Passes a verification code when the login is successful."},{"lineNumber":227,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":228,"author":{"gitID":"shadow2496"},"content":"    private void passVerificationCode() {"},{"lineNumber":229,"author":{"gitID":"shadow2496"},"content":"        facebookBrowser.getEngine().getLoadWorker().stateProperty().addListener(("},{"lineNumber":230,"author":{"gitID":"shadow2496"},"content":"                ObservableValue\u003c? extends Worker.State\u003e observable, Worker.State oldValue, Worker.State newValue) -\u003e {"},{"lineNumber":231,"author":{"gitID":"shadow2496"},"content":"            if (newValue !\u003d Worker.State.SUCCEEDED) {"},{"lineNumber":232,"author":{"gitID":"shadow2496"},"content":"                return;"},{"lineNumber":233,"author":{"gitID":"shadow2496"},"content":"            }"},{"lineNumber":234,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":235,"author":{"gitID":"shadow2496"},"content":"            String currentUrl \u003d facebookBrowser.getEngine().getLocation();"},{"lineNumber":236,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":237,"author":{"gitID":"shadow2496"},"content":"            if (currentUrl.endsWith(DEFAULT_PAGE)) {"},{"lineNumber":238,"author":{"gitID":"shadow2496"},"content":"            } else if (currentUrl.startsWith(SUCCESS_URL)) {"},{"lineNumber":239,"author":{"gitID":"shadow2496"},"content":"                int pos \u003d currentUrl.indexOf(\"code\u003d\");"},{"lineNumber":240,"author":{"gitID":"shadow2496"},"content":"                logic.passVerificationCode(currentUrl.substring(pos + \"code\u003d\".length()));"},{"lineNumber":241,"author":{"gitID":"shadow2496"},"content":"            }"},{"lineNumber":242,"author":{"gitID":"shadow2496"},"content":"        });"},{"lineNumber":243,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":245,"author":{"gitID":"shadow2496"},"content":"    //@@author"},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":248,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":249,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        facebookBrowser \u003d null;"},{"lineNumber":252,"author":{"gitID":"-"},"content":"        twitterBrowser \u003d null;"},{"lineNumber":253,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":256,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":257,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":258,"author":{"gitID":"-"},"content":"        loadFacebookBrowserProfilePage(event.getNewSelection().person);"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        loadTwitterBrowserProfilePage(event.getNewSelection().person);"},{"lineNumber":260,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"KevinChuangCH"},"content":"    //@@author KevinChuangCH"},{"lineNumber":263,"author":{"gitID":"KevinChuangCH"},"content":"    @Subscribe"},{"lineNumber":264,"author":{"gitID":"KevinChuangCH"},"content":"    private void handleSearchPersonEvent(SearchPersonEvent event) {"},{"lineNumber":265,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":266,"author":{"gitID":"KevinChuangCH"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":267,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":268,"author":{"gitID":"KevinChuangCH"},"content":"        String platformToSearch \u003d event.getPlatform();"},{"lineNumber":269,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":270,"author":{"gitID":"KevinChuangCH"},"content":"        if (StringUtil.containsWordIgnoreCase(platformToSearch, Facebook.PLATFORM_KEYWORD)"},{"lineNumber":271,"author":{"gitID":"KevinChuangCH"},"content":"                || StringUtil.containsWordIgnoreCase(platformToSearch, Facebook.PLATFORM_ALIAS)) {"},{"lineNumber":272,"author":{"gitID":"KevinChuangCH"},"content":"            updateBrowserTabs(FUNCTION_ADD, FACEBOOK_TAB_ID);"},{"lineNumber":273,"author":{"gitID":"KevinChuangCH"},"content":"            updateBrowserTabs(FUNCTION_REMOVE, TWITTER_TAB_ID);"},{"lineNumber":274,"author":{"gitID":"KevinChuangCH"},"content":"            loadBrowserSearchPage(event.getSearchName());"},{"lineNumber":275,"author":{"gitID":"KevinChuangCH"},"content":"            loadTwitterBrowserPage(defaultPage.toExternalForm());"},{"lineNumber":276,"author":{"gitID":"KevinChuangCH"},"content":"        } else if (StringUtil.containsWordIgnoreCase(platformToSearch, Twitter.PLATFORM_KEYWORD)"},{"lineNumber":277,"author":{"gitID":"KevinChuangCH"},"content":"                || StringUtil.containsWordIgnoreCase(platformToSearch, Twitter.PLATFORM_ALIAS)) {"},{"lineNumber":278,"author":{"gitID":"KevinChuangCH"},"content":"            updateBrowserTabs(FUNCTION_ADD, TWITTER_TAB_ID);"},{"lineNumber":279,"author":{"gitID":"KevinChuangCH"},"content":"            updateBrowserTabs(FUNCTION_REMOVE, FACEBOOK_TAB_ID);"},{"lineNumber":280,"author":{"gitID":"KevinChuangCH"},"content":"            loadFacebookBrowserPage(defaultPage.toExternalForm());"},{"lineNumber":281,"author":{"gitID":"KevinChuangCH"},"content":"            loadBrowser1SearchPage(event.getSearchName());"},{"lineNumber":282,"author":{"gitID":"KevinChuangCH"},"content":"        } else {"},{"lineNumber":283,"author":{"gitID":"KevinChuangCH"},"content":"            updateBrowserTabs(FUNCTION_ADD, FACEBOOK_TAB_ID);"},{"lineNumber":284,"author":{"gitID":"KevinChuangCH"},"content":"            updateBrowserTabs(FUNCTION_ADD, TWITTER_TAB_ID);"},{"lineNumber":285,"author":{"gitID":"KevinChuangCH"},"content":"            loadBrowserSearchPage(event.getSearchName());"},{"lineNumber":286,"author":{"gitID":"KevinChuangCH"},"content":"            loadBrowser1SearchPage(event.getSearchName());"},{"lineNumber":287,"author":{"gitID":"KevinChuangCH"},"content":"        }"},{"lineNumber":288,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":289,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":290,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":291,"author":{"gitID":"shadow2496"},"content":"    @Subscribe"},{"lineNumber":292,"author":{"gitID":"shadow2496"},"content":"    private void handleShowLoginDialogRequestEvent(ShowLoginDialogRequestEvent event) {"},{"lineNumber":293,"author":{"gitID":"shadow2496"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":294,"author":{"gitID":"shadow2496"},"content":"        loadFacebookBrowserPage(event.loadUrl);"},{"lineNumber":295,"author":{"gitID":"shadow2496"},"content":"        passVerificationCode();"},{"lineNumber":296,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"Nethergale":116,"shadow2496":30,"KevinChuangCH":37,"-":114}},{"path":"src/test/java/seedu/address/logic/commands/AddPlatformCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SMP_MAP_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.SMP_MAP_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.LinkedHashSet;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Facebook;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatform;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatformFactory;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":"public class AddPlatformCommandTest {"},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"    public static final String LINK_STUB \u003d \"www.facebook.com/carl.kz\";"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"    public void execute_invalidPlatformLink_failure() {"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":"        String invalidLink \u003d \"www.google.com\";"},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":"        Map\u003cString, SocialMediaPlatform\u003e smpMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":"        smpMap.put(Link.FACEBOOK_LINK_TYPE, new Facebook(new Link(invalidLink)));"},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand addPlatformCommand \u003d prepareCommand(INDEX_THIRD_PERSON, smpMap);"},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":55,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(addPlatformCommand, model, SocialMediaPlatformFactory.MESSAGE_BUILD_ERROR);"},{"lineNumber":56,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":58,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"Nethergale"},"content":"    public void execute_addPlatformUnfilteredList_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"Nethergale"},"content":"        Person thirdPerson \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(thirdPerson).withPlatforms(LINK_STUB).build();"},{"lineNumber":62,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":63,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand addPlatformCommand \u003d"},{"lineNumber":64,"author":{"gitID":"Nethergale"},"content":"                prepareCommand(INDEX_THIRD_PERSON, editedPerson.getSocialMediaPlatformMap());"},{"lineNumber":65,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":66,"author":{"gitID":"Nethergale"},"content":"        String expectedMessage \u003d String.format(AddPlatformCommand.MESSAGE_ADD_PLATFORM_SUCCESS, editedPerson.getName());"},{"lineNumber":67,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":68,"author":{"gitID":"Nethergale"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":69,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(thirdPerson, editedPerson);"},{"lineNumber":70,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":71,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(addPlatformCommand, model, expectedMessage, expectedModel);"},{"lineNumber":72,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":74,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"Nethergale"},"content":"    public void execute_retainAndAddPlatformsUnfilteredList_success() throws Exception {"},{"lineNumber":76,"author":{"gitID":"Nethergale"},"content":"        Person secondPerson \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":77,"author":{"gitID":"Nethergale"},"content":"        Set\u003cString\u003e linkSet \u003d new LinkedHashSet\u003c\u003e();"},{"lineNumber":78,"author":{"gitID":"Nethergale"},"content":"        linkSet.add(LINK_STUB);"},{"lineNumber":79,"author":{"gitID":"Nethergale"},"content":"        for (String key : secondPerson.getSocialMediaPlatformMap().keySet()) {"},{"lineNumber":80,"author":{"gitID":"Nethergale"},"content":"            linkSet.add(secondPerson.getSocialMediaPlatformMap().get(key).getLink().value);"},{"lineNumber":81,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(secondPerson)"},{"lineNumber":83,"author":{"gitID":"Nethergale"},"content":"                .withPlatforms(linkSet.toArray(new String[linkSet.size()])).build();"},{"lineNumber":84,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":85,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand addPlatformCommand \u003d"},{"lineNumber":86,"author":{"gitID":"Nethergale"},"content":"                prepareCommand(INDEX_SECOND_PERSON, editedPerson.getSocialMediaPlatformMap());"},{"lineNumber":87,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":88,"author":{"gitID":"Nethergale"},"content":"        String expectedMessage \u003d String.format(AddPlatformCommand.MESSAGE_ADD_PLATFORM_SUCCESS, editedPerson.getName());"},{"lineNumber":89,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":90,"author":{"gitID":"Nethergale"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":91,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(secondPerson, editedPerson);"},{"lineNumber":92,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":93,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(addPlatformCommand, model, expectedMessage, expectedModel);"},{"lineNumber":94,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":96,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"Nethergale"},"content":"    public void execute_clearAllPlatformsUnfilteredList_success() throws Exception {"},{"lineNumber":98,"author":{"gitID":"Nethergale"},"content":"        Person thirdPerson \u003d model.getFilteredPersonList().get(INDEX_THIRD_PERSON.getZeroBased());"},{"lineNumber":99,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(thirdPerson).withPlatforms(\"\").build();"},{"lineNumber":100,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":101,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand addPlatformCommand \u003d"},{"lineNumber":102,"author":{"gitID":"Nethergale"},"content":"                prepareCommand(INDEX_THIRD_PERSON, editedPerson.getSocialMediaPlatformMap());"},{"lineNumber":103,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":104,"author":{"gitID":"Nethergale"},"content":"        String expectedMessage \u003d"},{"lineNumber":105,"author":{"gitID":"Nethergale"},"content":"                String.format(AddPlatformCommand.MESSAGE_ADD_PLATFORM_CLEAR_SUCCESS, editedPerson.getName());"},{"lineNumber":106,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":107,"author":{"gitID":"Nethergale"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":108,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(thirdPerson, editedPerson);"},{"lineNumber":109,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":110,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(addPlatformCommand, model, expectedMessage, expectedModel);"},{"lineNumber":111,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":113,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"Nethergale"},"content":"    public void execute_addPlatformFilteredList_success() throws Exception {"},{"lineNumber":115,"author":{"gitID":"Nethergale"},"content":"        showPersonAtIndex(model, INDEX_THIRD_PERSON);"},{"lineNumber":116,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":117,"author":{"gitID":"Nethergale"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":118,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"},{"lineNumber":119,"author":{"gitID":"Nethergale"},"content":"                .withPlatforms(LINK_STUB).build();"},{"lineNumber":120,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":121,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand addPlatformCommand \u003d"},{"lineNumber":122,"author":{"gitID":"Nethergale"},"content":"                prepareCommand(INDEX_FIRST_PERSON, editedPerson.getSocialMediaPlatformMap());"},{"lineNumber":123,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":124,"author":{"gitID":"Nethergale"},"content":"        String expectedMessage \u003d String.format(AddPlatformCommand.MESSAGE_ADD_PLATFORM_SUCCESS, editedPerson.getName());"},{"lineNumber":125,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":126,"author":{"gitID":"Nethergale"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":127,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(firstPerson, editedPerson);"},{"lineNumber":128,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":129,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(addPlatformCommand, model, expectedMessage, expectedModel);"},{"lineNumber":130,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":132,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"Nethergale"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":134,"author":{"gitID":"Nethergale"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":135,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand addPlatformCommand \u003d prepareCommand(outOfBoundIndex, SMP_MAP_BOB);"},{"lineNumber":136,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":137,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(addPlatformCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":138,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":140,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"Nethergale"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":142,"author":{"gitID":"Nethergale"},"content":"     * but smaller than size of address book."},{"lineNumber":143,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":145,"author":{"gitID":"Nethergale"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":146,"author":{"gitID":"Nethergale"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":147,"author":{"gitID":"Nethergale"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":148,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":149,"author":{"gitID":"Nethergale"},"content":"        //Ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":150,"author":{"gitID":"Nethergale"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":151,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":152,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand addPlatformCommand \u003d prepareCommand(outOfBoundIndex, SMP_MAP_AMY);"},{"lineNumber":153,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":154,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(addPlatformCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":155,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":157,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"Nethergale"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":159,"author":{"gitID":"Nethergale"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":160,"author":{"gitID":"Nethergale"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":161,"author":{"gitID":"Nethergale"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":162,"author":{"gitID":"Nethergale"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":163,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(personToEdit).withPlatforms(LINK_STUB).build();"},{"lineNumber":164,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand addPlatformCommand \u003d"},{"lineNumber":165,"author":{"gitID":"Nethergale"},"content":"                prepareCommand(INDEX_FIRST_PERSON, editedPerson.getSocialMediaPlatformMap());"},{"lineNumber":166,"author":{"gitID":"Nethergale"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":167,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":168,"author":{"gitID":"Nethergale"},"content":"        // addplatform -\u003e first person platforms changed"},{"lineNumber":169,"author":{"gitID":"Nethergale"},"content":"        addPlatformCommand.execute();"},{"lineNumber":170,"author":{"gitID":"Nethergale"},"content":"        undoRedoStack.push(addPlatformCommand);"},{"lineNumber":171,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":172,"author":{"gitID":"Nethergale"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":173,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":174,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":175,"author":{"gitID":"Nethergale"},"content":"        // redo -\u003e same first person modified again"},{"lineNumber":176,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":177,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":178,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":180,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":181,"author":{"gitID":"Nethergale"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":182,"author":{"gitID":"Nethergale"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":183,"author":{"gitID":"Nethergale"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":184,"author":{"gitID":"Nethergale"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":185,"author":{"gitID":"Nethergale"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":186,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand addPlatformCommand \u003d prepareCommand(outOfBoundIndex, SMP_MAP_AMY);"},{"lineNumber":187,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":188,"author":{"gitID":"Nethergale"},"content":"        // execution failed -\u003e addPlatformCommand not pushed into undoRedoStack"},{"lineNumber":189,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(addPlatformCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":190,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":191,"author":{"gitID":"Nethergale"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":192,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":193,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":194,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":196,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"Nethergale"},"content":"     * 1. Modifies a person\u0027s social media platform from a filtered list."},{"lineNumber":198,"author":{"gitID":"Nethergale"},"content":"     * 2. Undo the modification."},{"lineNumber":199,"author":{"gitID":"Nethergale"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously modified person in the"},{"lineNumber":200,"author":{"gitID":"Nethergale"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":201,"author":{"gitID":"Nethergale"},"content":"     * 4. Redo the modification. This ensures {@code RedoCommand} modifies the person object regardless of indexing."},{"lineNumber":202,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"Nethergale"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonModified() throws Exception {"},{"lineNumber":205,"author":{"gitID":"Nethergale"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":206,"author":{"gitID":"Nethergale"},"content":"        Set\u003cString\u003e linkSet \u003d new LinkedHashSet\u003c\u003e();"},{"lineNumber":207,"author":{"gitID":"Nethergale"},"content":"        linkSet.add(LINK_STUB);"},{"lineNumber":208,"author":{"gitID":"Nethergale"},"content":"        for (String key : firstPerson.getSocialMediaPlatformMap().keySet()) {"},{"lineNumber":209,"author":{"gitID":"Nethergale"},"content":"            linkSet.add(firstPerson.getSocialMediaPlatformMap().get(key).getLink().toString());"},{"lineNumber":210,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":211,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":212,"author":{"gitID":"Nethergale"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":213,"author":{"gitID":"Nethergale"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":214,"author":{"gitID":"Nethergale"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":215,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand addPlatformCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":216,"author":{"gitID":"Nethergale"},"content":"                SampleDataUtil.getSocialMediaPlatformMap(linkSet.toArray(new String[linkSet.size()])));"},{"lineNumber":217,"author":{"gitID":"Nethergale"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":218,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":219,"author":{"gitID":"Nethergale"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":220,"author":{"gitID":"Nethergale"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":221,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(personToEdit)"},{"lineNumber":222,"author":{"gitID":"Nethergale"},"content":"                .withPlatforms(linkSet.toArray(new String[linkSet.size()])).build();"},{"lineNumber":223,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":224,"author":{"gitID":"Nethergale"},"content":"        // addplatform -\u003e modifies second person in unfiltered person list / first person in filtered person list"},{"lineNumber":225,"author":{"gitID":"Nethergale"},"content":"        addPlatformCommand.execute();"},{"lineNumber":226,"author":{"gitID":"Nethergale"},"content":"        undoRedoStack.push(addPlatformCommand);"},{"lineNumber":227,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":228,"author":{"gitID":"Nethergale"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":229,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":230,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":231,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":232,"author":{"gitID":"Nethergale"},"content":"        assertNotEquals(personToEdit, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":233,"author":{"gitID":"Nethergale"},"content":"        // redo -\u003e modifies same second person in unfiltered person list"},{"lineNumber":234,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":235,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":237,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":238,"author":{"gitID":"Nethergale"},"content":"    public void equals() {"},{"lineNumber":239,"author":{"gitID":"Nethergale"},"content":"        Map\u003cString, Link\u003e amyLinkMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":240,"author":{"gitID":"Nethergale"},"content":"        Map\u003cString, Link\u003e bobLinkMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":241,"author":{"gitID":"Nethergale"},"content":"        for (String key : SMP_MAP_AMY.keySet()) {"},{"lineNumber":242,"author":{"gitID":"Nethergale"},"content":"            amyLinkMap.put(key, SMP_MAP_AMY.get(key).getLink());"},{"lineNumber":243,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"Nethergale"},"content":"        for (String key : SMP_MAP_BOB.keySet()) {"},{"lineNumber":245,"author":{"gitID":"Nethergale"},"content":"            amyLinkMap.put(key, SMP_MAP_BOB.get(key).getLink());"},{"lineNumber":246,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":247,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":248,"author":{"gitID":"Nethergale"},"content":"        final AddPlatformCommand standardCommand \u003d new AddPlatformCommand(INDEX_FIRST_PERSON, amyLinkMap);"},{"lineNumber":249,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":250,"author":{"gitID":"Nethergale"},"content":"        // same values -\u003e returns true"},{"lineNumber":251,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand commandWithSameValues \u003d new AddPlatformCommand(INDEX_FIRST_PERSON, amyLinkMap);"},{"lineNumber":252,"author":{"gitID":"Nethergale"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":253,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":254,"author":{"gitID":"Nethergale"},"content":"        // same object -\u003e returns true"},{"lineNumber":255,"author":{"gitID":"Nethergale"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":256,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":257,"author":{"gitID":"Nethergale"},"content":"        // null -\u003e returns false"},{"lineNumber":258,"author":{"gitID":"Nethergale"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":259,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":260,"author":{"gitID":"Nethergale"},"content":"        // different types -\u003e returns false"},{"lineNumber":261,"author":{"gitID":"Nethergale"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":262,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":263,"author":{"gitID":"Nethergale"},"content":"        // different index -\u003e returns false"},{"lineNumber":264,"author":{"gitID":"Nethergale"},"content":"        assertFalse(standardCommand.equals(new AddPlatformCommand(INDEX_SECOND_PERSON, amyLinkMap)));"},{"lineNumber":265,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":266,"author":{"gitID":"Nethergale"},"content":"        // different remark -\u003e returns false"},{"lineNumber":267,"author":{"gitID":"Nethergale"},"content":"        assertFalse(standardCommand.equals(new AddPlatformCommand(INDEX_FIRST_PERSON, bobLinkMap)));"},{"lineNumber":268,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":270,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"Nethergale"},"content":"     * Returns an {@code AddPlatformCommand} with parameters {@code index} and {@code Map\u003cString, SocialMediaPlatform\u003e}."},{"lineNumber":272,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"Nethergale"},"content":"    private AddPlatformCommand prepareCommand(Index index, Map\u003cString, SocialMediaPlatform\u003e smpMap) {"},{"lineNumber":274,"author":{"gitID":"Nethergale"},"content":"        Map\u003cString, Link\u003e linkMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":275,"author":{"gitID":"Nethergale"},"content":"        for (String key : smpMap.keySet()) {"},{"lineNumber":276,"author":{"gitID":"Nethergale"},"content":"            linkMap.put(key, smpMap.get(key).getLink());"},{"lineNumber":277,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand addPlatformCommand \u003d new AddPlatformCommand(index, linkMap);"},{"lineNumber":279,"author":{"gitID":"Nethergale"},"content":"        addPlatformCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":280,"author":{"gitID":"Nethergale"},"content":"        return addPlatformCommand;"},{"lineNumber":281,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":282,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":242,"-":40}},{"path":"src/main/java/seedu/address/ui/ResultDisplay.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.beans.property.SimpleStringProperty;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.beans.property.StringProperty;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        resultDisplay.textProperty().bind(displayed);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e displayed.setValue(event.message));"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"shadow2496"},"content":"        //@@author shadow2496"},{"lineNumber":43,"author":{"gitID":"shadow2496"},"content":"        if (event.hasError) {"},{"lineNumber":44,"author":{"gitID":"shadow2496"},"content":"            setStyleToIndicateResultError();"},{"lineNumber":45,"author":{"gitID":"shadow2496"},"content":"        } else {"},{"lineNumber":46,"author":{"gitID":"shadow2496"},"content":"            setStyleToDefault();"},{"lineNumber":47,"author":{"gitID":"shadow2496"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":49,"author":{"gitID":"shadow2496"},"content":"        //@@author"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":53,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"shadow2496"},"content":"     * Sets the result display style to use the default style."},{"lineNumber":55,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"shadow2496"},"content":"    private void setStyleToDefault() {"},{"lineNumber":57,"author":{"gitID":"shadow2496"},"content":"        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":58,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":60,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"shadow2496"},"content":"     * Sets the result display style to indicate that a result has an error."},{"lineNumber":62,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"shadow2496"},"content":"    private void setStyleToIndicateResultError() {"},{"lineNumber":64,"author":{"gitID":"shadow2496"},"content":"        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"},{"lineNumber":65,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":66,"author":{"gitID":"shadow2496"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":67,"author":{"gitID":"shadow2496"},"content":"            return;"},{"lineNumber":68,"author":{"gitID":"shadow2496"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":70,"author":{"gitID":"shadow2496"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":71,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":29,"-":43}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Label address;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private VBox socialMediaIconPane;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        addIconsToSocialMediaIconPane();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":81,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"Nethergale"},"content":"     * Adds the various social media icon tab to the social media icon pane."},{"lineNumber":83,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"Nethergale"},"content":"    private void addIconsToSocialMediaIconPane() {"},{"lineNumber":85,"author":{"gitID":"Nethergale"},"content":"        for (String key : person.getSocialMediaPlatformMap().keySet()) {"},{"lineNumber":86,"author":{"gitID":"Nethergale"},"content":"            if (!person.getSocialMediaPlatformMap().get(key).getLink().value.isEmpty()) {"},{"lineNumber":87,"author":{"gitID":"Nethergale"},"content":"                socialMediaIconPane.getChildren().add(createSocialMediaIconTab(key));"},{"lineNumber":88,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":92,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"Nethergale"},"content":"     * Creates the icon tab for the specific social media platform."},{"lineNumber":94,"author":{"gitID":"Nethergale"},"content":"     *"},{"lineNumber":95,"author":{"gitID":"Nethergale"},"content":"     * @param type social media platform type"},{"lineNumber":96,"author":{"gitID":"Nethergale"},"content":"     * @return stack pane representing an icon tab"},{"lineNumber":97,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"Nethergale"},"content":"    private StackPane createSocialMediaIconTab(String type) {"},{"lineNumber":99,"author":{"gitID":"Nethergale"},"content":"        StackPane socialMediaIconTab \u003d new StackPane();"},{"lineNumber":100,"author":{"gitID":"Nethergale"},"content":"        Region tabBackground \u003d new Region();"},{"lineNumber":101,"author":{"gitID":"Nethergale"},"content":"        tabBackground.setPrefSize(30, 32);"},{"lineNumber":102,"author":{"gitID":"Nethergale"},"content":"        tabBackground.setStyle(\"-fx-background-color: linear-gradient(from 0% 0% to 100% 0%, #29323C, #485563); \""},{"lineNumber":103,"author":{"gitID":"Nethergale"},"content":"                + \"-fx-background-radius: 6 0 0 6; -fx-border-color: #242C35; \""},{"lineNumber":104,"author":{"gitID":"Nethergale"},"content":"                + \"-fx-border-radius: 6 0 0 6; -fx-border-width: 2 0 2 2;\");"},{"lineNumber":105,"author":{"gitID":"Nethergale"},"content":"        ImageView tabIcon \u003d new ImageView();"},{"lineNumber":106,"author":{"gitID":"Nethergale"},"content":"        String url \u003d imageUrl(type);"},{"lineNumber":107,"author":{"gitID":"Nethergale"},"content":"        if (!url.isEmpty()) {"},{"lineNumber":108,"author":{"gitID":"Nethergale"},"content":"            tabIcon.setFitWidth(20);"},{"lineNumber":109,"author":{"gitID":"Nethergale"},"content":"            tabIcon.setFitHeight(20);"},{"lineNumber":110,"author":{"gitID":"Nethergale"},"content":"            tabIcon.setImage(new Image(url));"},{"lineNumber":111,"author":{"gitID":"Nethergale"},"content":"            socialMediaIconTab.getChildren().addAll(tabBackground, tabIcon);"},{"lineNumber":112,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":113,"author":{"gitID":"Nethergale"},"content":"        return socialMediaIconTab;"},{"lineNumber":114,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":116,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"Nethergale"},"content":"     * Returns the location of the icon for the specific social media platform {@code type}."},{"lineNumber":118,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"Nethergale"},"content":"    private String imageUrl(String type) {"},{"lineNumber":120,"author":{"gitID":"Nethergale"},"content":"        if (type.equals(Link.FACEBOOK_LINK_TYPE)) {"},{"lineNumber":121,"author":{"gitID":"Nethergale"},"content":"            return \"images/facebook_icon.png\";"},{"lineNumber":122,"author":{"gitID":"Nethergale"},"content":"        } else if (type.equals(Link.TWITTER_LINK_TYPE)) {"},{"lineNumber":123,"author":{"gitID":"Nethergale"},"content":"            return \"images/twitter_icon.png\";"},{"lineNumber":124,"author":{"gitID":"Nethergale"},"content":"        } else {"},{"lineNumber":125,"author":{"gitID":"Nethergale"},"content":"            return \"\";"},{"lineNumber":126,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":49,"-":79}},{"path":"src/main/java/seedu/address/commons/events/ui/SearchPersonEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"KevinChuangCH"},"content":"//@@author KevinChuangCH"},{"lineNumber":6,"author":{"gitID":"KevinChuangCH"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"KevinChuangCH"},"content":" * Represents a search for person."},{"lineNumber":8,"author":{"gitID":"KevinChuangCH"},"content":" */"},{"lineNumber":9,"author":{"gitID":"KevinChuangCH"},"content":"public class SearchPersonEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":11,"author":{"gitID":"KevinChuangCH"},"content":"    private final String searchName;"},{"lineNumber":12,"author":{"gitID":"KevinChuangCH"},"content":"    private final String platformToSearch;"},{"lineNumber":13,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":14,"author":{"gitID":"KevinChuangCH"},"content":"    public SearchPersonEvent(String platformToSearch, String searchName) {"},{"lineNumber":15,"author":{"gitID":"KevinChuangCH"},"content":"        this.searchName \u003d searchName;"},{"lineNumber":16,"author":{"gitID":"KevinChuangCH"},"content":"        this.platformToSearch \u003d platformToSearch;"},{"lineNumber":17,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":19,"author":{"gitID":"KevinChuangCH"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"KevinChuangCH"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitID":"KevinChuangCH"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":22,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":24,"author":{"gitID":"KevinChuangCH"},"content":"    public String getSearchName() {"},{"lineNumber":25,"author":{"gitID":"KevinChuangCH"},"content":"        return searchName;"},{"lineNumber":26,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":28,"author":{"gitID":"KevinChuangCH"},"content":"    public String getPlatform() {"},{"lineNumber":29,"author":{"gitID":"KevinChuangCH"},"content":"        return platformToSearch;"},{"lineNumber":30,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":32,"author":{"gitID":"KevinChuangCH"},"content":"}"}],"authorContributionMap":{"KevinChuangCH":28,"-":4}},{"path":"src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Indicates that a new result is available."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class NewResultAvailableEvent extends BaseEvent {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":11,"author":{"gitID":"shadow2496"},"content":"    public final boolean hasError;"},{"lineNumber":12,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":13,"author":{"gitID":"shadow2496"},"content":"    //@@author"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public final String message;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public NewResultAvailableEvent(String message, boolean hasError) {"},{"lineNumber":17,"author":{"gitID":"shadow2496"},"content":"        //@@author shadow2496"},{"lineNumber":18,"author":{"gitID":"shadow2496"},"content":"        this.hasError \u003d hasError;"},{"lineNumber":19,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":20,"author":{"gitID":"shadow2496"},"content":"        //@@author"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        this.message \u003d message;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shadow2496":8,"-":21}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":23,"author":{"gitID":"shadow2496"},"content":"    /** Passes the verification code for an access token */"},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":"    void passVerificationCode(String code);"},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"    //@@author"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shadow2496":5,"-":28}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowLoginDialogRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"shadow2496"},"content":"//@@author shadow2496"},{"lineNumber":6,"author":{"gitID":"shadow2496"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"shadow2496"},"content":" * Indicates a request to view the login dialog."},{"lineNumber":8,"author":{"gitID":"shadow2496"},"content":" */"},{"lineNumber":9,"author":{"gitID":"shadow2496"},"content":"public class ShowLoginDialogRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":11,"author":{"gitID":"shadow2496"},"content":"    public final String loadUrl;"},{"lineNumber":12,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":13,"author":{"gitID":"shadow2496"},"content":"    public ShowLoginDialogRequestEvent(String loadUrl) {"},{"lineNumber":14,"author":{"gitID":"shadow2496"},"content":"        this.loadUrl \u003d loadUrl;"},{"lineNumber":15,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":17,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"shadow2496"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"shadow2496"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":17,"-":4}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddPlatformCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindWithTagCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemovePlatformCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":32,"author":{"gitID":"-"},"content":" */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"shadow2496"},"content":"        //@@author shadow2496"},{"lineNumber":58,"author":{"gitID":"shadow2496"},"content":"        case LoginCommand.COMMAND_WORD:"},{"lineNumber":59,"author":{"gitID":"shadow2496"},"content":"            return new LoginCommandParser().parse(arguments);"},{"lineNumber":60,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":61,"author":{"gitID":"shadow2496"},"content":"        //@@author"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        case AddCommand.COMMAND_ALIAS:"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        case SearchCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            return new SearchCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        case FindWithTagCommand.COMMAND_WORD:"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            return new FindWithTagCommandParser().parse(arguments);"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"Nethergale"},"content":"        //@@author Nethergale"},{"lineNumber":109,"author":{"gitID":"Nethergale"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":110,"author":{"gitID":"Nethergale"},"content":"            return new SortCommand();"},{"lineNumber":111,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":112,"author":{"gitID":"Nethergale"},"content":"        case AddPlatformCommand.COMMAND_WORD:"},{"lineNumber":113,"author":{"gitID":"Nethergale"},"content":"            return new AddPlatformCommandParser().parse(arguments);"},{"lineNumber":114,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":115,"author":{"gitID":"Nethergale"},"content":"        case RemovePlatformCommand.COMMAND_WORD:"},{"lineNumber":116,"author":{"gitID":"Nethergale"},"content":"            return new RemovePlatformCommandParser().parse(arguments);"},{"lineNumber":117,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":118,"author":{"gitID":"Nethergale"},"content":"        //@@author"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Nethergale":11,"shadow2496":5,"-":108}},{"path":"src/main/java/seedu/address/logic/parser/FindWithTagCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindWithTagCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"KevinChuangCH"},"content":"//@@author KevinChuangCH"},{"lineNumber":12,"author":{"gitID":"KevinChuangCH"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"KevinChuangCH"},"content":" * Parses input arguments and creates a new FindWithTagCommand object"},{"lineNumber":14,"author":{"gitID":"KevinChuangCH"},"content":" */"},{"lineNumber":15,"author":{"gitID":"KevinChuangCH"},"content":"public class FindWithTagCommandParser implements Parser\u003cFindWithTagCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":17,"author":{"gitID":"KevinChuangCH"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"KevinChuangCH"},"content":"     * Parses the given {@code String} of arguments in the context of the FindWithTagCommand"},{"lineNumber":19,"author":{"gitID":"KevinChuangCH"},"content":"     * and returns an FindWithTagCommand object for execution."},{"lineNumber":20,"author":{"gitID":"KevinChuangCH"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"KevinChuangCH"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"KevinChuangCH"},"content":"    public FindWithTagCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"KevinChuangCH"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"KevinChuangCH"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"KevinChuangCH"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"KevinChuangCH"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindWithTagCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"KevinChuangCH"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":29,"author":{"gitID":"KevinChuangCH"},"content":"        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":31,"author":{"gitID":"KevinChuangCH"},"content":"        return new FindWithTagCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"},{"lineNumber":32,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":34,"author":{"gitID":"KevinChuangCH"},"content":"}"}],"authorContributionMap":{"KevinChuangCH":24,"-":10}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatform;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":40,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"shadow2496"},"content":"     * Parses a {@code String username} into an {@code Username}."},{"lineNumber":42,"author":{"gitID":"shadow2496"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":43,"author":{"gitID":"shadow2496"},"content":"     *"},{"lineNumber":44,"author":{"gitID":"shadow2496"},"content":"     * @throws IllegalValueException if the given {@code username} is invalid."},{"lineNumber":45,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"shadow2496"},"content":"    public static Username parseUsername(String username) throws IllegalValueException {"},{"lineNumber":47,"author":{"gitID":"shadow2496"},"content":"        requireNonNull(username);"},{"lineNumber":48,"author":{"gitID":"shadow2496"},"content":"        String trimmedUsername \u003d username.trim();"},{"lineNumber":49,"author":{"gitID":"shadow2496"},"content":"        if (!Username.isValidUsername(trimmedUsername)) {"},{"lineNumber":50,"author":{"gitID":"shadow2496"},"content":"            throw new IllegalValueException(Username.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitID":"shadow2496"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"shadow2496"},"content":"        return new Username(trimmedUsername);"},{"lineNumber":53,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":55,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"shadow2496"},"content":"     * Parses a {@code Optional\u003cString\u003e username} into an {@code Optional\u003cUsername\u003e} if {@code username} is present."},{"lineNumber":57,"author":{"gitID":"shadow2496"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":58,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"shadow2496"},"content":"    public static Optional\u003cUsername\u003e parseUsername(Optional\u003cString\u003e username) throws IllegalValueException {"},{"lineNumber":60,"author":{"gitID":"shadow2496"},"content":"        requireNonNull(username);"},{"lineNumber":61,"author":{"gitID":"shadow2496"},"content":"        return username.isPresent() ? Optional.of(parseUsername(username.get())) : Optional.empty();"},{"lineNumber":62,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":64,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"shadow2496"},"content":"     * Parses a {@code String password} into an {@code Password}."},{"lineNumber":66,"author":{"gitID":"shadow2496"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":67,"author":{"gitID":"shadow2496"},"content":"     *"},{"lineNumber":68,"author":{"gitID":"shadow2496"},"content":"     * @throws IllegalValueException if the given {@code password} is invalid."},{"lineNumber":69,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"shadow2496"},"content":"    public static Password parsePassword(String password) throws IllegalValueException {"},{"lineNumber":71,"author":{"gitID":"shadow2496"},"content":"        requireNonNull(password);"},{"lineNumber":72,"author":{"gitID":"shadow2496"},"content":"        String trimmedPassword \u003d password.trim();"},{"lineNumber":73,"author":{"gitID":"shadow2496"},"content":"        if (!Password.isValidPassword(trimmedPassword)) {"},{"lineNumber":74,"author":{"gitID":"shadow2496"},"content":"            throw new IllegalValueException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":75,"author":{"gitID":"shadow2496"},"content":"        }"},{"lineNumber":76,"author":{"gitID":"shadow2496"},"content":"        return new Password(trimmedPassword);"},{"lineNumber":77,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":79,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"shadow2496"},"content":"     * Parses a {@code Optional\u003cString\u003e password} into an {@code Optional\u003cPassword\u003e} if {@code password} is present."},{"lineNumber":81,"author":{"gitID":"shadow2496"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":82,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"shadow2496"},"content":"    public static Optional\u003cPassword\u003e parsePassword(Optional\u003cString\u003e password) throws IllegalValueException {"},{"lineNumber":84,"author":{"gitID":"shadow2496"},"content":"        requireNonNull(password);"},{"lineNumber":85,"author":{"gitID":"shadow2496"},"content":"        return password.isPresent() ? Optional.of(parsePassword(password.get())) : Optional.empty();"},{"lineNumber":86,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":88,"author":{"gitID":"shadow2496"},"content":"    //@@author"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"KevinChuangCH"},"content":"    //@@author KevinChuangCH"},{"lineNumber":104,"author":{"gitID":"KevinChuangCH"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"KevinChuangCH"},"content":"     * Checks for the validation of {@code inputPlatform} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":106,"author":{"gitID":"KevinChuangCH"},"content":"     * trimmed."},{"lineNumber":107,"author":{"gitID":"KevinChuangCH"},"content":"     * @throws IllegalValueException if the specified name is invalid (not following the name regex)."},{"lineNumber":108,"author":{"gitID":"KevinChuangCH"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"KevinChuangCH"},"content":"    public static String parsePlatformToSearch(String inputPlatform) throws IllegalValueException {"},{"lineNumber":110,"author":{"gitID":"KevinChuangCH"},"content":"        requireNonNull(inputPlatform);"},{"lineNumber":111,"author":{"gitID":"KevinChuangCH"},"content":"        String trimmedInputPlatform \u003d inputPlatform.trim();"},{"lineNumber":112,"author":{"gitID":"KevinChuangCH"},"content":"        if (!SocialMediaPlatform.isValidPlatform(trimmedInputPlatform)) {"},{"lineNumber":113,"author":{"gitID":"KevinChuangCH"},"content":"            throw new IllegalValueException(SocialMediaPlatform.MESSAGE_PLATFORM_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitID":"KevinChuangCH"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"KevinChuangCH"},"content":"        return trimmedInputPlatform;"},{"lineNumber":116,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":118,"author":{"gitID":"KevinChuangCH"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"KevinChuangCH"},"content":"     * Checks for the validation of {@code inputName} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":120,"author":{"gitID":"KevinChuangCH"},"content":"     * trimmed."},{"lineNumber":121,"author":{"gitID":"KevinChuangCH"},"content":"     * @throws IllegalValueException if the specified name is invalid (not following the name regex)."},{"lineNumber":122,"author":{"gitID":"KevinChuangCH"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"KevinChuangCH"},"content":"    public static String parseSearchName(String inputName) throws IllegalValueException {"},{"lineNumber":124,"author":{"gitID":"KevinChuangCH"},"content":"        requireNonNull(inputName);"},{"lineNumber":125,"author":{"gitID":"KevinChuangCH"},"content":"        String trimmedInputName \u003d inputName.trim();"},{"lineNumber":126,"author":{"gitID":"KevinChuangCH"},"content":"        if (!trimmedInputName.matches(SocialMediaPlatform.USERNAME_VALIDATION_REGEX)) {"},{"lineNumber":127,"author":{"gitID":"KevinChuangCH"},"content":"            throw new IllegalValueException(SocialMediaPlatform.MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitID":"KevinChuangCH"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"KevinChuangCH"},"content":"        return trimmedInputName;"},{"lineNumber":130,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"KevinChuangCH"},"content":"    //@@author"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":183,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":185,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":199,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":230,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":231,"author":{"gitID":"Nethergale"},"content":"     * Parses a {@code String link} into a {@code Link}."},{"lineNumber":232,"author":{"gitID":"Nethergale"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":233,"author":{"gitID":"Nethergale"},"content":"     *"},{"lineNumber":234,"author":{"gitID":"Nethergale"},"content":"     * @throws IllegalValueException if the given {@code link} is invalid."},{"lineNumber":235,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"Nethergale"},"content":"    public static Link parseLink(String link) throws IllegalValueException {"},{"lineNumber":237,"author":{"gitID":"Nethergale"},"content":"        requireNonNull(link);"},{"lineNumber":238,"author":{"gitID":"Nethergale"},"content":"        String trimmedLink \u003d link.trim();"},{"lineNumber":239,"author":{"gitID":"Nethergale"},"content":"        if (!Link.isValidLink(trimmedLink)) {"},{"lineNumber":240,"author":{"gitID":"Nethergale"},"content":"            throw new IllegalValueException(Link.MESSAGE_INVALID_LINK);"},{"lineNumber":241,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"Nethergale"},"content":"        return new Link(trimmedLink);"},{"lineNumber":243,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":245,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"Nethergale"},"content":"     * Parses {@code Collection\u003cString\u003e links} into a {@code Map\u003cString, Link\u003e}."},{"lineNumber":247,"author":{"gitID":"Nethergale"},"content":"     *"},{"lineNumber":248,"author":{"gitID":"Nethergale"},"content":"     * @throws IllegalValueException if any social media platform is going to have more than one link each."},{"lineNumber":249,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":250,"author":{"gitID":"Nethergale"},"content":"    public static Map\u003cString, Link\u003e parseLinks(Collection\u003cString\u003e links) throws IllegalValueException {"},{"lineNumber":251,"author":{"gitID":"Nethergale"},"content":"        requireNonNull(links);"},{"lineNumber":252,"author":{"gitID":"Nethergale"},"content":"        final Map\u003cString, Link\u003e linkMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":253,"author":{"gitID":"Nethergale"},"content":"        for (String linkStr : links) {"},{"lineNumber":254,"author":{"gitID":"Nethergale"},"content":"            String linkType \u003d Link.getLinkType(linkStr);"},{"lineNumber":255,"author":{"gitID":"Nethergale"},"content":"            Link link \u003d parseLink(linkStr);"},{"lineNumber":256,"author":{"gitID":"Nethergale"},"content":"            if ((linkType.equals(Link.FACEBOOK_LINK_TYPE) || linkType.equals(Link.TWITTER_LINK_TYPE))"},{"lineNumber":257,"author":{"gitID":"Nethergale"},"content":"                    \u0026\u0026 linkMap.containsKey(linkType)) {"},{"lineNumber":258,"author":{"gitID":"Nethergale"},"content":"                throw new IllegalValueException(Link.MESSAGE_LINK_CONSTRAINTS);"},{"lineNumber":259,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":260,"author":{"gitID":"Nethergale"},"content":"            linkMap.put(linkType, link);"},{"lineNumber":261,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":262,"author":{"gitID":"Nethergale"},"content":"        return linkMap;"},{"lineNumber":263,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":265,"author":{"gitID":"Nethergale"},"content":"    //@@author"},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":268,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":269,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":270,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":271,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":278,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitID":"-"},"content":""},{"lineNumber":281,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":282,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":283,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":285,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":289,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":290,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Nethergale":37,"shadow2496":50,"KevinChuangCH":29,"-":176}},{"path":"src/main/java/seedu/address/logic/parser/AddPlatformCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddPlatformCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":18,"author":{"gitID":"Nethergale"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":" * Parses input arguments and creates a new AddPlatformCommand object"},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":"public class AddPlatformCommandParser implements Parser\u003cAddPlatformCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPlatformCommand"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":"     * and returns an AddPlatformCommand object for execution."},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":"     * @throws ParseException if the user input does not conform to the expected format"},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":"    public AddPlatformCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":"        requireNonNull(args);"},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_LINK);"},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":"        Index index;"},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":"        Map\u003cString, Link\u003e linkMap;"},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPlatformCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"            linkMap \u003d parseLinksForAddPlatform(argMultimap.getAllValues(PREFIX_LINK));"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"        return new AddPlatformCommand(index, linkMap);"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":"     * Parses {@code Collection\u003cString\u003e links} into a {@code Map\u003cString, Link\u003e} if {@code links} is non-empty."},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":"     * If {@code links} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":"     * {@code Map\u003cString, Link\u003e} containing zero links."},{"lineNumber":55,"author":{"gitID":"Nethergale"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"Nethergale"},"content":"     * @throws IllegalValueException if user does not specify even a single link prefix."},{"lineNumber":57,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"Nethergale"},"content":"    private Map\u003cString, Link\u003e parseLinksForAddPlatform(Collection\u003cString\u003e links) throws IllegalValueException {"},{"lineNumber":59,"author":{"gitID":"Nethergale"},"content":"        assert links !\u003d null;"},{"lineNumber":60,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":61,"author":{"gitID":"Nethergale"},"content":"        if (links.isEmpty()) {"},{"lineNumber":62,"author":{"gitID":"Nethergale"},"content":"            throw new IllegalValueException(AddPlatformCommand.MESSAGE_LINK_COLLECTION_EMPTY);"},{"lineNumber":63,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"Nethergale"},"content":"        Collection\u003cString\u003e linkSet \u003d links.size() \u003d\u003d 1 \u0026\u0026 links.contains(\"\") ? Collections.emptySet() : links;"},{"lineNumber":65,"author":{"gitID":"Nethergale"},"content":"        return ParserUtil.parseLinks(linkSet);"},{"lineNumber":66,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":51,"-":16}},{"path":"src/main/java/seedu/address/logic/parser/LoginCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.LoginCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Password;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Username;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"shadow2496"},"content":"//@@author shadow2496"},{"lineNumber":17,"author":{"gitID":"shadow2496"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"shadow2496"},"content":" * Parses input arguments and creates a new LoginCommand object"},{"lineNumber":19,"author":{"gitID":"shadow2496"},"content":" */"},{"lineNumber":20,"author":{"gitID":"shadow2496"},"content":"public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"},{"lineNumber":21,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":22,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"shadow2496"},"content":"     * Parses the given {@code String} of arguments in the context of the LoginCommand"},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":"     * and returns an LoginCommand object for execution."},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"shadow2496"},"content":"    public LoginCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitID":"shadow2496"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"},{"lineNumber":29,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":30,"author":{"gitID":"shadow2496"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"},{"lineNumber":31,"author":{"gitID":"shadow2496"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":32,"author":{"gitID":"shadow2496"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitID":"shadow2496"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":35,"author":{"gitID":"shadow2496"},"content":"        try {"},{"lineNumber":36,"author":{"gitID":"shadow2496"},"content":"            Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME)).get();"},{"lineNumber":37,"author":{"gitID":"shadow2496"},"content":"            Password password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD)).get();"},{"lineNumber":38,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":39,"author":{"gitID":"shadow2496"},"content":"            Account account \u003d new Account(username, password);"},{"lineNumber":40,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":41,"author":{"gitID":"shadow2496"},"content":"            return new LoginCommand(account);"},{"lineNumber":42,"author":{"gitID":"shadow2496"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"shadow2496"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":44,"author":{"gitID":"shadow2496"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":47,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"shadow2496"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":49,"author":{"gitID":"shadow2496"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":50,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"shadow2496"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":52,"author":{"gitID":"shadow2496"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":53,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":39,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/RemovePlatformCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SOCIAL_MEDIA_PLATFORM;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RemovePlatformCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":16,"author":{"gitID":"Nethergale"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"Nethergale"},"content":" * Parses input arguments and creates a new RemovePlatformCommand object"},{"lineNumber":18,"author":{"gitID":"Nethergale"},"content":" */"},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":"public class RemovePlatformCommandParser implements Parser\u003cRemovePlatformCommand\u003e {"},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":"     * Parses the given {@code String} of arguments in the context of the RemovePlatformCommand"},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":"     * and returns a RemovePlatformCommand object for execution."},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":"    public RemovePlatformCommand parse(String args) throws ParseException {"},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":"        requireNonNull(args);"},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_SOCIAL_MEDIA_PLATFORM);"},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":"        Index index;"},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":"        Set\u003cString\u003e platformSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":"        try {"},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"            platformSet.addAll(argMultimap.getAllValues(PREFIX_SOCIAL_MEDIA_PLATFORM));"},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":"            throw new ParseException("},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemovePlatformCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":"        return new RemovePlatformCommand(index, platformSet);"},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":30,"-":14}},{"path":"src/main/java/seedu/address/logic/commands/LoginCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"shadow2496"},"content":"//@@author shadow2496"},{"lineNumber":10,"author":{"gitID":"shadow2496"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"shadow2496"},"content":" * Logs into a social media platform using the user\u0027s account information."},{"lineNumber":12,"author":{"gitID":"shadow2496"},"content":" */"},{"lineNumber":13,"author":{"gitID":"shadow2496"},"content":"public class LoginCommand extends Command {"},{"lineNumber":14,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":15,"author":{"gitID":"shadow2496"},"content":"    public static final String COMMAND_WORD \u003d \"login\";"},{"lineNumber":16,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":17,"author":{"gitID":"shadow2496"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Logs into a social media platform using \""},{"lineNumber":18,"author":{"gitID":"shadow2496"},"content":"            + \"the user\u0027s name and password. \""},{"lineNumber":19,"author":{"gitID":"shadow2496"},"content":"            + \"Parameters: \""},{"lineNumber":20,"author":{"gitID":"shadow2496"},"content":"            + PREFIX_USERNAME + \"USERNAME \""},{"lineNumber":21,"author":{"gitID":"shadow2496"},"content":"            + PREFIX_PASSWORD + \"PASSWORD\\n\""},{"lineNumber":22,"author":{"gitID":"shadow2496"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":23,"author":{"gitID":"shadow2496"},"content":"            + PREFIX_USERNAME + \"johndoe \""},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":"            + PREFIX_PASSWORD + \"jd9876\";"},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Logged in account: %1$s\";"},{"lineNumber":27,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":28,"author":{"gitID":"shadow2496"},"content":"    private final Account accountToLogin;"},{"lineNumber":29,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":30,"author":{"gitID":"shadow2496"},"content":"    public LoginCommand(Account account) {"},{"lineNumber":31,"author":{"gitID":"shadow2496"},"content":"        requireNonNull(account);"},{"lineNumber":32,"author":{"gitID":"shadow2496"},"content":"        accountToLogin \u003d account;"},{"lineNumber":33,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":35,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"shadow2496"},"content":"    public CommandResult execute() {"},{"lineNumber":37,"author":{"gitID":"shadow2496"},"content":"        requireNonNull(model);"},{"lineNumber":38,"author":{"gitID":"shadow2496"},"content":"        model.loginAccount(accountToLogin);"},{"lineNumber":39,"author":{"gitID":"shadow2496"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, accountToLogin));"},{"lineNumber":40,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":42,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"shadow2496"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"shadow2496"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitID":"shadow2496"},"content":"                || (other instanceof LoginCommand // instanceof handles nulls"},{"lineNumber":46,"author":{"gitID":"shadow2496"},"content":"                \u0026\u0026 this.accountToLogin.equals(((LoginCommand) other).accountToLogin)); // state check"},{"lineNumber":47,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":40,"-":8}},{"path":"src/main/java/seedu/address/logic/parser/SearchCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SearchCommand;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"KevinChuangCH"},"content":"//@@author KevinChuangCH"},{"lineNumber":10,"author":{"gitID":"KevinChuangCH"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"KevinChuangCH"},"content":" * Parses input arguments and creates a new SearchCommand object"},{"lineNumber":12,"author":{"gitID":"KevinChuangCH"},"content":" */"},{"lineNumber":13,"author":{"gitID":"KevinChuangCH"},"content":"public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"},{"lineNumber":14,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":15,"author":{"gitID":"KevinChuangCH"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"KevinChuangCH"},"content":"     * Parses the given {@code String} of arguments in the context of the SearchCommand"},{"lineNumber":17,"author":{"gitID":"KevinChuangCH"},"content":"     * and returns an SearchCommand object for execution."},{"lineNumber":18,"author":{"gitID":"KevinChuangCH"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"KevinChuangCH"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"KevinChuangCH"},"content":"    public SearchCommand parse(String args) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"KevinChuangCH"},"content":"        String[] splitArgs \u003d args.split(\", \");"},{"lineNumber":22,"author":{"gitID":"KevinChuangCH"},"content":"        if (splitArgs.length \u003d\u003d 1) {"},{"lineNumber":23,"author":{"gitID":"KevinChuangCH"},"content":"            String platform \u003d \"all\";"},{"lineNumber":24,"author":{"gitID":"KevinChuangCH"},"content":"            try {"},{"lineNumber":25,"author":{"gitID":"KevinChuangCH"},"content":"                String inputName \u003d ParserUtil.parseSearchName(splitArgs[0]);"},{"lineNumber":26,"author":{"gitID":"KevinChuangCH"},"content":"                return new SearchCommand(platform, inputName);"},{"lineNumber":27,"author":{"gitID":"KevinChuangCH"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":28,"author":{"gitID":"KevinChuangCH"},"content":"                throw new ParseException("},{"lineNumber":29,"author":{"gitID":"KevinChuangCH"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"KevinChuangCH"},"content":"            }"},{"lineNumber":31,"author":{"gitID":"KevinChuangCH"},"content":"        } else if (splitArgs.length \u003d\u003d 2) {"},{"lineNumber":32,"author":{"gitID":"KevinChuangCH"},"content":"            try {"},{"lineNumber":33,"author":{"gitID":"KevinChuangCH"},"content":"                String platform \u003d ParserUtil.parsePlatformToSearch(splitArgs[0]);"},{"lineNumber":34,"author":{"gitID":"KevinChuangCH"},"content":"                String inputName \u003d ParserUtil.parseSearchName(splitArgs[1]);"},{"lineNumber":35,"author":{"gitID":"KevinChuangCH"},"content":"                return new SearchCommand(platform, inputName);"},{"lineNumber":36,"author":{"gitID":"KevinChuangCH"},"content":"            } catch (IllegalValueException ive) {"},{"lineNumber":37,"author":{"gitID":"KevinChuangCH"},"content":"                throw new ParseException("},{"lineNumber":38,"author":{"gitID":"KevinChuangCH"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitID":"KevinChuangCH"},"content":"            }"},{"lineNumber":40,"author":{"gitID":"KevinChuangCH"},"content":"        } else {"},{"lineNumber":41,"author":{"gitID":"KevinChuangCH"},"content":"            throw new ParseException("},{"lineNumber":42,"author":{"gitID":"KevinChuangCH"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitID":"KevinChuangCH"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"KevinChuangCH"},"content":"}"}],"authorContributionMap":{"KevinChuangCH":37,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.collect.Ordering;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":14,"author":{"gitID":"Nethergale"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Nethergale"},"content":" * Displays the current list of persons in the address book to the user sorted alphabetically."},{"lineNumber":16,"author":{"gitID":"Nethergale"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Nethergale"},"content":"public class SortCommand extends UndoableCommand {"},{"lineNumber":18,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the current list of persons in the \""},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":"            + \"address book sorted in alphabetical order with index numbers.\\n\""},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book sorted successfully!\";"},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Address book has already been sorted.\";"},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"    private List\u003cPerson\u003e personList;"},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":"     * Returns true if person list is sorted."},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":"    private boolean isListSorted() {"},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":"        return Ordering.from(Person.nameComparator()).isOrdered(personList);"},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"        requireNonNull(model);"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":"        model.sortAllPersons();"},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":"        personList \u003d model.getAddressBook().getPersonList();"},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":"        if (personList.isEmpty()) {"},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"            throw new CommandException(Messages.MESSAGE_ADDRESS_BOOK_EMPTY);"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":"        if (isListSorted()) {"},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":42,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/RemovePlatformCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"/**"},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":" * {@code RemovePlatformCommand}."},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":" */"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"public class RemovePlatformCommandTest {"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":"    public void execute_removePlatformsWithPlatformFields_success() throws Exception {"},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"        Set\u003cString\u003e platformSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":"        platformSet.add(Link.FACEBOOK_LINK_TYPE);"},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(personToEdit).withPlatforms().build();"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformCommand \u003d prepareCommand(INDEX_FIRST_PERSON, platformSet);"},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":"        String expectedMessage \u003d"},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":"                String.format(RemovePlatformCommand.MESSAGE_REMOVE_PLATFORM_SUCCESS, personToEdit.getName());"},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":55,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":56,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":57,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(removePlatformCommand, model, expectedMessage, expectedModel);"},{"lineNumber":58,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":60,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"Nethergale"},"content":"    public void execute_removePlatformsWithPlatformFieldsDifferentCasing_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"Nethergale"},"content":"        Set\u003cString\u003e platformSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":63,"author":{"gitID":"Nethergale"},"content":"        platformSet.add(Link.FACEBOOK_LINK_TYPE.toUpperCase());"},{"lineNumber":64,"author":{"gitID":"Nethergale"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":65,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(personToEdit).withPlatforms().build();"},{"lineNumber":66,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformCommand \u003d prepareCommand(INDEX_FIRST_PERSON, platformSet);"},{"lineNumber":67,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":68,"author":{"gitID":"Nethergale"},"content":"        String expectedMessage \u003d"},{"lineNumber":69,"author":{"gitID":"Nethergale"},"content":"                String.format(RemovePlatformCommand.MESSAGE_REMOVE_PLATFORM_SUCCESS, personToEdit.getName());"},{"lineNumber":70,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":71,"author":{"gitID":"Nethergale"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":72,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":73,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":74,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(removePlatformCommand, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":77,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"Nethergale"},"content":"    public void execute_removePlatformsWithSomeUnrecognisedPlatformFields_success() throws Exception {"},{"lineNumber":79,"author":{"gitID":"Nethergale"},"content":"        Set\u003cString\u003e platformSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":80,"author":{"gitID":"Nethergale"},"content":"        platformSet.add(\"random\");"},{"lineNumber":81,"author":{"gitID":"Nethergale"},"content":"        platformSet.add(Link.FACEBOOK_LINK_TYPE);"},{"lineNumber":82,"author":{"gitID":"Nethergale"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(personToEdit).withPlatforms().build();"},{"lineNumber":84,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformCommand \u003d prepareCommand(INDEX_FIRST_PERSON, platformSet);"},{"lineNumber":85,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":86,"author":{"gitID":"Nethergale"},"content":"        String expectedMessage \u003d"},{"lineNumber":87,"author":{"gitID":"Nethergale"},"content":"                String.format(RemovePlatformCommand.MESSAGE_REMOVE_PLATFORM_SUCCESS, personToEdit.getName());"},{"lineNumber":88,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":89,"author":{"gitID":"Nethergale"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":90,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":91,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":92,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(removePlatformCommand, model, expectedMessage, expectedModel);"},{"lineNumber":93,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":95,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"Nethergale"},"content":"    public void execute_removePlatformsWithAllUnrecognisedPlatformFields_failure() {"},{"lineNumber":97,"author":{"gitID":"Nethergale"},"content":"        Set\u003cString\u003e platformSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":98,"author":{"gitID":"Nethergale"},"content":"        platformSet.add(\"\");"},{"lineNumber":99,"author":{"gitID":"Nethergale"},"content":"        platformSet.add(\"hello\");"},{"lineNumber":100,"author":{"gitID":"Nethergale"},"content":"        platformSet.add(\"tester\");"},{"lineNumber":101,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformCommand \u003d prepareCommand(INDEX_FIRST_PERSON, platformSet);"},{"lineNumber":102,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":103,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(removePlatformCommand, model, RemovePlatformCommand.MESSAGE_PLATFORM_MAP_NOT_EDITED);"},{"lineNumber":104,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":106,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"Nethergale"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":108,"author":{"gitID":"Nethergale"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":109,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(personToEdit).withPlatforms().build();"},{"lineNumber":110,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new HashSet\u003c\u003e());"},{"lineNumber":111,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":112,"author":{"gitID":"Nethergale"},"content":"        String expectedMessage \u003d"},{"lineNumber":113,"author":{"gitID":"Nethergale"},"content":"                String.format(RemovePlatformCommand.MESSAGE_REMOVE_PLATFORM_SUCCESS, personToEdit.getName());"},{"lineNumber":114,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":115,"author":{"gitID":"Nethergale"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":116,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":117,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":118,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(removePlatformCommand, model, expectedMessage, expectedModel);"},{"lineNumber":119,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":121,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"Nethergale"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":123,"author":{"gitID":"Nethergale"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":124,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformCommand \u003d prepareCommand(outOfBoundIndex, new HashSet\u003c\u003e());"},{"lineNumber":125,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":126,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(removePlatformCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":127,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":129,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"Nethergale"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":131,"author":{"gitID":"Nethergale"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":132,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":133,"author":{"gitID":"Nethergale"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":134,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(personToEdit).withPlatforms().build();"},{"lineNumber":135,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new HashSet\u003c\u003e());"},{"lineNumber":136,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":137,"author":{"gitID":"Nethergale"},"content":"        String expectedMessage \u003d"},{"lineNumber":138,"author":{"gitID":"Nethergale"},"content":"                String.format(RemovePlatformCommand.MESSAGE_REMOVE_PLATFORM_SUCCESS, personToEdit.getName());"},{"lineNumber":139,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":140,"author":{"gitID":"Nethergale"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":141,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":142,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":143,"author":{"gitID":"Nethergale"},"content":"        //Update expectedModel to be filtered"},{"lineNumber":144,"author":{"gitID":"Nethergale"},"content":"        String[] splitName \u003d personToEdit.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":145,"author":{"gitID":"Nethergale"},"content":"        Predicate\u003cPerson\u003e predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(splitName[0]));"},{"lineNumber":146,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":147,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":148,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(removePlatformCommand, model, expectedMessage, expectedModel);"},{"lineNumber":149,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":151,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"Nethergale"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":153,"author":{"gitID":"Nethergale"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":154,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":155,"author":{"gitID":"Nethergale"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":156,"author":{"gitID":"Nethergale"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":157,"author":{"gitID":"Nethergale"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":158,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":159,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformCommand \u003d prepareCommand(outOfBoundIndex, new HashSet\u003c\u003e());"},{"lineNumber":160,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":161,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(removePlatformCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":162,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":164,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"Nethergale"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":166,"author":{"gitID":"Nethergale"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":167,"author":{"gitID":"Nethergale"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":168,"author":{"gitID":"Nethergale"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":169,"author":{"gitID":"Nethergale"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":170,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(personToEdit).withPlatforms().build();"},{"lineNumber":171,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new HashSet\u003c\u003e());"},{"lineNumber":172,"author":{"gitID":"Nethergale"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":173,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":174,"author":{"gitID":"Nethergale"},"content":"        // removeplatform -\u003e first person\u0027s platforms removed"},{"lineNumber":175,"author":{"gitID":"Nethergale"},"content":"        removePlatformCommand.execute();"},{"lineNumber":176,"author":{"gitID":"Nethergale"},"content":"        undoRedoStack.push(removePlatformCommand);"},{"lineNumber":177,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":178,"author":{"gitID":"Nethergale"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":179,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":180,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":181,"author":{"gitID":"Nethergale"},"content":"        // redo -\u003e same first person\u0027s platforms deleted again"},{"lineNumber":182,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":183,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":184,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":186,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":187,"author":{"gitID":"Nethergale"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":188,"author":{"gitID":"Nethergale"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":189,"author":{"gitID":"Nethergale"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":190,"author":{"gitID":"Nethergale"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":191,"author":{"gitID":"Nethergale"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":192,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformCommand \u003d prepareCommand(outOfBoundIndex, new HashSet\u003c\u003e());"},{"lineNumber":193,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":194,"author":{"gitID":"Nethergale"},"content":"        // execution failed -\u003e removePlatformCommand not pushed into undoRedoStack"},{"lineNumber":195,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(removePlatformCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":196,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":197,"author":{"gitID":"Nethergale"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":198,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":199,"author":{"gitID":"Nethergale"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":200,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":202,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"Nethergale"},"content":"     * 1. Modifies a {@code Person} from a filtered list by removing the stated social media platform."},{"lineNumber":204,"author":{"gitID":"Nethergale"},"content":"     * 2. Undo the modification."},{"lineNumber":205,"author":{"gitID":"Nethergale"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously modified person in the"},{"lineNumber":206,"author":{"gitID":"Nethergale"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":207,"author":{"gitID":"Nethergale"},"content":"     * 4. Redo the modification. This ensures {@code RedoCommand} modifies the person object regardless of indexing."},{"lineNumber":208,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"Nethergale"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonModified() throws Exception {"},{"lineNumber":211,"author":{"gitID":"Nethergale"},"content":"        Set\u003cString\u003e platformSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":212,"author":{"gitID":"Nethergale"},"content":"        platformSet.add(Link.TWITTER_LINK_TYPE);"},{"lineNumber":213,"author":{"gitID":"Nethergale"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":214,"author":{"gitID":"Nethergale"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":215,"author":{"gitID":"Nethergale"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":216,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformCommand \u003d prepareCommand(INDEX_FIRST_PERSON, platformSet);"},{"lineNumber":217,"author":{"gitID":"Nethergale"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":218,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":219,"author":{"gitID":"Nethergale"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":220,"author":{"gitID":"Nethergale"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":221,"author":{"gitID":"Nethergale"},"content":"        Person editedPerson \u003d new PersonBuilder(personToEdit).withPlatforms().build();"},{"lineNumber":222,"author":{"gitID":"Nethergale"},"content":"        // removeplatform -\u003e removes the Twitter platform from the second person in unfiltered person list /"},{"lineNumber":223,"author":{"gitID":"Nethergale"},"content":"        // first person in filtered person list"},{"lineNumber":224,"author":{"gitID":"Nethergale"},"content":"        removePlatformCommand.execute();"},{"lineNumber":225,"author":{"gitID":"Nethergale"},"content":"        undoRedoStack.push(removePlatformCommand);"},{"lineNumber":226,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":227,"author":{"gitID":"Nethergale"},"content":"        // undo -\u003e reverts address book back to previous state and filtered person list to show all persons"},{"lineNumber":228,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":229,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":230,"author":{"gitID":"Nethergale"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":231,"author":{"gitID":"Nethergale"},"content":"        assertNotEquals(personToEdit, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":232,"author":{"gitID":"Nethergale"},"content":"        // redo -\u003e edits the same second person in unfiltered person list and removing the Twitter platform"},{"lineNumber":233,"author":{"gitID":"Nethergale"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":234,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":235,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":236,"author":{"gitID":"Nethergale"},"content":"    @Test"},{"lineNumber":237,"author":{"gitID":"Nethergale"},"content":"    public void equals() {"},{"lineNumber":238,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new HashSet\u003c\u003e());"},{"lineNumber":239,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON, new HashSet\u003c\u003e());"},{"lineNumber":240,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":241,"author":{"gitID":"Nethergale"},"content":"        // same object -\u003e returns true"},{"lineNumber":242,"author":{"gitID":"Nethergale"},"content":"        assertTrue(removePlatformFirstCommand.equals(removePlatformFirstCommand));"},{"lineNumber":243,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":244,"author":{"gitID":"Nethergale"},"content":"        // same values -\u003e returns true"},{"lineNumber":245,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON, new HashSet\u003c\u003e());"},{"lineNumber":246,"author":{"gitID":"Nethergale"},"content":"        assertTrue(removePlatformFirstCommand.equals(removePlatformFirstCommandCopy));"},{"lineNumber":247,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":248,"author":{"gitID":"Nethergale"},"content":"        // different types -\u003e returns false"},{"lineNumber":249,"author":{"gitID":"Nethergale"},"content":"        assertFalse(removePlatformFirstCommand.equals(1));"},{"lineNumber":250,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":251,"author":{"gitID":"Nethergale"},"content":"        // null -\u003e returns false"},{"lineNumber":252,"author":{"gitID":"Nethergale"},"content":"        assertFalse(removePlatformFirstCommand.equals(null));"},{"lineNumber":253,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":254,"author":{"gitID":"Nethergale"},"content":"        // different person -\u003e returns false"},{"lineNumber":255,"author":{"gitID":"Nethergale"},"content":"        assertFalse(removePlatformFirstCommand.equals(removePlatformSecondCommand));"},{"lineNumber":256,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":258,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"Nethergale"},"content":"     * Returns a {@code RemovePlatformCommand} with the parameters {@code index} and {@code platformSet}."},{"lineNumber":260,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":261,"author":{"gitID":"Nethergale"},"content":"    private RemovePlatformCommand prepareCommand(Index index, Set\u003cString\u003e platformSet) {"},{"lineNumber":262,"author":{"gitID":"Nethergale"},"content":"        RemovePlatformCommand removePlatformCommand \u003d new RemovePlatformCommand(index, platformSet);"},{"lineNumber":263,"author":{"gitID":"Nethergale"},"content":"        removePlatformCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":264,"author":{"gitID":"Nethergale"},"content":"        return removePlatformCommand;"},{"lineNumber":265,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":266,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":267,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":234,"-":33}},{"path":"src/main/java/seedu/address/logic/commands/FindWithTagCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.TagContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"KevinChuangCH"},"content":"//@@author KevinChuangCH"},{"lineNumber":6,"author":{"gitID":"KevinChuangCH"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"KevinChuangCH"},"content":" * Finds and lists all persons in address book whose tags contain any of the argument keywords."},{"lineNumber":8,"author":{"gitID":"KevinChuangCH"},"content":" * Keyword matching is case sensitive."},{"lineNumber":9,"author":{"gitID":"KevinChuangCH"},"content":" */"},{"lineNumber":10,"author":{"gitID":"KevinChuangCH"},"content":"public class FindWithTagCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":12,"author":{"gitID":"KevinChuangCH"},"content":"    public static final String COMMAND_WORD \u003d \"findtag\";"},{"lineNumber":13,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":14,"author":{"gitID":"KevinChuangCH"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose tags contain any of \""},{"lineNumber":15,"author":{"gitID":"KevinChuangCH"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"KevinChuangCH"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"KevinChuangCH"},"content":"            + \"Example: \" + COMMAND_WORD + \" friends owesMoney\";"},{"lineNumber":18,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":19,"author":{"gitID":"KevinChuangCH"},"content":"    private final TagContainsKeywordsPredicate predicate;"},{"lineNumber":20,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":21,"author":{"gitID":"KevinChuangCH"},"content":"    public FindWithTagCommand(TagContainsKeywordsPredicate predicate) {"},{"lineNumber":22,"author":{"gitID":"KevinChuangCH"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":23,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":25,"author":{"gitID":"KevinChuangCH"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"KevinChuangCH"},"content":"    public CommandResult execute() {"},{"lineNumber":27,"author":{"gitID":"KevinChuangCH"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":28,"author":{"gitID":"KevinChuangCH"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":29,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":31,"author":{"gitID":"KevinChuangCH"},"content":"    @Override"},{"lineNumber":32,"author":{"gitID":"KevinChuangCH"},"content":"    public boolean equals(Object other) {"},{"lineNumber":33,"author":{"gitID":"KevinChuangCH"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":34,"author":{"gitID":"KevinChuangCH"},"content":"                || (other instanceof FindWithTagCommand // instanceof handles nulls"},{"lineNumber":35,"author":{"gitID":"KevinChuangCH"},"content":"                \u0026\u0026 this.predicate.equals(((FindWithTagCommand) other).predicate)); // state check"},{"lineNumber":36,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"KevinChuangCH"},"content":"}"}],"authorContributionMap":{"KevinChuangCH":33,"-":4}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":49,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"shadow2496"},"content":"    public void passVerificationCode(String code) {"},{"lineNumber":51,"author":{"gitID":"shadow2496"},"content":"        model.setVerificationCode(code);"},{"lineNumber":52,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":54,"author":{"gitID":"shadow2496"},"content":"    //@@author"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shadow2496":7,"-":58}},{"path":"src/main/java/seedu/address/logic/commands/AddPlatformCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_LINK;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatform;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatformFactory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":" * Adds social media platforms to the specified person in the address book."},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":" */"},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":"public class AddPlatformCommand extends UndoableCommand {"},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"    public static final String COMMAND_WORD \u003d \"addplatform\";"},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds social media platforms to the person \""},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":"            + \"identified by the index number used in the last person listing through website links.\\n\""},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":"            + \"[\" + PREFIX_LINK + \"LINK]...\\n\""},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":"            + PREFIX_LINK + \"www.facebook.com/johndoe\";"},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_ADD_PLATFORM_SUCCESS \u003d \"Platform(s) successfully added to %1$s.\";"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_ADD_PLATFORM_CLEAR_SUCCESS \u003d \"Platform(s) successfully cleared for %1$s.\";"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_LINK_COLLECTION_EMPTY \u003d \"At least 1 link field should be specified.\";"},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"    private final Index index;"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":"    private final Map\u003cString, Link\u003e linkMap;"},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"    private final Map\u003cString, SocialMediaPlatform\u003e socialMediaPlatformMap;"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":"    private Person personToEdit;"},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"    private Person editedPerson;"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":"     * @param linkMap as defined by the social media platform type as key and link as value"},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":"    public AddPlatformCommand(Index index, Map\u003cString, Link\u003e linkMap) {"},{"lineNumber":55,"author":{"gitID":"Nethergale"},"content":"        requireNonNull(index);"},{"lineNumber":56,"author":{"gitID":"Nethergale"},"content":"        requireNonNull(linkMap);"},{"lineNumber":57,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":58,"author":{"gitID":"Nethergale"},"content":"        this.index \u003d index;"},{"lineNumber":59,"author":{"gitID":"Nethergale"},"content":"        this.linkMap \u003d linkMap;"},{"lineNumber":60,"author":{"gitID":"Nethergale"},"content":"        socialMediaPlatformMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":61,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":63,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"Nethergale"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":65,"author":{"gitID":"Nethergale"},"content":"        requireNonNull(personToEdit);"},{"lineNumber":66,"author":{"gitID":"Nethergale"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":67,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":68,"author":{"gitID":"Nethergale"},"content":"        try {"},{"lineNumber":69,"author":{"gitID":"Nethergale"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":70,"author":{"gitID":"Nethergale"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":71,"author":{"gitID":"Nethergale"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":72,"author":{"gitID":"Nethergale"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":73,"author":{"gitID":"Nethergale"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":74,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":75,"author":{"gitID":"Nethergale"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":76,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":77,"author":{"gitID":"Nethergale"},"content":"        if (socialMediaPlatformMap.isEmpty()) {"},{"lineNumber":78,"author":{"gitID":"Nethergale"},"content":"            return new CommandResult(String.format(MESSAGE_ADD_PLATFORM_CLEAR_SUCCESS, editedPerson.getName()));"},{"lineNumber":79,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"Nethergale"},"content":"        return new CommandResult(String.format(MESSAGE_ADD_PLATFORM_SUCCESS, editedPerson.getName()));"},{"lineNumber":81,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":83,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"Nethergale"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":85,"author":{"gitID":"Nethergale"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"Nethergale"},"content":"            addToSocialMediaPlatformMap();"},{"lineNumber":87,"author":{"gitID":"Nethergale"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":88,"author":{"gitID":"Nethergale"},"content":"            throw new CommandException(ive.getMessage());"},{"lineNumber":89,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":91,"author":{"gitID":"Nethergale"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":92,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":93,"author":{"gitID":"Nethergale"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":94,"author":{"gitID":"Nethergale"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":95,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":97,"author":{"gitID":"Nethergale"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":98,"author":{"gitID":"Nethergale"},"content":"        addCurrentSocialMediaPlatforms();"},{"lineNumber":99,"author":{"gitID":"Nethergale"},"content":"        editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":100,"author":{"gitID":"Nethergale"},"content":"                personToEdit.getAddress(), socialMediaPlatformMap, personToEdit.getTags());"},{"lineNumber":101,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":103,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"Nethergale"},"content":"    public boolean equals(Object other) {"},{"lineNumber":105,"author":{"gitID":"Nethergale"},"content":"        // short circuit if same object"},{"lineNumber":106,"author":{"gitID":"Nethergale"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":107,"author":{"gitID":"Nethergale"},"content":"            return true;"},{"lineNumber":108,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":110,"author":{"gitID":"Nethergale"},"content":"        // instanceof handles nulls"},{"lineNumber":111,"author":{"gitID":"Nethergale"},"content":"        if (!(other instanceof AddPlatformCommand)) {"},{"lineNumber":112,"author":{"gitID":"Nethergale"},"content":"            return false;"},{"lineNumber":113,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":115,"author":{"gitID":"Nethergale"},"content":"        // state check"},{"lineNumber":116,"author":{"gitID":"Nethergale"},"content":"        AddPlatformCommand e \u003d (AddPlatformCommand) other;"},{"lineNumber":117,"author":{"gitID":"Nethergale"},"content":"        return index.equals(e.index)"},{"lineNumber":118,"author":{"gitID":"Nethergale"},"content":"                \u0026\u0026 linkMap.equals(e.linkMap);"},{"lineNumber":119,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":121,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"Nethergale"},"content":"     * Constructs social media platform objects depending on the link type and adds them to the map."},{"lineNumber":123,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"Nethergale"},"content":"    private void addToSocialMediaPlatformMap() throws IllegalValueException {"},{"lineNumber":125,"author":{"gitID":"Nethergale"},"content":"        for (String type : linkMap.keySet()) {"},{"lineNumber":126,"author":{"gitID":"Nethergale"},"content":"            socialMediaPlatformMap.put(type,"},{"lineNumber":127,"author":{"gitID":"Nethergale"},"content":"                    SocialMediaPlatformFactory.getSocialMediaPlatform(type, linkMap.get(type)));"},{"lineNumber":128,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":131,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"Nethergale"},"content":"     * Adds back the social media platforms not found in the edited person into the map only if it is not empty."},{"lineNumber":133,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":134,"author":{"gitID":"Nethergale"},"content":"    private void addCurrentSocialMediaPlatforms() {"},{"lineNumber":135,"author":{"gitID":"Nethergale"},"content":"        if (!socialMediaPlatformMap.isEmpty()) {"},{"lineNumber":136,"author":{"gitID":"Nethergale"},"content":"            for (String key : personToEdit.getSocialMediaPlatformMap().keySet()) {"},{"lineNumber":137,"author":{"gitID":"Nethergale"},"content":"                socialMediaPlatformMap.putIfAbsent(key, personToEdit.getSocialMediaPlatformMap().get(key));"},{"lineNumber":138,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":139,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":120,"-":21}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatform;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedSocialMediaPlatform\u003e platforms \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String address,"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                            List\u003cXmlAdaptedSocialMediaPlatform\u003e platforms, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (platforms !\u003d null) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            this.platforms \u003d new ArrayList\u003c\u003e(platforms);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Nethergale"},"content":"        //@@author Nethergale"},{"lineNumber":79,"author":{"gitID":"Nethergale"},"content":"        platforms \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitID":"Nethergale"},"content":"        for (String key : source.getSocialMediaPlatformMap().keySet()) {"},{"lineNumber":81,"author":{"gitID":"Nethergale"},"content":"            platforms.add("},{"lineNumber":82,"author":{"gitID":"Nethergale"},"content":"                    new XmlAdaptedSocialMediaPlatform(key, source.getSocialMediaPlatformMap().get(key).getLink()));"},{"lineNumber":83,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":85,"author":{"gitID":"Nethergale"},"content":"        //@@author"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":98,"author":{"gitID":"Nethergale"},"content":"        //@@author Nethergale"},{"lineNumber":99,"author":{"gitID":"Nethergale"},"content":"        final Map\u003cString, SocialMediaPlatform\u003e personSocialMediaPlatforms \u003d new HashMap\u003c\u003e();"},{"lineNumber":100,"author":{"gitID":"Nethergale"},"content":"        for (XmlAdaptedSocialMediaPlatform platform : platforms) {"},{"lineNumber":101,"author":{"gitID":"Nethergale"},"content":"            SocialMediaPlatform platformModel \u003d platform.toModelType();"},{"lineNumber":102,"author":{"gitID":"Nethergale"},"content":"            personSocialMediaPlatforms.put(Link.getLinkType(platformModel.getLink().value), platformModel);"},{"lineNumber":103,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":105,"author":{"gitID":"Nethergale"},"content":"        //@@author"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return new Person(name, phone, email, address, personSocialMediaPlatforms, tags);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":159,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(address, otherPerson.address)"},{"lineNumber":162,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(platforms, otherPerson.platforms)"},{"lineNumber":163,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Nethergale":16,"-":149}},{"path":"src/main/java/seedu/address/logic/commands/SearchCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.SearchPersonEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Facebook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Twitter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"KevinChuangCH"},"content":"//@@author KevinChuangCH"},{"lineNumber":10,"author":{"gitID":"KevinChuangCH"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"KevinChuangCH"},"content":" * Search for a person with the input name either on all available social media platforms"},{"lineNumber":12,"author":{"gitID":"KevinChuangCH"},"content":" * or the stated social media platform if it is available.."},{"lineNumber":13,"author":{"gitID":"KevinChuangCH"},"content":" */"},{"lineNumber":14,"author":{"gitID":"KevinChuangCH"},"content":"public class SearchCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":16,"author":{"gitID":"KevinChuangCH"},"content":"    public static final String COMMAND_WORD \u003d \"search\";"},{"lineNumber":17,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":18,"author":{"gitID":"KevinChuangCH"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":19,"author":{"gitID":"KevinChuangCH"},"content":"            + \": Search for a person with the input name on the input social media platform if it is available.\\n\""},{"lineNumber":20,"author":{"gitID":"KevinChuangCH"},"content":"            + \"If no platform is stated, then the search will be performed on all available social media platforms.\\n\""},{"lineNumber":21,"author":{"gitID":"KevinChuangCH"},"content":"            + \"User can use alias to indicate the social media platform.\\n\""},{"lineNumber":22,"author":{"gitID":"KevinChuangCH"},"content":"            + \"Parameters: [PLATFORM], NAME (PLATFORM is case sensitive and NAME should not be blank)\\n\""},{"lineNumber":23,"author":{"gitID":"KevinChuangCH"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + Facebook.PLATFORM_KEYWORD + \", Tom\\n\""},{"lineNumber":24,"author":{"gitID":"KevinChuangCH"},"content":"            + \"or\\n\""},{"lineNumber":25,"author":{"gitID":"KevinChuangCH"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + Twitter.PLATFORM_ALIAS + \", Sam\\n\""},{"lineNumber":26,"author":{"gitID":"KevinChuangCH"},"content":"            + \"or\\n\""},{"lineNumber":27,"author":{"gitID":"KevinChuangCH"},"content":"            + \"Example: \" + COMMAND_WORD + \" Jason\\n\";"},{"lineNumber":28,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":29,"author":{"gitID":"KevinChuangCH"},"content":"    public static final String MESSAGE_SEARCH_PERSON_SUCCESS \u003d \"Searched Person: %1$s\";"},{"lineNumber":30,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":31,"author":{"gitID":"KevinChuangCH"},"content":"    private final String targetPlatform;"},{"lineNumber":32,"author":{"gitID":"KevinChuangCH"},"content":"    private final String targetName;"},{"lineNumber":33,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":34,"author":{"gitID":"KevinChuangCH"},"content":"    public SearchCommand(String targetPlatform, String targetName) {"},{"lineNumber":35,"author":{"gitID":"KevinChuangCH"},"content":"        this.targetName \u003d targetName;"},{"lineNumber":36,"author":{"gitID":"KevinChuangCH"},"content":"        this.targetPlatform \u003d targetPlatform;"},{"lineNumber":37,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":39,"author":{"gitID":"KevinChuangCH"},"content":"    @Override"},{"lineNumber":40,"author":{"gitID":"KevinChuangCH"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":41,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":42,"author":{"gitID":"KevinChuangCH"},"content":"        EventsCenter.getInstance().post(new SearchPersonEvent(targetPlatform, targetName));"},{"lineNumber":43,"author":{"gitID":"KevinChuangCH"},"content":"        return new CommandResult(String.format(MESSAGE_SEARCH_PERSON_SUCCESS, targetName));"},{"lineNumber":44,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":46,"author":{"gitID":"KevinChuangCH"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"KevinChuangCH"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"KevinChuangCH"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"KevinChuangCH"},"content":"                || (other instanceof SearchCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"KevinChuangCH"},"content":"                \u0026\u0026 this.targetName.equals(((SearchCommand) other).targetName)); // state check"},{"lineNumber":51,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"KevinChuangCH"},"content":"}"}],"authorContributionMap":{"KevinChuangCH":44,"-":8}},{"path":"src/main/java/seedu/address/logic/commands/RemovePlatformCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SOCIAL_MEDIA_PLATFORM;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatform;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":" * Removes the specified social media platforms of a person identified"},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":" * using it\u0027s last displayed index from the address book."},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":" */"},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"public class RemovePlatformCommand extends UndoableCommand {"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":"    public static final String COMMAND_WORD \u003d \"removeplatform\";"},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes specified social media platforms \""},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":"            + \"of the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":"            + \"[\" + PREFIX_SOCIAL_MEDIA_PLATFORM + \"PLATFORM]...\\n\""},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_SOCIAL_MEDIA_PLATFORM + \"facebook\";"},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_REMOVE_PLATFORM_SUCCESS \u003d \"Platform(s) removed from %1$s.\";"},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_PLATFORM_MAP_NOT_EDITED \u003d \"No changes can be made from the given platform info.\";"},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":"    private final Index targetIndex;"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"    private final Set\u003cString\u003e platformsToRemove;"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":"    private final Map\u003cString, SocialMediaPlatform\u003e socialMediaPlatformMap;"},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":"    private Person personToEdit;"},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"    private Person editedPerson;"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"    public RemovePlatformCommand(Index targetIndex, Set\u003cString\u003e platformsToRemove) {"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":"        this.platformsToRemove \u003d platformsToRemove;"},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"        socialMediaPlatformMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"Nethergale"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":56,"author":{"gitID":"Nethergale"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":57,"author":{"gitID":"Nethergale"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":58,"author":{"gitID":"Nethergale"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":59,"author":{"gitID":"Nethergale"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":60,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":62,"author":{"gitID":"Nethergale"},"content":"        return new CommandResult(String.format(MESSAGE_REMOVE_PLATFORM_SUCCESS, personToEdit.getName()));"},{"lineNumber":63,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":65,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"Nethergale"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":67,"author":{"gitID":"Nethergale"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":68,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":69,"author":{"gitID":"Nethergale"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":70,"author":{"gitID":"Nethergale"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":71,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":73,"author":{"gitID":"Nethergale"},"content":"        personToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":74,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":75,"author":{"gitID":"Nethergale"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"Nethergale"},"content":"            removeFromSocialMediaPlatformMap();"},{"lineNumber":77,"author":{"gitID":"Nethergale"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":78,"author":{"gitID":"Nethergale"},"content":"            throw new CommandException(ive.getMessage());"},{"lineNumber":79,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":81,"author":{"gitID":"Nethergale"},"content":"        editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"},{"lineNumber":82,"author":{"gitID":"Nethergale"},"content":"                personToEdit.getAddress(), socialMediaPlatformMap, personToEdit.getTags());"},{"lineNumber":83,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":85,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"Nethergale"},"content":"     * Removes the social media platform mappings from the map if specified."},{"lineNumber":87,"author":{"gitID":"Nethergale"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"Nethergale"},"content":"     * @throws IllegalValueException if no changes are made"},{"lineNumber":89,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"Nethergale"},"content":"    private void removeFromSocialMediaPlatformMap() throws IllegalValueException {"},{"lineNumber":91,"author":{"gitID":"Nethergale"},"content":"        if (!platformsToRemove.isEmpty()) {"},{"lineNumber":92,"author":{"gitID":"Nethergale"},"content":"            socialMediaPlatformMap.putAll(personToEdit.getSocialMediaPlatformMap());"},{"lineNumber":93,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":94,"author":{"gitID":"Nethergale"},"content":"            for (String platform : platformsToRemove) {"},{"lineNumber":95,"author":{"gitID":"Nethergale"},"content":"                socialMediaPlatformMap.remove(platform.toLowerCase());"},{"lineNumber":96,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":97,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":98,"author":{"gitID":"Nethergale"},"content":"            if (socialMediaPlatformMap.equals(personToEdit.getSocialMediaPlatformMap())) {"},{"lineNumber":99,"author":{"gitID":"Nethergale"},"content":"                throw new IllegalValueException(MESSAGE_PLATFORM_MAP_NOT_EDITED);"},{"lineNumber":100,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":101,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":104,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"Nethergale"},"content":"    public boolean equals(Object other) {"},{"lineNumber":106,"author":{"gitID":"Nethergale"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":107,"author":{"gitID":"Nethergale"},"content":"                || (other instanceof RemovePlatformCommand // instanceof handles nulls"},{"lineNumber":108,"author":{"gitID":"Nethergale"},"content":"                \u0026\u0026 this.targetIndex.equals(((RemovePlatformCommand) other).targetIndex) // state check"},{"lineNumber":109,"author":{"gitID":"Nethergale"},"content":"                \u0026\u0026 this.platformsToRemove.equals(((RemovePlatformCommand) other).platformsToRemove));"},{"lineNumber":110,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":93,"-":18}},{"path":"src/main/java/seedu/address/model/person/TagContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"KevinChuangCH"},"content":"//@@author KevinChuangCH"},{"lineNumber":9,"author":{"gitID":"KevinChuangCH"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"KevinChuangCH"},"content":" * Tests that a {@code Person}\u0027s {@code Tags} matches any of the keywords given."},{"lineNumber":11,"author":{"gitID":"KevinChuangCH"},"content":" */"},{"lineNumber":12,"author":{"gitID":"KevinChuangCH"},"content":"public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":13,"author":{"gitID":"KevinChuangCH"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":14,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":15,"author":{"gitID":"KevinChuangCH"},"content":"    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":16,"author":{"gitID":"KevinChuangCH"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":17,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":19,"author":{"gitID":"KevinChuangCH"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"KevinChuangCH"},"content":"    public boolean test(Person person) {"},{"lineNumber":21,"author":{"gitID":"KevinChuangCH"},"content":"        return keywords.stream()"},{"lineNumber":22,"author":{"gitID":"KevinChuangCH"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getTagsAsString().trim(), keyword));"},{"lineNumber":23,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":25,"author":{"gitID":"KevinChuangCH"},"content":"    @Override"},{"lineNumber":26,"author":{"gitID":"KevinChuangCH"},"content":"    public boolean equals(Object other) {"},{"lineNumber":27,"author":{"gitID":"KevinChuangCH"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":28,"author":{"gitID":"KevinChuangCH"},"content":"                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":29,"author":{"gitID":"KevinChuangCH"},"content":"                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":30,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"KevinChuangCH"},"content":"}"}],"authorContributionMap":{"KevinChuangCH":24,"-":7}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Facebook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatform;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Twitter;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final Map\u003cString, SocialMediaPlatform\u003e EMPTY_SOCIAL_MEDIA_PLATFORM_MAP \u003d new HashMap\u003c\u003e();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                getSocialMediaPlatformMap(\"www.facebook.com/alex.yeo\"),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                getSocialMediaPlatformMap(\"www.twitter.com/berniceyu\"),"},{"lineNumber":37,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                getSocialMediaPlatformMap(\"www.facebook.com/charlotte.oliverio\", \"www.twitter.com/charlotte\"),"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), EMPTY_SOCIAL_MEDIA_PLATFORM_MAP,"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), EMPTY_SOCIAL_MEDIA_PLATFORM_MAP,"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), EMPTY_SOCIAL_MEDIA_PLATFORM_MAP,"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":67,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"Nethergale"},"content":"     * Returns a social media platform map mapping to the various platforms,"},{"lineNumber":69,"author":{"gitID":"Nethergale"},"content":"     * using the list of strings given as the links. Unknown link types and invalid links will be ignored."},{"lineNumber":70,"author":{"gitID":"Nethergale"},"content":"     * Only the first link will be added if there are multiple links of the same type."},{"lineNumber":71,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"Nethergale"},"content":"    public static Map\u003cString, SocialMediaPlatform\u003e getSocialMediaPlatformMap(String... strings) {"},{"lineNumber":73,"author":{"gitID":"Nethergale"},"content":"        HashMap\u003cString, SocialMediaPlatform\u003e smpMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":74,"author":{"gitID":"Nethergale"},"content":"        for (String s : strings) {"},{"lineNumber":75,"author":{"gitID":"Nethergale"},"content":"            String type \u003d Link.getLinkType(s);"},{"lineNumber":76,"author":{"gitID":"Nethergale"},"content":"            if (type.equals(Link.FACEBOOK_LINK_TYPE) \u0026\u0026 Link.isValidLink(s)) {"},{"lineNumber":77,"author":{"gitID":"Nethergale"},"content":"                smpMap.putIfAbsent(type, new Facebook(new Link(s)));"},{"lineNumber":78,"author":{"gitID":"Nethergale"},"content":"            } else if (type.equals(Link.TWITTER_LINK_TYPE) \u0026\u0026 Link.isValidLink(s)) {"},{"lineNumber":79,"author":{"gitID":"Nethergale"},"content":"                smpMap.putIfAbsent(type, new Twitter(new Link(s)));"},{"lineNumber":80,"author":{"gitID":"Nethergale"},"content":"            }"},{"lineNumber":81,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":83,"author":{"gitID":"Nethergale"},"content":"        return smpMap;"},{"lineNumber":84,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":86,"author":{"gitID":"Nethergale"},"content":"    //@@author"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Nethergale":21,"-":78}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":18,"author":{"gitID":"-"},"content":" */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final Map\u003cString, SocialMediaPlatform\u003e smpMap;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address,"},{"lineNumber":33,"author":{"gitID":"-"},"content":"                  Map\u003cString, SocialMediaPlatform\u003e socialMediaPlatformMap, Set\u003cTag\u003e tags) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.smpMap \u003d socialMediaPlatformMap;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":61,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"Nethergale"},"content":"     * Returns an immutable social media platform map, which throws {@code UnsupportedOperationException}"},{"lineNumber":63,"author":{"gitID":"Nethergale"},"content":"     * if modification is attempted."},{"lineNumber":64,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Nethergale"},"content":"    public Map\u003cString, SocialMediaPlatform\u003e getSocialMediaPlatformMap() {"},{"lineNumber":66,"author":{"gitID":"Nethergale"},"content":"        return Collections.unmodifiableMap(smpMap);"},{"lineNumber":67,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":69,"author":{"gitID":"Nethergale"},"content":"    //@@author"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":79,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"Nethergale"},"content":"     * Returns a person comparator, which compares the names alphabetically."},{"lineNumber":81,"author":{"gitID":"Nethergale"},"content":"     * Similar names are compared lexicographically."},{"lineNumber":82,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"Nethergale"},"content":"    public static Comparator\u003cPerson\u003e nameComparator() {"},{"lineNumber":84,"author":{"gitID":"Nethergale"},"content":"        return Comparator.comparing((Person p) -\u003e p.getName().toString(), ("},{"lineNumber":85,"author":{"gitID":"Nethergale"},"content":"            s1, s2) -\u003e (s1.compareToIgnoreCase(s2) \u003d\u003d 0) ? s1.compareTo(s2) : s1.compareToIgnoreCase(s2));"},{"lineNumber":86,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":88,"author":{"gitID":"Nethergale"},"content":"    //@@author"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName())"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"},{"lineNumber":102,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"},{"lineNumber":103,"author":{"gitID":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":116,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":117,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                .append(\" Address: \")"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                .append(getAddress())"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"KevinChuangCH"},"content":"    //@@author KevinChuangCH"},{"lineNumber":128,"author":{"gitID":"KevinChuangCH"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"KevinChuangCH"},"content":"     * Returns the tag names of tags of a person as String."},{"lineNumber":130,"author":{"gitID":"KevinChuangCH"},"content":"     * @return a string of all the tag names of tags of a person."},{"lineNumber":131,"author":{"gitID":"KevinChuangCH"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"KevinChuangCH"},"content":"    public String getTagsAsString() {"},{"lineNumber":133,"author":{"gitID":"KevinChuangCH"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":134,"author":{"gitID":"KevinChuangCH"},"content":"        for (String tag : tags.arrayOfTags()) {"},{"lineNumber":135,"author":{"gitID":"KevinChuangCH"},"content":"            builder.append(tag);"},{"lineNumber":136,"author":{"gitID":"KevinChuangCH"},"content":"            builder.append(\" \");"},{"lineNumber":137,"author":{"gitID":"KevinChuangCH"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"KevinChuangCH"},"content":"        return builder.toString();"},{"lineNumber":139,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":141,"author":{"gitID":"KevinChuangCH"},"content":"}"}],"authorContributionMap":{"Nethergale":21,"KevinChuangCH":15,"-":105}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":85,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"Nethergale"},"content":"     * Sorts all persons in list alphabetically. Similar names are sorted lexicographically."},{"lineNumber":87,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"Nethergale"},"content":"    public void sort() {"},{"lineNumber":89,"author":{"gitID":"Nethergale"},"content":"        internalList.sort(Person.nameComparator());"},{"lineNumber":90,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":92,"author":{"gitID":"Nethergale"},"content":"    //@@author"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":108,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":121,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Nethergale":9,"-":120}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedSocialMediaPlatform.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.Link;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.smplatform.SocialMediaPlatformFactory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":11,"author":{"gitID":"Nethergale"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Nethergale"},"content":" * JAXB-friendly adapted version of the SocialMediaPlatform."},{"lineNumber":13,"author":{"gitID":"Nethergale"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Nethergale"},"content":"public class XmlAdaptedSocialMediaPlatform {"},{"lineNumber":15,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":16,"author":{"gitID":"Nethergale"},"content":"    @XmlElement"},{"lineNumber":17,"author":{"gitID":"Nethergale"},"content":"    private String type;"},{"lineNumber":18,"author":{"gitID":"Nethergale"},"content":"    @XmlElement"},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":"    private String link;"},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":"     * Constructs an XmlAdaptedSocialMediaPlatform."},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":"    public XmlAdaptedSocialMediaPlatform() {}"},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"     * Constructs a {@code XmlAdaptedSocialMediaPlatform} with the given {@code type} and {@code link}."},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":"    public XmlAdaptedSocialMediaPlatform(String type, String link) {"},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":"        this.type \u003d type;"},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":"        this.link \u003d link;"},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":"     * Converts a given String and Link into this class for JAXB use."},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedSocialMediaPlatform"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":"    public XmlAdaptedSocialMediaPlatform(String type, Link source) {"},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":"        this.type \u003d type;"},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":"        link \u003d source.value;"},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":"     * Converts this jaxb-friendly adapted social media platform object into the model\u0027s social media platform object."},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"     * @throws IllegalValueException if link is not valid"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":"    public SocialMediaPlatform toModelType() throws IllegalValueException {"},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":"        if (!Link.isValidLink(link)) {"},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":"            throw new IllegalValueException(Link.MESSAGE_INVALID_LINK);"},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":55,"author":{"gitID":"Nethergale"},"content":"        return SocialMediaPlatformFactory.getSocialMediaPlatform(type, new Link(link));"},{"lineNumber":56,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":58,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"Nethergale"},"content":"    public boolean equals(Object other) {"},{"lineNumber":60,"author":{"gitID":"Nethergale"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":61,"author":{"gitID":"Nethergale"},"content":"            return true;"},{"lineNumber":62,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":64,"author":{"gitID":"Nethergale"},"content":"        if (!(other instanceof XmlAdaptedSocialMediaPlatform)) {"},{"lineNumber":65,"author":{"gitID":"Nethergale"},"content":"            return false;"},{"lineNumber":66,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":68,"author":{"gitID":"Nethergale"},"content":"        return type.equals(((XmlAdaptedSocialMediaPlatform) other).type)"},{"lineNumber":69,"author":{"gitID":"Nethergale"},"content":"                \u0026\u0026 link.equals(((XmlAdaptedSocialMediaPlatform) other).link);"},{"lineNumber":70,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":62,"-":9}},{"path":"src/main/java/seedu/address/model/smplatform/Facebook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.smplatform;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":4,"author":{"gitID":"Nethergale"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"Nethergale"},"content":" * Represents a facebook object."},{"lineNumber":6,"author":{"gitID":"Nethergale"},"content":" */"},{"lineNumber":7,"author":{"gitID":"Nethergale"},"content":"public class Facebook extends SocialMediaPlatform {"},{"lineNumber":8,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":9,"author":{"gitID":"Nethergale"},"content":"    public static final String PLATFORM_KEYWORD \u003d \"facebook\";"},{"lineNumber":10,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":11,"author":{"gitID":"Nethergale"},"content":"    public static final String PLATFORM_ALIAS \u003d \"fb\";"},{"lineNumber":12,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":13,"author":{"gitID":"Nethergale"},"content":"    //Code adapted from https://stackoverflow.com/questions/5205652/facebook-profile-url-regular-expression"},{"lineNumber":14,"author":{"gitID":"Nethergale"},"content":"    public static final String LINK_VALIDATION_REGEX \u003d \"(?:https?:\\\\/\\\\/)?(?:www\\\\.|m\\\\.)?facebook\\\\.com\\\\/\""},{"lineNumber":15,"author":{"gitID":"Nethergale"},"content":"            + \"(?:profile.php\\\\?id\u003d(?\u003d\\\\d.*))?\""},{"lineNumber":16,"author":{"gitID":"Nethergale"},"content":"            + \"[^/ \\\\\\\\](?:(?:\\\\w)*#!\\\\/)?(?:pages\\\\/)?(?:[\\\\w\\\\-]*\\\\/)*([\\\\w\\\\-\\\\.]*)/?\";"},{"lineNumber":17,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":18,"author":{"gitID":"Nethergale"},"content":"    public Facebook(Link link) {"},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":"        this.link \u003d link;"},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":19,"-":2}},{"path":"src/main/java/seedu/address/model/smplatform/SocialMediaPlatform.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.smplatform;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"KevinChuangCH"},"content":"//@@author KevinChuangCH"},{"lineNumber":4,"author":{"gitID":"KevinChuangCH"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"KevinChuangCH"},"content":" * Represents a social media platform, which can take many forms."},{"lineNumber":6,"author":{"gitID":"KevinChuangCH"},"content":" */"},{"lineNumber":7,"author":{"gitID":"KevinChuangCH"},"content":"public abstract class SocialMediaPlatform {"},{"lineNumber":8,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":9,"author":{"gitID":"KevinChuangCH"},"content":"    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d"},{"lineNumber":10,"author":{"gitID":"KevinChuangCH"},"content":"            \"Social media  usernames should only contain alphanumeric characters, \""},{"lineNumber":11,"author":{"gitID":"KevinChuangCH"},"content":"                    + \"underscore,  and spaces, and it should not be blank\";"},{"lineNumber":12,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":13,"author":{"gitID":"KevinChuangCH"},"content":"    public static final String USERNAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}_ ]*\";"},{"lineNumber":14,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":15,"author":{"gitID":"KevinChuangCH"},"content":"    public static final String MESSAGE_PLATFORM_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"KevinChuangCH"},"content":"            \"Platforms available are : \\n\""},{"lineNumber":17,"author":{"gitID":"KevinChuangCH"},"content":"                    + \"1) \" + Facebook.PLATFORM_KEYWORD + \" (alias: \" + Facebook.PLATFORM_ALIAS + \")\\n\""},{"lineNumber":18,"author":{"gitID":"KevinChuangCH"},"content":"                    + \"2) \" + Twitter.PLATFORM_KEYWORD + \" (alias: \" + Twitter.PLATFORM_ALIAS + \")\\n\";"},{"lineNumber":19,"author":{"gitID":"KevinChuangCH"},"content":""},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":"    protected Link link;"},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":"    public Link getLink() {"},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"        return link;"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":27,"author":{"gitID":"KevinChuangCH"},"content":"    //@@author KevinChuangCH"},{"lineNumber":28,"author":{"gitID":"KevinChuangCH"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"KevinChuangCH"},"content":"     * Returns true if a given string is a valid social platform name."},{"lineNumber":30,"author":{"gitID":"KevinChuangCH"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"KevinChuangCH"},"content":"    public static boolean isValidPlatform(String test) {"},{"lineNumber":32,"author":{"gitID":"KevinChuangCH"},"content":"        if (test.equals(Facebook.PLATFORM_KEYWORD)"},{"lineNumber":33,"author":{"gitID":"KevinChuangCH"},"content":"                || test.equals(Facebook.PLATFORM_ALIAS)"},{"lineNumber":34,"author":{"gitID":"KevinChuangCH"},"content":"                || test.equals(Twitter.PLATFORM_KEYWORD)"},{"lineNumber":35,"author":{"gitID":"KevinChuangCH"},"content":"                || test.equals(Twitter.PLATFORM_ALIAS)) {"},{"lineNumber":36,"author":{"gitID":"KevinChuangCH"},"content":"            return true;"},{"lineNumber":37,"author":{"gitID":"KevinChuangCH"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"KevinChuangCH"},"content":"        return false;"},{"lineNumber":39,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"KevinChuangCH"},"content":"}"}],"authorContributionMap":{"Nethergale":7,"KevinChuangCH":31,"-":2}},{"path":"src/main/java/seedu/address/model/smplatform/Twitter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.smplatform;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Represents a twitter object."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Twitter extends SocialMediaPlatform {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String PLATFORM_KEYWORD \u003d \"twitter\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String PLATFORM_ALIAS \u003d \"tw\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"content":"    //@@author Nethergale-reused"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    //Reused from https://stackoverflow.com/questions/6024848/regex-to-validate-a-twitter-url with minor modifications"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String LINK_VALIDATION_REGEX \u003d \"(?:https?:\\\\/\\\\/)?(?:www\\\\.|m\\\\.)?twitter\\\\.com\\\\/\""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"[^/ \\\\\\\\](?:(?:\\\\w)*#!\\\\/)?(?:pages\\\\/)?(?:[\\\\w\\\\-]*\\\\/)*([\\\\w\\\\-]*)/?\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":18,"author":{"gitID":"Nethergale"},"content":"    public Twitter(Link link) {"},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":"        this.link \u003d link;"},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"null":1,"Nethergale":5,"-":15}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowLoginDialogRequestEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Account account;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":73,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":74,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":84,"author":{"gitID":"shadow2496"},"content":"    //// account-level operations"},{"lineNumber":85,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":86,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"shadow2496"},"content":"     * Logs into a social media platform using {@code account}."},{"lineNumber":88,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"shadow2496"},"content":"    public void loginAccount(Account account) {"},{"lineNumber":90,"author":{"gitID":"shadow2496"},"content":"        this.account \u003d account;"},{"lineNumber":91,"author":{"gitID":"shadow2496"},"content":"        String loadUrl \u003d this.account.getLoginDialogUrl();"},{"lineNumber":92,"author":{"gitID":"shadow2496"},"content":"        EventsCenter.getInstance().post(new ShowLoginDialogRequestEvent(loadUrl));"},{"lineNumber":93,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":95,"author":{"gitID":"shadow2496"},"content":"    public void setVerificationCode(String code) {"},{"lineNumber":96,"author":{"gitID":"shadow2496"},"content":"        account.setCode(code);"},{"lineNumber":97,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":99,"author":{"gitID":"shadow2496"},"content":"    //@@author"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    //// person-level operations"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":107,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":115,"author":{"gitID":"-"},"content":"        persons.add(person);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":134,"author":{"gitID":"-"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        // in the person list."},{"lineNumber":136,"author":{"gitID":"-"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *  list."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // used for checking person tag references"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":154,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        return new Person(person.getName(), person.getPhone(), person.getEmail(),"},{"lineNumber":157,"author":{"gitID":"-"},"content":"                person.getAddress(), person.getSocialMediaPlatformMap(), correctTagReferences);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        if (persons.remove(key)) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":173,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"Nethergale"},"content":"     * Sorts all persons by name in alphabetical order in the address book."},{"lineNumber":175,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"Nethergale"},"content":"    public void sort() {"},{"lineNumber":177,"author":{"gitID":"Nethergale"},"content":"        persons.sort();"},{"lineNumber":178,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":180,"author":{"gitID":"Nethergale"},"content":"    //@@author"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        return persons.asObservableList();"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":208,"author":{"gitID":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":209,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":214,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":218,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Nethergale":9,"shadow2496":17,"-":192}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":22,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":64,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"shadow2496"},"content":"    public void loginAccount(Account account) {"},{"lineNumber":66,"author":{"gitID":"shadow2496"},"content":"        addressBook.loginAccount(account);"},{"lineNumber":67,"author":{"gitID":"shadow2496"},"content":"        //indicateAddressBookChanged();"},{"lineNumber":68,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":70,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"shadow2496"},"content":"    public void setVerificationCode(String code) {"},{"lineNumber":72,"author":{"gitID":"shadow2496"},"content":"        addressBook.setVerificationCode(code);"},{"lineNumber":73,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":75,"author":{"gitID":"shadow2496"},"content":"    //@@author"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"Nethergale"},"content":"    //@@author Nethergale"},{"lineNumber":100,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":101,"author":{"gitID":"Nethergale"},"content":"    public void sortAllPersons() {"},{"lineNumber":102,"author":{"gitID":"Nethergale"},"content":"        addressBook.sort();"},{"lineNumber":103,"author":{"gitID":"Nethergale"},"content":"        indicateAddressBookChanged();"},{"lineNumber":104,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":106,"author":{"gitID":"Nethergale"},"content":"    //@@author"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * {@code addressBook}"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Nethergale":8,"shadow2496":13,"-":121}},{"path":"src/main/java/seedu/address/model/smplatform/SocialMediaPlatformFactory.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.smplatform;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":6,"author":{"gitID":"Nethergale"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Nethergale"},"content":" * Acts as a social media platform creator."},{"lineNumber":8,"author":{"gitID":"Nethergale"},"content":" * Determines the different types of social media platform objects to be created by using the link and its type."},{"lineNumber":9,"author":{"gitID":"Nethergale"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Nethergale"},"content":"public final class SocialMediaPlatformFactory {"},{"lineNumber":11,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_BUILD_ERROR \u003d \"Social media platform cannot be constructed. \""},{"lineNumber":12,"author":{"gitID":"Nethergale"},"content":"            + \"Link type is unrecognised or mismatched with link.\";"},{"lineNumber":13,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":14,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"Nethergale"},"content":"     * Don\u0027t let anyone instantiate this class."},{"lineNumber":16,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"Nethergale"},"content":"    private SocialMediaPlatformFactory() {}"},{"lineNumber":18,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":"     * Constructs the specific social media platform object by using the {@code type} and setting the {@code link}"},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":"     * as a parameter."},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":"     * @return the created social media platform object"},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"     * @throws IllegalValueException if type is not recognised"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":"    public static SocialMediaPlatform getSocialMediaPlatform(String type, Link link) throws IllegalValueException {"},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":"        if (type.equals(Link.FACEBOOK_LINK_TYPE) \u0026\u0026 type.equals(Link.getLinkType(link.value))) {"},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"            return new Facebook(link);"},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":"        } else if (type.equals(Link.TWITTER_LINK_TYPE) \u0026\u0026 type.equals(Link.getLinkType(link.value))) {"},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":"            return new Twitter(link);"},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":"        } else {"},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":"            throw new IllegalValueException(MESSAGE_BUILD_ERROR);"},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":31,"-":4}},{"path":"src/main/java/seedu/address/model/smplatform/Link.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.smplatform;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Nethergale"},"content":"//@@author Nethergale"},{"lineNumber":6,"author":{"gitID":"Nethergale"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Nethergale"},"content":" * Represents a SocialMediaPlatform\u0027s link."},{"lineNumber":8,"author":{"gitID":"Nethergale"},"content":" * Guarantees: immutable; is always valid"},{"lineNumber":9,"author":{"gitID":"Nethergale"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Nethergale"},"content":"public class Link {"},{"lineNumber":11,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_LINK_CONSTRAINTS \u003d \"Only one link is allowed for each social media platform.\";"},{"lineNumber":12,"author":{"gitID":"Nethergale"},"content":"    public static final String MESSAGE_INVALID_LINK \u003d \"Links should be valid Facebook or Twitter profile links.\";"},{"lineNumber":13,"author":{"gitID":"Nethergale"},"content":"    public static final String FACEBOOK_LINK_TYPE \u003d \"facebook\";"},{"lineNumber":14,"author":{"gitID":"Nethergale"},"content":"    public static final String TWITTER_LINK_TYPE \u003d \"twitter\";"},{"lineNumber":15,"author":{"gitID":"Nethergale"},"content":"    public static final String UNKNOWN_LINK_TYPE \u003d \"unknown\";"},{"lineNumber":16,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":17,"author":{"gitID":"Nethergale"},"content":"    private static final String FACEBOOK_LINK_SIGNATURE \u003d \"facebook.com\";"},{"lineNumber":18,"author":{"gitID":"Nethergale"},"content":"    private static final String TWITTER_LINK_SIGNATURE \u003d \"twitter.com\";"},{"lineNumber":19,"author":{"gitID":"Nethergale"},"content":"    private static final String LONGEST_VALID_LINK_PREFIX \u003d \"https://www.\";"},{"lineNumber":20,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":21,"author":{"gitID":"Nethergale"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":23,"author":{"gitID":"Nethergale"},"content":"    public Link(String link) {"},{"lineNumber":24,"author":{"gitID":"Nethergale"},"content":"        requireNonNull(link);"},{"lineNumber":25,"author":{"gitID":"Nethergale"},"content":"        this.value \u003d link;"},{"lineNumber":26,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":28,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Nethergale"},"content":"     * Returns the social media platform type of the link."},{"lineNumber":30,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Nethergale"},"content":"    public static String getLinkType(String link) {"},{"lineNumber":32,"author":{"gitID":"Nethergale"},"content":"        if (link.contains(TWITTER_LINK_SIGNATURE)"},{"lineNumber":33,"author":{"gitID":"Nethergale"},"content":"                \u0026\u0026 !(link.indexOf(TWITTER_LINK_SIGNATURE) \u003e LONGEST_VALID_LINK_PREFIX.length())) {"},{"lineNumber":34,"author":{"gitID":"Nethergale"},"content":"            return TWITTER_LINK_TYPE;"},{"lineNumber":35,"author":{"gitID":"Nethergale"},"content":"        } else if (link.contains(FACEBOOK_LINK_SIGNATURE)"},{"lineNumber":36,"author":{"gitID":"Nethergale"},"content":"                \u0026\u0026 !(link.indexOf(FACEBOOK_LINK_SIGNATURE) \u003e LONGEST_VALID_LINK_PREFIX.length())) {"},{"lineNumber":37,"author":{"gitID":"Nethergale"},"content":"            return FACEBOOK_LINK_TYPE;"},{"lineNumber":38,"author":{"gitID":"Nethergale"},"content":"        } else {"},{"lineNumber":39,"author":{"gitID":"Nethergale"},"content":"            return UNKNOWN_LINK_TYPE;"},{"lineNumber":40,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":43,"author":{"gitID":"Nethergale"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"Nethergale"},"content":"     * Returns true if a given string is a valid link."},{"lineNumber":45,"author":{"gitID":"Nethergale"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"Nethergale"},"content":"    public static boolean isValidLink(String test) {"},{"lineNumber":47,"author":{"gitID":"Nethergale"},"content":"        if (test.contains(TWITTER_LINK_SIGNATURE)"},{"lineNumber":48,"author":{"gitID":"Nethergale"},"content":"                \u0026\u0026 !(test.indexOf(TWITTER_LINK_SIGNATURE) \u003e LONGEST_VALID_LINK_PREFIX.length())) {"},{"lineNumber":49,"author":{"gitID":"Nethergale"},"content":"            return test.matches(Twitter.LINK_VALIDATION_REGEX);"},{"lineNumber":50,"author":{"gitID":"Nethergale"},"content":"        } else if (test.contains(FACEBOOK_LINK_SIGNATURE)"},{"lineNumber":51,"author":{"gitID":"Nethergale"},"content":"                \u0026\u0026 !(test.indexOf(FACEBOOK_LINK_SIGNATURE) \u003e LONGEST_VALID_LINK_PREFIX.length())) {"},{"lineNumber":52,"author":{"gitID":"Nethergale"},"content":"            return test.matches(Facebook.LINK_VALIDATION_REGEX);"},{"lineNumber":53,"author":{"gitID":"Nethergale"},"content":"        } else {"},{"lineNumber":54,"author":{"gitID":"Nethergale"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"Nethergale"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":58,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"Nethergale"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitID":"Nethergale"},"content":"        return value;"},{"lineNumber":61,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":63,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"Nethergale"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitID":"Nethergale"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitID":"Nethergale"},"content":"                || (other instanceof Link // instanceof handles nulls"},{"lineNumber":67,"author":{"gitID":"Nethergale"},"content":"                \u0026\u0026 this.value.equals(((Link) other).value)); // state check"},{"lineNumber":68,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Nethergale"},"content":""},{"lineNumber":70,"author":{"gitID":"Nethergale"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"Nethergale"},"content":"    public int hashCode() {"},{"lineNumber":72,"author":{"gitID":"Nethergale"},"content":"        return value.hashCode();"},{"lineNumber":73,"author":{"gitID":"Nethergale"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"Nethergale"},"content":"}"}],"authorContributionMap":{"Nethergale":70,"-":4}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.account.Account;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":"    //@@author shadow2496"},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":"    /** Logs in with the given account */"},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"    void loginAccount(Account account);"},{"lineNumber":27,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":28,"author":{"gitID":"shadow2496"},"content":"    /** Sets the verification code in an account. */"},{"lineNumber":29,"author":{"gitID":"shadow2496"},"content":"    void setVerificationCode(String code);"},{"lineNumber":30,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":31,"author":{"gitID":"shadow2496"},"content":"    //@@author"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Sorts all persons alphabetically."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    void sortAllPersons();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"shadow2496":8,"-":55}},{"path":"src/main/java/seedu/address/model/account/Username.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.account;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"shadow2496"},"content":"//@@author shadow2496"},{"lineNumber":7,"author":{"gitID":"shadow2496"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"shadow2496"},"content":" * Represents an Account\u0027s username in the address book."},{"lineNumber":9,"author":{"gitID":"shadow2496"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidUsername(String)}"},{"lineNumber":10,"author":{"gitID":"shadow2496"},"content":" */"},{"lineNumber":11,"author":{"gitID":"shadow2496"},"content":"public class Username {"},{"lineNumber":12,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":13,"author":{"gitID":"shadow2496"},"content":"    public static final String MESSAGE_USERNAME_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"shadow2496"},"content":"            \"Account usernames can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":16,"author":{"gitID":"shadow2496"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"shadow2496"},"content":"     * The first character of the username must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"shadow2496"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"shadow2496"},"content":"    public static final String USERNAME_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":22,"author":{"gitID":"shadow2496"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":"     * Constructs an {@code Username}."},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"shadow2496"},"content":"     * @param username A valid username."},{"lineNumber":28,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"shadow2496"},"content":"    public Username(String username) {"},{"lineNumber":30,"author":{"gitID":"shadow2496"},"content":"        requireNonNull(username);"},{"lineNumber":31,"author":{"gitID":"shadow2496"},"content":"        checkArgument(isValidUsername(username), MESSAGE_USERNAME_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"shadow2496"},"content":"        this.value \u003d username;"},{"lineNumber":33,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":35,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"shadow2496"},"content":"     * Returns true if a given string is a valid account username."},{"lineNumber":37,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"shadow2496"},"content":"    public static boolean isValidUsername(String test) {"},{"lineNumber":39,"author":{"gitID":"shadow2496"},"content":"        return test.matches(USERNAME_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":42,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"shadow2496"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"shadow2496"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":47,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"shadow2496"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"shadow2496"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"shadow2496"},"content":"                || (other instanceof Username // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"shadow2496"},"content":"                \u0026\u0026 this.value.equals(((Username) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":54,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"shadow2496"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"shadow2496"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":53,"-":5}},{"path":"src/main/java/seedu/address/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public UniqueTagList() {}"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e toSet() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"KevinChuangCH"},"content":"    //@@author KevinChuangCH"},{"lineNumber":53,"author":{"gitID":"KevinChuangCH"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"KevinChuangCH"},"content":"     * Returns an array of tag names of tags of a person."},{"lineNumber":55,"author":{"gitID":"KevinChuangCH"},"content":"     * @return array of tag names"},{"lineNumber":56,"author":{"gitID":"KevinChuangCH"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"KevinChuangCH"},"content":"    public ArrayList\u003cString\u003e arrayOfTags() {"},{"lineNumber":58,"author":{"gitID":"KevinChuangCH"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":59,"author":{"gitID":"KevinChuangCH"},"content":"        ArrayList\u003cString\u003e tagStringArray \u003d new ArrayList\u003c\u003e();"},{"lineNumber":60,"author":{"gitID":"KevinChuangCH"},"content":"        for (Tag t : internalList) {"},{"lineNumber":61,"author":{"gitID":"KevinChuangCH"},"content":"            tagStringArray.add(t.tagName);"},{"lineNumber":62,"author":{"gitID":"KevinChuangCH"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"KevinChuangCH"},"content":"        return tagStringArray;"},{"lineNumber":64,"author":{"gitID":"KevinChuangCH"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"KevinChuangCH"},"content":"    //@@author"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":83,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e asObservableList() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":129,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":130,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":136,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"KevinChuangCH":14,"-":144}},{"path":"src/main/java/seedu/address/model/account/Account.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.account;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.restfb.DefaultFacebookClient;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.restfb.FacebookClient;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.restfb.Version;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import com.restfb.scope.ScopeBuilder;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"shadow2496"},"content":"//@@author shadow2496"},{"lineNumber":13,"author":{"gitID":"shadow2496"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"shadow2496"},"content":" * Represents an Account in the address book."},{"lineNumber":15,"author":{"gitID":"shadow2496"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitID":"shadow2496"},"content":" */"},{"lineNumber":17,"author":{"gitID":"shadow2496"},"content":"public class Account {"},{"lineNumber":18,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":19,"author":{"gitID":"shadow2496"},"content":"    private static final String APP_ID \u003d \"366902457122089\";"},{"lineNumber":20,"author":{"gitID":"shadow2496"},"content":"    private static final String APP_SECRET \u003d \"9cdbed37c0780e75e995381f0688a8d7\";"},{"lineNumber":21,"author":{"gitID":"shadow2496"},"content":"    private static final String REDIRECT_URL \u003d \"https://www.facebook.com/connect/login_success.html\";"},{"lineNumber":22,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":23,"author":{"gitID":"shadow2496"},"content":"    private final Username username;"},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":"    private final Password password;"},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"    private ScopeBuilder scopeBuilder;"},{"lineNumber":27,"author":{"gitID":"shadow2496"},"content":"    private FacebookClient client;"},{"lineNumber":28,"author":{"gitID":"shadow2496"},"content":"    private String code;"},{"lineNumber":29,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":30,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"shadow2496"},"content":"     * Every field must be present and not null."},{"lineNumber":32,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"shadow2496"},"content":"    public Account(Username username, Password password) {"},{"lineNumber":34,"author":{"gitID":"shadow2496"},"content":"        requireAllNonNull(username, password);"},{"lineNumber":35,"author":{"gitID":"shadow2496"},"content":"        this.username \u003d username;"},{"lineNumber":36,"author":{"gitID":"shadow2496"},"content":"        this.password \u003d password;"},{"lineNumber":37,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":38,"author":{"gitID":"shadow2496"},"content":"        setScopeBuilder();"},{"lineNumber":39,"author":{"gitID":"shadow2496"},"content":"        setClient();"},{"lineNumber":40,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":42,"author":{"gitID":"shadow2496"},"content":"    public Username getUsername() {"},{"lineNumber":43,"author":{"gitID":"shadow2496"},"content":"        return username;"},{"lineNumber":44,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":46,"author":{"gitID":"shadow2496"},"content":"    public Password getPassword() {"},{"lineNumber":47,"author":{"gitID":"shadow2496"},"content":"        return password;"},{"lineNumber":48,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":50,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"shadow2496"},"content":"     * Sets the scope builder which is a set of permissions."},{"lineNumber":52,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"shadow2496"},"content":"    private void setScopeBuilder() {"},{"lineNumber":54,"author":{"gitID":"shadow2496"},"content":"        scopeBuilder \u003d new ScopeBuilder();"},{"lineNumber":55,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":57,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"shadow2496"},"content":"     * Sets the client used to get an access token."},{"lineNumber":59,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"shadow2496"},"content":"    private void setClient() {"},{"lineNumber":61,"author":{"gitID":"shadow2496"},"content":"        client \u003d new DefaultFacebookClient(Version.VERSION_2_12);"},{"lineNumber":62,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":64,"author":{"gitID":"shadow2496"},"content":"    public void setCode(String code) {"},{"lineNumber":65,"author":{"gitID":"shadow2496"},"content":"        this.code \u003d code;"},{"lineNumber":66,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":68,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"shadow2496"},"content":"     * Returns the login dialog url using {@link #client}."},{"lineNumber":70,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"shadow2496"},"content":"    public String getLoginDialogUrl() {"},{"lineNumber":72,"author":{"gitID":"shadow2496"},"content":"        return client.getLoginDialogUrl(APP_ID, REDIRECT_URL, scopeBuilder);"},{"lineNumber":73,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":75,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"shadow2496"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"shadow2496"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"shadow2496"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"shadow2496"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":81,"author":{"gitID":"shadow2496"},"content":"        if (!(other instanceof Account)) {"},{"lineNumber":82,"author":{"gitID":"shadow2496"},"content":"            return false;"},{"lineNumber":83,"author":{"gitID":"shadow2496"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":85,"author":{"gitID":"shadow2496"},"content":"        Account otherAccount \u003d (Account) other;"},{"lineNumber":86,"author":{"gitID":"shadow2496"},"content":"        return otherAccount.getUsername().equals(this.getUsername())"},{"lineNumber":87,"author":{"gitID":"shadow2496"},"content":"                \u0026\u0026 otherAccount.getPassword().equals(this.getPassword());"},{"lineNumber":88,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":90,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"shadow2496"},"content":"    public int hashCode() {"},{"lineNumber":92,"author":{"gitID":"shadow2496"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":93,"author":{"gitID":"shadow2496"},"content":"        return Objects.hash(username, password);"},{"lineNumber":94,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":96,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"shadow2496"},"content":"    public String toString() {"},{"lineNumber":98,"author":{"gitID":"shadow2496"},"content":"        return \"Username: \" + getUsername() + \" Password: \" + getPassword();"},{"lineNumber":99,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":89,"-":11}},{"path":"src/main/java/seedu/address/model/account/Password.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.account;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"shadow2496"},"content":"//@@author shadow2496"},{"lineNumber":7,"author":{"gitID":"shadow2496"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"shadow2496"},"content":" * Represents an Account\u0027s password in the address book."},{"lineNumber":9,"author":{"gitID":"shadow2496"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPassword(String)}"},{"lineNumber":10,"author":{"gitID":"shadow2496"},"content":" */"},{"lineNumber":11,"author":{"gitID":"shadow2496"},"content":"public class Password {"},{"lineNumber":12,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":13,"author":{"gitID":"shadow2496"},"content":"    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"shadow2496"},"content":"            \"Account passwords can take any values, and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":16,"author":{"gitID":"shadow2496"},"content":"    /*"},{"lineNumber":17,"author":{"gitID":"shadow2496"},"content":"     * The first character of the password must not be a whitespace,"},{"lineNumber":18,"author":{"gitID":"shadow2496"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":19,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"shadow2496"},"content":"    public static final String PASSWORD_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":21,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":22,"author":{"gitID":"shadow2496"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":24,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"shadow2496"},"content":"     * Constructs an {@code Password}."},{"lineNumber":26,"author":{"gitID":"shadow2496"},"content":"     *"},{"lineNumber":27,"author":{"gitID":"shadow2496"},"content":"     * @param password A valid password."},{"lineNumber":28,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"shadow2496"},"content":"    public Password(String password) {"},{"lineNumber":30,"author":{"gitID":"shadow2496"},"content":"        requireNonNull(password);"},{"lineNumber":31,"author":{"gitID":"shadow2496"},"content":"        checkArgument(isValidPassword(password), MESSAGE_PASSWORD_CONSTRAINTS);"},{"lineNumber":32,"author":{"gitID":"shadow2496"},"content":"        this.value \u003d password;"},{"lineNumber":33,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":35,"author":{"gitID":"shadow2496"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"shadow2496"},"content":"     * Returns true if a given string is a valid account password."},{"lineNumber":37,"author":{"gitID":"shadow2496"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"shadow2496"},"content":"    public static boolean isValidPassword(String test) {"},{"lineNumber":39,"author":{"gitID":"shadow2496"},"content":"        return test.matches(PASSWORD_VALIDATION_REGEX);"},{"lineNumber":40,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":42,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"shadow2496"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"shadow2496"},"content":"        return value;"},{"lineNumber":45,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":47,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"shadow2496"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"shadow2496"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"shadow2496"},"content":"                || (other instanceof Password // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"shadow2496"},"content":"                \u0026\u0026 this.value.equals(((Password) other).value)); // state check"},{"lineNumber":52,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"shadow2496"},"content":""},{"lineNumber":54,"author":{"gitID":"shadow2496"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"shadow2496"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"shadow2496"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitID":"shadow2496"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"shadow2496"},"content":"}"}],"authorContributionMap":{"shadow2496":53,"-":5}}]
