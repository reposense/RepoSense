var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level4/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"Steven-Jia"},"content":"* *Email us* : You can also reach us at `e0268091 [at] u.nus.edu`"}],"authorContributionMap":{"Steven-Jia":1,"-":5}},{"path":"docs/team/paulhenrimignot.adoc","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"\u003d Paul-Henri Mignot - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"\u003d\u003d PROJECT: SmartSplit"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"---"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"SmartSplit is a desktop app for managing share expenses between your contacts."},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":"SmartSplit can get your shared expense management tasks done faster than traditional GUI apps."},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":"The user interacts with it using a Command Line Interface or its Graphical User Interface created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"\u003d\u003d\u003d *Major enhancement*:"},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"** *Select/Unselect*"},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"*** `What it does`: Can select and unselect any person in the `PersonList`, and displays its transactions, creditors and debtors."},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":25,"author":{"gitID":"phmignot"},"content":"*** `Justification`: This enhancement makes the application more user friendly, by improving User Interface, and adding more interaction with the user."},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"*** `Highlights`: This enhancement affects existing events, and creates new ones, that can be handled in the future by other classes for extended applications."},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":28,"author":{"gitID":"phmignot"},"content":"*** `Credits`: This enhancement was based on the `SelectCommand` of the *AddressBook-level4*"},{"lineNumber":29,"author":{"gitID":"phmignot"},"content":"which displayed the Url page of the person selected."},{"lineNumber":30,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":"** *DebtTable*"},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":33,"author":{"gitID":"phmignot"},"content":"*** `What it does`:  Implements a table that collects the debts between every person."},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"*** `Justification`: This feature simplified the calculation, the storing and the retrieving of every debts between the persons added."},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"*** `Highlights`: This `DebtTable` is updated when a transaction is added or removed. +"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":"The design was challenging since it has to be flexible with adding, editing or removing any person or transaction. +"},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":"The `DebtTable` is a dictionary of every person\u0027s `DebtsList`, which are dictionaries of all persons that have debts with its owner."},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":40,"author":{"gitID":"phmignot"},"content":"\u003d\u003d\u003d *Minor enhancements*:"},{"lineNumber":41,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":"- Update the *User Interface* to *display the list of transactions*."},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"- Insert in the *User Interface* two panels."},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":"- Allow the user to delete their transactions."},{"lineNumber":45,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":46,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":47,"author":{"gitID":"phmignot"},"content":"\u003d\u003d\u003d *Code contributed*:"},{"lineNumber":48,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":49,"author":{"gitID":"phmignot"},"content":"[https://github.com/CS2103JAN2018-W10-B1/main/blob/master/collated/functional/phmignot.md[Functional code]] +"},{"lineNumber":50,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":51,"author":{"gitID":"phmignot"},"content":"[https://github.com/CS2103JAN2018-W10-B1/main/blob/master/collated/test/phmignot.md[Test code]] +"},{"lineNumber":52,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":53,"author":{"gitID":"phmignot"},"content":"\u003d\u003d\u003d *Other contributions*:"},{"lineNumber":54,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":55,"author":{"gitID":"phmignot"},"content":"** Project management:"},{"lineNumber":56,"author":{"gitID":"phmignot"},"content":"*** Managed releases `v1.0` - `v1.5rc` (6 releases) on GitHub."},{"lineNumber":57,"author":{"gitID":"phmignot"},"content":"** Removing existing features:"},{"lineNumber":58,"author":{"gitID":"phmignot"},"content":"*** Remove the `BrowserPanel` and the test associated, being replaced by Deptor and Creditor list."},{"lineNumber":59,"author":{"gitID":"phmignot"},"content":"(Pull requests https://github.com/CS2103JAN2018-W10-B1/main/pull/80[#80], https://github.com/CS2103JAN2018-W10-B1/main/pull/82[#82])"},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":"** Community:"},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":"*** PRs reviewed (with non-trivial review comments):"},{"lineNumber":62,"author":{"gitID":"phmignot"},"content":"https://github.com/CS2103JAN2018-W10-B1/main/pull/81[#81],"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":"https://github.com/CS2103JAN2018-W10-B1/main/pull/129[#129],"},{"lineNumber":64,"author":{"gitID":"phmignot"},"content":"https://github.com/CS2103JAN2018-W10-B1/main/pull/103[#103],"},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"https://github.com/CS2103JAN2018-W10-B1/main/pull/21[#21]"},{"lineNumber":66,"author":{"gitID":"phmignot"},"content":"*** Helping others students in the addressBook version 2 (https://github.com/nus-cs2103-AY1718S2/addressbook-level2/pull/618[exemple])"},{"lineNumber":67,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":73,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":74,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"phmignot"},"content":"include::../UserGuide.adoc[tag\u003dselect]"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":81,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":82,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"phmignot"},"content":"include::../DeveloperGuide.adoc[tag\u003dselectfeature]"},{"lineNumber":85,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":86,"author":{"gitID":"phmignot"},"content":"---"},{"lineNumber":87,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":88,"author":{"gitID":"phmignot"},"content":"include::../DeveloperGuide.adoc[tag\u003dDesignUI]"},{"lineNumber":89,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":90,"author":{"gitID":"phmignot"},"content":"---"},{"lineNumber":91,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":92,"author":{"gitID":"phmignot"},"content":"include::../DeveloperGuide.adoc[tag\u003dDebtsTable]"}],"authorContributionMap":{"phmignot":77,"-":15}},{"path":"docs/team/Kok-Cong_Ong.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Steven-Jia"},"content":"\u003d Kok Cong Ong - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"\u003d\u003d PROJECT: AddressBook - Level 4"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"---"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"SmartSplit is a desktop app for managing share expenses between your contacts."},{"lineNumber":12,"author":{"gitID":"-"},"content":"SmartSplit can get your shared expense management tasks done faster than traditional GUI apps"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"The user interacts with it using a Command Line Interface or its Graphical User Interface created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"*Major enhancement*: Create Add Transaction Commands(Payment \u0026 Paydebt)"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"** What it does: This command allow a new transaction to be added in the application. There are two types of transaction as of now, \"payment\" or \"paydebt\". \"Payment\" transaction is when someone make a payment on certain expenses. Whereas for \"paydebt\" transaction is when someone return an amount of money he/she owed."},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"image::AddedTransaction.png[width\u003d\"800\"]"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"** Justification: By doing so, the amount pay by a person known as payer will be recorded and displayed on the user interface as know as balance. This allow the user to easily track the amount pay for, for what purpose, and by which person."},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"** Implementation"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003daddtransaction]"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"*Major enhancement*: Create a Debtor \u0026 Creditor Table"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"** What it does: This feature allows each person to view the amount and people he/she owed, as well as the people and amount other people owed her/him."},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"image::DebtTable.png[width\u003d\"800\"]"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"** Justification: With this feature, he can easily keep track who owed him/her or people whom he owed money to without the need to remember or calculate by themselves. The amount will be updated after each \"payment\" or \"paydebt\" transaction."},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"** Implementation"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dDebtors_Creditor_Panel]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"*Minor enhancement*: Prevent a person from deleted if his or her debt is not yet cleared"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"** What it does: A person can only be deleted if his/her debt is cleared."},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"image::DebtNotCleared.png[width\u003d\"800\"]"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"** Justification: This features ensure all amount owed or owed to is of the correct amount."},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"*Minor enhancement*: Prevent a transaction from deleted if the person does not exist in the application anymore"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"** What it does: This features is a enhancement to delete Transaction, where a transaction can be deleted if the person exists."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"image::CantDeletePerson1.png[width\u003d\"800\"]"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"image::CantDeletePerson2.png[width\u003d\"800\"]"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"** Justification: Since an error transaction is allowed to be deleted if a wrong transaction is made. However, if the person in the transaction does not exist anymore, it implies that the person has already cleared all his/her debt and that transaction is a valid transaction and is not a wrongly added transaction."},{"lineNumber":60,"author":{"gitID":"-"},"content":"Furthermore, a transaction can only be added only if the person in the transaction existed."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d *Code contributed*:"},{"lineNumber":64,"author":{"gitID":"-"},"content":"[https://github.com/ongkc/addressbook-level4/blob/master/collated/functional/ongkc.md[Functional code]] +"},{"lineNumber":65,"author":{"gitID":"-"},"content":" [https://github.com/ongkc/addressbook-level4/blob/master/collated/test/ongkc.md[Test code]]"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":71,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":72,"author":{"gitID":"-"},"content":"*** Updated the addTransaction Command (Payment) (Pull requests https://github.com/CS2103JAN2018-W10-B1/main/pull/25[#25])"},{"lineNumber":73,"author":{"gitID":"-"},"content":"*** Updated the addTransaction Command (Paydebt) (Pull requests https://github.com/CS2103JAN2018-W10-B1/main/pull/139[#139])"},{"lineNumber":74,"author":{"gitID":"-"},"content":"*** Create the balance amount on the person panel card (Pull requests https://github.com/CS2103JAN2018-W10-B1/main/pull/106[#106])"},{"lineNumber":75,"author":{"gitID":"-"},"content":"*** Create the balance amount on the debtor and creditor panel card (Pull requests https://github.com/CS2103JAN2018-W10-B1/main/pull/106[#106])"},{"lineNumber":76,"author":{"gitID":"-"},"content":"*** Wrote tests for existing features to increase coverage from 79% to 90% (Pull requests https://github.com/CS2103JAN2018-W10-B1/main/pull/129/commits[#129])"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":82,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":83,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003daddTransaction]"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":90,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":91,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003daddtransaction]"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dDebtors_Creditor_Panel]"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003ddeletetransaction]"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dusecases]"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dmanualtesting]"}],"authorContributionMap":{"Steven-Jia":1,"-":100}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Steven-Jia"},"content":"SmartSplit was developed by the https://github.com/CS2103JAN2018-W10-B1/main/tree/master/docs/team[W10-B1] team. +"},{"lineNumber":7,"author":{"gitID":"Steven-Jia"},"content":"based on the work of the AddressBook - Level 4 by the https://se-edu.github.io/docs/Team.html[se-edu] team +"},{"lineNumber":8,"author":{"gitID":"-"},"content":"{empty} +"},{"lineNumber":9,"author":{"gitID":"-"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":"\u003d\u003d\u003d Kok Cong Ong"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":"image::ongkc.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"https://github.com/ongkc[Github Account] +"},{"lineNumber":16,"author":{"gitID":"Steven-Jia"},"content":"https://github.com/CS2103JAN2018-W10-B1/main/blob/master/docs/team/Kok-Cong_Ong.adoc[Project Portfolio Page]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"Role: Team Lead, Development, Testing +"},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"Responsibilities: Implementing the addtransaction command and creating the debtors and creditors tables"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Wen Qin Jia"},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":"image::steven-jia.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":25,"author":{"gitID":"Steven-Jia"},"content":"https://github.com/Steven-Jia[Github Account] +"},{"lineNumber":26,"author":{"gitID":"Steven-Jia"},"content":"https://github.com/CS2103JAN2018-W10-B1/main/blob/master/docs/team/steven-jia.adoc[Project Portfolio Page]"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":"Role: Project Management, Development +"},{"lineNumber":29,"author":{"gitID":"-"},"content":"Responsibilities: Implementing the different split methods and various calculation methods for adding a transaction"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Paul-Henri François Jacques Mignot"},{"lineNumber":34,"author":{"gitID":"Steven-Jia"},"content":"image::phmignot.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":35,"author":{"gitID":"Steven-Jia"},"content":"http://github.com/phmignot[Github Account] +"},{"lineNumber":36,"author":{"gitID":"Steven-Jia"},"content":"https://github.com/CS2103JAN2018-W10-B1/main/blob/master/docs/team/paulhenrimignot.adoc[Project Portfolio Page]"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Steven-Jia"},"content":"Role: Development, Integration, Code Quality +"},{"lineNumber":39,"author":{"gitID":"Steven-Jia"},"content":"Responsibilities: Creating the debts table and implementing the select/unselect feature for a person"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":""}],"authorContributionMap":{"Steven-Jia":17,"phmignot":3,"-":22}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"﻿\u003d SmartSplit - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":":repoURL: https://github.com/CS2103JAN2018-W10-B1/main"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"Steven-Jia"},"content":"By: `Kok Cong, Wen Qin, Paul Henri`      Since: `March 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"SmartSplit is a desktop app for managing shared expenses between contacts. More importantly, SmartSplit is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, SmartSplit can get your shared expense management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":25,"author":{"gitID":"-"},"content":"+"},{"lineNumber":26,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":27,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":28,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"phmignot"},"content":".  Download the latest `smartsplit.jar` link:{repoURL}/releases[here]."},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":".  Copy the file to the folder you want to use as the home folder for your SmartSplit app."},{"lineNumber":32,"author":{"gitID":"-"},"content":".  Double-click the file to start the app. The GUI should appear in a few seconds."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"image::Ui.png[width\u003d\"790\"]"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":".  Type the command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":37,"author":{"gitID":"-"},"content":"e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."},{"lineNumber":38,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"* *`list`* : lists all contacts"},{"lineNumber":41,"author":{"gitID":"-"},"content":"* **`addPerson`**`n/John Doe p/98765432 e/johnd@example.com : adds a contact named `John Doe` to SmartSplit."},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":"* **`deletePerson`**`3` : deletes the 3rd contact shown in the current person list"},{"lineNumber":43,"author":{"gitID":"Steven-Jia"},"content":"* **`addTransaction`**`payer/John Doe a/100.00 d/Taxi ride to NUS payee/Alex Yeoh payee/Bernice Yu` : adds a transaction payed by John Doe costing $100.00 for a taxi ride split with Alex Yeoh and Bernice Yu."},{"lineNumber":44,"author":{"gitID":"Steven-Jia"},"content":"* **`deleteTransaction`**`2` : deletes the 2nd transaction shown in the current transaction list"},{"lineNumber":45,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":50,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":"*Command Format*"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"phmignot"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `addPerson n/NAME`, `NAME` is a parameter which can be used as `addPerson n/John Doe`."},{"lineNumber":56,"author":{"gitID":"-"},"content":"* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":57,"author":{"gitID":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":58,"author":{"gitID":"-"},"content":"* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":59,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"\u003d\u003d\u003d Adding a person: `addPerson`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"Steven-Jia"},"content":"Adds a person to the SmartSplit addressbook +"},{"lineNumber":68,"author":{"gitID":"Steven-Jia"},"content":"Format: `addPerson n/NAME p/PHONE_NUMBER e/EMAIL [t/TAG]...`"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":71,"author":{"gitID":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"A person with the same name cannot be added and is case sensitive"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":"* `addPerson n/John Doe p/98765432 e/johnd@example.com`"},{"lineNumber":77,"author":{"gitID":"-"},"content":"* `addPerson n/Betsy Crowe t/friend e/betsycrowe@example.com p/1234567 t/criminal`"},{"lineNumber":78,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Listing all persons : `listPersons`"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"Steven-Jia"},"content":"Shows a list of all persons in SmartSplit. +"},{"lineNumber":82,"author":{"gitID":"Steven-Jia"},"content":"Format: `listPersons`"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Editing a person : `editPerson`"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"Edits an existing person in SmartSplit. +"},{"lineNumber":87,"author":{"gitID":"Steven-Jia"},"content":"Format: `editPerson INDEX [n/NAME] [p/PHONE] [e/EMAIL] [t/TAG]...`"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"****"},{"lineNumber":90,"author":{"gitID":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":91,"author":{"gitID":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":92,"author":{"gitID":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":93,"author":{"gitID":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":94,"author":{"gitID":"-"},"content":"* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."},{"lineNumber":95,"author":{"gitID":"-"},"content":"****"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"Steven-Jia"},"content":"* `editPerson 1 p/91234567 e/johndoe@example.com` +"},{"lineNumber":100,"author":{"gitID":"-"},"content":"Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":101,"author":{"gitID":"Steven-Jia"},"content":"* `editPerson 2 n/Betsy Crower t/` +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Finding a person by name: `findPerson`"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"Finds persons whose names contain any of the given keywords. +"},{"lineNumber":107,"author":{"gitID":"Steven-Jia"},"content":"Format: `findPerson KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"****"},{"lineNumber":110,"author":{"gitID":"-"},"content":"* The search is case insensitive. e.g `hans` will match `Hans`"},{"lineNumber":111,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":112,"author":{"gitID":"-"},"content":"* Only the name is searched."},{"lineNumber":113,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":114,"author":{"gitID":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":115,"author":{"gitID":"-"},"content":"****"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"Steven-Jia"},"content":"* `findPerson John` +"},{"lineNumber":120,"author":{"gitID":"-"},"content":"Returns `john` and `John Doe`"},{"lineNumber":121,"author":{"gitID":"Steven-Jia"},"content":"* `findPerson Betsy Tim John` +"},{"lineNumber":122,"author":{"gitID":"-"},"content":"Returns any person having names `Betsy`, `Tim`, or `John`"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Deleting a person : `deletePerson` `[Updated for v1.4]`"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"phmignot"},"content":"Deletes the specified person from SmartSplit if the person is cleared from any debts. +"},{"lineNumber":127,"author":{"gitID":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"****"},{"lineNumber":130,"author":{"gitID":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":131,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":132,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":133,"author":{"gitID":"Steven-Jia"},"content":"* The person must have no debts owing."},{"lineNumber":134,"author":{"gitID":"-"},"content":"****"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":137,"author":{"gitID":"-"},"content":"Unable to delete a current person if debt not cleared and/or loan by other people not paid."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":140,"author":{"gitID":"phmignot"},"content":"`deletePerson 2` +"},{"lineNumber":141,"author":{"gitID":"-"},"content":"Deletes the 2nd person in the list of persons if the person has outstanding debts and/or loan by other people all paid."},{"lineNumber":142,"author":{"gitID":"Steven-Jia"},"content":"* `findPerson Betsy` +"},{"lineNumber":143,"author":{"gitID":"phmignot"},"content":"`deletePerson 1` +"},{"lineNumber":144,"author":{"gitID":"-"},"content":"Deletes the 1st person in the results of the `findPerson` command, if the person has no debts owing and/or loan by other people all paid."},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"phmignot"},"content":"// tag::select[]"},{"lineNumber":147,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Selecting a person : `selectPerson`"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"Selects the person identified by the index number used in the last person listing. +"},{"lineNumber":150,"author":{"gitID":"Steven-Jia"},"content":"Format: `selectPerson INDEX`"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"****"},{"lineNumber":153,"author":{"gitID":"phmignot"},"content":"* Selects the person."},{"lineNumber":154,"author":{"gitID":"Steven-Jia"},"content":"* Displays the transactions in which this person is involved."},{"lineNumber":155,"author":{"gitID":"Steven-Jia"},"content":"* Displays the person\u0027s debtors and creditors, if any."},{"lineNumber":156,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":157,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":158,"author":{"gitID":"-"},"content":"****"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":163,"author":{"gitID":"Steven-Jia"},"content":"`selectPerson 2` +"},{"lineNumber":164,"author":{"gitID":"Steven-Jia"},"content":"Selects the 2nd person in SmartSplit."},{"lineNumber":165,"author":{"gitID":"Steven-Jia"},"content":"* `findPerson Betsy` +"},{"lineNumber":166,"author":{"gitID":"Steven-Jia"},"content":"`selectPerson 1` +"},{"lineNumber":167,"author":{"gitID":"Steven-Jia"},"content":"Selects the 1st person in the results of the `findPerson` command."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Listing all transactions related to the person: `[Since v1.3]`"},{"lineNumber":170,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":171,"author":{"gitID":"Steven-Jia"},"content":"By clicking on a person on the person panel list, the person can be selected."},{"lineNumber":172,"author":{"gitID":"Steven-Jia"},"content":"All transactions that are relevant to that person will be displayed on the"},{"lineNumber":173,"author":{"gitID":"Steven-Jia"},"content":"transaction panel list."},{"lineNumber":174,"author":{"gitID":"phmignot"},"content":"In the debtors panel, any person who owes the selected person will appear with"},{"lineNumber":175,"author":{"gitID":"Steven-Jia"},"content":"the amount that they owe."},{"lineNumber":176,"author":{"gitID":"phmignot"},"content":"In the creditors panel, any person who is owed by the selected person will"},{"lineNumber":177,"author":{"gitID":"Steven-Jia"},"content":"appear with the amount that they are owed."},{"lineNumber":178,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":179,"author":{"gitID":"Steven-Jia"},"content":"To de-select the person, press \u0027control\u0027 + click (for Mac/Linux: \u0027command\u0027 + click) on the person."},{"lineNumber":180,"author":{"gitID":"Steven-Jia"},"content":"All transactions will be re-displayed and the debtors panel and creditors panel will be cleared."},{"lineNumber":181,"author":{"gitID":"phmignot"},"content":"// end::select[]"},{"lineNumber":182,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":183,"author":{"gitID":"Steven-Jia"},"content":"// tag::addTransaction[]"},{"lineNumber":184,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Adding a transaction: `addTransaction` `[Since v1.2]` `[Updated for v1.5]`"},{"lineNumber":185,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"Adds a transaction between one payer and one or multiple payees for payment transaction. +"},{"lineNumber":187,"author":{"gitID":"Steven-Jia"},"content":"Format with 1 Payee: `addTransaction type/TRANSACTION TYPE payer/PAYER NAME a/AMOUNT d/DESCRIPTION payee/PAYEE NAME m/SPLIT METHOD [units/LIST OF UNITS] [percentages/LIST OF PERCENTAGES]` +"},{"lineNumber":188,"author":{"gitID":"Steven-Jia"},"content":"Format with more than 1 Payee (e.g. 2 Payees): `addTransaction type/TRANSACTION TYPE payer/PAYER NAME a/AMOUNT d/DESCRIPTION payee/PAYEE NAME payee/PAYEE NAME m/SPLIT METHOD [units/LIST OF UNITS] [percentages/LIST OF PERCENTAGES]`"},{"lineNumber":189,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":190,"author":{"gitID":"phmignot"},"content":"****"},{"lineNumber":191,"author":{"gitID":"Steven-Jia"},"content":"* The options for transaction type are: *payment* and *paydebt*."},{"lineNumber":192,"author":{"gitID":"Steven-Jia"},"content":"** *payment* is for recording a transaction that was paid by a person on behalf of himself/herself and other persons."},{"lineNumber":193,"author":{"gitID":"Steven-Jia"},"content":"** *paydebt* is for recording a transaction that reduces an existing debt owed to another person. *Only 1 payee is allowed.*"},{"lineNumber":194,"author":{"gitID":"Steven-Jia"},"content":"A paydebt transaction can only be made if the payer owes the payee a balance. The amount specified cannot exceed this balance."},{"lineNumber":195,"author":{"gitID":"Steven-Jia"},"content":"* The options for split method are: *evenly*, *units*, and *percentage*. If no method is specified, the transaction will default to split evenly."},{"lineNumber":196,"author":{"gitID":"Steven-Jia"},"content":"** Only specify a split method if the transaction type is *payment*."},{"lineNumber":197,"author":{"gitID":"Steven-Jia"},"content":"** If *units* is selected as the split method, a list of integers representing the units must be entered as a comma-separated list. The first integer is the number of units"},{"lineNumber":198,"author":{"gitID":"Steven-Jia"},"content":"associated with the payer. Each subsequent integer is associated with each payee in the order in which they are specified in the command. The amount that each involved"},{"lineNumber":199,"author":{"gitID":"Steven-Jia"},"content":"person owes is calculated by the following: +"},{"lineNumber":200,"author":{"gitID":"Steven-Jia"},"content":"Amount Owed \u003d Transaction Amount * (Units for the Person / Total Number of Units)"},{"lineNumber":201,"author":{"gitID":"Steven-Jia"},"content":"** If *percentage* is selected as the split method, a list of integers representing the percentages must be entered as a comma-separated list. The first integer is the percentage"},{"lineNumber":202,"author":{"gitID":"Steven-Jia"},"content":"associated with the payer. Each subsequent integer is associated with each payee in the order in which they are specified in the command. *The percentages must add up to 100*."},{"lineNumber":203,"author":{"gitID":"Steven-Jia"},"content":"The amount that each involved person owes is calculated by the following: +"},{"lineNumber":204,"author":{"gitID":"Steven-Jia"},"content":"Amount Owed \u003d Transaction Amount * (Percentage for the Person / 100)"},{"lineNumber":205,"author":{"gitID":"Steven-Jia"},"content":"* The names for the payer and payee(s) used in the transaction must be in the SmartSplit addressbook."},{"lineNumber":206,"author":{"gitID":"Steven-Jia"},"content":"* At least one payee is required. There is no limit to how many unique payees that may be added as long as they exist in the SmartSplit addressbook."},{"lineNumber":207,"author":{"gitID":"Steven-Jia"},"content":"* A payee cannot be the payer."},{"lineNumber":208,"author":{"gitID":"phmignot"},"content":"* The amount must be a positive number with exactly two decimals."},{"lineNumber":209,"author":{"gitID":"Steven-Jia"},"content":"* The description must not be empty."},{"lineNumber":210,"author":{"gitID":"phmignot"},"content":"****"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":213,"author":{"gitID":"-"},"content":"Payer or payee(s) indicated in the transaction must exist."},{"lineNumber":214,"author":{"gitID":"-"},"content":"For paydebt transaction, the debt must be present and the amount indicated must be less than or equal to the outstanding debt"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"Steven-Jia"},"content":"Examples:"},{"lineNumber":217,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":218,"author":{"gitID":"Steven-Jia"},"content":"1. `addTransaction type/payment payer/John Doe a/1000.00 d/Fancy dinner payee/Tom Riddle`"},{"lineNumber":219,"author":{"gitID":"Steven-Jia"},"content":"* Adds a transaction where John Doe paid $1000.00. This is split evenly by default with Tom Riddle."},{"lineNumber":220,"author":{"gitID":"Steven-Jia"},"content":"Thus, the total amount spent by John Doe and by Tom Riddle will each increase by 500.00."},{"lineNumber":221,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":222,"author":{"gitID":"Steven-Jia"},"content":"image::AddTransactionExampleSplitEvenlySuccess.png[width\u003d\"800\"]"},{"lineNumber":223,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":224,"author":{"gitID":"Steven-Jia"},"content":"2. `addTransaction type/payment payer/Betsy Crowe a/30.00 d/Team T-shirts payee/John Doe payee/Bernice Yu m/units units/1, 2, 3`"},{"lineNumber":225,"author":{"gitID":"Steven-Jia"},"content":"* Adds a transaction where Betsy Crowe paid $30.00 for team t-shirts. The split method is by units with a split of"},{"lineNumber":226,"author":{"gitID":"Steven-Jia"},"content":"\"1, 2, 3\". The total number of units is 6. Thus, Betsy Crowe\u0027s total amount spent will increase by 30.00 * (1/6) \u003d 5.00. Similarly, John Doe\u0027s"},{"lineNumber":227,"author":{"gitID":"Steven-Jia"},"content":" total amount spent will increase by 10.00 and Bernice Yu\u0027s total amount spent will increase by 15.00."},{"lineNumber":228,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":229,"author":{"gitID":"Steven-Jia"},"content":"image::AddTransactionExampleSplitByUnitsSuccess.png[width\u003d\"800\"]"},{"lineNumber":230,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":231,"author":{"gitID":"Steven-Jia"},"content":"3. `addTransaction type/payment payer/Steven Jia a/50.00 d/Taxi ride payee/Paul Mignot payee/Kok Cong Ong m/percentage percentage/50, 10, 10`"},{"lineNumber":232,"author":{"gitID":"Steven-Jia"},"content":"* The *addTransaction* command fails because the sum of the percentages is not 100."},{"lineNumber":233,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":234,"author":{"gitID":"Steven-Jia"},"content":"4. `addTransaction type/payment payer/Steven Jia a/50.00 d/Taxi ride payee/Paul Mignot payee/Kok Cong Ong m/percentage percentage/38, 28, 34`"},{"lineNumber":235,"author":{"gitID":"Steven-Jia"},"content":"* Adds a transaction where Steven Jia paid $50.00 for a shared taxi ride. The split method is by percentage with a split of"},{"lineNumber":236,"author":{"gitID":"Steven-Jia"},"content":"\"38, 28, 34\". Thus, Steven Jia\u0027s total amount spent will increase by 50.00 * (38/100) \u003d 19.00. Similarly, Paul Mignot\u0027s"},{"lineNumber":237,"author":{"gitID":"Steven-Jia"},"content":"total amount spent will increase by 14.00 and Kok Cong Ong\u0027s total amount spent will increase by 17.00."},{"lineNumber":238,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":239,"author":{"gitID":"Steven-Jia"},"content":"image::AddTransactionExampleSplitByPercentageSuccess.png[width\u003d\"800\"]"},{"lineNumber":240,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":241,"author":{"gitID":"Steven-Jia"},"content":"5. `addTransaction type/paydebt payer/Tom Riddle a/500.00 d/Pay John for last night\u0027s dinner payee/John Doe`"},{"lineNumber":242,"author":{"gitID":"Steven-Jia"},"content":"* Adds a transaction where Tom Riddle paid John Doe $500.00."},{"lineNumber":243,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":244,"author":{"gitID":"Steven-Jia"},"content":"6. `addTransaction type/paydebt payer/Bernice Yu a/15.00 d/Pay Betsy for last night\u0027s dinner payee/Betsy Crowe payee/John Doe`"},{"lineNumber":245,"author":{"gitID":"Steven-Jia"},"content":"* The *addTransaction* command fails because there is more than 1 payee when the transaction type is *paydebt*."},{"lineNumber":246,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":247,"author":{"gitID":"Steven-Jia"},"content":"7. `addTransaction type/paydebt payer/Bernice Yu a/15.00 d/Pay Betsy for last night\u0027s dinner payee/John Doe`"},{"lineNumber":248,"author":{"gitID":"Steven-Jia"},"content":"* Assuming that Betsy paid for the dinner and John did not, Bernice does not actually owe John any amount."},{"lineNumber":249,"author":{"gitID":"Steven-Jia"},"content":"The *addTransaction* command fails because the payer does not owe the payee any amount."},{"lineNumber":250,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":251,"author":{"gitID":"Steven-Jia"},"content":"8. `addTransaction type/paydebt payer/Bernice Yu a/30.00 d/Pay Betsy for last night\u0027s dinner payee/Betsy Crowe`"},{"lineNumber":252,"author":{"gitID":"Steven-Jia"},"content":"* Assuming that Bernice only owes Betsy $15.00 for the dinner last night, the *addTransaction* command fails"},{"lineNumber":253,"author":{"gitID":"Steven-Jia"},"content":"because the payer is overpaying the payee."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"Steven-Jia"},"content":"// end::addTransaction[]"},{"lineNumber":256,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Deleting a transaction : `deleteTransaction` `[Since v1.2]`"},{"lineNumber":257,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":258,"author":{"gitID":"Steven-Jia"},"content":"Deletes the specified transaction from SmartSplit. +"},{"lineNumber":259,"author":{"gitID":"Steven-Jia"},"content":"Format: `deleteTransaction INDEX`"},{"lineNumber":260,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":261,"author":{"gitID":"Steven-Jia"},"content":"****"},{"lineNumber":262,"author":{"gitID":"Steven-Jia"},"content":"* Deletes the transaction at the specified `INDEX`."},{"lineNumber":263,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":264,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":265,"author":{"gitID":"Steven-Jia"},"content":"* All persons involved in the transaction must still be in the SmartSplit addressbook."},{"lineNumber":266,"author":{"gitID":"-"},"content":"****"},{"lineNumber":267,"author":{"gitID":"-"},"content":""},{"lineNumber":268,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"Payer or payee(s) in the transaction to be deleted must exist."},{"lineNumber":271,"author":{"gitID":"-"},"content":"Do not delete a payment transaction after a paydebt transaction with respect to that payment transaction had been made, as we assumed that payment transaction is not a wrongly added transaction after a paydebt transaction has made."},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"Steven-Jia"},"content":"Example:"},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"Steven-Jia"},"content":"* `deleteTransaction 2` +"},{"lineNumber":276,"author":{"gitID":"Steven-Jia"},"content":"Deletes the 2nd transaction in the SmartSplit transactions list."},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Locating transactions by name: `findTransaction` `[Coming in v2.0]`"},{"lineNumber":279,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":280,"author":{"gitID":"Steven-Jia"},"content":"Finds transactions whose property values contain any of the given keywords. +"},{"lineNumber":281,"author":{"gitID":"Steven-Jia"},"content":"Format: `findTransaction KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":282,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":283,"author":{"gitID":"Steven-Jia"},"content":"****"},{"lineNumber":284,"author":{"gitID":"Steven-Jia"},"content":"* The search is case insensitive. e.g `monthly rent` will match `Monthly Rent`"},{"lineNumber":285,"author":{"gitID":"Steven-Jia"},"content":"* The order of the keywords does not matter. e.g. `Rent Monthly` will match `Monthly Rent`"},{"lineNumber":286,"author":{"gitID":"Steven-Jia"},"content":"* All fields are searched."},{"lineNumber":287,"author":{"gitID":"Steven-Jia"},"content":"* Only full words or numbers will be matched e.g. `Month` will not match `Monthly`"},{"lineNumber":288,"author":{"gitID":"Steven-Jia"},"content":"* Transactions matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":289,"author":{"gitID":"Steven-Jia"},"content":"e.g. `Monthly` will return transactions with descriptions such as `Monthly Rent`, `Monthly Netflix Subscription`"},{"lineNumber":290,"author":{"gitID":"Steven-Jia"},"content":"****"},{"lineNumber":291,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":292,"author":{"gitID":"Steven-Jia"},"content":"Examples:"},{"lineNumber":293,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":294,"author":{"gitID":"Steven-Jia"},"content":"* `findTransaction Groceries` +"},{"lineNumber":295,"author":{"gitID":"Steven-Jia"},"content":"Returns `FairPrice groceries` and `Cheers groceries`"},{"lineNumber":296,"author":{"gitID":"Steven-Jia"},"content":"* `find 90.25 Jonathan Food` +"},{"lineNumber":297,"author":{"gitID":"Steven-Jia"},"content":"Returns any transaction with fields that have the values `90.25`, `Jonathan`, or `Food`"},{"lineNumber":298,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":299,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Listing entered commands : `history`"},{"lineNumber":300,"author":{"gitID":"-"},"content":""},{"lineNumber":301,"author":{"gitID":"-"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":302,"author":{"gitID":"-"},"content":"Format: `history`"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":305,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":306,"author":{"gitID":"-"},"content":"Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."},{"lineNumber":307,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":310,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":311,"author":{"gitID":"-"},"content":""},{"lineNumber":312,"author":{"gitID":"Steven-Jia"},"content":"Restores SmartSplit to the state before the previous _undoable_ command was executed. +"},{"lineNumber":313,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":316,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":317,"author":{"gitID":"Steven-Jia"},"content":"Undoable commands: those commands that modify SmartSplit\u0027s content (`addPerson`, `deletePerson`, `addTransaction`, `deleteTransaction`, `editPerson` and `clear`)."},{"lineNumber":318,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"Steven-Jia"},"content":"* `deletePerson 1` +"},{"lineNumber":323,"author":{"gitID":"Steven-Jia"},"content":"`listPersons` +"},{"lineNumber":324,"author":{"gitID":"Steven-Jia"},"content":"`undo` (reverses the `deletePerson 1` command) +"},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"Steven-Jia"},"content":"* `selectPerson 1` +"},{"lineNumber":327,"author":{"gitID":"Steven-Jia"},"content":"`listPersons` +"},{"lineNumber":328,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":329,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"Steven-Jia"},"content":"* `deletePerson 1` +"},{"lineNumber":332,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":333,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":334,"author":{"gitID":"Steven-Jia"},"content":"`undo` (reverses the `deletePerson 1` command) +"},{"lineNumber":335,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":336,"author":{"gitID":"Steven-Jia"},"content":"* `addTransaction payer/John Doe a/100.00 d/Taxi ride to NUS payee/Alex Yeoh splitMethod/evenly` +"},{"lineNumber":337,"author":{"gitID":"Steven-Jia"},"content":"`deleteTransaction 1` +"},{"lineNumber":338,"author":{"gitID":"Steven-Jia"},"content":"`undo` (reverses the `deleteTransaction 1` command) +"},{"lineNumber":339,"author":{"gitID":"Steven-Jia"},"content":"`undo` (reverses the `addTransaction...` command)"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":344,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":345,"author":{"gitID":"-"},"content":""},{"lineNumber":346,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":347,"author":{"gitID":"-"},"content":""},{"lineNumber":348,"author":{"gitID":"Steven-Jia"},"content":"* `deletePerson 1` +"},{"lineNumber":349,"author":{"gitID":"Steven-Jia"},"content":"`undo` (reverses the `deletePerson 1` command) +"},{"lineNumber":350,"author":{"gitID":"Steven-Jia"},"content":"`redo` (reapplies the `deletePerson 1` command) +"},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"Steven-Jia"},"content":"* `deletePerson 1` +"},{"lineNumber":353,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":354,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":355,"author":{"gitID":"-"},"content":""},{"lineNumber":356,"author":{"gitID":"Steven-Jia"},"content":"* `deletePerson 1` +"},{"lineNumber":357,"author":{"gitID":"-"},"content":"`clear` +"},{"lineNumber":358,"author":{"gitID":"-"},"content":"`undo` (reverses the `clear` command) +"},{"lineNumber":359,"author":{"gitID":"-"},"content":"`undo` (reverses the `delete 1` command) +"},{"lineNumber":360,"author":{"gitID":"-"},"content":"`redo` (reapplies the `delete 1` command) +"},{"lineNumber":361,"author":{"gitID":"-"},"content":"`redo` (reapplies the `clear` command) +"},{"lineNumber":362,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Clearing all entries : `clear`"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"Steven-Jia"},"content":"Clears all entries from SmartSplit. +"},{"lineNumber":367,"author":{"gitID":"-"},"content":"Format: `clear`"},{"lineNumber":368,"author":{"gitID":"-"},"content":""},{"lineNumber":369,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":370,"author":{"gitID":"-"},"content":""},{"lineNumber":371,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":372,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":373,"author":{"gitID":"-"},"content":""},{"lineNumber":374,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":375,"author":{"gitID":"-"},"content":""},{"lineNumber":376,"author":{"gitID":"Steven-Jia"},"content":"SmartSplit data is saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":377,"author":{"gitID":"-"},"content":"There is no need to save manually."},{"lineNumber":378,"author":{"gitID":"-"},"content":""},{"lineNumber":379,"author":{"gitID":"-"},"content":"\u003d\u003d FAQ"},{"lineNumber":380,"author":{"gitID":"-"},"content":""},{"lineNumber":381,"author":{"gitID":"-"},"content":"*Q*: How do I transfer my data to another Computer? +"},{"lineNumber":382,"author":{"gitID":"Steven-Jia"},"content":"*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous SmartSplit folder."},{"lineNumber":383,"author":{"gitID":"-"},"content":""},{"lineNumber":384,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"* *AddPerson* `addPerson n/NAME p/PHONE_NUMBER e/EMAIL [t/TAG]...` +"},{"lineNumber":387,"author":{"gitID":"-"},"content":"e.g. `addPerson n/James Ho p/22224444 e/jamesho@example.com t/friend t/colleague`"},{"lineNumber":388,"author":{"gitID":"Steven-Jia"},"content":"* *ListPersons* : `listPersons`"},{"lineNumber":389,"author":{"gitID":"Steven-Jia"},"content":"* *EditPerson* : `editPerson INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [t/TAG]...` +"},{"lineNumber":390,"author":{"gitID":"Steven-Jia"},"content":"e.g. `editPerson 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":391,"author":{"gitID":"Steven-Jia"},"content":"* *FindPerson* : `findPerson KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":392,"author":{"gitID":"Steven-Jia"},"content":"e.g. `findPerson James Jake`"},{"lineNumber":393,"author":{"gitID":"Steven-Jia"},"content":"* *DeletePerson* : `deletePerson INDEX` +"},{"lineNumber":394,"author":{"gitID":"Steven-Jia"},"content":"e.g. `deletePerson 3`"},{"lineNumber":395,"author":{"gitID":"Steven-Jia"},"content":"* *SelectPerson* : `selectPerson INDEX` +"},{"lineNumber":396,"author":{"gitID":"Steven-Jia"},"content":"e.g.`selectPerson 2`"},{"lineNumber":397,"author":{"gitID":"Steven-Jia"},"content":"* *AddTransaction* `addTransaction type/TRANSACTION TYPE payer/PAYER NAME a/AMOUNT d/DESCRIPTION payee/PAYEE NAME m/SPLIT METHOD [units/LIST OF UNITS] [percentages/LIST OF PERCENTAGES]...` +"},{"lineNumber":398,"author":{"gitID":"Steven-Jia"},"content":"e.g. `addTransaction type/payment payer/John Doe a/3456.00 d/for dinner meal payee/Tom Riddle e/Becky Simmons`"},{"lineNumber":399,"author":{"gitID":"phmignot"},"content":"* *DeleteTransaction* `deleteTransaction INDEX` +"},{"lineNumber":400,"author":{"gitID":"phmignot"},"content":"e.g. `deleteTransaction 1`"},{"lineNumber":401,"author":{"gitID":"phmignot"},"content":"* *FindTransaction* `findTransaction KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":402,"author":{"gitID":"phmignot"},"content":"e.g. `findTransaction taxi bangkok`"},{"lineNumber":403,"author":{"gitID":"-"},"content":"* *Clear* : `clear`"},{"lineNumber":404,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":405,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"},{"lineNumber":406,"author":{"gitID":"Steven-Jia"},"content":"* *History* : `history`"},{"lineNumber":407,"author":{"gitID":"Steven-Jia"},"content":"* *Help* : `help`"}],"authorContributionMap":{"Steven-Jia":170,"phmignot":24,"-":213}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d SmartSplit"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"Steven-Jia"},"content":"https://travis-ci.org/CS2103JAN2018-W10-B1/main[image:https://travis-ci.org/CS2103JAN2018-W10-B1/main.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"https://coveralls.io/github/CS2103JAN2018-W10-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-W10-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":7,"author":{"gitID":"-"},"content":"https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"Steven-Jia"},"content":"image::docs/images/Ui.png[width\u003d\"1000\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"-"},"content":"image::images/Ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"* This is a desktop application for simplifying shared expenses. If you or your friends, family, peers, or partner pay for each other\u0027s expenses, you can use this application to quickly see how much each person owes."},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"* Why should you use it?"},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"** Conveniently record people and transactions"},{"lineNumber":21,"author":{"gitID":"Steven-Jia"},"content":"** Don\u0027t do any math! SmartSplit will tell you exactly how much you have to pay each person or how much you should expect to receive from each person!"},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"** More exciting features, such as finding transactions by keywords and forming groups, will be available in `v2.0`!"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"* SmartSplit is based on the AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"Steven-Jia":8,"-":27}},{"path":"docs/team/steven-jia.adoc","lines":[{"lineNumber":1,"author":{"gitID":"Steven-Jia"},"content":"\u003d Wen Qin Jia - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"\u003d\u003d PROJECT: SmartSplit"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"---"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":11,"author":{"gitID":"Steven-Jia"},"content":"SmartSplit is a desktop app for managing shared expenses between contacts. If the user pays for an expense that is shared with other people, he or she can use this application to quickly see how much each person owes."},{"lineNumber":12,"author":{"gitID":"Steven-Jia"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":16,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d *Major enhancement*:"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"* *Split transaction evenly, by units, and by percentage*"},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"** What it does: allows the user to add a transaction with the amount split using 1 of 3 options:"},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"1. Split evenly: The transaction amount is divided evenly among the payer and payees. This is the default method."},{"lineNumber":21,"author":{"gitID":"Steven-Jia"},"content":"2. Split by units: Each person involved in the transaction is associated with a unit of the transaction amount that they need to pay for. For example,"},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"Jon may have purchased 8 t-shirts, 3 of which are for himself, 4 of which are for Celine, and 1 of which is for Julie."},{"lineNumber":23,"author":{"gitID":"Steven-Jia"},"content":"3. Split by percentage: Each person involved in the transaction is associated with a percentage of the transaction amount that they need to pay for."},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":"The total percentage adds up to 100."},{"lineNumber":25,"author":{"gitID":"Steven-Jia"},"content":"// Explain further"},{"lineNumber":26,"author":{"gitID":"Steven-Jia"},"content":"** Justification: This feature provides the user with flexible options to record a transaction, since real-world shared expenses are not always divided evenly."},{"lineNumber":27,"author":{"gitID":"Steven-Jia"},"content":"** Highlights: This enhancement was implemented by significantly altering the addTransaction command. The decision was made after an in-depth analysis of design alternatives, including creating an interactive CLI user interface to shorten"},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":"the command line input required from the user. That implementation option too was challenging as it required changes to command design pattern."},{"lineNumber":29,"author":{"gitID":"Steven-Jia"},"content":"** Credits: Most features that were brainstormed for this project, including the ones mentioned here, were inspired by https://www.splitwise.com[SplitWise]."},{"lineNumber":30,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":31,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d *Minor enhancements*:"},{"lineNumber":32,"author":{"gitID":"Steven-Jia"},"content":"* Added calculation logic to display the total amount spent for every user based on all their transactions"},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"* Added a balance field to the Person class and calculation logic that *updates a person\u0027s total amount spent every time a new transaction is added or deleted*."},{"lineNumber":34,"author":{"gitID":"Steven-Jia"},"content":"* Enabled *multiple payees for transactions* by adding a list of Persons to the Transaction model and ensured proper storage."},{"lineNumber":35,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":36,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d *Code contributed*:"},{"lineNumber":37,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":38,"author":{"gitID":"Steven-Jia"},"content":"https://github.com/CS2103JAN2018-W10-B1/main/blob/master/collated/functional/steven-jia.md[Functional code] +"},{"lineNumber":39,"author":{"gitID":"Steven-Jia"},"content":"https://github.com/CS2103JAN2018-W10-B1/main/blob/master/collated/test/steven-jia.md[Test code]"},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":41,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d *Other contributions*:"},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":43,"author":{"gitID":"Steven-Jia"},"content":"** Project management:"},{"lineNumber":44,"author":{"gitID":"Steven-Jia"},"content":"*** Managed releases `v1.3` - `v1.5rc` (3 releases) on https://github.com/CS2103JAN2018-W10-B1/main/releases[GitHub]"},{"lineNumber":45,"author":{"gitID":"Steven-Jia"},"content":"*** Set up tracking labels, created detailed issues every week, and ensured that issues and milestones were closed according to their deadlines or carried over"},{"lineNumber":46,"author":{"gitID":"Steven-Jia"},"content":"*** Fixed all collate annotation errors in codebase and regularly updated the collate files"},{"lineNumber":47,"author":{"gitID":"Steven-Jia"},"content":"** Enhancements to existing features:"},{"lineNumber":48,"author":{"gitID":"Steven-Jia"},"content":"*** Add methods to retrieve a person by name, find transactions with a specific payer, and find transactions with a specific payee (Pull request https://github.com/CS2103JAN2018-W10-B1/main/pull/78[#78])"},{"lineNumber":49,"author":{"gitID":"Steven-Jia"},"content":"*** Update the transaction model to support multiple payees (Pull request https://github.com/CS2103JAN2018-W10-B1/main/pull/21[#23])"},{"lineNumber":50,"author":{"gitID":"Steven-Jia"},"content":"*** Update the XMLAdaptedTransaction model to properly store transactions for reuse (Pull request https://github.com/CS2103JAN2018-W10-B1/main/pull/78[#78])"},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"*** Wrote additional tests for XMLAdaptedTransactionTest (Pull request https://github.com/CS2103JAN2018-W10-B1/main/pull/140[#140])"},{"lineNumber":52,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":53,"author":{"gitID":"Steven-Jia"},"content":"** Documentation:"},{"lineNumber":54,"author":{"gitID":"Steven-Jia"},"content":"*** Added detailed explanations and examples for the addTransaction command, and updated all person-related transaction commands and examples in the User Guide (Pull request https://github.com/CS2103JAN2018-W10-B1/main/pull/141[#141])"},{"lineNumber":55,"author":{"gitID":"Steven-Jia"},"content":"*** Updated README product summary, interim https://github.com/CS2103JAN2018-W10-B1/main/blob/e9e2d2d713f4e909997524a7bd843b36a5ac1584/docs/images/Ui.png[UI mockup], relevant links, and references to \"addressBook\", and added transaction-related commands to the User Guide (Pull request https://github.com/CS2103JAN2018-W10-B1/main/pull/30[#30])"},{"lineNumber":56,"author":{"gitID":"Steven-Jia"},"content":"*** Wrote most of the user stories and use cases in the Developer Guide (Pull requests https://github.com/CS2103JAN2018-W10-B1/main/pull/1[#1], https://github.com/CS2103JAN2018-W10-B1/main/pull/2[#2])"},{"lineNumber":57,"author":{"gitID":"Steven-Jia"},"content":"** Community:"},{"lineNumber":58,"author":{"gitID":"Steven-Jia"},"content":"*** Reviewed pull request (with non-trivial review comments): https://github.com/CS2103JAN2018-W10-B1/main/pull/105[#105]"},{"lineNumber":59,"author":{"gitID":"Steven-Jia"},"content":"*** Reported bugs and suggestions for team T16-B1 (examples: https://github.com/CS2103JAN2018-T16-B1/main/issues/66[1], https://github.com/CS2103JAN2018-T16-B1/main/issues/58[2], https://github.com/CS2103JAN2018-T16-B1/main/issues/88[3])"},{"lineNumber":60,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":61,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":62,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":64,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":65,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"Steven-Jia"},"content":"include::../UserGuide.adoc[tag\u003daddTransaction]"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":72,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":73,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"Steven-Jia"},"content":"include::../DeveloperGuide.adoc[tag\u003dfindtransaction]"},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":"---"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":"include::../DeveloperGuide.adoc[tag\u003daddgroup]"},{"lineNumber":80,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":81,"author":{"gitID":"Steven-Jia"},"content":"---"},{"lineNumber":82,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":83,"author":{"gitID":"Steven-Jia"},"content":"include::../DeveloperGuide.adoc[tag\u003dnonfunctionalrequirements]"},{"lineNumber":84,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":85,"author":{"gitID":"Steven-Jia"},"content":"---"},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":87,"author":{"gitID":"Steven-Jia"},"content":"include::../DeveloperGuide.adoc[tag\u003dglossary]"}],"authorContributionMap":{"Steven-Jia":67,"phmignot":9,"-":11}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":16,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.ui.StatusBarFooter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class HelpCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getResultDisplay().click();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getPersonListPanel().click();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":58,"author":{"gitID":"Steven-Jia"},"content":"        executeCommand(SelectPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // assert that the status bar too is updated correctly while the help window is open"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // note: the select command tested above does not update the status bar"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        executeCommand(DeletePersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":2,"-":86}},{"path":"src/test/java/systemtests/AddressBookSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":29,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":30,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.ListPersonsCommand;"},{"lineNumber":31,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public abstract class AddressBookSystemTest {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    protected AddressBook getInitialData() {"},{"lineNumber":77,"author":{"gitID":"phmignot"},"content":"        return AddressBookBuilder.getTypicalAddressBook();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getPersonListPanel();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getResultDisplay();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":119,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Displays all persons in the address book."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void showAllPersons() {"},{"lineNumber":129,"author":{"gitID":"Steven-Jia"},"content":"        executeCommand(ListPersonsCommand.COMMAND_WORD);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    protected void showPersonsWithName(String keyword) {"},{"lineNumber":137,"author":{"gitID":"Steven-Jia"},"content":"        executeCommand(FindPersonCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Selects the person at {@code index} of the displayed list."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    protected void selectPerson(Index index) {"},{"lineNumber":145,"author":{"gitID":"Steven-Jia"},"content":"        executeCommand(SelectPersonCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * Deletes all persons in the address book."},{"lineNumber":151,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitID":"-"},"content":"    protected void deleteAllPersons() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        executeCommand(ClearCommand.COMMAND_WORD);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(0, getModel().getAddressBook().getPersonList().size());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * and the person list panel displays the persons in the model correctly."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        assertEquals(expectedResultMessage, getResultDisplay().getText());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"phmignot"},"content":"     * Calls {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        getPersonListPanel().rememberSelectedPersonCard();"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":183,"author":{"gitID":"phmignot"},"content":"     * Asserts that the previously selected card is now deselected."},{"lineNumber":184,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isAnyCardSelected());"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"phmignot"},"content":"     * Asserts that only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":199,"author":{"gitID":"phmignot"},"content":"     * Asserts that the selected card in the person list panel remain unchanged."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":208,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":232,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":233,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":239,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":243,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":244,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":246,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":247,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getResultDisplay().getText());"},{"lineNumber":248,"author":{"gitID":"-"},"content":"            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"},{"lineNumber":249,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong. \", e);"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":262,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":6,"phmignot":6,"-":250}},{"path":"src/test/java/systemtests/FindPersonCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.DANIEL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":"public class FindPersonCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void find() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":30,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":31,"author":{"gitID":"Steven-Jia"},"content":"        String command \u003d \"   \" + FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        /* Case: repeat previous find command where person list is displaying the persons we are finding"},{"lineNumber":38,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":39,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"},{"lineNumber":45,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Carl\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, CARL);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Benson Daniel\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"},{"lineNumber":57,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Daniel Benson\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"},{"lineNumber":62,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":67,"author":{"gitID":"-"},"content":"         * -\u003e 2 persons found"},{"lineNumber":68,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":69,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        executeCommand(DeletePersonCommand.COMMAND_WORD + \" 1\");"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"},{"lineNumber":93,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" MeIeR\";"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"},{"lineNumber":98,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Mei\";"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"},{"lineNumber":104,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Meiers\";"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: find person not in address book -\u003e 0 persons found */"},{"lineNumber":110,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Mark\";"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        /* Case: find phone number of person in address book -\u003e 0 persons found */"},{"lineNumber":115,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: find email of person in address book -\u003e 0 persons found */"},{"lineNumber":120,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        /* Case: find tags of person in address book -\u003e 0 persons found */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"},{"lineNumber":126,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        /* Case: find while a person is selected -\u003e selected card deselected */"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"},{"lineNumber":134,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" Daniel\";"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        /* Case: find person in empty address book -\u003e 0 persons found */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":141,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d FindPersonCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        ModelHelper.setFilteredList(expectedModel, DANIEL);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        command \u003d \"FiNd Meier\";"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":154,"author":{"gitID":"-"},"content":"     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * and the model related components equal to {@code expectedModel}."},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":164,"author":{"gitID":"-"},"content":"                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * These verifications are done by"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":177,"author":{"gitID":"-"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":178,"author":{"gitID":"-"},"content":"     * error style."},{"lineNumber":179,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":19,"-":171}},{"path":"src/test/java/systemtests/SelectPersonCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.commands.SelectPersonCommand.MESSAGE_SELECT_PERSON_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"public class SelectPersonCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"Steven-Jia"},"content":"        String command \u003d \"   \" + SelectPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        /* Case: select the last card in the person list -\u003e selected */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"},{"lineNumber":32,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d SelectPersonCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, personCount);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /* Case: select the middle card in the person list -\u003e selected */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"},{"lineNumber":47,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d SelectPersonCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"},{"lineNumber":56,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":60,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" \" + invalidIndex,"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        //        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        //        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":66,"author":{"gitID":"Steven-Jia"},"content":"        //        command \u003d SelectPersonCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        //        assertCommandSuccess(command, validIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":72,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":73,"author":{"gitID":"Steven-Jia"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectPersonCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectPersonCommand.MESSAGE_USAGE));"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":81,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" \" + invalidIndex,"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":85,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" abc\","},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectPersonCommand.MESSAGE_USAGE));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":89,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":90,"author":{"gitID":"Steven-Jia"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectPersonCommand.MESSAGE_USAGE));"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e rejected */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        /* Case: select from empty address book -\u003e rejected */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":97,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(SelectPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":111,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":118,"author":{"gitID":"-"},"content":"                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":18,"-":136}},{"path":"src/test/java/systemtests/AddPersonCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JACK;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JACK;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":34,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonFoundException;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"Steven-Jia"},"content":"public class AddPersonCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void add() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"},{"lineNumber":57,"author":{"gitID":"-"},"content":"         * -\u003e added"},{"lineNumber":58,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        Person toAdd \u003d AMY;"},{"lineNumber":60,"author":{"gitID":"Steven-Jia"},"content":"        String command \u003d \"   \" + AddPersonCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""},{"lineNumber":61,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"        /* Case: undo adding Amy to the list -\u003e Amy deleted */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        /* Case: redo adding Amy to the list -\u003e Amy added again */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"},{"lineNumber":76,"author":{"gitID":"phmignot"},"content":"        toAdd \u003d new PersonBuilder().withName(VALID_NAME_JACK).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":78,"author":{"gitID":"phmignot"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_JACK + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        /* Case: add to empty address book -\u003e added */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        deleteAllPersons();"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(ALICE);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: add a person with tags, command with parameters in random order -\u003e added */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        toAdd \u003d BOB;"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + NAME_DESC_BOB"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toAdd);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: add a person, missing tags -\u003e added */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandSuccess(HOON);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /* Case: filters the person list before adding -\u003e added */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertCommandSuccess(IDA);"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        selectPerson(Index.fromOneBased(1));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertCommandSuccess(CARL);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person -\u003e rejected */"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddPersonCommand(HOON);"},{"lineNumber":110,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(command, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        /* Case: add a duplicate person except with different tags -\u003e rejected */"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // This test will fail if a new tag that is not in the model is used, see the bug documented in"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // AddressBook#addPerson(Person)"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        command \u003d PersonUtil.getAddPersonCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"},{"lineNumber":117,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(command, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: missing name -\u003e rejected */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":121,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        /* Case: missing phone -\u003e rejected */"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":125,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"        /* Case: missing email -\u003e rejected */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY;"},{"lineNumber":129,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"        /* Case: invalid keyword -\u003e rejected */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY;"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        command \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_TAG_DESC;"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"Steven-Jia"},"content":"     * Executes the {@code AddPersonCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"Steven-Jia"},"content":"     * 3. Result display box displays the success message of executing {@code AddPersonCommand} with the details of"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * {@code toAdd}.\u003cbr\u003e"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * the current model added with {@code toAdd}.\u003cbr\u003e"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":163,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":164,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":165,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":167,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(Person toAdd) throws PersonFoundException {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertCommandSuccess(PersonUtil.getAddPersonCommand(toAdd), toAdd);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * instead."},{"lineNumber":174,"author":{"gitID":"Steven-Jia"},"content":"     * @see AddPersonCommandSystemTest#assertCommandSuccess(Person)"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Person toAdd) throws PersonFoundException {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"            expectedModel.addPerson(toAdd);"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"Steven-Jia"},"content":"        String expectedResultMessage \u003d String.format(AddPersonCommand.MESSAGE_SUCCESS, toAdd);"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"},{"lineNumber":190,"author":{"gitID":"-"},"content":"     * the,\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":192,"author":{"gitID":"-"},"content":"     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":194,"author":{"gitID":"Steven-Jia"},"content":"     * @see AddPersonCommandSystemTest#assertCommandSuccess(String, Person)"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"-"},"content":"     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":213,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":215,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":13,"phmignot":4,"-":208}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d SmartSplit - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"By: `Kok Cong, Wen Qin, and Paul Henri`      Since: `April 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":37,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":39,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":41,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":46,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":51,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":60,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":79,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":84,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":91,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":99,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":100,"author":{"gitID":"-"},"content":"_Figure 5.1f. Undo Redo New Command Stack Diagram 2_"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"-"},"content":"Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":159,"author":{"gitID":"-"},"content":"image::UiClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"Steven-Jia"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `CreditorPanel`, `DebtorPanel`, `TransactionPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":170,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":171,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":172,"author":{"gitID":"Steven-Jia"},"content":"// end::DesignUI[]"},{"lineNumber":173,"author":{"gitID":"-"},"content":""},{"lineNumber":174,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":175,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":178,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":179,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":182,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":185,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":".  `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":188,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":189,"author":{"gitID":"-"},"content":".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."},{"lineNumber":190,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":".Interactions Inside the Logic Component for the `delete 1` Command"},{"lineNumber":195,"author":{"gitID":"-"},"content":"image::DeletePersonSdForLogic.png[width\u003d\"800\"]"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":198,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":201,"author":{"gitID":"-"},"content":"image::ModelClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":206,"author":{"gitID":"-"},"content":""},{"lineNumber":207,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":208,"author":{"gitID":"-"},"content":"* stores the Address Book data."},{"lineNumber":209,"author":{"gitID":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":210,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"Steven-Jia"},"content":"// tag::DebtsTable[]"},{"lineNumber":213,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d\u003d DebtsTable"},{"lineNumber":214,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":215,"author":{"gitID":"Steven-Jia"},"content":"DebtsTable is a table that collects the debts between every person."},{"lineNumber":216,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":217,"author":{"gitID":"Steven-Jia"},"content":"This feature simplified the calculation, the storing and the retrieving of every debts between the persons added."},{"lineNumber":218,"author":{"gitID":"Steven-Jia"},"content":"The `DebtTable` is updated when a person or a transaction is added, edited or removed. +"},{"lineNumber":219,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":220,"author":{"gitID":"Steven-Jia"},"content":"* Implementation of the DebtsTable:"},{"lineNumber":221,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":222,"author":{"gitID":"Steven-Jia"},"content":"** **Alternative 1 (current choice):** Using a dictionary of every person\u0027s `DebtsList`,"},{"lineNumber":223,"author":{"gitID":"Steven-Jia"},"content":"which are dictionaries with all persons that have debts with its owner."},{"lineNumber":224,"author":{"gitID":"Steven-Jia"},"content":"*** Pros: More flexible. Easy to add and remove a person or a debt. Easy to retrieve the debt between two persons."},{"lineNumber":225,"author":{"gitID":"Steven-Jia"},"content":"Will use less memory."},{"lineNumber":226,"author":{"gitID":"Steven-Jia"},"content":"*** Cons: Harder to edit"},{"lineNumber":227,"author":{"gitID":"Steven-Jia"},"content":"** **Alternative 2:** Using an two dimensional array."},{"lineNumber":228,"author":{"gitID":"Steven-Jia"},"content":"*** Pros: Easy to add or edit a person or a debt."},{"lineNumber":229,"author":{"gitID":"Steven-Jia"},"content":"*** Cons: Hard to remove a person."},{"lineNumber":230,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":231,"author":{"gitID":"Steven-Jia"},"content":"// end::DebtsTable[]"},{"lineNumber":232,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":233,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":235,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":238,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":239,"author":{"gitID":"-"},"content":""},{"lineNumber":240,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":241,"author":{"gitID":"-"},"content":""},{"lineNumber":242,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":245,"author":{"gitID":"-"},"content":"* can save the Address Book data in xml format and read it back."},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":266,"author":{"gitID":"-"},"content":""},{"lineNumber":267,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":268,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":269,"author":{"gitID":"-"},"content":"----"},{"lineNumber":270,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":272,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":274,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitID":"-"},"content":"}"},{"lineNumber":276,"author":{"gitID":"-"},"content":"----"},{"lineNumber":277,"author":{"gitID":"-"},"content":""},{"lineNumber":278,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":279,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":280,"author":{"gitID":"-"},"content":"----"},{"lineNumber":281,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":282,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":284,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":285,"author":{"gitID":"-"},"content":""},{"lineNumber":286,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"}"},{"lineNumber":289,"author":{"gitID":"-"},"content":""},{"lineNumber":290,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":291,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":292,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":"}"},{"lineNumber":296,"author":{"gitID":"-"},"content":"----"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":303,"author":{"gitID":"-"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":307,"author":{"gitID":"-"},"content":""},{"lineNumber":308,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":309,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"-"},"content":"The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."},{"lineNumber":312,"author":{"gitID":"-"},"content":""},{"lineNumber":313,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":314,"author":{"gitID":"-"},"content":""},{"lineNumber":315,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":316,"author":{"gitID":"-"},"content":""},{"lineNumber":317,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":318,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":319,"author":{"gitID":"-"},"content":""},{"lineNumber":320,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":321,"author":{"gitID":"-"},"content":""},{"lineNumber":322,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":323,"author":{"gitID":"-"},"content":""},{"lineNumber":324,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":327,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":330,"author":{"gitID":"-"},"content":""},{"lineNumber":331,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":332,"author":{"gitID":"-"},"content":""},{"lineNumber":333,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":336,"author":{"gitID":"-"},"content":""},{"lineNumber":337,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":342,"author":{"gitID":"-"},"content":""},{"lineNumber":343,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":344,"author":{"gitID":"-"},"content":""},{"lineNumber":345,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":346,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":347,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":348,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":349,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":350,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":353,"author":{"gitID":"-"},"content":""},{"lineNumber":354,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":355,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":356,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":357,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":358,"author":{"gitID":"-"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":359,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":360,"author":{"gitID":"-"},"content":""},{"lineNumber":361,"author":{"gitID":"-"},"content":""},{"lineNumber":362,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":363,"author":{"gitID":"-"},"content":""},{"lineNumber":364,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":365,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":366,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":367,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":368,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":369,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":370,"author":{"gitID":"-"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":371,"author":{"gitID":"-"},"content":""},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":374,"author":{"gitID":"-"},"content":""},{"lineNumber":375,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":376,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":377,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":378,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":379,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":380,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"-"},"content":"// tag::addtransaction[]"},{"lineNumber":383,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d  Add Transaction feature"},{"lineNumber":384,"author":{"gitID":"-"},"content":""},{"lineNumber":385,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Add Transaction Command Implementation"},{"lineNumber":386,"author":{"gitID":"-"},"content":""},{"lineNumber":387,"author":{"gitID":"-"},"content":".Component interactions for `addTransaction` command (part 1)"},{"lineNumber":388,"author":{"gitID":"-"},"content":"image::AddTransaction.png[width\u003d\"800\"]"},{"lineNumber":389,"author":{"gitID":"-"},"content":""},{"lineNumber":390,"author":{"gitID":"-"},"content":"image::addTransactionParser.png[width\u003d\"800\"]"},{"lineNumber":391,"author":{"gitID":"-"},"content":""},{"lineNumber":392,"author":{"gitID":"-"},"content":"From the diagram above, when users enter the command addTransaction type/ Transaction_Type payer/ Payer a/ Amount d/ Description payee/ Payee to add a new a Transaction in their address book, AddTransactionCommandParser will be called and parse the arguments and return AddTransactionCommand. Depending on the type of transactions and split method input by the user, a different transaction object will be created and return to AddTransactionCommand as shown by the acitivty diagram above. Furthermore, during the parsing of the argument, a method(findPersonByName) to check if the payer or payee(s) exist will be called. In addition, validatePayees() is called to check if payee(s) enter is the same as the payer and valiadateSplitMethodValue() is used to check the validity of the split value entered. If all the three methods fail, an exception will be thrown. Refer to the code and diagram below for addTransactionCommandParser."},{"lineNumber":393,"author":{"gitID":"-"},"content":""},{"lineNumber":394,"author":{"gitID":"-"},"content":"image::AddTransactionCommandParser.png[width\u003d\"800\"]"},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"-"},"content":"* Code Listing"},{"lineNumber":397,"author":{"gitID":"-"},"content":""},{"lineNumber":398,"author":{"gitID":"-"},"content":"image::AddTransactionCommandParserCode.png[width\u003d\"800\"]"},{"lineNumber":399,"author":{"gitID":"-"},"content":""},{"lineNumber":400,"author":{"gitID":"-"},"content":"Next, AddTransactionCommand will call its method execute(). When addTransaction command is executed, an addTransaction() method will be called."},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"-"},"content":"image::AddTransactionSequenceDiagram1.png[width\u003d\"800\"]"},{"lineNumber":403,"author":{"gitID":"-"},"content":""},{"lineNumber":404,"author":{"gitID":"-"},"content":"With reference to the diagram above, when addTransaction method is executed, new transaction will be added and debt table will be updated as well. Subsequently, using calculation from calculationUtil, the new transaction amount will be added to each payer and payee(s) balance. Refer to the code below."},{"lineNumber":405,"author":{"gitID":"-"},"content":""},{"lineNumber":406,"author":{"gitID":"-"},"content":"* Code Listing"},{"lineNumber":407,"author":{"gitID":"-"},"content":""},{"lineNumber":408,"author":{"gitID":"-"},"content":"** AddTransaction"},{"lineNumber":409,"author":{"gitID":"-"},"content":""},{"lineNumber":410,"author":{"gitID":"-"},"content":"image::AddTransactionCode.png[width\u003d\"800\"]"},{"lineNumber":411,"author":{"gitID":"-"},"content":""},{"lineNumber":412,"author":{"gitID":"-"},"content":"** Add Transaction Calculation"},{"lineNumber":413,"author":{"gitID":"-"},"content":""},{"lineNumber":414,"author":{"gitID":"-"},"content":"image::CalculationUtil.png[width\u003d\"800\"]"},{"lineNumber":415,"author":{"gitID":"-"},"content":""},{"lineNumber":416,"author":{"gitID":"-"},"content":"** Debt Table Object"},{"lineNumber":417,"author":{"gitID":"-"},"content":""},{"lineNumber":418,"author":{"gitID":"-"},"content":"image::DebtTable.png[width\u003d\"800\"]"},{"lineNumber":419,"author":{"gitID":"-"},"content":""},{"lineNumber":420,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Add Transaction Event process"},{"lineNumber":421,"author":{"gitID":"-"},"content":".Component interactions for `addTransaction` command (part 2)"},{"lineNumber":422,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":423,"author":{"gitID":"Steven-Jia"},"content":"An AddressBookChangeEvent will be posted to allow the storage to handle this event and save the new transaction and balances of the involved Persons into the hard disk."},{"lineNumber":424,"author":{"gitID":"-"},"content":"The UI will also handle this event by adding the new transaction to the TransactionList Panel, updating the amount spent by each person."},{"lineNumber":425,"author":{"gitID":"-"},"content":""},{"lineNumber":426,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":427,"author":{"gitID":"-"},"content":"Why it is implemented that way"},{"lineNumber":428,"author":{"gitID":"-"},"content":""},{"lineNumber":429,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Calculation for each transaction"},{"lineNumber":430,"author":{"gitID":"-"},"content":""},{"lineNumber":431,"author":{"gitID":"-"},"content":"*** Alternative 1: A new calculationUtil object is created (Current)"},{"lineNumber":432,"author":{"gitID":"-"},"content":"** Pro: Allow reusability of calculation method since most transaction uses similar calculation formula. In addition, it ensures minimum coupling which could arise if there are many different kinds of transactions to be added in future enhancement."},{"lineNumber":433,"author":{"gitID":"-"},"content":"** Con: Create method not specific for each type of transaction calculation can be confusing and messy"},{"lineNumber":434,"author":{"gitID":"-"},"content":""},{"lineNumber":435,"author":{"gitID":"-"},"content":"*** Alternative 2: Each transaction has it own specific calculation method"},{"lineNumber":436,"author":{"gitID":"-"},"content":"** Pro: Easier to amend errors or bugs if arises"},{"lineNumber":437,"author":{"gitID":"-"},"content":"** Con: Multiple method for each transaction calculation has to be created"},{"lineNumber":438,"author":{"gitID":"-"},"content":""},{"lineNumber":439,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Storing and updating of debt for each person after each new transaction is added"},{"lineNumber":440,"author":{"gitID":"-"},"content":""},{"lineNumber":441,"author":{"gitID":"-"},"content":"*** Alternative 1: Create a HashMap Object"},{"lineNumber":442,"author":{"gitID":"-"},"content":"** Pros: Allow debt to be updated easily when a person added or deleted, or when a person information is changed"},{"lineNumber":443,"author":{"gitID":"Steven-Jia"},"content":"** Cons: Find person method is required to retrieve the debt information for each person"},{"lineNumber":444,"author":{"gitID":"-"},"content":""},{"lineNumber":445,"author":{"gitID":"-"},"content":"*** Alternative 2: Create a list of debtors or creditors unique to each person"},{"lineNumber":446,"author":{"gitID":"-"},"content":"** Pros: Debt amount can be easily retrieved"},{"lineNumber":447,"author":{"gitID":"-"},"content":"** Con: If any person is deleted or added, or when any person information is changed, we need to go through every single person debtors or creditors list to amend."},{"lineNumber":448,"author":{"gitID":"-"},"content":""},{"lineNumber":449,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `payDebt addTransactionCommand`"},{"lineNumber":450,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":451,"author":{"gitID":"Steven-Jia"},"content":"*** Alternative 1 (current choice):** Add a `transactionType` parameter that allows for a transaction to be added as a transaction of type \"payDebt\""},{"lineNumber":452,"author":{"gitID":"Steven-Jia"},"content":"** Pros: `addTransactionCommand` already works well and would simply need to include another parameter."},{"lineNumber":453,"author":{"gitID":"Steven-Jia"},"content":"** Cons: Increases the length of CLI input required from the user and adds complexity to the command by increasing the number of parameter combinations."},{"lineNumber":454,"author":{"gitID":"Steven-Jia"},"content":"* **Alternative 2:** Create a separate `payDebtCommand` that extends `addTransactionCommand`"},{"lineNumber":455,"author":{"gitID":"Steven-Jia"},"content":"** Pros: Easier for users to understand. Allows for the use of a clearer and more obvious command word (i.e. \"payDebt\")."},{"lineNumber":456,"author":{"gitID":"Steven-Jia"},"content":"** Cons: Very similar to addTransaction and will likely re-use a lot of the same code. As a new command, `payDebtCommand` would also require new tests for coverage."},{"lineNumber":457,"author":{"gitID":"-"},"content":"// end::addtransaction[]"},{"lineNumber":458,"author":{"gitID":"-"},"content":""},{"lineNumber":459,"author":{"gitID":"phmignot"},"content":"// tag::selectfeature[]"},{"lineNumber":460,"author":{"gitID":"phmignot"},"content":"\u003d\u003d\u003d  Select feature"},{"lineNumber":461,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":462,"author":{"gitID":"phmignot"},"content":"There are two ways to triggered the `Select` feature. The first one uses the Command Line Interface, by taping `Select INDEX`."},{"lineNumber":463,"author":{"gitID":"phmignot"},"content":"The second one directly through the user interface, by clicking on a `Person card`. +"},{"lineNumber":464,"author":{"gitID":"phmignot"},"content":"These two interactions will result in raising the same events. +"},{"lineNumber":465,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":466,"author":{"gitID":"phmignot"},"content":"`SelectCommand` is not a undoable command."},{"lineNumber":467,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":468,"author":{"gitID":"phmignot"},"content":"\u003d\u003d\u003d\u003d Select Command Implementation"},{"lineNumber":469,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":470,"author":{"gitID":"phmignot"},"content":".Component interactions for `select` command"},{"lineNumber":471,"author":{"gitID":"-"},"content":""},{"lineNumber":472,"author":{"gitID":"phmignot"},"content":"image::SelectCommandDiagram.png[width\u003d\"800\"]"},{"lineNumber":473,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":474,"author":{"gitID":"phmignot"},"content":"From the diagram above when users enter the command `select INDEX` to select one of the person from the persons list,"},{"lineNumber":475,"author":{"gitID":"phmignot"},"content":"`SelectCommandParser` will parse the argument, and return `SelectCommand`."},{"lineNumber":476,"author":{"gitID":"phmignot"},"content":"Next, SelectCommand will call its method `execute()`. After SelectCommand is executed, an *JumpToListRequestEvent* is raised."},{"lineNumber":477,"author":{"gitID":"-"},"content":""},{"lineNumber":478,"author":{"gitID":"phmignot"},"content":"\u003d\u003d\u003d\u003d JumpToListRequest Event process"},{"lineNumber":479,"author":{"gitID":"phmignot"},"content":".Component interactions for `JumpToListRequest` event"},{"lineNumber":480,"author":{"gitID":"phmignot"},"content":"image::JumpToListRequestEventDiagram.png[width\u003d\"800\"]"},{"lineNumber":481,"author":{"gitID":"phmignot"},"content":"With reference to the diagram above, the JumpToListRequest event is handled by the UI,with PersonListPanel, that will display a frame around the selected person, status bar of the UI will be updated, and then the UI raise a PersonPanelSelectionChanged event."},{"lineNumber":482,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":483,"author":{"gitID":"phmignot"},"content":"\u003d\u003d\u003d\u003d PersonPanelSelectionChanged Event process"},{"lineNumber":484,"author":{"gitID":"phmignot"},"content":"There are two ways to raise this event. The first one is by using this select command, the second one is by"},{"lineNumber":485,"author":{"gitID":"phmignot"},"content":"directly clicking on the `PersonCard` in the `PersonListPanel`."},{"lineNumber":486,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":487,"author":{"gitID":"phmignot"},"content":".Component interactions for `PersonPanelSelectionChanged` event"},{"lineNumber":488,"author":{"gitID":"phmignot"},"content":"image::PersonPanelSelectionChangedEventDiagram.png[width\u003d\"800\"]"},{"lineNumber":489,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":490,"author":{"gitID":"phmignot"},"content":"With reference to the diagram above, the `PersonPanelSelectionChanged` event is handled by the `Model`, that will call"},{"lineNumber":491,"author":{"gitID":"phmignot"},"content":"the `UpdateFilteredTransactionList` method in the `addressbook`, with the predicate to keep only transactions related with the person selected. +"},{"lineNumber":492,"author":{"gitID":"-"},"content":"The `FilteredTransactionList`, `FilteredDebtorList` and `FilteredCreditorList` will be updated, the UI will display the new list. Refer to the codes below."},{"lineNumber":493,"author":{"gitID":"-"},"content":""},{"lineNumber":494,"author":{"gitID":"-"},"content":"* Code Listing"},{"lineNumber":495,"author":{"gitID":"-"},"content":""},{"lineNumber":496,"author":{"gitID":"-"},"content":"** HandleSelectionChangeEvent"},{"lineNumber":497,"author":{"gitID":"-"},"content":""},{"lineNumber":498,"author":{"gitID":"-"},"content":"image::PersonSelection.png[width\u003d\"800\"]"},{"lineNumber":499,"author":{"gitID":"-"},"content":""},{"lineNumber":500,"author":{"gitID":"-"},"content":"** Update Transaction List"},{"lineNumber":501,"author":{"gitID":"-"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"image::FilterTransaction.png[width\u003d\"800\"]"},{"lineNumber":503,"author":{"gitID":"-"},"content":""},{"lineNumber":504,"author":{"gitID":"-"},"content":"** Update Debtor \u0026 Creditor List"},{"lineNumber":505,"author":{"gitID":"-"},"content":""},{"lineNumber":506,"author":{"gitID":"-"},"content":"image::Debtor_Creditor_list.png[width\u003d\"800\"]"},{"lineNumber":507,"author":{"gitID":"-"},"content":""},{"lineNumber":508,"author":{"gitID":"-"},"content":"** Transaction Predicate"},{"lineNumber":509,"author":{"gitID":"-"},"content":""},{"lineNumber":510,"author":{"gitID":"-"},"content":"image::TransactionPredicate.png[width\u003d\"800\"]"},{"lineNumber":511,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":512,"author":{"gitID":"phmignot"},"content":"\u003d\u003d\u003d\u003d PersonPanelNoSelection Event process"},{"lineNumber":513,"author":{"gitID":"phmignot"},"content":"In order to raise this event, the selection has to be cleared. There are several ways, it is possible to type"},{"lineNumber":514,"author":{"gitID":"Steven-Jia"},"content":"another command that will clear the selection, such as the `findPerson` command, or by directly deselecting a selected"},{"lineNumber":515,"author":{"gitID":"Steven-Jia"},"content":"`PersonCard` using \"*Ctrl + Click*\"."},{"lineNumber":516,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":517,"author":{"gitID":"phmignot"},"content":".Component interactions for `PersonPanelSelectionChanged` event"},{"lineNumber":518,"author":{"gitID":"phmignot"},"content":"image::PersonPanelSelectionChangedEventDiagram.png[width\u003d\"800\"]"},{"lineNumber":519,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":520,"author":{"gitID":"phmignot"},"content":"With reference to the diagram above, the `PersonPanelNoSelection` event is handled by the `Model`, that will call"},{"lineNumber":521,"author":{"gitID":"-"},"content":"the `UpdateFilteredTransactionList` method in the `addressbook`, with the predicate to keep every transactions, debtors list and creditors list."},{"lineNumber":522,"author":{"gitID":"-"},"content":"The `FilteredTransactionList`, `FilteredDebtorList` and `FilteredCreditorList` will be updated, the UI will display the new list."},{"lineNumber":523,"author":{"gitID":"-"},"content":""},{"lineNumber":524,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Why it is implemented that way"},{"lineNumber":525,"author":{"gitID":"-"},"content":""},{"lineNumber":526,"author":{"gitID":"phmignot"},"content":"This implementation can satisfy both user that are used and unused to deal with Command Line."},{"lineNumber":527,"author":{"gitID":"phmignot"},"content":"This implementation uses events that are raised if needed, so there is no need to check regularly if the selection has changed."},{"lineNumber":528,"author":{"gitID":"phmignot"},"content":"This implementation saves the application from wasting of computing resource."},{"lineNumber":529,"author":{"gitID":"phmignot"},"content":"//end::selectfeature[]"},{"lineNumber":530,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":531,"author":{"gitID":"-"},"content":"//tag::deletetransaction[]"},{"lineNumber":532,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Delete Transaction Feature"},{"lineNumber":533,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":534,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Delete Transaction Implementation"},{"lineNumber":535,"author":{"gitID":"-"},"content":""},{"lineNumber":536,"author":{"gitID":"-"},"content":"Delete transaction feature was implemented the same as add transaction feature, please refer to addTransaction sequence diagram above. Similarly, for a transaction to be deleted the specify payer or payee(s) in that transaction need to exist in the application, otherwise an exception will be thrown. However the checking is done in when deleteTransaction method is called, and uses findPersonByName method when trying to update payer or payee(s) amount if a transaction were to delete. The updating the payer or payee(s) amount spent is successfully then the indicated transaction will be deleted successfully. In addition, calculation methods from calculationUtil object used are different from add transaction command. Refer to the code below for example,"},{"lineNumber":537,"author":{"gitID":"-"},"content":""},{"lineNumber":538,"author":{"gitID":"-"},"content":"* Code Listing"},{"lineNumber":539,"author":{"gitID":"-"},"content":""},{"lineNumber":540,"author":{"gitID":"-"},"content":"** Delete Transaction"},{"lineNumber":541,"author":{"gitID":"-"},"content":""},{"lineNumber":542,"author":{"gitID":"-"},"content":"image::DeleteTransaction.png[width\u003d\"800\"]"},{"lineNumber":543,"author":{"gitID":"-"},"content":""},{"lineNumber":544,"author":{"gitID":"-"},"content":"** Delete Transaction Calculation"},{"lineNumber":545,"author":{"gitID":"-"},"content":""},{"lineNumber":546,"author":{"gitID":"-"},"content":"image::DeleteTransactionCode.png[width\u003d\"800\"]"},{"lineNumber":547,"author":{"gitID":"-"},"content":""},{"lineNumber":548,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":549,"author":{"gitID":"-"},"content":"Why it is implemented that way"},{"lineNumber":550,"author":{"gitID":"-"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Checking the existence of payer or payee in the transaction to be deleted"},{"lineNumber":552,"author":{"gitID":"-"},"content":""},{"lineNumber":553,"author":{"gitID":"-"},"content":"*** Alternative 1: Checking is done concurrently when trying to update the amount spent by the payer and payee(s) (Current)"},{"lineNumber":554,"author":{"gitID":"-"},"content":"** Pro: This allows less method to be created"},{"lineNumber":555,"author":{"gitID":"-"},"content":"** Con: If the check fail while updating the payer and payee(s) new amount spent, the payer or payee(s) new amount spent and as well as debt table will be affected and will be updated by the wrong amount."},{"lineNumber":556,"author":{"gitID":"-"},"content":""},{"lineNumber":557,"author":{"gitID":"-"},"content":"*** Alternative 2: Checking is done concurrently during parse of delete transaction argument, similar to add transaction"},{"lineNumber":558,"author":{"gitID":"-"},"content":"** Pro: This will ensure exception to be thrown at the earlier part of the execution and prevent bugs from arising due to the inexistent of payer or payee(s)"},{"lineNumber":559,"author":{"gitID":"-"},"content":"** Con: More line of codes and method has to be added"},{"lineNumber":560,"author":{"gitID":"-"},"content":"//end::deletetransaction[]"},{"lineNumber":561,"author":{"gitID":"-"},"content":""},{"lineNumber":562,"author":{"gitID":"Steven-Jia"},"content":"//tag::Debtors_Creditor_Panel[]"},{"lineNumber":563,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Debtors \u0026 Creditors List Table Mechanism"},{"lineNumber":564,"author":{"gitID":"-"},"content":""},{"lineNumber":565,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Debtors \u0026 Creditors List Table Implementation"},{"lineNumber":566,"author":{"gitID":"-"},"content":""},{"lineNumber":567,"author":{"gitID":"-"},"content":"Debtors and Creditor list will only be updated when a person in the person card panel list is selected. When a person is selected, PersonPanelSelectionChangedEvent will be handled by the UI and post an updateDebtorsAndCreditorList event which will be handled by logic as shown by the code below."},{"lineNumber":568,"author":{"gitID":"-"},"content":""},{"lineNumber":569,"author":{"gitID":"-"},"content":"* Code Listing"},{"lineNumber":570,"author":{"gitID":"-"},"content":""},{"lineNumber":571,"author":{"gitID":"-"},"content":"image::PersonSelection.png[width\u003d\"800\"]"},{"lineNumber":572,"author":{"gitID":"-"},"content":""},{"lineNumber":573,"author":{"gitID":"-"},"content":"image::Debtors_Creditor.png[width\u003d\"800\"]"},{"lineNumber":574,"author":{"gitID":"-"},"content":""},{"lineNumber":575,"author":{"gitID":"-"},"content":""},{"lineNumber":576,"author":{"gitID":"Steven-Jia"},"content":"After which to in order to set the new creditors or debtors lists, a debtList with respect to the person selected will be retrieved using debtTable.get(person) where the person is the key in debtTable object and debtList is the value. Subsequently, using the debtList of the person selected, setDebtor(debtList) and setCreditor(debtList) method will be executed, and the FilteredDebtorsLists and FilteredCreditorList will be updated as shown by the sequence diagram above. Please refer to the diagram and code below."},{"lineNumber":577,"author":{"gitID":"-"},"content":""},{"lineNumber":578,"author":{"gitID":"-"},"content":"* Code Listing"},{"lineNumber":579,"author":{"gitID":"-"},"content":""},{"lineNumber":580,"author":{"gitID":"-"},"content":"image::Debtors_CreditorCode.png[width\u003d\"800\"]"},{"lineNumber":581,"author":{"gitID":"-"},"content":""},{"lineNumber":582,"author":{"gitID":"-"},"content":"image::Debtors_CreditorCodeSet.png[width\u003d\"800\"]"},{"lineNumber":583,"author":{"gitID":"-"},"content":""},{"lineNumber":584,"author":{"gitID":"-"},"content":"image::Debtors_CreditorCodeSetCreditor.png[width\u003d\"800\"]"},{"lineNumber":585,"author":{"gitID":"-"},"content":""},{"lineNumber":586,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":587,"author":{"gitID":"-"},"content":"Why it is implemented that way"},{"lineNumber":588,"author":{"gitID":"-"},"content":""},{"lineNumber":589,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Checking the existence of payer or payee in the transaction to be deleted"},{"lineNumber":590,"author":{"gitID":"-"},"content":""},{"lineNumber":591,"author":{"gitID":"-"},"content":"** Alternative 1: The creditor list and debtor list is not unique to each person"},{"lineNumber":592,"author":{"gitID":"-"},"content":"** Pro: The current implementation allow the creditor list and debtor list to be updated responsively based on any changes on the debtTable."},{"lineNumber":593,"author":{"gitID":"-"},"content":"** Con: Once a creditor list or debtor list is updated, it no longer able to retrieve past data."},{"lineNumber":594,"author":{"gitID":"-"},"content":""},{"lineNumber":595,"author":{"gitID":"-"},"content":"** Alternative 2: Each person has a unique debtors and creditor list"},{"lineNumber":596,"author":{"gitID":"-"},"content":"** Pro:  Easy retrieve of debtors and creditors"},{"lineNumber":597,"author":{"gitID":"-"},"content":"** Con: Once a new transaction is added, all the creditors and debtors list relevant to the payer or payee(s) in the transaction have to be updated"},{"lineNumber":598,"author":{"gitID":"Steven-Jia"},"content":"//end::Debtors_Creditor_Panel[]"},{"lineNumber":599,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":600,"author":{"gitID":"Steven-Jia"},"content":"//tag::findtransaction[]"},{"lineNumber":601,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d [Proposed] Find Transaction feature"},{"lineNumber":602,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d\u003d Proposed Implementation"},{"lineNumber":603,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":604,"author":{"gitID":"Steven-Jia"},"content":"A `FindTransaction` feature may be implemented as a new command in a similar way to all other commands, especially `FindPersonCommand`. The high level implementation can be seen below."},{"lineNumber":605,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":606,"author":{"gitID":"Steven-Jia"},"content":".Component interactions for `findTransaction` command"},{"lineNumber":607,"author":{"gitID":"Steven-Jia"},"content":"image::FindTransactionHighLevelSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":608,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":609,"author":{"gitID":"Steven-Jia"},"content":"The user can call this command by typing `findTransaction [keyword]` in the command box, where [keyword] represents any number of keywords separate by spaces."},{"lineNumber":610,"author":{"gitID":"Steven-Jia"},"content":"The parse() method of the `FindTransactionCommandParser` will parse the command and and return a FindTransactionCommand. This command is then executed by the"},{"lineNumber":611,"author":{"gitID":"Steven-Jia"},"content":"`LogicManager` which achieves this by calling the execute() method of the `FindTransactionCommand`. At this point, a method named findTransaction([keyword])"},{"lineNumber":612,"author":{"gitID":"Steven-Jia"},"content":"will be called in the ModelManager to find all transactions based on the [keyword] and a `CommandResult` will be returned."},{"lineNumber":613,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":614,"author":{"gitID":"Steven-Jia"},"content":".Sequence diagram for the logic component of the `findTransaction` command"},{"lineNumber":615,"author":{"gitID":"Steven-Jia"},"content":"image::FindTransactionLogicSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":616,"author":{"gitID":"-"},"content":""},{"lineNumber":617,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":618,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":619,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Number of transactions to return"},{"lineNumber":620,"author":{"gitID":"Steven-Jia"},"content":"* **Alternative 1:** Return all transactions that match any of the keywords"},{"lineNumber":621,"author":{"gitID":"Steven-Jia"},"content":"** Pros: Easy to implement and follows the behaviour of the `findPerson` command."},{"lineNumber":622,"author":{"gitID":"Steven-Jia"},"content":"** Cons: May yield a slow response time when there are hundreds or thousands of transactions to search through."},{"lineNumber":623,"author":{"gitID":"Steven-Jia"},"content":"* **Alternative 2:** Return all transactions that match any of the keywords up to a limit"},{"lineNumber":624,"author":{"gitID":"Steven-Jia"},"content":"** Pros: Will guarantee a certain response time based on the specified limit."},{"lineNumber":625,"author":{"gitID":"Steven-Jia"},"content":"** Cons: May not be a complete search due to the arbitrary limit."},{"lineNumber":626,"author":{"gitID":"Steven-Jia"},"content":"//end::findtransaction[]"},{"lineNumber":627,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":628,"author":{"gitID":"Steven-Jia"},"content":"//tag::addgroup[]"},{"lineNumber":629,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d [Proposed] Add Group feature"},{"lineNumber":630,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d\u003d Proposed Implementation"},{"lineNumber":631,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":632,"author":{"gitID":"Steven-Jia"},"content":"An `AddGroup` feature may be implemented as a new command in a similar way to all other commands, especially the `AddPersonCommand` and the `AddTransactionCommand`."},{"lineNumber":633,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":634,"author":{"gitID":"Steven-Jia"},"content":"The purpose of this command would to add a new group to associate some number of existing persons together as a group. With groups, transactions that occur for a specific"},{"lineNumber":635,"author":{"gitID":"Steven-Jia"},"content":"event or purpose between a set number of people can be easily separated from other transactions."},{"lineNumber":636,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":637,"author":{"gitID":"Steven-Jia"},"content":"There will be an `AddGroupCommand` and `AddGroupCommandParser` that works in the same sequence as all other commands."},{"lineNumber":638,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":639,"author":{"gitID":"Steven-Jia"},"content":"The `Group` class will need to be created and should include a list of Persons and Transaction IDs. See the diagram below for the class implementation:"},{"lineNumber":640,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":641,"author":{"gitID":"Steven-Jia"},"content":".Class diagram for `Group`"},{"lineNumber":642,"author":{"gitID":"Steven-Jia"},"content":"image::GroupClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":643,"author":{"gitID":"-"},"content":""},{"lineNumber":644,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":645,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":646,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Associating transactions with groups"},{"lineNumber":647,"author":{"gitID":"Steven-Jia"},"content":"* **Alternative 1:** Require that all transactions be associated with a group"},{"lineNumber":648,"author":{"gitID":"Steven-Jia"},"content":"** Pros: Makes it easy to retrieve transactions by group"},{"lineNumber":649,"author":{"gitID":"Steven-Jia"},"content":"** Cons: Imposes the group feature on all persons and transactions, and will require current transactions to be retroactively associated with groups"},{"lineNumber":650,"author":{"gitID":"Steven-Jia"},"content":"* **Alternative 2:** Allow for both transactions that are associated and unassociated with a group"},{"lineNumber":651,"author":{"gitID":"Steven-Jia"},"content":"** Pros: Provides more flexibility for users who do not want to use the groups feature"},{"lineNumber":652,"author":{"gitID":"Steven-Jia"},"content":"** Cons: Requires complicated logic to handle the tiered categorization, especially if a transaction involves all of the same people that exist in a group"},{"lineNumber":653,"author":{"gitID":"Steven-Jia"},"content":"//end::addgroup[]"},{"lineNumber":654,"author":{"gitID":"-"},"content":""},{"lineNumber":655,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":656,"author":{"gitID":"-"},"content":""},{"lineNumber":657,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":658,"author":{"gitID":"-"},"content":""},{"lineNumber":659,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":660,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":661,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":662,"author":{"gitID":"-"},"content":""},{"lineNumber":663,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":666,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":667,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":668,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":669,"author":{"gitID":"-"},"content":""},{"lineNumber":670,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":671,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":680,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":681,"author":{"gitID":"-"},"content":""},{"lineNumber":682,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":683,"author":{"gitID":"-"},"content":""},{"lineNumber":684,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":685,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":686,"author":{"gitID":"-"},"content":""},{"lineNumber":687,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":688,"author":{"gitID":"-"},"content":""},{"lineNumber":689,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":690,"author":{"gitID":"-"},"content":""},{"lineNumber":691,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":692,"author":{"gitID":"-"},"content":""},{"lineNumber":693,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":698,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":699,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":700,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":701,"author":{"gitID":"-"},"content":""},{"lineNumber":702,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":703,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":704,"author":{"gitID":"-"},"content":""},{"lineNumber":705,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":706,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":713,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":714,"author":{"gitID":"-"},"content":""},{"lineNumber":715,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":716,"author":{"gitID":"-"},"content":""},{"lineNumber":717,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":718,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":721,"author":{"gitID":"-"},"content":""},{"lineNumber":722,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":723,"author":{"gitID":"-"},"content":""},{"lineNumber":724,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":725,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":730,"author":{"gitID":"-"},"content":""},{"lineNumber":731,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":732,"author":{"gitID":"-"},"content":""},{"lineNumber":733,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":734,"author":{"gitID":"-"},"content":""},{"lineNumber":735,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":738,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":739,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":740,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":741,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":742,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":743,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":744,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":745,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":746,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":""},{"lineNumber":749,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":750,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":751,"author":{"gitID":"-"},"content":""},{"lineNumber":752,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":753,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":754,"author":{"gitID":"-"},"content":""},{"lineNumber":755,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":756,"author":{"gitID":"-"},"content":""},{"lineNumber":757,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":758,"author":{"gitID":"-"},"content":""},{"lineNumber":759,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":760,"author":{"gitID":"-"},"content":""},{"lineNumber":761,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":762,"author":{"gitID":"-"},"content":""},{"lineNumber":763,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":764,"author":{"gitID":"-"},"content":""},{"lineNumber":765,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":766,"author":{"gitID":"-"},"content":""},{"lineNumber":767,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":768,"author":{"gitID":"-"},"content":""},{"lineNumber":769,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":770,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":771,"author":{"gitID":"-"},"content":""},{"lineNumber":772,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":773,"author":{"gitID":"-"},"content":""},{"lineNumber":774,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":777,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":778,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":779,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":780,"author":{"gitID":"-"},"content":""},{"lineNumber":781,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":782,"author":{"gitID":"-"},"content":""},{"lineNumber":783,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":784,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":785,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"[[GetStartedProgramming]]"},{"lineNumber":788,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":789,"author":{"gitID":"-"},"content":"\u003d\u003d Suggested Programming Tasks to Get Started"},{"lineNumber":790,"author":{"gitID":"-"},"content":""},{"lineNumber":791,"author":{"gitID":"-"},"content":"Suggested path for new programmers:"},{"lineNumber":792,"author":{"gitID":"-"},"content":""},{"lineNumber":793,"author":{"gitID":"-"},"content":"1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."},{"lineNumber":794,"author":{"gitID":"-"},"content":""},{"lineNumber":795,"author":{"gitID":"-"},"content":"2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."},{"lineNumber":796,"author":{"gitID":"-"},"content":""},{"lineNumber":797,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-EachComponent]]"},{"lineNumber":798,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Improving each component"},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":"Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."},{"lineNumber":801,"author":{"gitID":"-"},"content":""},{"lineNumber":802,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":803,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Logic` component"},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."},{"lineNumber":806,"author":{"gitID":"-"},"content":""},{"lineNumber":807,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":808,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."},{"lineNumber":809,"author":{"gitID":"-"},"content":""},{"lineNumber":810,"author":{"gitID":"-"},"content":". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."},{"lineNumber":811,"author":{"gitID":"-"},"content":"+"},{"lineNumber":812,"author":{"gitID":"-"},"content":"****"},{"lineNumber":813,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":814,"author":{"gitID":"-"},"content":"** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."},{"lineNumber":815,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."},{"lineNumber":816,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":817,"author":{"gitID":"-"},"content":"** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."},{"lineNumber":818,"author":{"gitID":"-"},"content":"** Add new tests for each of the aliases that you have added."},{"lineNumber":819,"author":{"gitID":"-"},"content":"** Update the user guide to document the new aliases."},{"lineNumber":820,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."},{"lineNumber":821,"author":{"gitID":"-"},"content":"****"},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":824,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Model` component"},{"lineNumber":825,"author":{"gitID":"-"},"content":""},{"lineNumber":826,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."},{"lineNumber":827,"author":{"gitID":"-"},"content":""},{"lineNumber":828,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":829,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."},{"lineNumber":830,"author":{"gitID":"-"},"content":""},{"lineNumber":831,"author":{"gitID":"-"},"content":". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."},{"lineNumber":832,"author":{"gitID":"-"},"content":"+"},{"lineNumber":833,"author":{"gitID":"-"},"content":"****"},{"lineNumber":834,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":835,"author":{"gitID":"-"},"content":"** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."},{"lineNumber":836,"author":{"gitID":"-"},"content":"** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"},{"lineNumber":837,"author":{"gitID":"-"},"content":"**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."},{"lineNumber":838,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":839,"author":{"gitID":"-"},"content":"** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."},{"lineNumber":840,"author":{"gitID":"-"},"content":"** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."},{"lineNumber":841,"author":{"gitID":"-"},"content":"** Add new tests for each of the new public methods that you have added."},{"lineNumber":842,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."},{"lineNumber":843,"author":{"gitID":"-"},"content":"*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."},{"lineNumber":844,"author":{"gitID":"-"},"content":"*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."},{"lineNumber":845,"author":{"gitID":"-"},"content":"****"},{"lineNumber":846,"author":{"gitID":"-"},"content":""},{"lineNumber":847,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":848,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Ui` component"},{"lineNumber":849,"author":{"gitID":"-"},"content":""},{"lineNumber":850,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":853,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."},{"lineNumber":856,"author":{"gitID":"-"},"content":"+"},{"lineNumber":857,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":858,"author":{"gitID":"-"},"content":"+"},{"lineNumber":859,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-before.png[width\u003d\"300\"]"},{"lineNumber":860,"author":{"gitID":"-"},"content":"+"},{"lineNumber":861,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":862,"author":{"gitID":"-"},"content":"+"},{"lineNumber":863,"author":{"gitID":"-"},"content":"image::getting-started-ui-tag-after.png[width\u003d\"300\"]"},{"lineNumber":864,"author":{"gitID":"-"},"content":"+"},{"lineNumber":865,"author":{"gitID":"-"},"content":"****"},{"lineNumber":866,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":867,"author":{"gitID":"-"},"content":"** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."},{"lineNumber":868,"author":{"gitID":"-"},"content":"** Use the .css attribute `-fx-background-color` to add a color."},{"lineNumber":869,"author":{"gitID":"-"},"content":"** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."},{"lineNumber":870,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":871,"author":{"gitID":"-"},"content":"** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."},{"lineNumber":872,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."},{"lineNumber":873,"author":{"gitID":"-"},"content":"*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."},{"lineNumber":874,"author":{"gitID":"-"},"content":"****"},{"lineNumber":875,"author":{"gitID":"-"},"content":""},{"lineNumber":876,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."},{"lineNumber":877,"author":{"gitID":"-"},"content":"+"},{"lineNumber":878,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":879,"author":{"gitID":"-"},"content":"+"},{"lineNumber":880,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-before.png[width\u003d\"200\"]"},{"lineNumber":881,"author":{"gitID":"-"},"content":"+"},{"lineNumber":882,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":883,"author":{"gitID":"-"},"content":"+"},{"lineNumber":884,"author":{"gitID":"-"},"content":"image::getting-started-ui-result-after.png[width\u003d\"200\"]"},{"lineNumber":885,"author":{"gitID":"-"},"content":"+"},{"lineNumber":886,"author":{"gitID":"-"},"content":"****"},{"lineNumber":887,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":888,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."},{"lineNumber":889,"author":{"gitID":"-"},"content":"** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."},{"lineNumber":890,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":891,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."},{"lineNumber":892,"author":{"gitID":"-"},"content":"** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."},{"lineNumber":893,"author":{"gitID":"-"},"content":"** You can write two different kinds of tests to ensure that the functionality works:"},{"lineNumber":894,"author":{"gitID":"-"},"content":"*** The unit tests for `ResultDisplay` can be modified to include verification of the color."},{"lineNumber":895,"author":{"gitID":"-"},"content":"*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."},{"lineNumber":896,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."},{"lineNumber":897,"author":{"gitID":"-"},"content":"*** Do read the commits one at a time if you feel overwhelmed."},{"lineNumber":898,"author":{"gitID":"-"},"content":"****"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."},{"lineNumber":901,"author":{"gitID":"-"},"content":"+"},{"lineNumber":902,"author":{"gitID":"-"},"content":"**Before**"},{"lineNumber":903,"author":{"gitID":"-"},"content":"+"},{"lineNumber":904,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-before.png[width\u003d\"500\"]"},{"lineNumber":905,"author":{"gitID":"-"},"content":"+"},{"lineNumber":906,"author":{"gitID":"-"},"content":"**After**"},{"lineNumber":907,"author":{"gitID":"-"},"content":"+"},{"lineNumber":908,"author":{"gitID":"-"},"content":"image::getting-started-ui-status-after.png[width\u003d\"500\"]"},{"lineNumber":909,"author":{"gitID":"-"},"content":"+"},{"lineNumber":910,"author":{"gitID":"-"},"content":"****"},{"lineNumber":911,"author":{"gitID":"-"},"content":"* Hints"},{"lineNumber":912,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"},{"lineNumber":913,"author":{"gitID":"-"},"content":"** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."},{"lineNumber":914,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":915,"author":{"gitID":"-"},"content":"** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."},{"lineNumber":916,"author":{"gitID":"-"},"content":"** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."},{"lineNumber":917,"author":{"gitID":"-"},"content":"** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."},{"lineNumber":918,"author":{"gitID":"-"},"content":"** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."},{"lineNumber":919,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."},{"lineNumber":920,"author":{"gitID":"-"},"content":"****"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":923,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d `Storage` component"},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":"*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."},{"lineNumber":926,"author":{"gitID":"-"},"content":""},{"lineNumber":927,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":928,"author":{"gitID":"-"},"content":"Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."},{"lineNumber":931,"author":{"gitID":"-"},"content":"+"},{"lineNumber":932,"author":{"gitID":"-"},"content":"****"},{"lineNumber":933,"author":{"gitID":"-"},"content":"* Hint"},{"lineNumber":934,"author":{"gitID":"-"},"content":"** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."},{"lineNumber":935,"author":{"gitID":"-"},"content":"** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."},{"lineNumber":936,"author":{"gitID":"-"},"content":"* Solution"},{"lineNumber":937,"author":{"gitID":"-"},"content":"** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."},{"lineNumber":938,"author":{"gitID":"-"},"content":"****"},{"lineNumber":939,"author":{"gitID":"-"},"content":""},{"lineNumber":940,"author":{"gitID":"-"},"content":"[[GetStartedProgramming-RemarkCommand]]"},{"lineNumber":941,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Creating a new command: `remark`"},{"lineNumber":942,"author":{"gitID":"-"},"content":""},{"lineNumber":943,"author":{"gitID":"-"},"content":"By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."},{"lineNumber":944,"author":{"gitID":"-"},"content":""},{"lineNumber":945,"author":{"gitID":"-"},"content":"*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."},{"lineNumber":946,"author":{"gitID":"-"},"content":""},{"lineNumber":947,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Description"},{"lineNumber":948,"author":{"gitID":"-"},"content":"Edits the remark for a person specified in the `INDEX`. +"},{"lineNumber":949,"author":{"gitID":"-"},"content":"Format: `remark INDEX r/[REMARK]`"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"* `remark 1 r/Likes to drink coffee.` +"},{"lineNumber":954,"author":{"gitID":"-"},"content":"Edits the remark for the first person to `Likes to drink coffee.`"},{"lineNumber":955,"author":{"gitID":"-"},"content":"* `remark 1 r/` +"},{"lineNumber":956,"author":{"gitID":"-"},"content":"Removes the remark for the first person."},{"lineNumber":957,"author":{"gitID":"-"},"content":""},{"lineNumber":958,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Step-by-step Instructions"},{"lineNumber":959,"author":{"gitID":"-"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"},{"lineNumber":961,"author":{"gitID":"-"},"content":"Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":964,"author":{"gitID":"-"},"content":""},{"lineNumber":965,"author":{"gitID":"-"},"content":". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."},{"lineNumber":966,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."},{"lineNumber":967,"author":{"gitID":"-"},"content":""},{"lineNumber":968,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":969,"author":{"gitID":"-"},"content":""},{"lineNumber":970,"author":{"gitID":"-"},"content":". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."},{"lineNumber":971,"author":{"gitID":"-"},"content":". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."},{"lineNumber":972,"author":{"gitID":"-"},"content":""},{"lineNumber":973,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"},{"lineNumber":974,"author":{"gitID":"-"},"content":"Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":977,"author":{"gitID":"-"},"content":""},{"lineNumber":978,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."},{"lineNumber":979,"author":{"gitID":"-"},"content":". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."},{"lineNumber":980,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."},{"lineNumber":981,"author":{"gitID":"-"},"content":""},{"lineNumber":982,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":983,"author":{"gitID":"-"},"content":""},{"lineNumber":984,"author":{"gitID":"-"},"content":". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."},{"lineNumber":985,"author":{"gitID":"-"},"content":". Add `RemarkCommandParserTest` that tests different boundary values"},{"lineNumber":986,"author":{"gitID":"-"},"content":"for `RemarkCommandParser`."},{"lineNumber":987,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."},{"lineNumber":988,"author":{"gitID":"-"},"content":""},{"lineNumber":989,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"},{"lineNumber":990,"author":{"gitID":"-"},"content":"Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."},{"lineNumber":991,"author":{"gitID":"-"},"content":""},{"lineNumber":992,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":993,"author":{"gitID":"-"},"content":""},{"lineNumber":994,"author":{"gitID":"-"},"content":". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."},{"lineNumber":995,"author":{"gitID":"-"},"content":". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":998,"author":{"gitID":"-"},"content":""},{"lineNumber":999,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."},{"lineNumber":1000,"author":{"gitID":"-"},"content":""},{"lineNumber":1001,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"},{"lineNumber":1002,"author":{"gitID":"-"},"content":"We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."},{"lineNumber":1003,"author":{"gitID":"-"},"content":""},{"lineNumber":1004,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1005,"author":{"gitID":"-"},"content":""},{"lineNumber":1006,"author":{"gitID":"-"},"content":". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."},{"lineNumber":1007,"author":{"gitID":"-"},"content":". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."},{"lineNumber":1008,"author":{"gitID":"-"},"content":""},{"lineNumber":1009,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1010,"author":{"gitID":"-"},"content":""},{"lineNumber":1011,"author":{"gitID":"-"},"content":". Add test for `Remark`, to test the `Remark#equals()` method."},{"lineNumber":1012,"author":{"gitID":"-"},"content":""},{"lineNumber":1013,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"},{"lineNumber":1014,"author":{"gitID":"-"},"content":"Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1017,"author":{"gitID":"-"},"content":""},{"lineNumber":1018,"author":{"gitID":"-"},"content":". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1019,"author":{"gitID":"-"},"content":". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."},{"lineNumber":1020,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"},{"lineNumber":1021,"author":{"gitID":"-"},"content":""},{"lineNumber":1022,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"},{"lineNumber":1023,"author":{"gitID":"-"},"content":"We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."},{"lineNumber":1024,"author":{"gitID":"-"},"content":""},{"lineNumber":1025,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1026,"author":{"gitID":"-"},"content":""},{"lineNumber":1027,"author":{"gitID":"-"},"content":". Add a new Xml field for `Remark`."},{"lineNumber":1028,"author":{"gitID":"-"},"content":""},{"lineNumber":1029,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1030,"author":{"gitID":"-"},"content":""},{"lineNumber":1031,"author":{"gitID":"-"},"content":". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."},{"lineNumber":1032,"author":{"gitID":"-"},"content":""},{"lineNumber":1033,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"},{"lineNumber":1034,"author":{"gitID":"-"},"content":"Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1037,"author":{"gitID":"-"},"content":""},{"lineNumber":1038,"author":{"gitID":"-"},"content":". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."},{"lineNumber":1039,"author":{"gitID":"-"},"content":". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."},{"lineNumber":1040,"author":{"gitID":"-"},"content":""},{"lineNumber":1041,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"},{"lineNumber":1042,"author":{"gitID":"-"},"content":"Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."},{"lineNumber":1043,"author":{"gitID":"-"},"content":""},{"lineNumber":1044,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1045,"author":{"gitID":"-"},"content":""},{"lineNumber":1046,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."},{"lineNumber":1047,"author":{"gitID":"-"},"content":""},{"lineNumber":1048,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1049,"author":{"gitID":"-"},"content":""},{"lineNumber":1050,"author":{"gitID":"-"},"content":". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."},{"lineNumber":1051,"author":{"gitID":"-"},"content":""},{"lineNumber":1052,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"},{"lineNumber":1053,"author":{"gitID":"-"},"content":"We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"**Main:**"},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"-"},"content":". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."},{"lineNumber":1058,"author":{"gitID":"-"},"content":""},{"lineNumber":1059,"author":{"gitID":"-"},"content":"**Tests:**"},{"lineNumber":1060,"author":{"gitID":"-"},"content":""},{"lineNumber":1061,"author":{"gitID":"-"},"content":". Update `RemarkCommandTest` to test that the `execute()` logic works."},{"lineNumber":1062,"author":{"gitID":"-"},"content":""},{"lineNumber":1063,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Full Solution"},{"lineNumber":1064,"author":{"gitID":"-"},"content":""},{"lineNumber":1065,"author":{"gitID":"-"},"content":"See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."},{"lineNumber":1066,"author":{"gitID":"-"},"content":""},{"lineNumber":1067,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1068,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":1069,"author":{"gitID":"-"},"content":""},{"lineNumber":1070,"author":{"gitID":"-"},"content":"*Target user profile*:"},{"lineNumber":1071,"author":{"gitID":"-"},"content":""},{"lineNumber":1072,"author":{"gitID":"Steven-Jia"},"content":"* traveller who shares many expenses with other people (friends, family, travel buddies, etc.)"},{"lineNumber":1073,"author":{"gitID":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":1074,"author":{"gitID":"-"},"content":"* prefers typing over mouse input"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"Steven-Jia"},"content":"*Value proposition*: simplify the shared expense budgeting process and reduce the number of \"pay-back\" transactions between individuals to only 1"},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"Steven-Jia"},"content":"[[GetStartedProgramming-FeatureContribution]]"},{"lineNumber":1080,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Feature Contribution"},{"lineNumber":1081,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1082,"author":{"gitID":"Steven-Jia"},"content":"*Kok Cong Ong*"},{"lineNumber":1083,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1084,"author":{"gitID":"-"},"content":"* Major feature: Added Payment \u0026 Paydebt add Transaction command. Payment transaction command is used when a person make a payment to one or multiple people. Paydebt Transaction is used when the user return an amount owed to another person."},{"lineNumber":1085,"author":{"gitID":"-"},"content":"* Major feature: Added Debtors \u0026 Creditors panel for the user to see who owed them money or people who they owed money to"},{"lineNumber":1086,"author":{"gitID":"-"},"content":"* Minor feature: Prevent person from deleted if his debt not clear."},{"lineNumber":1087,"author":{"gitID":"-"},"content":"* Minor feature: Prevent transaction from deleted if payer or payee in the transaction do not exist anymore."},{"lineNumber":1088,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1089,"author":{"gitID":"phmignot"},"content":"*Paul Henri Mignot*"},{"lineNumber":1090,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1091,"author":{"gitID":"phmignot"},"content":"* Major feature: Update the User Interface to display the list of transactions."},{"lineNumber":1092,"author":{"gitID":"-"},"content":"* Major feature: Update the User Interface to display the list of transactions related to the person selected"},{"lineNumber":1093,"author":{"gitID":"phmignot"},"content":"* Minor feature: Allow user to delete their transactions."},{"lineNumber":1094,"author":{"gitID":"Steven-Jia"},"content":"* Minor feature: Person information in the transaction list to be updated when the person is edited (e.g name)."},{"lineNumber":1095,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1096,"author":{"gitID":"Steven-Jia"},"content":"*Wen Qin Jia*"},{"lineNumber":1097,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1098,"author":{"gitID":"Steven-Jia"},"content":"* Major feature: Allow users to split their expenses \u003c\u003csplit-evenly,evenly\u003e\u003e, \u003c\u003csplit-by-percentage,by percentage\u003e\u003e or \u003c\u003csplit-by-units,by units\u003e\u003e"},{"lineNumber":1099,"author":{"gitID":"Steven-Jia"},"content":"* Minor feature: Calculate and display the total amount spent for every user based on all of their transactions"},{"lineNumber":1100,"author":{"gitID":"Steven-Jia"},"content":"* Minor feature: Update the Person class with a Balance field in order to track, display, and store a person\u0027s total amount spent"},{"lineNumber":1101,"author":{"gitID":"Steven-Jia"},"content":"* Minor feature: Enable multiple payees for transactions"},{"lineNumber":1102,"author":{"gitID":"Steven-Jia"},"content":"* Minor feature: Ensure correct amount is entered for paydebt transactions (e.g debt must exist, amount entered cannot be more than the debt owed)"},{"lineNumber":1103,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1104,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":1108,"author":{"gitID":"-"},"content":""},{"lineNumber":1109,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":1110,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1111,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":1112,"author":{"gitID":"phmignot"},"content":"|`* * *` |user |add an expense (split evenly to those who are involved) to the application | make a record of it"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"phmignot"},"content":"|`* * *` | user |specify which users were involved with an expense|"},{"lineNumber":1115,"author":{"gitID":"-"},"content":""},{"lineNumber":1116,"author":{"gitID":"phmignot"},"content":"|`* * *` | user |see all transactions recorded by users in a table |see a complete history of what was paid"},{"lineNumber":1117,"author":{"gitID":"-"},"content":""},{"lineNumber":1118,"author":{"gitID":"Steven-Jia"},"content":"|`* * *` |user |see how much I owe to or am owed by each individual|"},{"lineNumber":1119,"author":{"gitID":"-"},"content":""},{"lineNumber":1120,"author":{"gitID":"-"},"content":"|`* * *` |user |see how much I have spent during the trip|"},{"lineNumber":1121,"author":{"gitID":"-"},"content":""},{"lineNumber":1122,"author":{"gitID":"phmignot"},"content":"|`* * *` |user |record an offline payment to or from another user |update the balance between the 2 users"},{"lineNumber":1123,"author":{"gitID":"-"},"content":""},{"lineNumber":1124,"author":{"gitID":"phmignot"},"content":"|`* * *` |user |specify the type/category of my expense (food, accommodation, transport etc) when adding it |keep better track of my expenses"},{"lineNumber":1125,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1126,"author":{"gitID":"Steven-Jia"},"content":"|`* * *` |user |search for a specific expense |quickly find the transaction that I am interested in"},{"lineNumber":1127,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1128,"author":{"gitID":"Steven-Jia"},"content":"|`* * *` |user |filter transactions by various criteria |see similar transactions grouped together"},{"lineNumber":1129,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1130,"author":{"gitID":"Steven-Jia"},"content":"|`* * *` |user |split an expense by percentage so that unevenly shared expenses can be properly attributed to any individual that was involved|"},{"lineNumber":1131,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1132,"author":{"gitID":"phmignot"},"content":"|`* * *` |user |split an expense by units |properly attribute unevenly shared expenses to any individual that was involved"},{"lineNumber":1133,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1134,"author":{"gitID":"Steven-Jia"},"content":"|`* * *` |user |delete an expense |remove a mistakenly entered or unwanted expense"},{"lineNumber":1135,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1136,"author":{"gitID":"phmignot"},"content":"|`* * *` |user |edit an expense on the application |correct any mistakes I may have made"},{"lineNumber":1137,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1138,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |admin user |create a new group |separate different trips by the people who were involved"},{"lineNumber":1139,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1140,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |admin user |add people to a group |know who was involved with the expenses that were shared"},{"lineNumber":1141,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1142,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |admin user |delete people from a group |remove those are are no longer involved with the shared expenses"},{"lineNumber":1143,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1144,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |sort my expense into different categories |keep better track of my expenses"},{"lineNumber":1145,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":1146,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |comment on an expense |clarify an expense or ask questions about it"},{"lineNumber":1147,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1148,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |admin user |set whether other group members can add new people to the group |control who is added"},{"lineNumber":1149,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1150,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |request payment from others who owe me money via social media or a chat messenger |"},{"lineNumber":1151,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1152,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |change the currency of the expense I am adding |have it match the currency in which I paid"},{"lineNumber":1153,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1154,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |see all listed expenses converted to the currency of my choice |better gauge how much was spent"},{"lineNumber":1155,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1156,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |see the transactions in graphical form |better visualize the balances of each group member"},{"lineNumber":1157,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1158,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user in a group for which the trip has ended |archive the group |no expenses can be added anymore"},{"lineNumber":1159,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1160,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |log in to see my account |access my secured information"},{"lineNumber":1161,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1162,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |log out of my account |ensure that my information is inaccessible to others"},{"lineNumber":1163,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1164,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |set a deadline for when payments need to made |members of the group know when they can expect to be paid"},{"lineNumber":1165,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1166,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |record the location where I spent my money |keep track where I spent the most/least money during the trip"},{"lineNumber":1167,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1168,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |set a default currency for the group |"},{"lineNumber":1169,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1170,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |add a recurring expense |avoid having to add it more than once"},{"lineNumber":1171,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1172,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user in a group with recurring expenses |remove a recurring expense |"},{"lineNumber":1173,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1174,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user in an archived group |reopen the group |add any forgotten expenses"},{"lineNumber":1175,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1176,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user with permission to add new people |add new people to the group |"},{"lineNumber":1177,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1178,"author":{"gitID":"Steven-Jia"},"content":"|`* *` |user |transfer money directly to a friend to pay a debt |"},{"lineNumber":1179,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1180,"author":{"gitID":"Steven-Jia"},"content":"|`*` |user |instantly message other members |communicate with them directly in the application"},{"lineNumber":1181,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1182,"author":{"gitID":"Steven-Jia"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":1183,"author":{"gitID":"-"},"content":""},{"lineNumber":1184,"author":{"gitID":"-"},"content":"//tag::usecases[]"},{"lineNumber":1185,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1186,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":1187,"author":{"gitID":"-"},"content":""},{"lineNumber":1188,"author":{"gitID":"Steven-Jia"},"content":"(For all use cases below, the *System* is `SmartSplit` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":1189,"author":{"gitID":"-"},"content":""},{"lineNumber":1190,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Use case: Add all persons involved in the trip"},{"lineNumber":1191,"author":{"gitID":"-"},"content":""},{"lineNumber":1192,"author":{"gitID":"Steven-Jia"},"content":"*Preconditions*"},{"lineNumber":1193,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1194,"author":{"gitID":"Steven-Jia"},"content":"1.  User is an admin user for the group"},{"lineNumber":1195,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1196,"author":{"gitID":"Steven-Jia"},"content":"*MSS*"},{"lineNumber":1197,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1198,"author":{"gitID":"Steven-Jia"},"content":"1.  Admin user requests to add members to group"},{"lineNumber":1199,"author":{"gitID":"Steven-Jia"},"content":"2.  SmartSplit prompts adminuser for the names of the members to be added"},{"lineNumber":1200,"author":{"gitID":"Steven-Jia"},"content":"3.  User enters the names of the members to be added"},{"lineNumber":1201,"author":{"gitID":"Steven-Jia"},"content":"4.  SmartSplit adds the new members to the group"},{"lineNumber":1202,"author":{"gitID":"Steven-Jia"},"content":"+"},{"lineNumber":1203,"author":{"gitID":"Steven-Jia"},"content":"Use case ends."},{"lineNumber":1204,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1205,"author":{"gitID":"Steven-Jia"},"content":"[discrete]"},{"lineNumber":1206,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Add payment type transaction"},{"lineNumber":1207,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1208,"author":{"gitID":"Steven-Jia"},"content":"*MSS*"},{"lineNumber":1209,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1210,"author":{"gitID":"-"},"content":"1.  User requests to add payment type transaction"},{"lineNumber":1211,"author":{"gitID":"Steven-Jia"},"content":"2.  SmartSplit requests transaction details from the user"},{"lineNumber":1212,"author":{"gitID":"Steven-Jia"},"content":"3.  User enters the transaction details"},{"lineNumber":1213,"author":{"gitID":"Steven-Jia"},"content":"4.  SmartSplit records the transaction"},{"lineNumber":1214,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1215,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1216,"author":{"gitID":"-"},"content":""},{"lineNumber":1217,"author":{"gitID":"Steven-Jia"},"content":"*Extensions*"},{"lineNumber":1218,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1219,"author":{"gitID":"Steven-Jia"},"content":"* 3a. User enters details in an incorrect format."},{"lineNumber":1220,"author":{"gitID":"-"},"content":""},{"lineNumber":1221,"author":{"gitID":"-"},"content":" SmartSplit shows an error message. Use case resume at 3."},{"lineNumber":1222,"author":{"gitID":"-"},"content":""},{"lineNumber":1223,"author":{"gitID":"-"},"content":"* 3b. User enters a payer or payee(s) name who does not exist in the application."},{"lineNumber":1224,"author":{"gitID":"-"},"content":""},{"lineNumber":1225,"author":{"gitID":"-"},"content":" SmartSplit shows an error message. Use case resume at 3 or use case for add person."},{"lineNumber":1226,"author":{"gitID":"-"},"content":""},{"lineNumber":1227,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1228,"author":{"gitID":"Steven-Jia"},"content":"\u003d\u003d\u003d Use case: Add paydebt type transaction"},{"lineNumber":1229,"author":{"gitID":"-"},"content":""},{"lineNumber":1230,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1231,"author":{"gitID":"-"},"content":""},{"lineNumber":1232,"author":{"gitID":"-"},"content":"1.  User requests to add paydebt type transaction"},{"lineNumber":1233,"author":{"gitID":"Steven-Jia"},"content":"2.  SmartSplit requests transaction details from the user"},{"lineNumber":1234,"author":{"gitID":"Steven-Jia"},"content":"3.  User enters the transaction details"},{"lineNumber":1235,"author":{"gitID":"Steven-Jia"},"content":"4.  SmartSplit records the transaction"},{"lineNumber":1236,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1237,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1238,"author":{"gitID":"-"},"content":""},{"lineNumber":1239,"author":{"gitID":"Steven-Jia"},"content":"*Extensions*"},{"lineNumber":1240,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1241,"author":{"gitID":"Steven-Jia"},"content":"* 3a. User enters details in an incorrect format."},{"lineNumber":1242,"author":{"gitID":"-"},"content":""},{"lineNumber":1243,"author":{"gitID":"-"},"content":" SmartSplit shows an error message. Use case resume at 3."},{"lineNumber":1244,"author":{"gitID":"-"},"content":""},{"lineNumber":1245,"author":{"gitID":"-"},"content":"* 3b. User enters a payer or payee name who does not exist in the application."},{"lineNumber":1246,"author":{"gitID":"-"},"content":""},{"lineNumber":1247,"author":{"gitID":"-"},"content":" SmartSplit shows an error message. Use case resume at 3."},{"lineNumber":1248,"author":{"gitID":"-"},"content":""},{"lineNumber":1249,"author":{"gitID":"-"},"content":" * 3c. User enters a payee name who does not owed any amount to the payer."},{"lineNumber":1250,"author":{"gitID":"-"},"content":""},{"lineNumber":1251,"author":{"gitID":"-"},"content":"  SmartSplit shows an error message. Use case resume at 3."},{"lineNumber":1252,"author":{"gitID":"-"},"content":""},{"lineNumber":1253,"author":{"gitID":"-"},"content":"* 3d. User enters a wrong amount."},{"lineNumber":1254,"author":{"gitID":"-"},"content":""},{"lineNumber":1255,"author":{"gitID":"-"},"content":" SmartSplit shows an error message. Use case resume at 3."},{"lineNumber":1256,"author":{"gitID":"-"},"content":""},{"lineNumber":1257,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1258,"author":{"gitID":"-"},"content":""},{"lineNumber":1259,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: delete a person"},{"lineNumber":1260,"author":{"gitID":"-"},"content":""},{"lineNumber":1261,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1262,"author":{"gitID":"-"},"content":""},{"lineNumber":1263,"author":{"gitID":"-"},"content":"1.  User requests to delete a person"},{"lineNumber":1264,"author":{"gitID":"-"},"content":"2.  SmartSplit requests delete person index"},{"lineNumber":1265,"author":{"gitID":"-"},"content":"3.  User enters the delete person index"},{"lineNumber":1266,"author":{"gitID":"-"},"content":"4.  SmartSplit delete the person from the application"},{"lineNumber":1267,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1268,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1269,"author":{"gitID":"-"},"content":""},{"lineNumber":1270,"author":{"gitID":"Steven-Jia"},"content":"*Extensions*"},{"lineNumber":1271,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1272,"author":{"gitID":"-"},"content":"* 3a. User enters the wrong index"},{"lineNumber":1273,"author":{"gitID":"-"},"content":""},{"lineNumber":1274,"author":{"gitID":"-"},"content":" SmartSplit shows an error message. Use case resume at 3."},{"lineNumber":1275,"author":{"gitID":"-"},"content":""},{"lineNumber":1276,"author":{"gitID":"-"},"content":"* 3b. User enter the person index whom the person has outstanding debt"},{"lineNumber":1277,"author":{"gitID":"-"},"content":""},{"lineNumber":1278,"author":{"gitID":"-"},"content":" SmartSplit shows an error message. Use case resume at 3 or ends."},{"lineNumber":1279,"author":{"gitID":"-"},"content":""},{"lineNumber":1280,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1281,"author":{"gitID":"-"},"content":""},{"lineNumber":1282,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: delete a transaction"},{"lineNumber":1283,"author":{"gitID":"-"},"content":""},{"lineNumber":1284,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1285,"author":{"gitID":"-"},"content":""},{"lineNumber":1286,"author":{"gitID":"-"},"content":"1.  User requests to delete a transaction"},{"lineNumber":1287,"author":{"gitID":"-"},"content":"2.  SmartSplit requests delete transaction index"},{"lineNumber":1288,"author":{"gitID":"-"},"content":"3.  User enters the delete transaction index"},{"lineNumber":1289,"author":{"gitID":"-"},"content":"4.  SmartSplit delete the transaction from the application"},{"lineNumber":1290,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1291,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1292,"author":{"gitID":"-"},"content":""},{"lineNumber":1293,"author":{"gitID":"Steven-Jia"},"content":"*Extensions*"},{"lineNumber":1294,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1295,"author":{"gitID":"-"},"content":"* 3a. User enters the wrong index"},{"lineNumber":1296,"author":{"gitID":"-"},"content":""},{"lineNumber":1297,"author":{"gitID":"-"},"content":" SmartSplit shows an error message. Use case resume at 3."},{"lineNumber":1298,"author":{"gitID":"-"},"content":""},{"lineNumber":1299,"author":{"gitID":"-"},"content":"* 3b. User enter the transaction index whom the payer or payee(s) do not exist"},{"lineNumber":1300,"author":{"gitID":"-"},"content":""},{"lineNumber":1301,"author":{"gitID":"-"},"content":" SmartSplit shows an error message. Use case resume at 3 or ends."},{"lineNumber":1302,"author":{"gitID":"-"},"content":""},{"lineNumber":1303,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1304,"author":{"gitID":"-"},"content":""},{"lineNumber":1305,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Check debtors \u0026 creditors list"},{"lineNumber":1306,"author":{"gitID":"-"},"content":""},{"lineNumber":1307,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1308,"author":{"gitID":"-"},"content":""},{"lineNumber":1309,"author":{"gitID":"-"},"content":"1.  User requests to check the debtors \u0026 creditors list"},{"lineNumber":1310,"author":{"gitID":"-"},"content":"2.  User select the person to check"},{"lineNumber":1311,"author":{"gitID":"-"},"content":"3.  SmartSplit displayed all the debtors and creditors with respect to the person selected"},{"lineNumber":1312,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1313,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1314,"author":{"gitID":"-"},"content":""},{"lineNumber":1315,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1316,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Check relevant transactions to the related to him/her"},{"lineNumber":1317,"author":{"gitID":"-"},"content":""},{"lineNumber":1318,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1319,"author":{"gitID":"-"},"content":""},{"lineNumber":1320,"author":{"gitID":"-"},"content":"1.  User requests to relevant transaction related to him/her"},{"lineNumber":1321,"author":{"gitID":"-"},"content":"2.  User select the person to check"},{"lineNumber":1322,"author":{"gitID":"-"},"content":"3.  SmartSplit displayed all the transactions with respect to the person selected"},{"lineNumber":1323,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1324,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1325,"author":{"gitID":"-"},"content":""},{"lineNumber":1326,"author":{"gitID":"Steven-Jia"},"content":"*Extensions*"},{"lineNumber":1327,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":"* 3a. User un-select the person selected"},{"lineNumber":1329,"author":{"gitID":"-"},"content":""},{"lineNumber":1330,"author":{"gitID":"-"},"content":"    SmartSplit re-displayed all the transactions"},{"lineNumber":1331,"author":{"gitID":"-"},"content":""},{"lineNumber":1332,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1333,"author":{"gitID":"-"},"content":"//end::usecases[]"},{"lineNumber":1334,"author":{"gitID":"-"},"content":""},{"lineNumber":1335,"author":{"gitID":"Steven-Jia"},"content":"//tag::nonfunctionalrequirements[]"},{"lineNumber":1336,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1337,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1340,"author":{"gitID":"Steven-Jia"},"content":".  Should be able to hold up to 100 users without a noticeable sluggishness (i.e. delay of more than 3 seconds) in performance for typical usage."},{"lineNumber":1341,"author":{"gitID":"Steven-Jia"},"content":".  Should be able to hold up to 1000 transactions per group without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1342,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1343,"author":{"gitID":"Steven-Jia"},"content":".  Should respond to user input within 3 seconds."},{"lineNumber":1344,"author":{"gitID":"Steven-Jia"},"content":".  Should work in both 32-bit and 64-bit environments."},{"lineNumber":1345,"author":{"gitID":"Steven-Jia"},"content":".  Should be usable by a novice who has never used this system before."},{"lineNumber":1346,"author":{"gitID":"Steven-Jia"},"content":".  The project is expected to adhere to a schedule that delivers a feature/bug-fix update every week."},{"lineNumber":1347,"author":{"gitID":"Steven-Jia"},"content":"//end::nonfunctionalrequirements[]"},{"lineNumber":1348,"author":{"gitID":"-"},"content":""},{"lineNumber":1349,"author":{"gitID":"Steven-Jia"},"content":"//tag::glossary[]"},{"lineNumber":1350,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1351,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1352,"author":{"gitID":"-"},"content":""},{"lineNumber":1353,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1354,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1355,"author":{"gitID":"-"},"content":""},{"lineNumber":1356,"author":{"gitID":"-"},"content":"[[private-contact-detail]] Private contact detail::"},{"lineNumber":1357,"author":{"gitID":"-"},"content":"A contact detail that is not meant to be shared with others"},{"lineNumber":1358,"author":{"gitID":"-"},"content":""},{"lineNumber":1359,"author":{"gitID":"Steven-Jia"},"content":"[[payment]] Payment::"},{"lineNumber":1360,"author":{"gitID":"Steven-Jia"},"content":"A type of transaction that allows a user to record a payment that was made on behalf of himself/herself and at least one other person"},{"lineNumber":1361,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1362,"author":{"gitID":"Steven-Jia"},"content":"[[paydebt]] Paydebt::"},{"lineNumber":1363,"author":{"gitID":"Steven-Jia"},"content":"A type of transaction that allows a user to record a payment that was made to another person to reduce the debt owed"},{"lineNumber":1364,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1365,"author":{"gitID":"Steven-Jia"},"content":"[[split-evenly]] Split evenly::"},{"lineNumber":1366,"author":{"gitID":"Steven-Jia"},"content":"A method of dividing the total cost of an expense by splitting it in even parts over the total number of users involved with that expense"},{"lineNumber":1367,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1368,"author":{"gitID":"Steven-Jia"},"content":"[[split-by-units]] Split by units::"},{"lineNumber":1369,"author":{"gitID":"Steven-Jia"},"content":"A method of dividing the total cost of an expense by units. The amount that each person owes is the number of units that they are responsible for divided by the total number of units"},{"lineNumber":1370,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1371,"author":{"gitID":"Steven-Jia"},"content":"[[split-by-percentage]] Split by percentage::"},{"lineNumber":1372,"author":{"gitID":"Steven-Jia"},"content":"A method of dividing the total cost of an expense by percentages that add up to 100. The amount that each person owes is the percentage that they are responsible for multiplied by the amount"},{"lineNumber":1373,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1374,"author":{"gitID":"Steven-Jia"},"content":"[[recurring-expense]] Recurring expense::"},{"lineNumber":1375,"author":{"gitID":"Steven-Jia"},"content":"An expense that does not change in amount over a repeated time period (e.g. every month) and is always incurred by a user"},{"lineNumber":1376,"author":{"gitID":"Steven-Jia"},"content":"//end::glossary[]"},{"lineNumber":1377,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1378,"author":{"gitID":"-"},"content":"//tag::manualtesting[]"},{"lineNumber":1379,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1380,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1381,"author":{"gitID":"-"},"content":""},{"lineNumber":1382,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1383,"author":{"gitID":"-"},"content":""},{"lineNumber":1384,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1385,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1386,"author":{"gitID":"-"},"content":""},{"lineNumber":1387,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1388,"author":{"gitID":"-"},"content":""},{"lineNumber":1389,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1390,"author":{"gitID":"-"},"content":""},{"lineNumber":1391,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1392,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1393,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1394,"author":{"gitID":"-"},"content":""},{"lineNumber":1395,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1396,"author":{"gitID":"-"},"content":""},{"lineNumber":1397,"author":{"gitID":"-"},"content":".. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":1398,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1399,"author":{"gitID":"-"},"content":"   Expected: The most recent window size and location is retained."},{"lineNumber":1400,"author":{"gitID":"-"},"content":""},{"lineNumber":1401,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a person"},{"lineNumber":1402,"author":{"gitID":"-"},"content":""},{"lineNumber":1403,"author":{"gitID":"Steven-Jia"},"content":". A person can be added only if the name is different, regardless of case (e.g. John Doe, john doe, and JOHN DOE are considered to all be the same)."},{"lineNumber":1404,"author":{"gitID":"-"},"content":".. Test case: `addPerson n/john Doe p/98765432 e/johnd@example.com t/friends t/owesMoney`, `addPerson n/joHn DoE p/98765432 e/johnd@example.com t/friends t/owesMoney`"},{"lineNumber":1405,"author":{"gitID":"-"},"content":"   Expected: This person already exists in the address book. The name must be unique."},{"lineNumber":1406,"author":{"gitID":"-"},"content":".. Test case: `addPerson n/Bernice Yu p/98765432 e/johnd@example.com t/friends t/owesMoney`"},{"lineNumber":1407,"author":{"gitID":"-"},"content":"   Expected: New person added: Bernice Yu Phone: 98765432 Email: johnd@example.com Balance: 0.00 Tags: [owesMoney][friends]"},{"lineNumber":1408,"author":{"gitID":"-"},"content":""},{"lineNumber":1409,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Adding a transaction"},{"lineNumber":1410,"author":{"gitID":"-"},"content":""},{"lineNumber":1411,"author":{"gitID":"Steven-Jia"},"content":". A transaction can be either of type \u003c\u003cpayment,payment\u003e\u003e or \u003c\u003cpaydebt,paydebt\u003e\u003e."},{"lineNumber":1412,"author":{"gitID":"-"},"content":".. A payment type transaction should be used if a person is making a payment for multiple people."},{"lineNumber":1413,"author":{"gitID":"-"},"content":".. A paydebt type transaction should be used when a person have already returned the amount owed to other person."},{"lineNumber":1414,"author":{"gitID":"-"},"content":".. All transactions can only be made if the payer or payee(s) indicated in the transaction exist in the application"},{"lineNumber":1415,"author":{"gitID":"-"},"content":"   ... Test case (if no person is added): `addtransaction type/payment payer/John Doe a/120.00 d/Taxi ride to NUS payee/Alex Yeoh payee/Bernice Yu m/evenly`"},{"lineNumber":1416,"author":{"gitID":"-"},"content":""},{"lineNumber":1417,"author":{"gitID":"-"},"content":"       Expected: The specified payer or payee(s) do not exist."},{"lineNumber":1418,"author":{"gitID":"-"},"content":""},{"lineNumber":1419,"author":{"gitID":"-"},"content":".. Before you proceed, please add the following persons to the application: 1)`addPerson n/John Doe p/98765432 e/johnd@example.com t/friends t/owesMoney`, 2)`addPerson n/Bernice Yu p/98765432 e/johnd@example.com t/friends t/owesMoney`, 3) `addPerson n/Alex Yeoh p/98765432 e/johnd@example.com t/friends t/owesMoney`"},{"lineNumber":1420,"author":{"gitID":"-"},"content":""},{"lineNumber":1421,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Payment Type Transaction"},{"lineNumber":1422,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":1423,"author":{"gitID":"Steven-Jia"},"content":". A payment transaction allows one payer to one or more payees. There are three types of payment methods, \u003c\u003csplit-evenly,split evenly\u003e\u003e, \u003c\u003csplit-by-percentage,by percentage\u003e\u003e or \u003c\u003csplit-by-units,by units\u003e\u003e. After each payment transaction is added, the amount spent based on the type of splitting methods indicated, will be updated and added onto the \"Amount Spent\" person panel card."},{"lineNumber":1424,"author":{"gitID":"-"},"content":".. Split Evenly(Default method)"},{"lineNumber":1425,"author":{"gitID":"-"},"content":"... Test case: `addtransaction type/payment payer/John Doe a/120.00 d/Taxi ride to NUS payee/Alex Yeoh payee/Bernice Yu m/evenly`"},{"lineNumber":1426,"author":{"gitID":"-"},"content":""},{"lineNumber":1427,"author":{"gitID":"-"},"content":"   Expected: New transaction added"},{"lineNumber":1428,"author":{"gitID":"-"},"content":""},{"lineNumber":1429,"author":{"gitID":"-"},"content":"... Test case: `addtransaction type/payment payer/John Doe a/120.00 d/Taxi ride to NUS payee/Alex Yeoh payee/Bernice Yu`"},{"lineNumber":1430,"author":{"gitID":"-"},"content":""},{"lineNumber":1431,"author":{"gitID":"-"},"content":"   Expected: New transaction added"},{"lineNumber":1432,"author":{"gitID":"-"},"content":""},{"lineNumber":1433,"author":{"gitID":"-"},"content":".. By Percentage(percentages indicated must be seperated by"},{"lineNumber":1434,"author":{"gitID":"-"},"content":""},{"lineNumber":1435,"author":{"gitID":"-"},"content":"... Test case: `addtransaction type/payment payer/Alex Yeoh a/50.00 d/Team dinner payee/John Doe payee/Bernice Yu m/percentage percentage/40, 40, 20`"},{"lineNumber":1436,"author":{"gitID":"-"},"content":""},{"lineNumber":1437,"author":{"gitID":"-"},"content":"   Expected: New transaction added"},{"lineNumber":1438,"author":{"gitID":"-"},"content":""},{"lineNumber":1439,"author":{"gitID":"-"},"content":"... Test case: `addtransaction type/payment payer/Alex Yeoh a/50.00 d/Team dinner payee/John Doe payee/Bernice Yu m/percentage percentage/40, 40`"},{"lineNumber":1440,"author":{"gitID":"-"},"content":""},{"lineNumber":1441,"author":{"gitID":"-"},"content":"   Expected: The number of percentage values does not match the number of persons involved. Remember to include the payer in the count."},{"lineNumber":1442,"author":{"gitID":"-"},"content":""},{"lineNumber":1443,"author":{"gitID":"-"},"content":"... Test case: `addtransaction type/payment payer/Alex Yeoh a/50.00 d/Team dinner payee/John Doe payee/Bernice Yu m/percentage percentage/40, 40, 50`"},{"lineNumber":1444,"author":{"gitID":"-"},"content":""},{"lineNumber":1445,"author":{"gitID":"-"},"content":"   Expected: The sum of the percentages does not equal 100."},{"lineNumber":1446,"author":{"gitID":"-"},"content":""},{"lineNumber":1447,"author":{"gitID":"-"},"content":"... Test case: `addtransaction type/payment payer/Alex Yeoh a/50.00 d/Team dinner payee/John Doe payee/Bernice Yu m/percentage percentage/40, 40,`"},{"lineNumber":1448,"author":{"gitID":"-"},"content":""},{"lineNumber":1449,"author":{"gitID":"-"},"content":"   Expected: List of percentages can only take comma-separated integers"},{"lineNumber":1450,"author":{"gitID":"-"},"content":""},{"lineNumber":1451,"author":{"gitID":"-"},"content":"... Test case: `addtransaction type/payment payer/Alex Yeoh a/50.00 d/Team dinner payee/John Doe payee/Bernice Yu m/percentage percentage/40, 40 .20`"},{"lineNumber":1452,"author":{"gitID":"-"},"content":""},{"lineNumber":1453,"author":{"gitID":"-"},"content":"   Expected: List of percentages can only take comma-separated integers"},{"lineNumber":1454,"author":{"gitID":"-"},"content":""},{"lineNumber":1455,"author":{"gitID":"-"},"content":".. By Units"},{"lineNumber":1456,"author":{"gitID":"-"},"content":""},{"lineNumber":1457,"author":{"gitID":"-"},"content":"... Test case: `addtransaction type/payment payer/Bernice Yu a/35.00 d/Team apparel items payee/Alex Yeoh payee/John Doe m/units units/4, 2, 1`"},{"lineNumber":1458,"author":{"gitID":"-"},"content":""},{"lineNumber":1459,"author":{"gitID":"-"},"content":"   Expected: New transaction added"},{"lineNumber":1460,"author":{"gitID":"-"},"content":""},{"lineNumber":1461,"author":{"gitID":"-"},"content":"... Test case: `addtransaction type/payment payer/Bernice Yu a/35.00 d/Team apparel items payee/Alex Yeoh payee/John Doe m/units units/4, 2,`"},{"lineNumber":1462,"author":{"gitID":"-"},"content":""},{"lineNumber":1463,"author":{"gitID":"-"},"content":"   Expected: List of units can only take comma-separated integers"},{"lineNumber":1464,"author":{"gitID":"-"},"content":""},{"lineNumber":1465,"author":{"gitID":"-"},"content":"... Test case: `addtransaction type/payment payer/Alex Yeoh a/50.00 d/Team dinner payee/John Doe payee/Bernice Yu m/percentage percentage/4, 2`"},{"lineNumber":1466,"author":{"gitID":"-"},"content":""},{"lineNumber":1467,"author":{"gitID":"-"},"content":"   Expected: The number of units values does not match the number of persons involved. Remember to include the payer in the count."},{"lineNumber":1468,"author":{"gitID":"-"},"content":""},{"lineNumber":1469,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Paydebt Type Transaction"},{"lineNumber":1470,"author":{"gitID":"-"},"content":""},{"lineNumber":1471,"author":{"gitID":"Steven-Jia"},"content":". A paydebt type transaction only allows one payer to one payee."},{"lineNumber":1472,"author":{"gitID":"-"},"content":".. Before you proceed, please clear the application, `clear` and add the following persons and transaction to the application: 1)`addPerson n/John Doe p/98765432 e/johnd@example.com t/friends t/owesMoney`, 2)`addPerson n/Bernice Yu p/98765432 e/johnd@example.com t/friends t/owesMoney`, 3) `addPerson n/Alex Yeoh p/98765432 e/johnd@example.com t/friends t/owesMoney` and follow the order of each test case below."},{"lineNumber":1473,"author":{"gitID":"-"},"content":""},{"lineNumber":1474,"author":{"gitID":"-"},"content":" 4)`addtransaction type/payment payer/John Doe a/120.00 d/Taxi ride to NUS payee/Alex Yeoh payee/Bernice Yu m/evenly`"},{"lineNumber":1475,"author":{"gitID":"-"},"content":""},{"lineNumber":1476,"author":{"gitID":"-"},"content":" ... Test case: `addtransaction type/paydebt payer/Bernice Yu a/50.00 d/Taxi ride to NUS payee/John Doe` (Amount pay more than amount owed)"},{"lineNumber":1477,"author":{"gitID":"-"},"content":""},{"lineNumber":1478,"author":{"gitID":"-"},"content":"    Expected: Payee is being overpaid. Ensure that the transaction amount does not exceed the balance owed."},{"lineNumber":1479,"author":{"gitID":"-"},"content":""},{"lineNumber":1480,"author":{"gitID":"-"},"content":" ... Test case: `addtransaction type/paydebt payer/Bernice Yu a/40.00 d/Taxi ride to NUS payee/John Doe`"},{"lineNumber":1481,"author":{"gitID":"-"},"content":""},{"lineNumber":1482,"author":{"gitID":"-"},"content":"    Expected: New transaction added"},{"lineNumber":1483,"author":{"gitID":"-"},"content":""},{"lineNumber":1484,"author":{"gitID":"-"},"content":" ... Test case: `addtransaction type/paydebt payer/Bernice Yu a/40.00 d/Taxi ride to NUS payee/John Doe` (Bernice Yu does not owed John Doe any money)"},{"lineNumber":1485,"author":{"gitID":"-"},"content":""},{"lineNumber":1486,"author":{"gitID":"-"},"content":"    Expected: Payee is not owed any debt"},{"lineNumber":1487,"author":{"gitID":"-"},"content":""},{"lineNumber":1488,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Delete Transaction"},{"lineNumber":1489,"author":{"gitID":"-"},"content":""},{"lineNumber":1490,"author":{"gitID":"-"},"content":" . Purpose of delete transaction is solely for wrongly added transaction"},{"lineNumber":1491,"author":{"gitID":"-"},"content":""},{"lineNumber":1492,"author":{"gitID":"-"},"content":" .. Before you proceed, please clear the application, `clear` and add the following persons and transaction to the application: 1)`addPerson n/John Doe p/98765432 e/johnd@example.com t/friends t/owesMoney`, 2)`addPerson n/Bernice Yu p/98765432 e/johnd@example.com t/friends t/owesMoney`, 3) `addPerson n/Alex Yeoh p/98765432 e/johnd@example.com t/friends t/owesMoney` and follow the order of each test case below."},{"lineNumber":1493,"author":{"gitID":"-"},"content":""},{"lineNumber":1494,"author":{"gitID":"-"},"content":"  4)`addtransaction type/payment payer/John Doe a/120.00 d/Taxi ride to NUS payee/Alex Yeoh payee/Bernice Yu m/evenly` 5) `addtransaction type/payment payer/John Doe a/240.00 d/Taxi ride to NUS payee/Alex Yeoh payee/Bernice Yu m/evenly`"},{"lineNumber":1495,"author":{"gitID":"-"},"content":""},{"lineNumber":1496,"author":{"gitID":"-"},"content":"... Test case: `deleteTransaction 1`"},{"lineNumber":1497,"author":{"gitID":"-"},"content":""},{"lineNumber":1498,"author":{"gitID":"-"},"content":"     Expected:  Deleted Transaction:  Transaction id: X + Details of the deleted contact shown in the status message"},{"lineNumber":1499,"author":{"gitID":"-"},"content":""},{"lineNumber":1500,"author":{"gitID":"-"},"content":"  ... Test case: `addTransaction type/paydebt payer/Bernice Yu a/80.00 d/Amount owed for taxi ride payee/John Doe` + `deletePerson 2`(Bernice Yu) + `deleteTransaction 1`"},{"lineNumber":1501,"author":{"gitID":"-"},"content":""},{"lineNumber":1502,"author":{"gitID":"-"},"content":"     Expected: The payer or payee(s) in the transaction do not exist"},{"lineNumber":1503,"author":{"gitID":"-"},"content":""},{"lineNumber":1504,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Deleting a person"},{"lineNumber":1505,"author":{"gitID":"-"},"content":""},{"lineNumber":1506,"author":{"gitID":"-"},"content":". Deleting a person while all persons are listed"},{"lineNumber":1507,"author":{"gitID":"-"},"content":""},{"lineNumber":1508,"author":{"gitID":"-"},"content":".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":1509,"author":{"gitID":"-"},"content":""},{"lineNumber":1510,"author":{"gitID":"-"},"content":".. Test case: `delete 1` +"},{"lineNumber":1511,"author":{"gitID":"-"},"content":""},{"lineNumber":1512,"author":{"gitID":"-"},"content":"   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":1513,"author":{"gitID":"-"},"content":""},{"lineNumber":1514,"author":{"gitID":"-"},"content":".. Test case: `delete 0` +"},{"lineNumber":1515,"author":{"gitID":"-"},"content":""},{"lineNumber":1516,"author":{"gitID":"-"},"content":"   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":1517,"author":{"gitID":"-"},"content":""},{"lineNumber":1518,"author":{"gitID":"-"},"content":".. Test case: if delete person debt not cleared - outstanding debtor(s) or creditor(s) present in the debtor or creditor table respectively"},{"lineNumber":1519,"author":{"gitID":"-"},"content":""},{"lineNumber":1520,"author":{"gitID":"-"},"content":"   Expected: Unable to delete, current person debt not cleared"},{"lineNumber":1521,"author":{"gitID":"-"},"content":""},{"lineNumber":1522,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Selecting a person"},{"lineNumber":1523,"author":{"gitID":"-"},"content":""},{"lineNumber":1524,"author":{"gitID":"-"},"content":".. Test: selectPerson 1"},{"lineNumber":1525,"author":{"gitID":"-"},"content":""},{"lineNumber":1526,"author":{"gitID":"-"},"content":"  Expected: All debtor(s) or creditor(s) present and transactions that involved this person selected will be displayed."},{"lineNumber":1527,"author":{"gitID":"-"},"content":""},{"lineNumber":1528,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Un-selecting a person"},{"lineNumber":1529,"author":{"gitID":"-"},"content":""},{"lineNumber":1530,"author":{"gitID":"-"},"content":".. Test: selectPerson 1 + un-select Person 1"},{"lineNumber":1531,"author":{"gitID":"-"},"content":""},{"lineNumber":1532,"author":{"gitID":"-"},"content":"  Expected: After the person is unselected, all transaction will be shown, and no debtor or creditor will be displayed."},{"lineNumber":1533,"author":{"gitID":"-"},"content":""},{"lineNumber":1534,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving data"},{"lineNumber":1535,"author":{"gitID":"-"},"content":""},{"lineNumber":1536,"author":{"gitID":"-"},"content":". Dealing with missing/corrupted data files"},{"lineNumber":1537,"author":{"gitID":"-"},"content":""},{"lineNumber":1538,"author":{"gitID":"Steven-Jia"},"content":".. Missing \u0026 Invalid Transaction type +"},{"lineNumber":1539,"author":{"gitID":"Steven-Jia"},"content":"   Expected: `Transaction type can only be \"paydebt\" or \"payment\" and it should not be blank`"},{"lineNumber":1540,"author":{"gitID":"Steven-Jia"},"content":".. Missing \u0026 Invalid Missing payer +"},{"lineNumber":1541,"author":{"gitID":"Steven-Jia"},"content":"   Expected: `Transaction\u0027s Payer field is missing!` +"},{"lineNumber":1542,"author":{"gitID":"Steven-Jia"},"content":"   This message exists for every mandatory field of the Transaction class (i.e. Type, Payer, Amount, Description, Payees, SplitMethod)"},{"lineNumber":1543,"author":{"gitID":"Steven-Jia"},"content":".. Missing \u0026 Invalid Transaction amount +"},{"lineNumber":1544,"author":{"gitID":"Steven-Jia"},"content":"   Expected: `Amount can only take in a positive numerical number up to 2 decimal places, and it should not be blank`"},{"lineNumber":1545,"author":{"gitID":"Steven-Jia"},"content":".. Missing \u0026 Invalid Transaction description +"},{"lineNumber":1546,"author":{"gitID":"Steven-Jia"},"content":"   Expected: `Transaction description can take any value and should not be blank`"},{"lineNumber":1547,"author":{"gitID":"Steven-Jia"},"content":".. Missing \u0026 Invalid Transaction payee +"},{"lineNumber":1548,"author":{"gitID":"Steven-Jia"},"content":"   Expected: `Transaction\u0027s Payees field is missing!`"},{"lineNumber":1549,"author":{"gitID":"Steven-Jia"},"content":".. Missing \u0026 Invalid Transaction Date +"},{"lineNumber":1550,"author":{"gitID":"Steven-Jia"},"content":"   Expected: `Transaction\u0027s Date field is missing, or is in wrong format (date format example: 2018-04-14T17:22:56.218+08:00)`"},{"lineNumber":1551,"author":{"gitID":"Steven-Jia"},"content":".. Missing \u0026 Invalid Split method +"},{"lineNumber":1552,"author":{"gitID":"Steven-Jia"},"content":"   Expected: `Transaction split method can only be \"evenly\", \"units\", or \"percentage\"`"}],"authorContributionMap":{"Steven-Jia":253,"phmignot":54,"-":1245}},{"path":"src/test/java/seedu/address/ui/TransactionCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"//@@author phmignot"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysTransaction;"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"import guitests.guihandles.TransactionCardHandle;"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":"import seedu.address.testutil.TransactionBuilder;"},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"public class TransactionCardTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":"    public void display() {"},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"        Transaction transaction \u003d new TransactionBuilder().build();"},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":"        TransactionCard transactionCard \u003d new TransactionCard(transaction, 1);"},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"        uiPartRule.setUiPart(transactionCard);"},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":"        assertCardDisplayTransaction(transactionCard, transaction, 1);"},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":25,"author":{"gitID":"phmignot"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":"        Transaction transaction \u003d new TransactionBuilder().build();"},{"lineNumber":28,"author":{"gitID":"phmignot"},"content":"        TransactionCard transactionCard \u003d new TransactionCard(transaction, 0);"},{"lineNumber":29,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":30,"author":{"gitID":"phmignot"},"content":"        // same transaction, same index -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":"        TransactionCard copy \u003d new TransactionCard(transaction, 0);"},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":"        assertTrue(transactionCard.equals(copy));"},{"lineNumber":33,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"        assertTrue(transactionCard.equals(transactionCard));"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":"        assertFalse(transactionCard.equals(null));"},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":40,"author":{"gitID":"phmignot"},"content":"        // different types -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"phmignot"},"content":"        assertFalse(transactionCard.equals(0));"},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"        // different transaction, same index -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":"        Transaction differentTransaction \u003d new TransactionBuilder()"},{"lineNumber":45,"author":{"gitID":"phmignot"},"content":"                .withPayer(SampleDataUtil.getSamplePersons()[1])"},{"lineNumber":46,"author":{"gitID":"phmignot"},"content":"                .build();"},{"lineNumber":47,"author":{"gitID":"phmignot"},"content":"        assertFalse(transactionCard.equals(new TransactionCard(differentTransaction, 0)));"},{"lineNumber":48,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":50,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"phmignot"},"content":"     * Asserts that {@code transactionCard} displays the details of {@code expectedTransaction} correctly and matches"},{"lineNumber":52,"author":{"gitID":"phmignot"},"content":"     * {@code expectedId}."},{"lineNumber":53,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"phmignot"},"content":"    private void assertCardDisplayTransaction(TransactionCard transactionCard, Transaction expectedTransaction,"},{"lineNumber":55,"author":{"gitID":"phmignot"},"content":"                                              int expectedId) {"},{"lineNumber":56,"author":{"gitID":"phmignot"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":57,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":58,"author":{"gitID":"phmignot"},"content":"        TransactionCardHandle transactionCardHandle \u003d new TransactionCardHandle(transactionCard.getRoot());"},{"lineNumber":59,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":"        // verify id is displayed correctly"},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", transactionCardHandle.getId());"},{"lineNumber":62,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":"        // verify transaction details are displayed correctly"},{"lineNumber":64,"author":{"gitID":"phmignot"},"content":"        assertCardDisplaysTransaction(expectedTransaction, transactionCardHandle);"},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"phmignot"},"content":"}"}],"authorContributionMap":{"phmignot":66}},{"path":"src/test/java/seedu/address/ui/DebtorCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertDebtorCardDisplays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.DebtorCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.DebtorBuilder;"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"public class DebtorCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"        Debtor debtor \u003d new DebtorBuilder().build();"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"        DebtorCard debtorCard \u003d new DebtorCard(debtor, 1);"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"        uiPartRule.setUiPart(debtorCard);"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"        assertDebtorCardDisplay(debtorCard, debtor, 1);"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"        Debtor debtor \u003d new DebtorBuilder().build();"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"        DebtorCard debtorCard \u003d new DebtorCard(debtor, 0);"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"        DebtorCard copy \u003d new DebtorCard(debtor, 0);"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"        assertTrue(debtorCard.equals(copy));"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"        assertTrue(debtorCard.equals(debtorCard));"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"        assertFalse(debtorCard.equals(null));"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"        // different types -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"        assertFalse(debtorCard.equals(0));"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"     * {@code expectedId}."},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"    private void assertDebtorCardDisplay(DebtorCard debtorCard, Debtor expectedDebtor, int expectedId) {"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"        DebtorCardHandle debtorCardHandle \u003d new DebtorCardHandle(debtorCard.getRoot());"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"        // verify id is displayed correctly"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", debtorCardHandle.getId());"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"        // verify person details are displayed correctly"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"        assertDebtorCardDisplays(expectedDebtor, debtorCardHandle);"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"phmignot":5,"-":7,"ongkc":49}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.ListPersonsCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListPersonsCommand.COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":94,"author":{"gitID":"Steven-Jia"},"content":"        String thirdCommand \u003d \"listPersons\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":3,"-":154}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.CreditorCardHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.DebtorCardHandle;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import guitests.guihandles.PersonListPanelHandle;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.guihandles.ResultDisplayHandle;"},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":"import guitests.guihandles.TransactionCardHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"    //@@author phmignot"},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":"     * Asserts that {@code actualTransactionCard} displays the same values as {@code expectedTransactionCard}."},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":"    public static void assertCardEquals(TransactionCardHandle expectedCard, TransactionCardHandle actualCard) {"},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":40,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedCard.getPayer(), actualCard.getPayer());"},{"lineNumber":41,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedCard.getAmount(), actualCard.getAmount());"},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedCard.getDescription(), actualCard.getDescription());"},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedCard.getPayees(), actualCard.getPayees());"},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":46,"author":{"gitID":"phmignot"},"content":"    //@@author phmignot"},{"lineNumber":47,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"phmignot"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":49,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"phmignot"},"content":"    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"},{"lineNumber":51,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"},{"lineNumber":52,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"},{"lineNumber":53,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"},{"lineNumber":54,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":55,"author":{"gitID":"phmignot"},"content":"                actualCard.getTags());"},{"lineNumber":56,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"phmignot"},"content":"    //@@author phmignot"},{"lineNumber":58,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"phmignot"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":"    public static void assertCreditorCardDisplays(Creditor expectedCreditor, CreditorCardHandle actualCard) {"},{"lineNumber":62,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedCreditor.getCreditor().getName().fullName, actualCard.getName());"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedCreditor.getCreditor().getPhone().value, actualCard.getPhone());"},{"lineNumber":64,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedCreditor.getCreditor().getEmail().value, actualCard.getEmail());"},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedCreditor.getCreditor().getTags().stream().map(tag -\u003e tag.tagName)"},{"lineNumber":66,"author":{"gitID":"phmignot"},"content":"                        .collect(Collectors.toList()),"},{"lineNumber":67,"author":{"gitID":"phmignot"},"content":"                actualCard.getTags());"},{"lineNumber":68,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedCreditor.getDebt().value, actualCard.getDebt());"},{"lineNumber":69,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"phmignot"},"content":"    //@@author phmignot"},{"lineNumber":71,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"phmignot"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."},{"lineNumber":73,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"phmignot"},"content":"    public static void assertDebtorCardDisplays(Debtor expectedDebtor, DebtorCardHandle actualCard) {"},{"lineNumber":75,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedDebtor.getDebtor().getName().fullName, actualCard.getName());"},{"lineNumber":76,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedDebtor.getDebtor().getPhone().value, actualCard.getPhone());"},{"lineNumber":77,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedDebtor.getDebtor().getEmail().value, actualCard.getEmail());"},{"lineNumber":78,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedDebtor.getDebtor().getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":79,"author":{"gitID":"phmignot"},"content":"                actualCard.getTags());"},{"lineNumber":80,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedDebtor.getDebt().value, actualCard.getDebt());"},{"lineNumber":81,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"phmignot"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":84,"author":{"gitID":"phmignot"},"content":"     * in the correct order."},{"lineNumber":85,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"phmignot"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"},{"lineNumber":87,"author":{"gitID":"phmignot"},"content":"        for (int i \u003d 0; i \u003c persons.length; i++) {"},{"lineNumber":88,"author":{"gitID":"phmignot"},"content":"            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"},{"lineNumber":89,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":92,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"phmignot"},"content":"     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"},{"lineNumber":94,"author":{"gitID":"phmignot"},"content":"     * in the correct order."},{"lineNumber":95,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"phmignot"},"content":"    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"},{"lineNumber":97,"author":{"gitID":"phmignot"},"content":"        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"},{"lineNumber":98,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":100,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"phmignot"},"content":"     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."},{"lineNumber":102,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"phmignot"},"content":"    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"},{"lineNumber":104,"author":{"gitID":"phmignot"},"content":"        int numberOfPeople \u003d personListPanelHandle.getListSize();"},{"lineNumber":105,"author":{"gitID":"phmignot"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":106,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":108,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":109,"author":{"gitID":"phmignot"},"content":"     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."},{"lineNumber":110,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"phmignot"},"content":"    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"},{"lineNumber":112,"author":{"gitID":"phmignot"},"content":"        assertEquals(expected, resultDisplayHandle.getText());"},{"lineNumber":113,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":115,"author":{"gitID":"phmignot"},"content":"    //@@author phmignot"},{"lineNumber":116,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":117,"author":{"gitID":"phmignot"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedTransaction}."},{"lineNumber":118,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"phmignot"},"content":"    public static void assertCardDisplaysTransaction(Transaction expectedTransaction,"},{"lineNumber":120,"author":{"gitID":"phmignot"},"content":"                                                     TransactionCardHandle actualCard) {"},{"lineNumber":121,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedTransaction.getPayer().getName().fullName, actualCard.getPayer());"},{"lineNumber":122,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedTransaction.getAmount().toString(), actualCard.getAmount());"},{"lineNumber":123,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedTransaction.getDescription().value, actualCard.getDescription());"},{"lineNumber":124,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":125,"author":{"gitID":"phmignot"},"content":"        String expectedPayeesString \u003d \"\";"},{"lineNumber":126,"author":{"gitID":"phmignot"},"content":"        for (int i \u003d 0; i \u003c expectedTransaction.getPayees().asObservableList().size(); i++) {"},{"lineNumber":127,"author":{"gitID":"phmignot"},"content":"            Person expectedPayee \u003d expectedTransaction.getPayees().asObservableList().get(i);"},{"lineNumber":128,"author":{"gitID":"phmignot"},"content":"            expectedPayeesString +\u003d expectedPayee.getName().fullName;"},{"lineNumber":129,"author":{"gitID":"phmignot"},"content":"            if (i !\u003d expectedTransaction.getPayees().asObservableList().size() - 1) {"},{"lineNumber":130,"author":{"gitID":"phmignot"},"content":"                expectedPayeesString +\u003d \", \";"},{"lineNumber":131,"author":{"gitID":"phmignot"},"content":"            }"},{"lineNumber":132,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":134,"author":{"gitID":"phmignot"},"content":"        assertEquals(expectedPayeesString, actualCard.getPayees());"},{"lineNumber":135,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":136,"author":{"gitID":"phmignot"},"content":"}"}],"authorContributionMap":{"phmignot":104,"-":32}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":"        String defaultConfigAsString \u003d \"App title : SmartSplit\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":31}},{"path":"src/test/java/systemtests/EditPersonCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JACK;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BALANCE_BOB;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JACK;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":36,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Steven-Jia"},"content":"public class EditPersonCommandSystemTest extends AddressBookSystemTest {"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void edit() throws Exception {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        Model model \u003d getModel();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"},{"lineNumber":59,"author":{"gitID":"-"},"content":"         * -\u003e edited"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Index index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":62,"author":{"gitID":"Steven-Jia"},"content":"        String command \u003d \" \" + EditPersonCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""},{"lineNumber":63,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + TAG_DESC_HUSBAND + \" \";"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withBalance(VALID_BALANCE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        /* Case: undo editing the last person in the list -\u003e last person restored */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        /* Case: redo editing the last person in the list -\u003e last person edited again */"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        model.updatePerson("},{"lineNumber":77,"author":{"gitID":"-"},"content":"                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, model, expectedResultMessage);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as existing values -\u003e edited */"},{"lineNumber":81,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":82,"author":{"gitID":"Steven-Jia"},"content":"                + EMAIL_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, BOB);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        /* Case: edit some fields -\u003e edited */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":87,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        /* Case: clear tags -\u003e cleared */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":94,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"},{"lineNumber":104,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_JACK;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_JACK).build();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, editedPerson);"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * -\u003e rejected"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        showPersonsWithName(KEYWORD_MATCHING_MEIER);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"},{"lineNumber":114,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"},{"lineNumber":120,"author":{"gitID":"-"},"content":"         * browser url changes"},{"lineNumber":121,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        showAllPersons();"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        selectPerson(index);"},{"lineNumber":125,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":126,"author":{"gitID":"Steven-Jia"},"content":"                + EMAIL_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // this can be misleading: card selection actually remains unchanged but the"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // browser\u0027s url is updated to reflect the new person\u0027s name"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, index, AMY, index);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":134,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"},{"lineNumber":135,"author":{"gitID":"Steven-Jia"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"},{"lineNumber":139,"author":{"gitID":"Steven-Jia"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"},{"lineNumber":143,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        /* Case: missing index -\u003e rejected */"},{"lineNumber":147,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + NAME_DESC_BOB,"},{"lineNumber":148,"author":{"gitID":"Steven-Jia"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"        /* Case: missing all fields -\u003e rejected */"},{"lineNumber":151,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"},{"lineNumber":152,"author":{"gitID":"Steven-Jia"},"content":"                EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"        /* Case: invalid name -\u003e rejected */"},{"lineNumber":155,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":156,"author":{"gitID":"Steven-Jia"},"content":"                        + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /* Case: invalid phone -\u003e rejected */"},{"lineNumber":159,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":160,"author":{"gitID":"Steven-Jia"},"content":"                        + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"        /* Case: invalid email -\u003e rejected */"},{"lineNumber":163,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":164,"author":{"gitID":"Steven-Jia"},"content":"                        + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"        /* Case: invalid tag -\u003e rejected */"},{"lineNumber":168,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(EditPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased()"},{"lineNumber":169,"author":{"gitID":"Steven-Jia"},"content":"                        + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        executeCommand(PersonUtil.getAddPersonCommand(BOB));"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        index \u003d INDEX_FIRST_PERSON;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"},{"lineNumber":176,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":177,"author":{"gitID":"Steven-Jia"},"content":"                + EMAIL_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"},{"lineNumber":178,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(command, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"},{"lineNumber":181,"author":{"gitID":"Steven-Jia"},"content":"        command \u003d EditPersonCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":182,"author":{"gitID":"Steven-Jia"},"content":"                + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":183,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(command, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * the browser url and selected card remain unchanged."},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list"},{"lineNumber":190,"author":{"gitID":"Steven-Jia"},"content":"     * @see EditPersonCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, toEdit, editedPerson, null);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":198,"author":{"gitID":"Steven-Jia"},"content":"     * 1. Asserts that result display box displays the success message of executing {@code EditPersonCommand}.\u003cbr\u003e"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * updated to values specified {@code editedPerson}.\u003cbr\u003e"},{"lineNumber":201,"author":{"gitID":"-"},"content":"     * @param toEdit the index of the current model\u0027s filtered list."},{"lineNumber":202,"author":{"gitID":"Steven-Jia"},"content":"     * @see EditPersonCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"},{"lineNumber":205,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            expectedModel.updatePerson("},{"lineNumber":209,"author":{"gitID":"-"},"content":"                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException | PersonNotFoundException e) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException("},{"lineNumber":213,"author":{"gitID":"-"},"content":"                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":217,"author":{"gitID":"Steven-Jia"},"content":"                String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":223,"author":{"gitID":"Steven-Jia"},"content":"     * @see EditPersonCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":224,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":231,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":235,"author":{"gitID":"-"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"-"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"-"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":241,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":242,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":244,"author":{"gitID":"-"},"content":"            Index expectedSelectedCardIndex) {"},{"lineNumber":245,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":246,"author":{"gitID":"-"},"content":"        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":248,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":250,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":252,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":253,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"-"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":255,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":259,"author":{"gitID":"-"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":260,"author":{"gitID":"-"},"content":"     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":261,"author":{"gitID":"-"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":262,"author":{"gitID":"-"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":263,"author":{"gitID":"-"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":264,"author":{"gitID":"-"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":265,"author":{"gitID":"-"},"content":"     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":266,"author":{"gitID":"-"},"content":"     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":269,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":270,"author":{"gitID":"-"},"content":""},{"lineNumber":271,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":272,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":273,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":274,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":275,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":276,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":277,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":40,"-":237}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedPerson;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlSerializableAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Hans Muster\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"9482424\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"hans@example\";"},{"lineNumber":41,"author":{"gitID":"Steven-Jia"},"content":"    private static final String VALID_BALANCE \u003d \"0.00\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(null, AddressBook.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertEquals(9, dataFromFile.getPersonList().size());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":81,"author":{"gitID":"-"},"content":"                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":83,"author":{"gitID":"Steven-Jia"},"content":"                null, VALID_PHONE, VALID_EMAIL, VALID_BALANCE, VALID_TAGS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":90,"author":{"gitID":"-"},"content":"                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":92,"author":{"gitID":"Steven-Jia"},"content":"                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_BALANCE, VALID_TAGS);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("},{"lineNumber":99,"author":{"gitID":"-"},"content":"                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("},{"lineNumber":101,"author":{"gitID":"Steven-Jia"},"content":"                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_BALANCE, VALID_TAGS);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertEquals(expectedPerson, actualPerson);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(null, new AddressBook());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        dataToWrite \u003d new XmlSerializableAddressBook("},{"lineNumber":133,"author":{"gitID":"-"},"content":"                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * objects."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    @XmlRootElement(name \u003d \"person\")"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"},{"lineNumber":146,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":4,"-":142}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.ListPersonsCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_invalidCommandFormat_throwsParseException() throws PersonNotFoundException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_commandExecutionError_throwsCommandException() throws PersonNotFoundException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        String deletePersonCommand \u003d \"deletePerson 9\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertCommandException(deletePersonCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(deletePersonCommand);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_validCommand_success() throws PersonNotFoundException {"},{"lineNumber":45,"author":{"gitID":"Steven-Jia"},"content":"        String listCommand \u003d ListPersonsCommand.COMMAND_WORD;"},{"lineNumber":46,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandSuccess(listCommand, ListPersonsCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        logic.getFilteredPersonList().remove(0);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Steven-Jia"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) throws"},{"lineNumber":62,"author":{"gitID":"Steven-Jia"},"content":"            PersonNotFoundException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"Steven-Jia"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) throws PersonNotFoundException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) throws PersonNotFoundException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage)"},{"lineNumber":87,"author":{"gitID":"Steven-Jia"},"content":"            throws PersonNotFoundException {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":99,"author":{"gitID":"Steven-Jia"},"content":"                                           String expectedMessage, Model expectedModel) throws PersonNotFoundException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"Steven-Jia"},"content":"    private void assertHistoryCorrect(String... expectedCommands) throws PersonNotFoundException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":121,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":14,"-":113}},{"path":"src/test/java/seedu/address/ui/CreditorCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCreditorCardDisplays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CreditorCardHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.testutil.CreditorBuilder;"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"public class CreditorCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"        Creditor creditor \u003d new CreditorBuilder().build();"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"        CreditorCard creditorCard \u003d new CreditorCard(creditor, 1);"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"        uiPartRule.setUiPart(creditorCard);"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"        assertCreditorCardDisplay(creditorCard, creditor, 1);"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"        Creditor creditor \u003d new CreditorBuilder().build();"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"        CreditorCard creditorCard \u003d new CreditorCard(creditor, 0);"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"        // same person, same index -\u003e returns true"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"        CreditorCard copy \u003d new CreditorCard(creditor, 0);"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"        assertTrue(creditorCard.equals(copy));"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"        // same object -\u003e returns true"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"        assertTrue(creditorCard.equals(creditorCard));"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"        assertFalse(creditorCard.equals(null));"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"        // different types -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"        assertFalse(creditorCard.equals(0));"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"     * {@code expectedId}."},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"    private void assertCreditorCardDisplay(CreditorCard creditorCard, Creditor expectedCreditor, int expectedId) {"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"        CreditorCardHandle creditorCardHandle \u003d new CreditorCardHandle(creditorCard.getRoot());"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"        // verify id is displayed correctly"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", creditorCardHandle.getId());"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"        // verify person details are displayed correctly"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"        assertCreditorCardDisplays(expectedCreditor, creditorCardHandle);"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"phmignot":5,"-":7,"ongkc":49}},{"path":"src/test/java/seedu/address/logic/parser/SelectPersonCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":" * Test scope: similar to {@code DeletePersonCommandParserTest}."},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":" * @see DeletePersonCommandParserTest"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":"public class SelectPersonCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() throws CommandException {"},{"lineNumber":23,"author":{"gitID":"Steven-Jia"},"content":"        assertParseSuccess(parser, \"1\", new SelectPersonCommand(INDEX_FIRST_PERSON));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() throws CommandException {"},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":29,"author":{"gitID":"Steven-Jia"},"content":"                SelectPersonCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":7,"-":24}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeleteTransactionCommand;"},{"lineNumber":23,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":26,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":29,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.ListPersonsCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":31,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":34,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"Steven-Jia"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser(new ModelManager());"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        AddPersonCommand command \u003d (AddPersonCommand) parser.parseCommand(PersonUtil.getAddPersonCommand(person));"},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"        assertEquals(new AddPersonCommand(person), command);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        DeletePersonCommand command \u003d (DeletePersonCommand) parser.parseCommand("},{"lineNumber":63,"author":{"gitID":"-"},"content":"                DeletePersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(new DeletePersonCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void parseTransactionCommand_delete() throws Exception {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        DeleteTransactionCommand command \u003d (DeleteTransactionCommand) parser.parseCommand("},{"lineNumber":69,"author":{"gitID":"-"},"content":"                DeleteTransactionCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TRANSACTION.getOneBased());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(new DeleteTransactionCommand(INDEX_FIRST_TRANSACTION), command);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand command \u003d (EditPersonCommand) parser.parseCommand(EditPersonCommand.COMMAND_WORD + \" \""},{"lineNumber":77,"author":{"gitID":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"        assertEquals(new EditPersonCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":90,"author":{"gitID":"Steven-Jia"},"content":"        FindPersonCommand command \u003d (FindPersonCommand) parser.parseCommand("},{"lineNumber":91,"author":{"gitID":"Steven-Jia"},"content":"                FindPersonCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":92,"author":{"gitID":"Steven-Jia"},"content":"        assertEquals(new FindPersonCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            parser.parseCommand(\"histories\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":116,"author":{"gitID":"Steven-Jia"},"content":"        assertTrue(parser.parseCommand(ListPersonsCommand.COMMAND_WORD) instanceof ListPersonsCommand);"},{"lineNumber":117,"author":{"gitID":"Steven-Jia"},"content":"        assertTrue(parser.parseCommand(ListPersonsCommand.COMMAND_WORD + \" 3\") instanceof ListPersonsCommand);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public void parseCommand_select() throws Exception {"},{"lineNumber":122,"author":{"gitID":"Steven-Jia"},"content":"        SelectPersonCommand command \u003d (SelectPersonCommand) parser.parseCommand("},{"lineNumber":123,"author":{"gitID":"Steven-Jia"},"content":"                SelectPersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":124,"author":{"gitID":"Steven-Jia"},"content":"        assertEquals(new SelectPersonCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":19,"-":133}},{"path":"src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods for testing command parsers."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class CommandParserTestUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand)"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throws CommandException {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"Steven-Jia"},"content":"            Command command \u003d parser.parse(userInput, new ModelManager());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage)"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            throws CommandException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"Steven-Jia"},"content":"            parser.parse(userInput, new ModelManager());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser}"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * is successful and the addtransaction command created"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static void assertParseTransactionSuccess(Parser parser, String userInput, Command expectedCommand)"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            throws CommandException, DuplicatePersonException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            modelManager.addPerson(SampleDataUtil.getSamplePersons()[0]);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            modelManager.addPerson(SampleDataUtil.getSamplePersons()[1]);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            modelManager.addPerson(SampleDataUtil.getSamplePersons()[2]);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            Command command \u003d parser.parse(userInput, modelManager);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * for add transaction and the error message"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static void assertParseTransactionFailure(Parser parser, String userInput, String expectedMessage)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throws CommandException, DuplicatePersonException {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"            modelManager.addPerson(SampleDataUtil.getSamplePersons()[0]);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"            modelManager.addPerson(SampleDataUtil.getSamplePersons()[1]);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            modelManager.addPerson(SampleDataUtil.getSamplePersons()[2]);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            parser.parse(userInput, modelManager);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":3,"-":79}},{"path":"src/test/java/seedu/address/logic/parser/FindPersonCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"public class FindPersonCommandParserTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":"    private FindPersonCommandParser parser \u003d new FindPersonCommandParser();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() throws CommandException {"},{"lineNumber":21,"author":{"gitID":"Steven-Jia"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"                FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"Steven-Jia"},"content":"    public void parse_validArgs_returnsFindPersonCommand() throws CommandException {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":"        FindPersonCommand expectedFindPersonCommand \u003d"},{"lineNumber":29,"author":{"gitID":"Steven-Jia"},"content":"                new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":30,"author":{"gitID":"Steven-Jia"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindPersonCommand);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPersonCommand);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":10,"-":26}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Amount;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_AMOUNT \u003d \"123.00\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public void parseAmount_validValueWithDot_returnsTrimmedAmount() throws Exception {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        String amountWithDot \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        assertEquals(expectedAmount, ParserUtil.parseAmount(amountWithDot));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAmount), ParserUtil.parseAmount(Optional.of(amountWithDot)));"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public void parsePhone_invalidValue_throwsIllegalValueException() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"phmignot":1,"-":220}},{"path":"src/test/java/seedu/address/logic/parser/DeleteTransactionCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.DeleteTransactionCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"public class DeleteTransactionCommandParserTest {"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":"    private DeleteTransactionCommandParser parser \u003d new DeleteTransactionCommandParser();"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"    public void parse_validArgs_returnsDeleteCommand() throws CommandException {"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"        assertParseSuccess(parser, \"1\", new DeleteTransactionCommand(INDEX_FIRST_TRANSACTION));"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    public void parse_invalidArgs_throwsParseException() throws CommandException {"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"                DeleteTransactionCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"phmignot":1,"-":10,"ongkc":16}},{"path":"src/test/java/seedu/address/logic/parser/EditPersonCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":32,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"Steven-Jia"},"content":"public class EditPersonCommandParserTest {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":46,"author":{"gitID":"Steven-Jia"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void parse_missingParts_failure() throws CommandException {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // no index specified"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // no field specified"},{"lineNumber":56,"author":{"gitID":"Steven-Jia"},"content":"        assertParseFailure(parser, \"1\", EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // no index and no field specified"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void parse_invalidPreamble_failure() throws CommandException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        // negative index"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // zero index"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public void parse_invalidValue_failure() throws CommandException {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"},{"lineNumber":99,"author":{"gitID":"-"},"content":"                Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void parse_allFieldsSpecified_success() throws CommandException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":111,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public void parse_someFieldsSpecified_success() throws CommandException {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":122,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":123,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    public void parse_oneFieldSpecified_success() throws CommandException {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // name"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":134,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        // phone"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":140,"author":{"gitID":"Steven-Jia"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // email"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":146,"author":{"gitID":"Steven-Jia"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        // tags"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":152,"author":{"gitID":"Steven-Jia"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() throws CommandException {"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased()  + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":160,"author":{"gitID":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":161,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":165,"author":{"gitID":"-"},"content":"                .build();"},{"lineNumber":166,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":167,"author":{"gitID":"-"},"content":""},{"lineNumber":168,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() throws CommandException {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // no other valid values specified"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":177,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // other valid values specified"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"},{"lineNumber":182,"author":{"gitID":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":184,"author":{"gitID":"Steven-Jia"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitID":"-"},"content":"    public void parse_resetTags_success() throws CommandException {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":194,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":15,"-":183}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"Steven-Jia"},"content":"public class AddPersonCommandTest {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":43,"author":{"gitID":"Steven-Jia"},"content":"        new AddPersonCommand(null);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"        CommandResult commandResult \u003d getAddPersonCommand(validPerson, modelStub).execute();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"Steven-Jia"},"content":"        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":63,"author":{"gitID":"Steven-Jia"},"content":"        thrown.expectMessage(AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"Steven-Jia"},"content":"        getAddPersonCommand(validPerson, modelStub).execute();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":72,"author":{"gitID":"Steven-Jia"},"content":"        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);"},{"lineNumber":73,"author":{"gitID":"Steven-Jia"},"content":"        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":"        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"Steven-Jia"},"content":"     * Generates a new AddPersonCommand with the details of the given person."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"Steven-Jia"},"content":"    private AddPersonCommand getAddPersonCommand(Person person, Model model) {"},{"lineNumber":96,"author":{"gitID":"Steven-Jia"},"content":"        AddPersonCommand command \u003d new AddPersonCommand(person);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        public void deletePerson(Person target)  {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        public void updatePerson(Person target, Person editedPerson) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"Steven-Jia"},"content":"        @Override"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        public Person findPersonByName(Name name) {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        public UniquePersonList getPayeesList(ArgumentMultimap argMultimap, Model model) {"},{"lineNumber":139,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"Steven-Jia"},"content":"        @Override"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        public boolean personNotFoundInTransaction(Person person) {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":152,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":153,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":154,"author":{"gitID":"Steven-Jia"},"content":"        @Override"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        public List\u003cTransaction\u003e findTransactionsWithPerson(Person person) {"},{"lineNumber":156,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":157,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"Steven-Jia"},"content":"        public void addTransaction(Transaction transaction) {}"},{"lineNumber":177,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":178,"author":{"gitID":"phmignot"},"content":"        @Override"},{"lineNumber":179,"author":{"gitID":"Steven-Jia"},"content":"        public void deleteTransaction(Transaction transaction) {}"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        public ObservableList\u003cDebtor\u003e getFilteredDebtors() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"-"},"content":"        public ObservableList\u003cCreditor\u003e getFilteredCreditors() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        public void updateDebtorList(Predicate\u003cDebtor\u003e predicateShowNoDebtors) {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":198,"author":{"gitID":"phmignot"},"content":"        @Override"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        public void updateCreditorList(Predicate\u003cCreditor\u003e predicateShowAllCreditors) {"},{"lineNumber":200,"author":{"gitID":"-"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public class ModelStubImpl extends ModelStub { }"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":206,"author":{"gitID":"-"},"content":"     * A Model stub that always throw a DuplicatePersonException when trying to add a person."},{"lineNumber":207,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            requireNonNull(person);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":234,"author":{"gitID":"-"},"content":"            return new AddressBook();"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":20,"phmignot":5,"-":213}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":53}},{"path":"src/test/java/seedu/address/logic/parser/AddTransactionCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SPLIT_METHOD_DESC_ONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SPLIT_METHOD_DESC_PERCENTAGE_ONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SPLIT_METHOD_DESC_PERCENTAGE_THREE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SPLIT_METHOD_DESC_PERCENTAGE_TWO;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SPLIT_METHOD_DESC_UNITS_ONE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_SPLIT_METHOD_DESC_UNITS_TWO;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TRANSACTION_TYPE_DESC;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TRANSACTION_DESC_AMOUNT_ONE;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TRANSACTION_DESC_DESCRIPTION_ONE;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TRANSACTION_DESC_SPLIT_METHOD_ONE;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TRANSACTION_DESC_SPLIT_METHOD_THREE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TRANSACTION_DESC_SPLIT_METHOD_TWO;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TRANSACTION_PAYEE_DESC_ONE;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TRANSACTION_PAYER_DESC;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TRANSACTION_PAYER_DESC_THREE;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TRANSACTION_PAYER_DESC_TWO;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TRANSACTION_TYPE_DESC_ONE;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TRANSACTION_TYPE_DESC_THREE;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSACTION_AMOUNT_ONE;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSACTION_DESCRIPTION_ONE;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSACTION_PAYEE_ONE;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSACTION_SPLIT_METHOD_ONE;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSACTION_TYPE_ONE;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseTransactionFailure;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddTransactionCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Amount;"},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Description;"},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.transaction.SplitMethod;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.TransactionType;"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"public class AddTransactionCommandParserTest {"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"    private AddTransactionCommandParser parser \u003d new AddTransactionCommandParser();"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"    public void parse_compulsoryFieldMissing_failure() throws CommandException, DuplicatePersonException {"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTransactionCommand.MESSAGE_USAGE);"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"        // missing Transaction type prefix"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + VALID_TRANSACTION_TYPE_ONE"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"                expectedMessage);"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"        // missing payer prefix"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"                        + VALID_TRANSACTION_PAYEE_ONE"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"                expectedMessage);"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":"        // missing amount prefix"},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":"                        + VALID_TRANSACTION_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":69,"author":{"gitID":"ongkc"},"content":"                expectedMessage);"},{"lineNumber":70,"author":{"gitID":"ongkc"},"content":"        // missing description prefix"},{"lineNumber":71,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":72,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":73,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + VALID_TRANSACTION_DESCRIPTION_ONE"},{"lineNumber":74,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":75,"author":{"gitID":"ongkc"},"content":"                expectedMessage);"},{"lineNumber":76,"author":{"gitID":"ongkc"},"content":"        // missing payee prefix"},{"lineNumber":77,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":78,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":79,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":80,"author":{"gitID":"ongkc"},"content":"                        + VALID_TRANSACTION_PAYEE_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":81,"author":{"gitID":"ongkc"},"content":"                expectedMessage);"},{"lineNumber":82,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":83,"author":{"gitID":"ongkc"},"content":"        // all prefix missing"},{"lineNumber":84,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + VALID_TRANSACTION_SPLIT_METHOD_ONE"},{"lineNumber":85,"author":{"gitID":"ongkc"},"content":"                        + VALID_TRANSACTION_PAYEE_ONE"},{"lineNumber":86,"author":{"gitID":"ongkc"},"content":"                        + VALID_TRANSACTION_AMOUNT_ONE + VALID_TRANSACTION_DESCRIPTION_ONE"},{"lineNumber":87,"author":{"gitID":"ongkc"},"content":"                        + VALID_TRANSACTION_PAYEE_ONE + VALID_TRANSACTION_SPLIT_METHOD_ONE,"},{"lineNumber":88,"author":{"gitID":"ongkc"},"content":"                expectedMessage);"},{"lineNumber":89,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":91,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"ongkc"},"content":"    public void parse_invalidValue_failure() throws CommandException, DuplicatePersonException {"},{"lineNumber":93,"author":{"gitID":"ongkc"},"content":"        // invalid transaction type"},{"lineNumber":94,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, INVALID_TRANSACTION_TYPE_DESC"},{"lineNumber":95,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":96,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":97,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":98,"author":{"gitID":"ongkc"},"content":"                TransactionType.MESSAGE_TRANSACTION_TYPE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"ongkc"},"content":"        // Payer or payee does not exist"},{"lineNumber":100,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":101,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC_TWO"},{"lineNumber":102,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":103,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":104,"author":{"gitID":"ongkc"},"content":"                AddTransactionCommand.MESSAGE_NONEXISTENT_PERSON);"},{"lineNumber":105,"author":{"gitID":"ongkc"},"content":"        // Payer is payee"},{"lineNumber":106,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":107,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC_THREE"},{"lineNumber":108,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":109,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":110,"author":{"gitID":"ongkc"},"content":"                AddTransactionCommand.MESSAGE_PAYEE_IS_PAYER);"},{"lineNumber":111,"author":{"gitID":"ongkc"},"content":"        // invalid amount"},{"lineNumber":112,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":113,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":114,"author":{"gitID":"ongkc"},"content":"                        + INVALID_AMOUNT_DESC + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":115,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":116,"author":{"gitID":"ongkc"},"content":"                Amount.MESSAGE_AMOUNT_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":118,"author":{"gitID":"ongkc"},"content":"        // invalid description"},{"lineNumber":119,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":120,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":121,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + INVALID_DESCRIPTION_DESC"},{"lineNumber":122,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":123,"author":{"gitID":"ongkc"},"content":"                Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":125,"author":{"gitID":"ongkc"},"content":"        // invalid split method evenly"},{"lineNumber":126,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":127,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":128,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":129,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + INVALID_SPLIT_METHOD_DESC_ONE,"},{"lineNumber":130,"author":{"gitID":"ongkc"},"content":"                SplitMethod.MESSAGE_SPLIT_METHOD_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitID":"ongkc"},"content":"        // invalid split method percentage"},{"lineNumber":132,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":133,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":134,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":135,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_TWO"},{"lineNumber":136,"author":{"gitID":"ongkc"},"content":"                        + INVALID_SPLIT_METHOD_DESC_PERCENTAGE_ONE,"},{"lineNumber":137,"author":{"gitID":"ongkc"},"content":"                \"List of percentages can only take comma-separated integers\");"},{"lineNumber":138,"author":{"gitID":"ongkc"},"content":"        // invalid split method percentage"},{"lineNumber":139,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":140,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":141,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":142,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_TWO"},{"lineNumber":143,"author":{"gitID":"ongkc"},"content":"                        + INVALID_SPLIT_METHOD_DESC_PERCENTAGE_THREE,"},{"lineNumber":144,"author":{"gitID":"ongkc"},"content":"                \"The number of percentage values does not match the number of persons involved.\""},{"lineNumber":145,"author":{"gitID":"ongkc"},"content":"                        + \" Remember to include the payer in the count.\");"},{"lineNumber":146,"author":{"gitID":"ongkc"},"content":"        // invalid split method percentage"},{"lineNumber":147,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":148,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":149,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":150,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_TWO"},{"lineNumber":151,"author":{"gitID":"ongkc"},"content":"                        + INVALID_SPLIT_METHOD_DESC_PERCENTAGE_TWO,"},{"lineNumber":152,"author":{"gitID":"ongkc"},"content":"                \"The sum of the percentages does not equal 100.\");"},{"lineNumber":153,"author":{"gitID":"ongkc"},"content":"        // invalid split method units"},{"lineNumber":154,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":155,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":156,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":157,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_THREE"},{"lineNumber":158,"author":{"gitID":"ongkc"},"content":"                        + INVALID_SPLIT_METHOD_DESC_UNITS_ONE,"},{"lineNumber":159,"author":{"gitID":"ongkc"},"content":"                \"List of units can only take comma-separated integers\");"},{"lineNumber":160,"author":{"gitID":"ongkc"},"content":"        // invalid split method units"},{"lineNumber":161,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_WHITESPACE + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":162,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":163,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":164,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_THREE"},{"lineNumber":165,"author":{"gitID":"ongkc"},"content":"                        + INVALID_SPLIT_METHOD_DESC_UNITS_TWO,"},{"lineNumber":166,"author":{"gitID":"ongkc"},"content":"                \"The number of units values does not match the number of persons involved.\""},{"lineNumber":167,"author":{"gitID":"ongkc"},"content":"                        + \" Remember to include the payer in the count.\");"},{"lineNumber":168,"author":{"gitID":"ongkc"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":169,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, INVALID_TRANSACTION_TYPE_DESC"},{"lineNumber":170,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":171,"author":{"gitID":"ongkc"},"content":"                        + INVALID_AMOUNT_DESC + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":172,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":173,"author":{"gitID":"ongkc"},"content":"                TransactionType.MESSAGE_TRANSACTION_TYPE_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitID":"ongkc"},"content":"        // too many prefit for paydebt command"},{"lineNumber":175,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, TRANSACTION_TYPE_DESC_THREE"},{"lineNumber":176,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":177,"author":{"gitID":"ongkc"},"content":"                        + INVALID_AMOUNT_DESC + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":178,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":179,"author":{"gitID":"ongkc"},"content":"                AddTransactionCommand.MESSAGE_TOO_MANY_PREFIXES_FOR_PAYDEBT);"},{"lineNumber":180,"author":{"gitID":"ongkc"},"content":"        // non-empty preamble"},{"lineNumber":181,"author":{"gitID":"ongkc"},"content":"        assertParseTransactionFailure(parser, PREAMBLE_NON_EMPTY + TRANSACTION_TYPE_DESC_ONE"},{"lineNumber":182,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYER_DESC"},{"lineNumber":183,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_DESC_AMOUNT_ONE + TRANSACTION_DESC_DESCRIPTION_ONE"},{"lineNumber":184,"author":{"gitID":"ongkc"},"content":"                        + TRANSACTION_PAYEE_DESC_ONE + TRANSACTION_DESC_SPLIT_METHOD_ONE,"},{"lineNumber":185,"author":{"gitID":"ongkc"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTransactionCommand.MESSAGE_USAGE));"},{"lineNumber":186,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":187,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":189,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"phmignot":2,"-":38,"ongkc":148}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYEE;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYER;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPLIT_BY_PERCENTAGE;"},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPLIT_BY_UNITS;"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPLIT_METHOD;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":36,"author":{"gitID":"-"},"content":" */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_JACK \u003d \"Jack Choo\";"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final String VALID_NAME_ALICE \u003d \"Alice Pauline\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final String VALID_PHONE_JACK \u003d \"33333333\";"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public static final String VALID_EMAIL_JACK \u003d \"jack@example.com\";"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Steven-Jia"},"content":"    public static final String VALID_BALANCE_AMY \u003d \"0.00\";"},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"    public static final String VALID_BALANCE_BOB \u003d \"0.00\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String VALID_BALANCE_JACK \u003d \"0.00\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_TYPE_ONE  \u003d \"payment\";"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_TYPE_TWO  \u003d \"Payment\";"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_TYPE_THREE  \u003d \"paydebt\";"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_TYPE_FOUR  \u003d \"PayDebt\";"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_AMOUNT_ONE  \u003d \"1234.50\";"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_AMOUNT_TWO  \u003d \"10.10\";"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_DESCRIPTION_ONE  \u003d \"for dinner meal\";"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_DESCRIPTION_TWO  \u003d \"for transport\";"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_PAYEE_ONE  \u003d \"Benson Meier\";"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_PAYEE_TWO  \u003d \"Carl Kurz\";"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_SPLIT_METHOD_ONE  \u003d \"eVenly\";"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_SPLIT_METHOD_ONE_SPACE  \u003d \" evenly\";"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_SPLIT_METHOD_TWO  \u003d \"percentage\";"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_SPLIT_METHOD_PERCENTAGE  \u003d \"40, 40, 20\";"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_SPLIT_METHOD_THREE  \u003d \"units\";"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public static final String VALID_TRANSACTION_SPLIT_METHOD_UNITS  \u003d \"4, 2, 1\";"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public static final String NAME_DESC_JACK \u003d \" \" + PREFIX_NAME + VALID_NAME_JACK;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_TYPE_DESC_ONE \u003d \" \" + PREFIX_TRANSACTION_TYPE + VALID_TRANSACTION_TYPE_ONE;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_TYPE_DESC_TWO \u003d \" \" + PREFIX_TRANSACTION_TYPE + VALID_TRANSACTION_TYPE_TWO;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_TYPE_DESC_THREE \u003d \" \" + PREFIX_TRANSACTION_TYPE"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            + VALID_TRANSACTION_TYPE_THREE;"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_PAYER_DESC \u003d \" \" + PREFIX_PAYER + VALID_NAME_ALICE;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_PAYER_DESC_TWO \u003d \" \" + PREFIX_PAYER + VALID_NAME_JACK;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_PAYER_DESC_THREE \u003d \" \" + PREFIX_PAYER + VALID_TRANSACTION_PAYEE_ONE;"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_DESC_AMOUNT_ONE \u003d \" \" + PREFIX_AMOUNT + VALID_TRANSACTION_AMOUNT_ONE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_DESC_AMOUNT_TWO \u003d \" \" + PREFIX_AMOUNT + VALID_TRANSACTION_AMOUNT_TWO;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_DESC_DESCRIPTION_ONE \u003d \" \""},{"lineNumber":98,"author":{"gitID":"-"},"content":"            + PREFIX_DESCRIPTION + VALID_TRANSACTION_DESCRIPTION_ONE;"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_DESC_DESCRIPTION_TWO \u003d \" \""},{"lineNumber":100,"author":{"gitID":"-"},"content":"            + PREFIX_DESCRIPTION + VALID_TRANSACTION_DESCRIPTION_TWO;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_PAYEE_DESC_ONE \u003d \" \" + PREFIX_PAYEE  + VALID_TRANSACTION_PAYEE_ONE;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_PAYEE_DESC_TWO \u003d \" \" + PREFIX_PAYEE  + VALID_TRANSACTION_PAYEE_TWO;"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_DESC_SPLIT_METHOD_ONE \u003d \" \""},{"lineNumber":104,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_METHOD + VALID_TRANSACTION_SPLIT_METHOD_ONE;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_DESC_SPLIT_METHOD_TWO \u003d \" \""},{"lineNumber":106,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_METHOD + VALID_TRANSACTION_SPLIT_METHOD_TWO;"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_DESC_SPLIT_METHOD_PERCENTAGE \u003d \" \""},{"lineNumber":108,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_BY_PERCENTAGE + VALID_TRANSACTION_SPLIT_METHOD_PERCENTAGE;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_DESC_SPLIT_METHOD_THREE \u003d \" \""},{"lineNumber":110,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_METHOD + VALID_TRANSACTION_SPLIT_METHOD_THREE;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public static final String TRANSACTION_DESC_SPLIT_METHOD_UNITS \u003d \" \""},{"lineNumber":112,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_BY_UNITS + VALID_TRANSACTION_SPLIT_METHOD_UNITS;"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static final String INVALID_TRANSACTION_TYPE_DESC \u003d \" \""},{"lineNumber":120,"author":{"gitID":"-"},"content":"            + PREFIX_TRANSACTION_TYPE + \"payment*\"; // \u0027*\u0027 not allowed in transaction"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"1.234\"; // \u0027*\u0027 not allowed in transaction"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    public static final String INVALID_DESCRIPTION_DESC \u003d \" \""},{"lineNumber":123,"author":{"gitID":"-"},"content":"            + PREFIX_DESCRIPTION + \"\"; // \u0027*\u0027 not allowed in transaction"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public static final String INVALID_SPLIT_METHOD_DESC_ONE \u003d \" \""},{"lineNumber":125,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_METHOD + \"Evenly1\"; // \u0027*\u0027 not allowed in transaction"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    public static final String INVALID_SPLIT_METHOD_DESC_TWO \u003d \" \""},{"lineNumber":127,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_METHOD + \"percentage1\"; // \u0027*\u0027 not allowed in transaction"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    public static final String INVALID_SPLIT_METHOD_DESC_PERCENTAGE_ONE \u003d \" \""},{"lineNumber":129,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_BY_PERCENTAGE + \"50 50 50\"; // \u0027*\u0027 not allowed in transaction"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static final String INVALID_SPLIT_METHOD_DESC_PERCENTAGE_TWO \u003d \" \""},{"lineNumber":131,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_BY_PERCENTAGE + \"50, 100\"; // \u0027*\u0027 not allowed in transaction"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public static final String INVALID_SPLIT_METHOD_DESC_PERCENTAGE_THREE \u003d \" \""},{"lineNumber":133,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_BY_PERCENTAGE + \"50\"; // \u0027*\u0027 not allowed in transaction"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public static final String INVALID_SPLIT_METHOD_DESC_THREE \u003d \" \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_METHOD + \"units1\"; // \u0027*\u0027 not allowed in transaction"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    public static final String INVALID_SPLIT_METHOD_DESC_UNITS_ONE \u003d \" \""},{"lineNumber":137,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_BY_UNITS + \"4.2, 4.5, 4.6\"; // \u0027*\u0027 not allowed in transaction"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    public static final String INVALID_SPLIT_METHOD_DESC_UNITS_TWO \u003d \" \""},{"lineNumber":139,"author":{"gitID":"-"},"content":"            + PREFIX_SPLIT_BY_UNITS + \"4\"; // \u0027*\u0027 not allowed in transaction"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"Steven-Jia"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":145,"author":{"gitID":"Steven-Jia"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    static {"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":149,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":152,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":153,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build(); }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":158,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":161,"author":{"gitID":"Steven-Jia"},"content":"            Model expectedModel) throws PersonNotFoundException {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"Steven-Jia"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage)"},{"lineNumber":178,"author":{"gitID":"Steven-Jia"},"content":"            throws PersonNotFoundException {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":181,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":188,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":189,"author":{"gitID":"-"},"content":"            assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":190,"author":{"gitID":"-"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":203,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":209,"author":{"gitID":"-"},"content":"     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":210,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    public static void deleteFirstPerson(Model model) throws CommandException {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            model.deletePerson(firstPerson);"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"-"},"content":""},{"lineNumber":220,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":222,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":227,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":231,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":233,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":10,"-":227}},{"path":"src/test/java/seedu/address/logic/commands/ListPersonsCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListPersonsCommand."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"Steven-Jia"},"content":"public class ListPersonsCommandTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":25,"author":{"gitID":"Steven-Jia"},"content":"    private ListPersonsCommand listPersonsCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"Steven-Jia"},"content":"        listPersonsCommand \u003d new ListPersonsCommand();"},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"        listPersonsCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_listIsNotFiltered_showsSameList() throws PersonNotFoundException {"},{"lineNumber":38,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandSuccess(listPersonsCommand, model, ListPersonsCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_listIsFiltered_showsEverything() throws PersonNotFoundException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":44,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandSuccess(listPersonsCommand, model, ListPersonsCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":9,"phmignot":1,"-":36}},{"path":"src/test/java/seedu/address/logic/commands/AddTransactionCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSACTION_PAYEE_ONE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TRANSACTION_PAYEE_TWO;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SEVENTH_TRANSACTION;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SIXTH_TRANSACTION;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":36,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TransactionBuilder;"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"public class AddTransactionCommandTest {"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"    public void constructor_nullTransaction_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"        new AddTransactionCommand(null);"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"    public void execute_paymentTransactionAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"        ModelStubAcceptingTransactionAdded modelStub \u003d"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"                new ModelStubAcceptingTransactionAdded();"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"        Transaction validTransaction \u003d new TransactionBuilder().build();"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"        CommandResult commandResult \u003d getAddTransactionCommand(validTransaction, modelStub).execute();"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":"        assertEquals(String.format(AddTransactionCommand.MESSAGE_SUCCESS, validTransaction),"},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"        assertEquals(Arrays.asList(validTransaction), modelStub.transactionsAdded);"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"ongkc"},"content":"    public void execute_paymentTransactionRoundedAmountAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":70,"author":{"gitID":"ongkc"},"content":"        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":71,"author":{"gitID":"ongkc"},"content":"        Transaction validTransaction \u003d new TransactionBuilder().withAmount(\"12345\").withSplitMethod(\"percentage\")"},{"lineNumber":72,"author":{"gitID":"ongkc"},"content":"                .withPercentages(\"50, 50\").build();"},{"lineNumber":73,"author":{"gitID":"ongkc"},"content":"        AddTransactionCommand addTransactionCommand \u003d prepareCommand(validTransaction);"},{"lineNumber":74,"author":{"gitID":"ongkc"},"content":"        String expectedMessage \u003d String.format(addTransactionCommand.MESSAGE_SUCCESS,"},{"lineNumber":75,"author":{"gitID":"ongkc"},"content":"                validTransaction);"},{"lineNumber":76,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(addTransactionCommand, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":79,"author":{"gitID":"ongkc"},"content":"    public void execute_payDebtTransactionRoundedAmountAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":80,"author":{"gitID":"ongkc"},"content":"        ModelManager expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":81,"author":{"gitID":"ongkc"},"content":"        Transaction validTransaction \u003d new TransactionBuilder().withPayer(SampleDataUtil.getSamplePersons()[1])"},{"lineNumber":82,"author":{"gitID":"ongkc"},"content":"                .withTransactionType(\"paydebt\").withPayees(\"Alice Pauline\").build();"},{"lineNumber":83,"author":{"gitID":"ongkc"},"content":"        AddTransactionCommand addTransactionCommand \u003d prepareCommand(validTransaction);"},{"lineNumber":84,"author":{"gitID":"ongkc"},"content":"        String expectedMessage \u003d String.format(addTransactionCommand.MESSAGE_SUCCESS,"},{"lineNumber":85,"author":{"gitID":"ongkc"},"content":"                validTransaction);"},{"lineNumber":86,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(addTransactionCommand, model, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"ongkc"},"content":"    public void execute_paymentTransactionUnitsAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":90,"author":{"gitID":"ongkc"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":91,"author":{"gitID":"ongkc"},"content":"        Transaction validTransaction \u003d model.getFilteredTransactionList().get(INDEX_SIXTH_TRANSACTION.getZeroBased());"},{"lineNumber":92,"author":{"gitID":"ongkc"},"content":"        AddTransactionCommand addTransactionCommand \u003d prepareCommand(validTransaction);"},{"lineNumber":93,"author":{"gitID":"ongkc"},"content":"        String expectedMessage \u003d String.format(addTransactionCommand.MESSAGE_SUCCESS,"},{"lineNumber":94,"author":{"gitID":"ongkc"},"content":"                validTransaction);"},{"lineNumber":95,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(addTransactionCommand, model, expectedMessage, expectedModel);"},{"lineNumber":96,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":98,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":99,"author":{"gitID":"ongkc"},"content":"    public void execute_paymentTransactionPercentageAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":100,"author":{"gitID":"ongkc"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":101,"author":{"gitID":"ongkc"},"content":"        Transaction validTransaction \u003d model.getFilteredTransactionList().get(INDEX_SEVENTH_TRANSACTION.getZeroBased());"},{"lineNumber":102,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":103,"author":{"gitID":"ongkc"},"content":"        AddTransactionCommand addTransactionCommand \u003d prepareCommand(validTransaction);"},{"lineNumber":104,"author":{"gitID":"ongkc"},"content":"        String expectedMessage \u003d String.format(addTransactionCommand.MESSAGE_SUCCESS,"},{"lineNumber":105,"author":{"gitID":"ongkc"},"content":"                validTransaction);"},{"lineNumber":106,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(addTransactionCommand, model, expectedMessage, expectedModel);"},{"lineNumber":107,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"ongkc"},"content":"    public void execute_paydebtTransactionAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":110,"author":{"gitID":"ongkc"},"content":"        ModelStubAcceptingTransactionAdded modelStub \u003d"},{"lineNumber":111,"author":{"gitID":"ongkc"},"content":"                new ModelStubAcceptingTransactionAdded();"},{"lineNumber":112,"author":{"gitID":"ongkc"},"content":"        Transaction validTransaction \u003d new TransactionBuilder().withAmount(\"12345\")"},{"lineNumber":113,"author":{"gitID":"ongkc"},"content":"                .withTransactionType(\"paydebt\").build();"},{"lineNumber":114,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":115,"author":{"gitID":"ongkc"},"content":"        CommandResult commandResult \u003d getAddTransactionCommand(validTransaction, modelStub).execute();"},{"lineNumber":116,"author":{"gitID":"ongkc"},"content":"        assertEquals(String.format(AddTransactionCommand.MESSAGE_SUCCESS, validTransaction),"},{"lineNumber":117,"author":{"gitID":"ongkc"},"content":"                commandResult.feedbackToUser);"},{"lineNumber":118,"author":{"gitID":"ongkc"},"content":"        assertEquals(Arrays.asList(validTransaction), modelStub.transactionsAdded);"},{"lineNumber":119,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"ongkc"},"content":"    public void execute_personNotFound_throwsCommandException() throws Exception {"},{"lineNumber":122,"author":{"gitID":"ongkc"},"content":"        ModelStub modelStub \u003d"},{"lineNumber":123,"author":{"gitID":"ongkc"},"content":"                new ModelStubThrowingPersonNotFoundException();"},{"lineNumber":124,"author":{"gitID":"ongkc"},"content":"        Transaction validTransaction \u003d new TransactionBuilder().build();"},{"lineNumber":125,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":126,"author":{"gitID":"ongkc"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":127,"author":{"gitID":"ongkc"},"content":"        thrown.expectMessage(AddTransactionCommand.MESSAGE_NONEXISTENT_PERSON);"},{"lineNumber":128,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":129,"author":{"gitID":"ongkc"},"content":"        getAddTransactionCommand(validTransaction, modelStub).execute();"},{"lineNumber":130,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":132,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":133,"author":{"gitID":"ongkc"},"content":"    public void equals() throws DuplicatePersonException {"},{"lineNumber":134,"author":{"gitID":"ongkc"},"content":"        Transaction one \u003d new TransactionBuilder().build();"},{"lineNumber":135,"author":{"gitID":"ongkc"},"content":"        Transaction two \u003d new TransactionBuilder().withTransactionType(\"paydebt\").build();"},{"lineNumber":136,"author":{"gitID":"ongkc"},"content":"        Transaction three \u003d new TransactionBuilder().withPayees("},{"lineNumber":137,"author":{"gitID":"ongkc"},"content":"                VALID_TRANSACTION_PAYEE_ONE, VALID_TRANSACTION_PAYEE_TWO).build();"},{"lineNumber":138,"author":{"gitID":"ongkc"},"content":"        AddTransactionCommand addOneCommand \u003d new AddTransactionCommand(one);"},{"lineNumber":139,"author":{"gitID":"ongkc"},"content":"        AddTransactionCommand addThreeCommand \u003d new AddTransactionCommand(three);"},{"lineNumber":140,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":141,"author":{"gitID":"ongkc"},"content":"        // same object -\u003e returns true"},{"lineNumber":142,"author":{"gitID":"ongkc"},"content":"        assertTrue(addOneCommand.equals(addOneCommand));"},{"lineNumber":143,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":144,"author":{"gitID":"ongkc"},"content":"        // same values -\u003e returns true"},{"lineNumber":145,"author":{"gitID":"ongkc"},"content":"        AddTransactionCommand addOneCommandCopy \u003d new AddTransactionCommand(one);"},{"lineNumber":146,"author":{"gitID":"ongkc"},"content":"        assertTrue(addOneCommand.equals(addOneCommandCopy));"},{"lineNumber":147,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":148,"author":{"gitID":"ongkc"},"content":"        // different types -\u003e returns false"},{"lineNumber":149,"author":{"gitID":"ongkc"},"content":"        assertFalse(addOneCommand.equals(1));"},{"lineNumber":150,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":151,"author":{"gitID":"ongkc"},"content":"        // null -\u003e returns false"},{"lineNumber":152,"author":{"gitID":"ongkc"},"content":"        assertFalse(addOneCommand.equals(null));"},{"lineNumber":153,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":154,"author":{"gitID":"ongkc"},"content":"        // different Transaction -\u003e returns false"},{"lineNumber":155,"author":{"gitID":"ongkc"},"content":"        assertFalse(addOneCommand.equals(addThreeCommand));"},{"lineNumber":156,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":158,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":159,"author":{"gitID":"ongkc"},"content":"     * Generates a new AddCommand with the details of the given transaction."},{"lineNumber":160,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":161,"author":{"gitID":"ongkc"},"content":"    private AddTransactionCommand getAddTransactionCommand(Transaction transaction, Model model) {"},{"lineNumber":162,"author":{"gitID":"ongkc"},"content":"        AddTransactionCommand command \u003d new AddTransactionCommand(transaction);"},{"lineNumber":163,"author":{"gitID":"ongkc"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":164,"author":{"gitID":"ongkc"},"content":"        return command;"},{"lineNumber":165,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":167,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"ongkc"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":169,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"ongkc"},"content":"    private class ModelStub implements Model {"},{"lineNumber":171,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":172,"author":{"gitID":"ongkc"},"content":"        public void addPerson(Person person) {"},{"lineNumber":173,"author":{"gitID":"ongkc"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":176,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":177,"author":{"gitID":"ongkc"},"content":"        public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":178,"author":{"gitID":"ongkc"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":179,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":181,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":182,"author":{"gitID":"ongkc"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":183,"author":{"gitID":"ongkc"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":184,"author":{"gitID":"ongkc"},"content":"            return null;"},{"lineNumber":185,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":186,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":187,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":188,"author":{"gitID":"ongkc"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":189,"author":{"gitID":"ongkc"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":190,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":191,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":192,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":193,"author":{"gitID":"ongkc"},"content":"        public void updatePerson(Person target, Person editedPerson) {"},{"lineNumber":194,"author":{"gitID":"ongkc"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":195,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":197,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":198,"author":{"gitID":"ongkc"},"content":"        public Person findPersonByName(Name name) {"},{"lineNumber":199,"author":{"gitID":"ongkc"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":200,"author":{"gitID":"ongkc"},"content":"            return null;"},{"lineNumber":201,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":202,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":203,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":204,"author":{"gitID":"ongkc"},"content":"        public UniquePersonList getPayeesList(ArgumentMultimap argMultimap, Model model) {"},{"lineNumber":205,"author":{"gitID":"ongkc"},"content":"            return null;"},{"lineNumber":206,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":208,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":209,"author":{"gitID":"ongkc"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":210,"author":{"gitID":"ongkc"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":211,"author":{"gitID":"ongkc"},"content":"            return null;"},{"lineNumber":212,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":213,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":214,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":215,"author":{"gitID":"ongkc"},"content":"        public boolean personNotFoundInTransaction(Person person) {"},{"lineNumber":216,"author":{"gitID":"ongkc"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":217,"author":{"gitID":"ongkc"},"content":"            return true;"},{"lineNumber":218,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":220,"author":{"gitID":"ongkc"},"content":"        public List\u003cTransaction\u003e findTransactionsWithPerson(Person person) {"},{"lineNumber":221,"author":{"gitID":"ongkc"},"content":"            return null;"},{"lineNumber":222,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":223,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":224,"author":{"gitID":"ongkc"},"content":"        public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"},{"lineNumber":225,"author":{"gitID":"ongkc"},"content":"            return null;"},{"lineNumber":226,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":227,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":228,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":229,"author":{"gitID":"ongkc"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":230,"author":{"gitID":"ongkc"},"content":"            fail(\"This method should not be called.\");"},{"lineNumber":231,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":233,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":234,"author":{"gitID":"ongkc"},"content":"        public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"},{"lineNumber":235,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":236,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":237,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":238,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":239,"author":{"gitID":"ongkc"},"content":"        public void addTransaction(Transaction transaction) throws PersonNotFoundException {}"},{"lineNumber":240,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":241,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":242,"author":{"gitID":"ongkc"},"content":"        public void deleteTransaction(Transaction transaction) {"},{"lineNumber":243,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":245,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":246,"author":{"gitID":"ongkc"},"content":"        public ObservableList\u003cDebtor\u003e getFilteredDebtors() {"},{"lineNumber":247,"author":{"gitID":"ongkc"},"content":"            return null;"},{"lineNumber":248,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":249,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":250,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":251,"author":{"gitID":"ongkc"},"content":"        public ObservableList\u003cCreditor\u003e getFilteredCreditors() {"},{"lineNumber":252,"author":{"gitID":"ongkc"},"content":"            return null;"},{"lineNumber":253,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":255,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":256,"author":{"gitID":"ongkc"},"content":"        public void updateDebtorList(Predicate\u003cDebtor\u003e predicateShowNoDebtors) {"},{"lineNumber":257,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":258,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":260,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":261,"author":{"gitID":"ongkc"},"content":"        public void updateCreditorList(Predicate\u003cCreditor\u003e predicateShowAllCreditors) {"},{"lineNumber":262,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":263,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"ongkc"},"content":"     * A Model stub that always accept the transaction being added."},{"lineNumber":267,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":268,"author":{"gitID":"ongkc"},"content":"    private class ModelStubAcceptingTransactionAdded extends ModelStub {"},{"lineNumber":269,"author":{"gitID":"ongkc"},"content":"        final ArrayList\u003cTransaction\u003e transactionsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":270,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":271,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":272,"author":{"gitID":"ongkc"},"content":"        public void addTransaction(Transaction transaction) {"},{"lineNumber":273,"author":{"gitID":"ongkc"},"content":"            requireNonNull(transaction);"},{"lineNumber":274,"author":{"gitID":"ongkc"},"content":"            transactionsAdded.add(transaction);"},{"lineNumber":275,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":277,"author":{"gitID":"ongkc"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":278,"author":{"gitID":"ongkc"},"content":"            return new AddressBook();"},{"lineNumber":279,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":282,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"ongkc"},"content":"     * A Model stub that throw PersonNotFound except the transaction being added."},{"lineNumber":284,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"ongkc"},"content":"    private class ModelStubThrowingPersonNotFoundException extends ModelStub {"},{"lineNumber":286,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":287,"author":{"gitID":"ongkc"},"content":"        public void addTransaction(Transaction transaction) throws PersonNotFoundException {"},{"lineNumber":288,"author":{"gitID":"ongkc"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":289,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":290,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":292,"author":{"gitID":"ongkc"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":293,"author":{"gitID":"ongkc"},"content":"            return new AddressBook();"},{"lineNumber":294,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":295,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":296,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":297,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":298,"author":{"gitID":"ongkc"},"content":"    private AddTransactionCommand prepareCommand(Transaction validTransaction) {"},{"lineNumber":299,"author":{"gitID":"ongkc"},"content":"        AddTransactionCommand addTransactionCommand \u003d new AddTransactionCommand(validTransaction);"},{"lineNumber":300,"author":{"gitID":"ongkc"},"content":"        addTransactionCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":301,"author":{"gitID":"ongkc"},"content":"        return addTransactionCommand;"},{"lineNumber":302,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":303,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"Steven-Jia":2,"phmignot":1,"-":40,"ongkc":260}},{"path":"src/test/java/seedu/address/logic/commands/FindPersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPersonCommand}."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"Steven-Jia"},"content":"public class FindPersonCommandTest {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":"        FindPersonCommand findFirstCommand \u003d new FindPersonCommand(firstPredicate);"},{"lineNumber":41,"author":{"gitID":"Steven-Jia"},"content":"        FindPersonCommand findSecondCommand \u003d new FindPersonCommand(secondPredicate);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"Steven-Jia"},"content":"        FindPersonCommand findFirstCommandCopy \u003d new FindPersonCommand(firstPredicate);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitID":"Steven-Jia"},"content":"        FindPersonCommand command \u003d prepareCommand(\" \");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitID":"Steven-Jia"},"content":"        FindPersonCommand command \u003d prepareCommand(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, ELLE, FIONA));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"Steven-Jia"},"content":"     * Parses {@code userInput} into a {@code FindPersonCommand}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":"    private FindPersonCommand prepareCommand(String userInput) {"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"        FindPersonCommand command \u003d"},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":"                new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"Steven-Jia"},"content":"    private void assertCommandSuccess(FindPersonCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertEquals(expectedList, model.getFilteredPersonList());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddressBook, model.getAddressBook());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":12,"phmignot":1,"-":85}},{"path":"src/test/java/seedu/address/logic/commands/DeletePersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class DeletePersonCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() throws PersonNotFoundException {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        deletePersonCommand.execute();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deletePersonCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"Steven-Jia"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() throws PersonNotFoundException {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * 1. Deletes a {@code Person} from a filtered list."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     * 2. Undo the deletion."},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."},{"lineNumber":128,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        DeletePersonCommand deletePersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        deletePersonCommand.execute();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        undoRedoStack.push(deletePersonCommand);"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        // redo -\u003e deletes same second person in unfiltered person list"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        DeletePersonCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        DeletePersonCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_PERSON);"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        DeletePersonCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_PERSON);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private DeletePersonCommand prepareCommand(Index index) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        DeletePersonCommand deleteCommand \u003d new DeletePersonCommand(index);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        return deleteCommand;"},{"lineNumber":186,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":2,"phmignot":1,"-":193}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final DeletePersonCommand deletePersonCommandOne \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final DeletePersonCommand deletePersonCommandTwo \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        deletePersonCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        deletePersonCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                Arrays.asList(deletePersonCommandOne, deletePersonCommandTwo), Collections.emptyList());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        deletePersonCommandOne.execute();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        deletePersonCommandTwo.execute();"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"phmignot":1,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"public class AddPersonCommandIntegrationTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void execute_newPerson_success() throws Exception {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(validPerson, model), model,"},{"lineNumber":37,"author":{"gitID":"Steven-Jia"},"content":"                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"Steven-Jia"},"content":"     * Generates a new {@code AddPersonCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"Steven-Jia"},"content":"    private AddPersonCommand prepareCommand(Person person, Model model) {"},{"lineNumber":44,"author":{"gitID":"Steven-Jia"},"content":"        AddPersonCommand command \u003d new AddPersonCommand(person);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":6,"phmignot":1,"-":41}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_emptyAddressBook_success() throws PersonNotFoundException {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_nonEmptyAddressBook_success() throws PersonNotFoundException {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private ClearCommand prepareCommand(Model model) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        ClearCommand command \u003d new ClearCommand();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":2,"phmignot":1,"-":34}},{"path":"src/test/java/seedu/address/logic/commands/SelectPersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"Steven-Jia"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectPersonCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"Steven-Jia"},"content":"public class SelectPersonCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_THIRD_PERSON);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(lastPersonIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertExecutionSuccess(INDEX_FIRST_PERSON);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"        SelectPersonCommand selectFirstCommand \u003d new SelectPersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":"        SelectPersonCommand selectSecondCommand \u003d new SelectPersonCommand(INDEX_SECOND_PERSON);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"Steven-Jia"},"content":"        SelectPersonCommand selectFirstCommandCopy \u003d new SelectPersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"Steven-Jia"},"content":"     * Executes a {@code SelectPersonCommand} with the given {@code index},"},{"lineNumber":100,"author":{"gitID":"Steven-Jia"},"content":"     * and checks that {@code JumpToListRequestEvent} is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"Steven-Jia"},"content":"        SelectPersonCommand selectPersonCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"Steven-Jia"},"content":"            CommandResult commandResult \u003d selectPersonCommand.execute();"},{"lineNumber":107,"author":{"gitID":"Steven-Jia"},"content":"            assertEquals(String.format(SelectPersonCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"Steven-Jia"},"content":"     * Executes a {@code SelectPersonCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"Steven-Jia"},"content":"        SelectPersonCommand selectPersonCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"Steven-Jia"},"content":"            selectPersonCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"Steven-Jia"},"content":"     * Returns a {@code SelectPersonCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"Steven-Jia"},"content":"    private SelectPersonCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"Steven-Jia"},"content":"        SelectPersonCommand selectPersonCommand \u003d new SelectPersonCommand(index);"},{"lineNumber":138,"author":{"gitID":"Steven-Jia"},"content":"        selectPersonCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"Steven-Jia"},"content":"        return selectPersonCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":18,"phmignot":1,"-":122}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        // undo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":"    public void redo() throws CommandException, PersonNotFoundException {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // redo() should cause the model\u0027s filtered list to show all persons"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Deletes the first person in the model\u0027s filtered list."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            Person personToDelete \u003d model.getFilteredPersonList().get(0);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                model.deletePerson(personToDelete);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                fail(\"Impossible: personToDelete was retrieved from model.\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"phmignot":1,"-":66}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final DeletePersonCommand deletePersonCommandOne \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final DeletePersonCommand deletePersonCommandTwo \u003d new DeletePersonCommand(INDEX_SECOND_PERSON);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        deletePersonCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        deletePersonCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        deletePersonCommandOne.preprocessUndoableCommand();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        deletePersonCommandTwo.preprocessUndoableCommand();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":"    public void execute() throws CommandException, PersonNotFoundException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":44,"author":{"gitID":"-"},"content":"                Collections.emptyList(), Arrays.asList(deletePersonCommandTwo, deletePersonCommandOne));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        deleteFirstPerson(expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"phmignot":1,"-":58}},{"path":"src/test/java/seedu/address/logic/commands/AddTransactionCommandIntegrationTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":"import seedu.address.testutil.TransactionBuilder;"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":" * Contains integration tests (interaction with the Model) for {@code AddTransactionCommand}."},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"public class AddTransactionCommandIntegrationTest {"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"    @Before"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"    public void execute_newTransaction_success() throws Exception {"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"        Transaction validTransaction \u003d new TransactionBuilder().build();"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"        expectedModel.addTransaction(validTransaction);"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(prepareCommand(validTransaction, model), model,"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"                String.format(AddTransactionCommand.MESSAGE_SUCCESS, validTransaction), expectedModel);"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"     * Generates a new {@code AddTransactionCommand} which upon execution, adds {@code person} into the {@code model}."},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    private AddTransactionCommand prepareCommand(Transaction transaction, Model model) {"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"        AddTransactionCommand command \u003d new AddTransactionCommand(transaction);"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"        return command;"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"phmignot":2,"-":13,"ongkc":33}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Steven-Jia"},"content":"import static junit.framework.TestCase.fail;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Balance;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class XmlAdaptedPersonTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    protected static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    protected static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    protected static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    protected static final String INVALID_BALANCE \u003d \" \";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    protected static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    protected static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    protected static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    protected static final String VALID_BALANCE \u003d BENSON.getBalance().toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    protected static final String VALID_ZERO_BALANCE \u003d \"0.00\";"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":46,"author":{"gitID":"Steven-Jia"},"content":"                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":47,"author":{"gitID":"Steven-Jia"},"content":"                        VALID_BALANCE, VALID_TAGS);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":55,"author":{"gitID":"Steven-Jia"},"content":"                VALID_BALANCE, VALID_TAGS);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":63,"author":{"gitID":"Steven-Jia"},"content":"                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"},{"lineNumber":64,"author":{"gitID":"Steven-Jia"},"content":"                        VALID_BALANCE, VALID_TAGS);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"},{"lineNumber":71,"author":{"gitID":"Steven-Jia"},"content":"                VALID_BALANCE, VALID_TAGS);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL,"},{"lineNumber":80,"author":{"gitID":"Steven-Jia"},"content":"                        VALID_BALANCE, VALID_TAGS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null,"},{"lineNumber":88,"author":{"gitID":"Steven-Jia"},"content":"                VALID_BALANCE, VALID_TAGS);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":94,"author":{"gitID":"Steven-Jia"},"content":"    @Test"},{"lineNumber":95,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_invalidBalance_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":97,"author":{"gitID":"Steven-Jia"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":98,"author":{"gitID":"Steven-Jia"},"content":"                        INVALID_BALANCE, VALID_TAGS);"},{"lineNumber":99,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d Balance.MESSAGE_BALANCE_CONSTRAINTS;"},{"lineNumber":100,"author":{"gitID":"Steven-Jia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":101,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":103,"author":{"gitID":"Steven-Jia"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_nullBalance_returnsPersonWithZeroBalance() {"},{"lineNumber":105,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":106,"author":{"gitID":"Steven-Jia"},"content":"                null, VALID_TAGS);"},{"lineNumber":107,"author":{"gitID":"Steven-Jia"},"content":"        Object balance \u003d new Object();"},{"lineNumber":108,"author":{"gitID":"Steven-Jia"},"content":"        Balance expectedBalance \u003d new Balance(VALID_ZERO_BALANCE);"},{"lineNumber":109,"author":{"gitID":"Steven-Jia"},"content":"        try {"},{"lineNumber":110,"author":{"gitID":"Steven-Jia"},"content":"            balance \u003d person.toModelType().getBalance();"},{"lineNumber":111,"author":{"gitID":"Steven-Jia"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":112,"author":{"gitID":"Steven-Jia"},"content":"            fail(\"Could not access balance\");"},{"lineNumber":113,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"Steven-Jia"},"content":"        assertEquals(balance, expectedBalance);"},{"lineNumber":115,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"Steven-Jia"},"content":"    //@@author"},{"lineNumber":117,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson person \u003d"},{"lineNumber":123,"author":{"gitID":"Steven-Jia"},"content":"                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":124,"author":{"gitID":"Steven-Jia"},"content":"                        VALID_BALANCE, invalidTags);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":41,"-":87}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         * {@link XmlAddressBookStorage} class."},{"lineNumber":62,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        public XmlAddressBookStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"phmignot":1,"-":100}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100);"},{"lineNumber":85,"author":{"gitID":"phmignot"},"content":"        userPrefs.setAddressBookFilePath(\"smartsplit.xml\");"},{"lineNumber":86,"author":{"gitID":"phmignot"},"content":"        userPrefs.setAddressBookName(\"TypicalSmartSplitName\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        original.setGuiSettings(1200, 200, 0, 2);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        original.setGuiSettings(5, 5, 5, 5);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"phmignot":2,"-":133}},{"path":"src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalTransactions;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class XmlAddressBookStorageTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/XmlAddressBookStorageTest/\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        readAddressBook(null);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return new XmlAddressBookStorage(filePath).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        readAddressBook(\"NotXmlFormatAddressBook.xml\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidPersonAddressBook.xml\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidTransactionAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidTransactionAddressBook.xml\");"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    public void readAddressBook_invalidAndValidTransactionAddressBook_throwDataConversionException() throws Exception {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempAddressBook.xml\";"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":102,"author":{"gitID":"ongkc"},"content":"        //@@author ongkc"},{"lineNumber":103,"author":{"gitID":"ongkc"},"content":"        original.addTransaction(TypicalTransactions.getTypicalTransactions().get(3));"},{"lineNumber":104,"author":{"gitID":"ongkc"},"content":"        original.removeTransaction(TypicalTransactions.getTypicalTransactions().get(3));"},{"lineNumber":105,"author":{"gitID":"ongkc"},"content":"        xmlAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":106,"author":{"gitID":"ongkc"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":107,"author":{"gitID":"ongkc"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":108,"author":{"gitID":"ongkc"},"content":"        //@@author"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":112,"author":{"gitID":"Steven-Jia"},"content":"        original.addTransaction(TypicalTransactions.getTypicalTransactions().get(4));"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        saveAddressBook(null, \"SomeFile.xml\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":130,"author":{"gitID":"-"},"content":"            new XmlAddressBookStorage(filePath).saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        saveAddressBook(new AddressBook(), null);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"phmignot":1,"-":134,"ongkc":7}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":26,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":37,"author":{"gitID":"Steven-Jia"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"},{"lineNumber":38,"author":{"gitID":"Steven-Jia"},"content":" * and unit tests for EditPersonCommand."},{"lineNumber":39,"author":{"gitID":"-"},"content":" */"},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":"public class EditPersonCommandTest {"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":48,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":69,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(indexLastPerson, descriptor);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(lastPerson, editedPerson);"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() throws PersonNotFoundException {"},{"lineNumber":81,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public void execute_filteredList_success() throws Exception {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":97,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":98,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() throws PersonNotFoundException {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":112,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_duplicatePersonFilteredList_failure() throws PersonNotFoundException {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":123,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"},{"lineNumber":124,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() throws PersonNotFoundException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":133,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"-"},"content":""},{"lineNumber":138,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitID":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"Steven-Jia"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() throws PersonNotFoundException {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(outOfBoundIndex,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":163,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":165,"author":{"gitID":"-"},"content":""},{"lineNumber":166,"author":{"gitID":"-"},"content":"        // edit -\u003e first person edited"},{"lineNumber":167,"author":{"gitID":"Steven-Jia"},"content":"        editPersonCommand.execute();"},{"lineNumber":168,"author":{"gitID":"Steven-Jia"},"content":"        undoRedoStack.push(editPersonCommand);"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        // redo -\u003e same first person edited again"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":179,"author":{"gitID":"Steven-Jia"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() throws PersonNotFoundException {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":185,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"Steven-Jia"},"content":"        // execution failed -\u003e editPersonCommand not pushed into undoRedoStack"},{"lineNumber":188,"author":{"gitID":"Steven-Jia"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"-"},"content":""},{"lineNumber":195,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * 1. Edits a {@code Person} from a filtered list."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     * 2. Undo the edit."},{"lineNumber":198,"author":{"gitID":"-"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"},{"lineNumber":199,"author":{"gitID":"-"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":200,"author":{"gitID":"-"},"content":"     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."},{"lineNumber":201,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":209,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand editPersonCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"        showPersonAtIndex(model, INDEX_SECOND_PERSON);"},{"lineNumber":213,"author":{"gitID":"-"},"content":"        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"},{"lineNumber":215,"author":{"gitID":"Steven-Jia"},"content":"        editPersonCommand.execute();"},{"lineNumber":216,"author":{"gitID":"Steven-Jia"},"content":"        undoRedoStack.push(editPersonCommand);"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"        expectedModel.updatePerson(personToEdit, editedPerson);"},{"lineNumber":222,"author":{"gitID":"-"},"content":"        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"},{"lineNumber":223,"author":{"gitID":"-"},"content":"        // redo -\u003e edits same second person in unfiltered person list"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":228,"author":{"gitID":"-"},"content":"    public void equals() throws Exception {"},{"lineNumber":229,"author":{"gitID":"Steven-Jia"},"content":"        final EditPersonCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":232,"author":{"gitID":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":233,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":234,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":240,"author":{"gitID":"-"},"content":"        commandWithSameValues.preprocessUndoableCommand();"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(commandWithSameValues));"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":247,"author":{"gitID":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":250,"author":{"gitID":"Steven-Jia"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":253,"author":{"gitID":"Steven-Jia"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":254,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":257,"author":{"gitID":"Steven-Jia"},"content":"     * Returns an {@code EditPersonCommand} with parameters {@code index} and {@code descriptor}"},{"lineNumber":258,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":259,"author":{"gitID":"Steven-Jia"},"content":"    private EditPersonCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"},{"lineNumber":260,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(index, descriptor);"},{"lineNumber":261,"author":{"gitID":"Steven-Jia"},"content":"        editPersonCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":262,"author":{"gitID":"Steven-Jia"},"content":"        return editPersonCommand;"},{"lineNumber":263,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":48,"phmignot":1,"-":215}},{"path":"src/test/java/seedu/address/model/transaction/AmountTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.transaction;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":"public class AmountTest {"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Amount(null));"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"    public void constructor_invalidAmount_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"        String invalidAmount \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"    public void isValidAmount() {"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"        // null amount"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"        // invalid amount"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"        assertFalse(Amount.isValidAmount(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"        assertFalse(Amount.isValidAmount(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"        assertFalse(Amount.isValidAmount(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"        assertFalse(Amount.isValidAmount(\"123*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"        assertFalse(Amount.isValidAmount(\"1.2.3\")); // contains irregular numeric format"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"        assertFalse(Amount.isValidAmount(\"one dollars\")); // contains alphabet characters"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"        assertFalse(Amount.isValidAmount(\"1 2 3\")); // contains spacing between numbers"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"        assertFalse(Amount.isValidAmount(\"12345.123\")); // numbers \u0026 more than 2 decimals"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"        assertFalse(Amount.isValidAmount(\"12345.\")); // numbers \u0026 decimal point only"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"        // valid name"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"        assertTrue(Amount.isValidAmount(\"12345\")); // numbers only"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"        assertTrue(Amount.isValidAmount(\"12345.1\")); // numbers \u0026 1 decimal only"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"        assertTrue(Amount.isValidAmount(\"12345.78\")); // numbers \u0026 2 decimals only"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"-":8,"ongkc":36}},{"path":"src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalTransactions;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBookTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"            FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_PERSONS_FILE \u003d"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final File INVALID_PERSON_FILE \u003d"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final File INVALID_TAG_FILE \u003d"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File TYPICAL_TRANSACTIONS_FILE \u003d"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            new File(TEST_DATA_FOLDER + \"typicalTransactionsAddressBook.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final File INVALID_TRANSACTION_FILE \u003d"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            new File(TEST_DATA_FOLDER + \"invalidTransactionAddressBook.xml\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    //    @Test"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    //    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    //        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    //                XmlSerializableAddressBook.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    //        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    //        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    //        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    //  }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"    public void toModelType_typicalTransactionsFile_success() throws Exception {"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_TRANSACTIONS_FILE,"},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":"        AddressBook typicalTransactionsAddressBook \u003d TypicalTransactions.getTypicalAddressBook();"},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"        assertEquals(addressBookFromFile, typicalTransactionsAddressBook);"},{"lineNumber":69,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"ongkc"},"content":"    public void toModelType_invalidTransactionFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":72,"author":{"gitID":"ongkc"},"content":"        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TRANSACTION_FILE,"},{"lineNumber":73,"author":{"gitID":"ongkc"},"content":"                XmlSerializableAddressBook.class);"},{"lineNumber":74,"author":{"gitID":"ongkc"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":75,"author":{"gitID":"ongkc"},"content":"        dataFromFile.toModelType();"},{"lineNumber":76,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"-":60,"ongkc":17}},{"path":"src/test/java/seedu/address/model/transaction/DescriptionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.transaction;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":"public class DescriptionTest {"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    public void constructor_invalidDescription_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"        String invalidDescription \u003d \"\";"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    public void isValidDescription() {"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"        // null description"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"        // invalid description"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"        assertFalse(Description.isValidDescription(\"\")); // empty string"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"        assertFalse(Description.isValidDescription(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"        // valid description"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"        assertTrue(Description.isValidDescription(\"peter jack\")); // alphabets only"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"        assertTrue(Description.isValidDescription(\"lunch meal\")); // alphanumeric characters"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"        assertTrue(Description.isValidDescription(\"Dinner Meal\")); // with capital letters"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"        assertTrue(Description.isValidDescription(\"expense for meal and travel\")); // long description"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"        assertTrue(Description.isValidDescription(\"*food*\")); // contain non-alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"-":8,"ongkc":31}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedTransactionTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedTransaction.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.storage.XmlAdaptedTransaction.MISSING_FIELD_MESSAGE_FORMAT_DATE;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Steven-Jia"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitID":"Steven-Jia"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":10,"author":{"gitID":"Steven-Jia"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Amount;"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Description;"},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.transaction.SplitMethod;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.TransactionType;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalTransactions;"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"public class XmlAdaptedTransactionTest extends XmlAdaptedPersonTest {"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"    private static final String INVALID_AMOUNT \u003d \" \";"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"    private static final String INVALID_DESCRIPTION \u003d \" \";"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"    private static final String INVALID_TRANSACTION_TYPE \u003d \" \";"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"    private static final String INVALID_SPLIT_METHOD \u003d \" \";"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"    private static final Person VALID_PAYER \u003d TypicalTransactions.getTypicalTransactions().get(0).getPayer();"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"    private static final String VALID_AMOUNT \u003d TypicalTransactions.getTypicalTransactions().get(0)"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"            .getAmount().toString();"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"    private static final String VALID_DESCRIPTION \u003d TypicalTransactions.getTypicalTransactions().get(0)"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"            .getDescription().toString();"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"    private static final Person VALID_PAYEE \u003d TypicalTransactions.getTypicalTransactions().get(0)"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"            .getPayees().iterator().next();"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"    private static UniquePersonList validPayees \u003d new UniquePersonList();"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"    private static final String VALID_TRANSACTION_TYPE \u003d TypicalTransactions.getTypicalTransactions().get(0)"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"            .getTransactionType().toString();"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"    private static final String VALID_SPLIT_METHOD_EVENLY \u003d TypicalTransactions.getTypicalTransactions().get(0)"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"            .getSplitMethod().toString();"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    private static final List\u003cInteger\u003e VALID_SPLIT_BY_UNITS_LIST \u003d TypicalTransactions.getTypicalTransactions().get(1)"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"            .getUnits();"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"    private static final List\u003cInteger\u003e VALID_SPLIT_BY_PERCENTAGES_LIST \u003d TypicalTransactions"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"            .getTypicalTransactions().get(2)"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"            .getPercentages();"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"    private static final List\u003cInteger\u003e VALID_EMPTY_LIST \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"    @Before"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"    public void setUp() {"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"            validPayees.add(VALID_PAYEE);"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"            dpe.printStackTrace();"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":59,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":60,"author":{"gitID":"Steven-Jia"},"content":"    @Test(expected \u003d NullPointerException.class)"},{"lineNumber":61,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_nullPayer_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TRANSACTION_TYPE, null,"},{"lineNumber":63,"author":{"gitID":"Steven-Jia"},"content":"                VALID_AMOUNT, VALID_DESCRIPTION, validPayees,"},{"lineNumber":64,"author":{"gitID":"Steven-Jia"},"content":"                VALID_SPLIT_METHOD_EVENLY, VALID_EMPTY_LIST, VALID_EMPTY_LIST);"},{"lineNumber":65,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Payer\");"},{"lineNumber":66,"author":{"gitID":"Steven-Jia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"},{"lineNumber":67,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":68,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":70,"author":{"gitID":"Steven-Jia"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_invalidAmount_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedTransaction transaction \u003d"},{"lineNumber":73,"author":{"gitID":"Steven-Jia"},"content":"                new XmlAdaptedTransaction(VALID_TRANSACTION_TYPE, VALID_PAYER, INVALID_AMOUNT,"},{"lineNumber":74,"author":{"gitID":"Steven-Jia"},"content":"                        VALID_DESCRIPTION, validPayees,"},{"lineNumber":75,"author":{"gitID":"Steven-Jia"},"content":"                        VALID_SPLIT_METHOD_EVENLY, VALID_EMPTY_LIST, VALID_EMPTY_LIST);"},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d Amount.MESSAGE_AMOUNT_CONSTRAINTS;"},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":80,"author":{"gitID":"Steven-Jia"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_nullAmount_throwsIllegalValueException() {"},{"lineNumber":82,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TRANSACTION_TYPE,"},{"lineNumber":83,"author":{"gitID":"Steven-Jia"},"content":"                VALID_PAYER, null, VALID_DESCRIPTION, validPayees,"},{"lineNumber":84,"author":{"gitID":"Steven-Jia"},"content":"                VALID_SPLIT_METHOD_EVENLY, VALID_EMPTY_LIST, VALID_EMPTY_LIST);"},{"lineNumber":85,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"},{"lineNumber":87,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"Steven-Jia"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_nullDate_throwsIllegalValueException() {"},{"lineNumber":90,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TRANSACTION_TYPE,"},{"lineNumber":91,"author":{"gitID":"Steven-Jia"},"content":"                VALID_PAYER, VALID_AMOUNT, VALID_DESCRIPTION, validPayees, null,"},{"lineNumber":92,"author":{"gitID":"Steven-Jia"},"content":"                VALID_SPLIT_METHOD_EVENLY, VALID_EMPTY_LIST, VALID_EMPTY_LIST);"},{"lineNumber":93,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT_DATE, Date.class.getSimpleName());"},{"lineNumber":94,"author":{"gitID":"Steven-Jia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"},{"lineNumber":95,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":97,"author":{"gitID":"Steven-Jia"},"content":"    @Test"},{"lineNumber":98,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_invalidDescription_throwsIllegalValueException() {"},{"lineNumber":99,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedTransaction transaction \u003d"},{"lineNumber":100,"author":{"gitID":"Steven-Jia"},"content":"                new XmlAdaptedTransaction(VALID_TRANSACTION_TYPE, VALID_PAYER, VALID_AMOUNT, INVALID_DESCRIPTION,"},{"lineNumber":101,"author":{"gitID":"Steven-Jia"},"content":"                        validPayees, VALID_SPLIT_METHOD_EVENLY, VALID_EMPTY_LIST, VALID_EMPTY_LIST);"},{"lineNumber":102,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d Description.MESSAGE_DESCRIPTION_CONSTRAINTS;"},{"lineNumber":103,"author":{"gitID":"Steven-Jia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"},{"lineNumber":104,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":106,"author":{"gitID":"Steven-Jia"},"content":"    @Test"},{"lineNumber":107,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_nullDescription_throwsIllegalValueException() {"},{"lineNumber":108,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TRANSACTION_TYPE, VALID_PAYER, VALID_AMOUNT,"},{"lineNumber":109,"author":{"gitID":"Steven-Jia"},"content":"                null, validPayees,"},{"lineNumber":110,"author":{"gitID":"Steven-Jia"},"content":"                VALID_SPLIT_METHOD_EVENLY, VALID_EMPTY_LIST, VALID_EMPTY_LIST);"},{"lineNumber":111,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"},{"lineNumber":112,"author":{"gitID":"Steven-Jia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"},{"lineNumber":113,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":115,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":116,"author":{"gitID":"Steven-Jia"},"content":"    @Test(expected \u003d NullPointerException.class)"},{"lineNumber":117,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_nullPayee_throwsNullPointerException() {"},{"lineNumber":118,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TRANSACTION_TYPE, VALID_PAYER, VALID_AMOUNT,"},{"lineNumber":119,"author":{"gitID":"Steven-Jia"},"content":"                VALID_DESCRIPTION, null,"},{"lineNumber":120,"author":{"gitID":"Steven-Jia"},"content":"                VALID_SPLIT_METHOD_EVENLY, VALID_EMPTY_LIST, VALID_EMPTY_LIST);"},{"lineNumber":121,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Payees\");"},{"lineNumber":122,"author":{"gitID":"Steven-Jia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"},{"lineNumber":123,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":125,"author":{"gitID":"Steven-Jia"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_invalidTransactionType_throwsIllegalValueException() {"},{"lineNumber":127,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedTransaction transaction \u003d"},{"lineNumber":128,"author":{"gitID":"Steven-Jia"},"content":"                new XmlAdaptedTransaction(INVALID_TRANSACTION_TYPE, VALID_PAYER, VALID_AMOUNT, VALID_DESCRIPTION,"},{"lineNumber":129,"author":{"gitID":"Steven-Jia"},"content":"                        validPayees, VALID_SPLIT_METHOD_EVENLY, VALID_EMPTY_LIST, VALID_EMPTY_LIST);"},{"lineNumber":130,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d TransactionType.MESSAGE_TRANSACTION_TYPE_CONSTRAINTS;"},{"lineNumber":131,"author":{"gitID":"Steven-Jia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"},{"lineNumber":132,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":134,"author":{"gitID":"Steven-Jia"},"content":"    @Test"},{"lineNumber":135,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_nullTransactionType_throwsIllegalValueException() {"},{"lineNumber":136,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(null, VALID_PAYER, VALID_AMOUNT,"},{"lineNumber":137,"author":{"gitID":"Steven-Jia"},"content":"                VALID_DESCRIPTION, validPayees, VALID_SPLIT_METHOD_EVENLY, VALID_EMPTY_LIST, VALID_EMPTY_LIST);"},{"lineNumber":138,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TransactionType.class.getSimpleName());"},{"lineNumber":139,"author":{"gitID":"Steven-Jia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"},{"lineNumber":140,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":142,"author":{"gitID":"Steven-Jia"},"content":"    @Test"},{"lineNumber":143,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_invalidSplitMethod_throwsIllegalValueException() {"},{"lineNumber":144,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedTransaction transaction \u003d"},{"lineNumber":145,"author":{"gitID":"Steven-Jia"},"content":"                new XmlAdaptedTransaction(VALID_TRANSACTION_TYPE, VALID_PAYER, VALID_AMOUNT, VALID_DESCRIPTION,"},{"lineNumber":146,"author":{"gitID":"Steven-Jia"},"content":"                        validPayees, INVALID_SPLIT_METHOD, VALID_EMPTY_LIST, VALID_EMPTY_LIST);"},{"lineNumber":147,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d SplitMethod.MESSAGE_SPLIT_METHOD_CONSTRAINTS;"},{"lineNumber":148,"author":{"gitID":"Steven-Jia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"},{"lineNumber":149,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":151,"author":{"gitID":"Steven-Jia"},"content":"    @Test"},{"lineNumber":152,"author":{"gitID":"Steven-Jia"},"content":"    public void toModelType_nullSplitMethod_throwsIllegalValueException() {"},{"lineNumber":153,"author":{"gitID":"Steven-Jia"},"content":"        XmlAdaptedTransaction transaction \u003d new XmlAdaptedTransaction(VALID_TRANSACTION_TYPE, VALID_PAYER, VALID_AMOUNT,"},{"lineNumber":154,"author":{"gitID":"Steven-Jia"},"content":"                VALID_DESCRIPTION, validPayees,"},{"lineNumber":155,"author":{"gitID":"Steven-Jia"},"content":"                null, VALID_EMPTY_LIST, VALID_EMPTY_LIST);"},{"lineNumber":156,"author":{"gitID":"Steven-Jia"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, SplitMethod.class.getSimpleName());"},{"lineNumber":157,"author":{"gitID":"Steven-Jia"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, transaction::toModelType);"},{"lineNumber":158,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":160,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":161,"author":{"gitID":"Steven-Jia"},"content":"}"}],"authorContributionMap":{"Steven-Jia":109,"phmignot":2,"-":14,"ongkc":36}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class AddressBookTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTagList());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getTransactionList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        addressBook.resetData(null);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void resetData_withDuplicatePersons_throwsAssertionError() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // Repeat ALICE twice"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        addressBook.getPersonList().remove(0);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        addressBook.getTagList().remove(0);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTransaction\u003e transactions \u003d FXCollections.observableArrayList();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags,"},{"lineNumber":82,"author":{"gitID":"-"},"content":"                        Collection\u003cTransaction\u003e transactions) {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            this.transactions.setAll(transactions);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            return persons;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTransaction\u003e getTransactionList() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return transactions;"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        public DebtsTable getDebtsTable() {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        public ObservableList\u003cDebtor\u003e getDebtorsList() {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            return null;"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        public void setDebtors(DebtsList debtsList) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        public void setCreditors(DebtsList debtsList) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"phmignot":1,"-":128}},{"path":"src/test/java/seedu/address/testutil/TransactionBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"//@@author phmignot"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import java.time.Clock;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import java.time.Instant;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":"import java.time.ZoneId;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"import java.util.Date;"},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Amount;"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Description;"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.SplitMethod;"},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.TransactionType;"},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":" * A utility class to help with building Transaction objects."},{"lineNumber":25,"author":{"gitID":"phmignot"},"content":" */"},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"public class TransactionBuilder {"},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":28,"author":{"gitID":"phmignot"},"content":"    public static final String DEFAULT_AMOUNT \u003d \"6172.50\";"},{"lineNumber":29,"author":{"gitID":"phmignot"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"paying for Cookies\";"},{"lineNumber":30,"author":{"gitID":"phmignot"},"content":"    private static Integer lastTransactionId \u003d 0;"},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":"    private final Integer id;"},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":"    private Person payer;"},{"lineNumber":33,"author":{"gitID":"phmignot"},"content":"    private Amount amount;"},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"    private Description description;"},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"    private Date dateTime;"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":"    private UniquePersonList payees;"},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":"    private TransactionType transactionType;"},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":"    private SplitMethod splitMethod;"},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":"    private List\u003cInteger\u003e unitsList;"},{"lineNumber":40,"author":{"gitID":"phmignot"},"content":"    private List\u003cInteger\u003e percentagesList;"},{"lineNumber":41,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":"    public TransactionBuilder() {"},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"        transactionType \u003d new TransactionType(\"payment\");"},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":"        payer \u003d SampleDataUtil.getSamplePersons()[0];"},{"lineNumber":45,"author":{"gitID":"phmignot"},"content":"        amount \u003d new Amount(DEFAULT_AMOUNT);"},{"lineNumber":46,"author":{"gitID":"phmignot"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);"},{"lineNumber":47,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":48,"author":{"gitID":"phmignot"},"content":"        UniquePersonList samplePayees \u003d new UniquePersonList();"},{"lineNumber":49,"author":{"gitID":"phmignot"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"phmignot"},"content":"            samplePayees.add(SampleDataUtil.getSamplePersons()[1]);"},{"lineNumber":51,"author":{"gitID":"phmignot"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":52,"author":{"gitID":"phmignot"},"content":"            throw new AssertionError(\"This payee has already been added\");"},{"lineNumber":53,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"phmignot"},"content":"        dateTime \u003d Date.from(Instant.now(Clock.system(ZoneId.of(\"Asia/Singapore\"))));"},{"lineNumber":55,"author":{"gitID":"phmignot"},"content":"        this.id \u003d lastTransactionId++;"},{"lineNumber":56,"author":{"gitID":"phmignot"},"content":"        payees \u003d samplePayees;"},{"lineNumber":57,"author":{"gitID":"phmignot"},"content":"        splitMethod \u003d new SplitMethod(SplitMethod.SPLIT_METHOD_EVENLY);"},{"lineNumber":58,"author":{"gitID":"phmignot"},"content":"        unitsList \u003d Collections.emptyList();"},{"lineNumber":59,"author":{"gitID":"phmignot"},"content":"        percentagesList \u003d Collections.emptyList();"},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":62,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":"     * Initializes the TransactionBuilder with the data of {@code transactionToCopy}."},{"lineNumber":64,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"    public TransactionBuilder(Transaction transactionToCopy) {"},{"lineNumber":66,"author":{"gitID":"phmignot"},"content":"        transactionType \u003d transactionToCopy.getTransactionType();"},{"lineNumber":67,"author":{"gitID":"phmignot"},"content":"        payer \u003d transactionToCopy.getPayer();"},{"lineNumber":68,"author":{"gitID":"phmignot"},"content":"        amount \u003d transactionToCopy.getAmount();"},{"lineNumber":69,"author":{"gitID":"phmignot"},"content":"        description \u003d transactionToCopy.getDescription();"},{"lineNumber":70,"author":{"gitID":"phmignot"},"content":"        dateTime \u003d transactionToCopy.getDateTime();"},{"lineNumber":71,"author":{"gitID":"phmignot"},"content":"        id \u003d transactionToCopy.getId();"},{"lineNumber":72,"author":{"gitID":"phmignot"},"content":"        payees \u003d transactionToCopy.getPayees();"},{"lineNumber":73,"author":{"gitID":"phmignot"},"content":"        transactionType \u003d transactionToCopy.getTransactionType();"},{"lineNumber":74,"author":{"gitID":"phmignot"},"content":"        splitMethod \u003d transactionToCopy.getSplitMethod();"},{"lineNumber":75,"author":{"gitID":"phmignot"},"content":"        unitsList \u003d transactionToCopy.getUnits();"},{"lineNumber":76,"author":{"gitID":"phmignot"},"content":"        percentagesList \u003d transactionToCopy.getPercentages();"},{"lineNumber":77,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":79,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"phmignot"},"content":"     * Sets the {@code payer} of the {@code Transaction} that we are building."},{"lineNumber":81,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"phmignot"},"content":"    public TransactionBuilder withPayer(Person payer) {"},{"lineNumber":83,"author":{"gitID":"phmignot"},"content":"        this.payer \u003d payer;"},{"lineNumber":84,"author":{"gitID":"phmignot"},"content":"        return this;"},{"lineNumber":85,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"phmignot"},"content":"     * Sets the {@code Amount} of the {@code Transaction} that we are building."},{"lineNumber":88,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"phmignot"},"content":"    public TransactionBuilder withAmount(String amount) {"},{"lineNumber":90,"author":{"gitID":"phmignot"},"content":"        this.amount \u003d new Amount(amount);"},{"lineNumber":91,"author":{"gitID":"phmignot"},"content":"        return this;"},{"lineNumber":92,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":94,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"phmignot"},"content":"     * Sets the {@code Description} of the {@code Transaction} that we are building."},{"lineNumber":96,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"phmignot"},"content":"    public TransactionBuilder withDescription(String description) {"},{"lineNumber":98,"author":{"gitID":"phmignot"},"content":"        this.description \u003d new Description(description);"},{"lineNumber":99,"author":{"gitID":"phmignot"},"content":"        return this;"},{"lineNumber":100,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":102,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"phmignot"},"content":"     * Sets the {@code payees} of the {@code Transaction} that we are building."},{"lineNumber":104,"author":{"gitID":"phmignot"},"content":"     * @param payees"},{"lineNumber":105,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"phmignot"},"content":"    public TransactionBuilder withPayees(String... payees) throws DuplicatePersonException {"},{"lineNumber":107,"author":{"gitID":"phmignot"},"content":"        this.payees \u003d SampleDataUtil.getPayeesSet(payees);"},{"lineNumber":108,"author":{"gitID":"phmignot"},"content":"        return this;"},{"lineNumber":109,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":111,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"phmignot"},"content":"     * Sets the {@code date \u0026 time} of the {@code Transaction} that we are building."},{"lineNumber":113,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"phmignot"},"content":"    public TransactionBuilder withDate(Date dateTime) {"},{"lineNumber":115,"author":{"gitID":"phmignot"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":116,"author":{"gitID":"phmignot"},"content":"        return this;"},{"lineNumber":117,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":119,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"Steven-Jia"},"content":"     * Sets the {@code payer} of the {@code Transaction} that we are building."},{"lineNumber":121,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"Steven-Jia"},"content":"    public TransactionBuilder withTransactionType(String transactionType) {"},{"lineNumber":123,"author":{"gitID":"Steven-Jia"},"content":"        this.transactionType \u003d new TransactionType(transactionType);"},{"lineNumber":124,"author":{"gitID":"Steven-Jia"},"content":"        return this;"},{"lineNumber":125,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"Steven-Jia"},"content":"     * Sets the {@code SplitMethod} of the {@code Transaction} that we are building."},{"lineNumber":128,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"Steven-Jia"},"content":"    public TransactionBuilder withSplitMethod(String splitMethod) {"},{"lineNumber":130,"author":{"gitID":"Steven-Jia"},"content":"        this.splitMethod \u003d new SplitMethod(splitMethod);"},{"lineNumber":131,"author":{"gitID":"Steven-Jia"},"content":"        return this;"},{"lineNumber":132,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":133,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":134,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":135,"author":{"gitID":"Steven-Jia"},"content":"     * Sets the units {@code List\u003cInteger\u003e} of the {@code Transaction} that we are building."},{"lineNumber":136,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":137,"author":{"gitID":"Steven-Jia"},"content":"    public TransactionBuilder withUnits(String unitsList) throws IllegalValueException {"},{"lineNumber":138,"author":{"gitID":"Steven-Jia"},"content":"        this.unitsList \u003d ParserUtil.parseUnitsList(unitsList);"},{"lineNumber":139,"author":{"gitID":"Steven-Jia"},"content":"        return this;"},{"lineNumber":140,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":142,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"Steven-Jia"},"content":"     * Sets the percentages {@code List\u003cInteger\u003e} of the {@code Transaction} that we are building."},{"lineNumber":144,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"Steven-Jia"},"content":"    public TransactionBuilder withPercentages(String percentagesList) throws IllegalValueException {"},{"lineNumber":146,"author":{"gitID":"Steven-Jia"},"content":"        this.percentagesList \u003d ParserUtil.parsePercentagesList(percentagesList);"},{"lineNumber":147,"author":{"gitID":"Steven-Jia"},"content":"        return this;"},{"lineNumber":148,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":150,"author":{"gitID":"phmignot"},"content":"    //@@author phmignot"},{"lineNumber":151,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"phmignot"},"content":"     * Builds a new {@code Transaction}."},{"lineNumber":153,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"phmignot"},"content":"    public Transaction build() {"},{"lineNumber":155,"author":{"gitID":"phmignot"},"content":"        return new Transaction(transactionType, payer, amount, description, dateTime,"},{"lineNumber":156,"author":{"gitID":"phmignot"},"content":"                payees, splitMethod, unitsList, percentagesList);"},{"lineNumber":157,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"phmignot"},"content":"}"}],"authorContributionMap":{"Steven-Jia":32,"phmignot":126}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * that we are building."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return descriptor;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":76}},{"path":"src/test/java/seedu/address/model/TransactionListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.TransactionList;"},{"lineNumber":8,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"public class TransactionListTest {"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":"    @Rule"},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"        TransactionList transactionList \u003d new TransactionList();"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"        transactionList.asObservableList().remove(0);"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"-":7,"ongkc":13}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.TypicalTransactions.getTypicalTransactions;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":17,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":18,"author":{"gitID":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").withTag(\"Friend\").build();}"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"            addressBook.addPerson(person);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"person is expected to be unique.\");"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code AddressBook} that we are building."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public AddressBookBuilder withTag(String tagName) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            addressBook.addTag(new Tag(tagName));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"phmignot"},"content":"    //@phmignot"},{"lineNumber":57,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"phmignot"},"content":"     * Adds a new {@code transaction} to the {@code AddressBook} that we are building."},{"lineNumber":59,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":"    public AddressBookBuilder withTransaction(Transaction transaction) {"},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":"        requireNonNull(transaction);"},{"lineNumber":62,"author":{"gitID":"Steven-Jia"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":"            addressBook.addTransaction(transaction);"},{"lineNumber":64,"author":{"gitID":"Steven-Jia"},"content":"        } catch (CommandException ce) {"},{"lineNumber":65,"author":{"gitID":"Steven-Jia"},"content":"            System.out.println(ce.getMessage());"},{"lineNumber":66,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"phmignot"},"content":"        return this;"},{"lineNumber":68,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public AddressBook build() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":73,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"phmignot"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":75,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"phmignot"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":77,"author":{"gitID":"phmignot"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":78,"author":{"gitID":"phmignot"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":79,"author":{"gitID":"phmignot"},"content":"            try {"},{"lineNumber":80,"author":{"gitID":"phmignot"},"content":"                ab.addPerson(person);"},{"lineNumber":81,"author":{"gitID":"phmignot"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":82,"author":{"gitID":"phmignot"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":83,"author":{"gitID":"phmignot"},"content":"            }"},{"lineNumber":84,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"phmignot"},"content":"        for (Transaction transaction : getTypicalTransactions()) {"},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"            try {"},{"lineNumber":87,"author":{"gitID":"phmignot"},"content":"                ab.addTransaction(transaction);"},{"lineNumber":88,"author":{"gitID":"Steven-Jia"},"content":"            } catch (CommandException ce) {"},{"lineNumber":89,"author":{"gitID":"Steven-Jia"},"content":"                System.out.println(ce.getMessage());"},{"lineNumber":90,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"phmignot"},"content":"        return ab;"},{"lineNumber":93,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":8,"phmignot":31,"-":55}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BALANCE_AMY;"},{"lineNumber":4,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BALANCE_BOB;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class TypicalPersons {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            .withEmail(\"alice@example.com\")"},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":"            .withPhone(\"85355255\").withBalance(\"0.00\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":31,"author":{"gitID":"Steven-Jia"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withBalance(\"0.00\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":34,"author":{"gitID":"Steven-Jia"},"content":"            .withEmail(\"heinz@example.com\").withBalance(\"0.00\").build();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":36,"author":{"gitID":"Steven-Jia"},"content":"            .withEmail(\"cornelia@example.com\").withBalance(\"0.00\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":38,"author":{"gitID":"Steven-Jia"},"content":"            .withEmail(\"werner@example.com\").withBalance(\"0.00\").build();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":"            .withEmail(\"lydia@example.com\").withBalance(\"0.00\").build();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":"            .withEmail(\"anna@example.com\").withBalance(\"0.00\").build();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":46,"author":{"gitID":"Steven-Jia"},"content":"            .withEmail(\"stefan@example.com\").withBalance(\"0.00\").build();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":48,"author":{"gitID":"Steven-Jia"},"content":"            .withEmail(\"hans@example.com\").withBalance(\"0.00\").build();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            .withEmail(VALID_EMAIL_AMY)"},{"lineNumber":53,"author":{"gitID":"Steven-Jia"},"content":"            .withBalance(VALID_BALANCE_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":55,"author":{"gitID":"Steven-Jia"},"content":"            .withEmail(VALID_EMAIL_BOB).withBalance(VALID_BALANCE_BOB)"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public static AddressBook getTypicalAddressBook() throws DuplicatePersonException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return ab;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":13,"-":60}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Balance;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Jack Pauline\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"    public static final String DEFAULT_BALANCE \u003d \"0.00\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_TAGS \u003d \"friends\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private Phone phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":"    private Balance balance;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":35,"author":{"gitID":"Steven-Jia"},"content":"        balance \u003d new Balance(DEFAULT_BALANCE);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":46,"author":{"gitID":"Steven-Jia"},"content":"        balance \u003d personToCopy.getBalance();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":83,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"Steven-Jia"},"content":"     * Sets the {@code Balance} of the {@code Person} that we are building."},{"lineNumber":85,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"    public PersonBuilder withBalance(String balance) {"},{"lineNumber":87,"author":{"gitID":"Steven-Jia"},"content":"        this.balance \u003d new Balance(balance);"},{"lineNumber":88,"author":{"gitID":"Steven-Jia"},"content":"        return this;"},{"lineNumber":89,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"Steven-Jia"},"content":"    //@@author"},{"lineNumber":91,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"    public Person build() {"},{"lineNumber":93,"author":{"gitID":"Steven-Jia"},"content":"        return new Person(name, phone, email, balance, tags);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":16,"-":80}},{"path":"src/test/java/seedu/address/testutil/DebtorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Balance;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":8,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":" * A utility class to help with building Debtor objects."},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":"public class DebtorBuilder {"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"    public static final Person DEFAULT_PERSON \u003d SampleDataUtil.getSamplePersons()[0];"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"    public static final String DEFAULT_DEBT \u003d \"0.00\";"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"    private Person person;"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    private Balance debt;"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"    public DebtorBuilder() {"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"        person \u003d DEFAULT_PERSON;"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"        debt \u003d new Balance(DEFAULT_DEBT);"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"    public DebtorBuilder(Creditor creditorToCopy) {"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"        person \u003d creditorToCopy.getCreditor();"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"        debt \u003d creditorToCopy.getDebt();"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"    public DebtorBuilder withDebtor(Person person) {"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"        this.person \u003d person;"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"        return this;"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"    public DebtorBuilder withDebt(String debt) {"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"        this.debt \u003d new Balance(debt);"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"        return this;"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"    public Debtor build() {"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"        return new Debtor(person, debt);"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"-":7,"ongkc":47}},{"path":"src/test/java/guitests/GuiRobot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.BooleanSupplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.StageNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Robot used to simulate user actions on the GUI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Extends {@link FxRobot} by adding some customized functionality and workarounds."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class GuiRobot extends FxRobot {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final boolean isHeadlessMode;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public GuiRobot() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * unnecessary delays."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void pauseForHuman() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (isHeadlessMode) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * milliseconds."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param timeOut in milliseconds"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event, int timeOut) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int timePassed \u003d 0;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final int retryInterval \u003d 50;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        while (!event.getAsBoolean()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            sleep(retryInterval);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            timePassed +\u003d retryInterval;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            if (timePassed \u003e\u003d timeOut) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                throw new EventTimeoutException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        pauseForHuman();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if the window with {@code stageTitle} is currently open."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean isWindowShown(String stageTitle) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return listTargetWindows().stream()"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .count() \u003e\u003d 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the first stage, ordered by proximity to the current target window, with the stage title."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The order that the windows are searched are as follows (proximity): current target window,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * children of the target window, rest of the windows."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws StageNotFoundException if the stage is not found."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Stage getStage(String stageTitle) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .map(Stage.class::cast)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return targetStage.orElseThrow(StageNotFoundException::new);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Represents an error which occurs when a timeout occurs when waiting for an event."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class EventTimeoutException extends RuntimeException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":104}},{"path":"src/test/java/seedu/address/testutil/TransactionUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYEE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYER;"},{"lineNumber":7,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPLIT_METHOD;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.AddTransactionCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A utility class for Transaction."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class TransactionUtil {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an add command string for adding the {@code transaction}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static String getAddTransactionCommand(Transaction transaction) {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return AddTransactionCommand.COMMAND_WORD + \" \" + getTransactionDetails(transaction);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns the part of command string for the given {@code transaction}\u0027s details."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static String getTransactionDetails(Transaction transaction) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_TRANSACTION_TYPE + transaction.getTransactionType().toString() + \" \");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PAYER + transaction.getPayer().getName().fullName + \" \");"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_AMOUNT + transaction.getAmount().value + \" \");"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_DESCRIPTION + transaction.getDescription().value + \" \");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_PAYEE + \"Benson Meier\" + \" \");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        sb.append(PREFIX_SPLIT_METHOD + transaction.getSplitMethod().method.toString() + \" \");"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"phmignot":1,"-":37}},{"path":"src/test/java/seedu/address/testutil/TypicalTransactions.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"Steven-Jia"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":" * A utility class containing a list of {@code Transaction} objects to be used in tests."},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"public class TypicalTransactions {"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    private static Transaction t1 \u003d null;"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    private static Transaction t2 \u003d null;"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"    private static Transaction t3 \u003d null;"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    private static Transaction t4 \u003d null;"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"    private static Transaction t5 \u003d null;"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"    private static Transaction t6 \u003d null;"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"    private static Transaction t7 \u003d null;"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"    private static Person person1 \u003d SampleDataUtil.getSamplePersons()[0];"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"    private static Person person2 \u003d SampleDataUtil.getSamplePersons()[1];"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"    private static Person person3 \u003d SampleDataUtil.getSamplePersons()[2];"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"    private static Person person4 \u003d SampleDataUtil.getSamplePersons()[3];"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"    private static Person person5 \u003d SampleDataUtil.getSamplePersons()[4];"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"    private static Person person6 \u003d SampleDataUtil.getSamplePersons()[5];"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"    private static UniquePersonList payee2 \u003d new UniquePersonList();"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"    private static UniquePersonList payee4 \u003d new UniquePersonList();"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"    private static UniquePersonList payee6 \u003d new UniquePersonList();"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"    private static UniquePersonList payeeGeorge \u003d new UniquePersonList();"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"    private static UniquePersonList payeeFiona \u003d new UniquePersonList();"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    private static Date date \u003d new Date();"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"    static {"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"        try {"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"            payee2.add(person2);"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"            payee4.add(person4);"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"            payee6.add(person6);"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"            payeeGeorge.add(TypicalPersons.GEORGE);"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"            payeeFiona.add(TypicalPersons.FIONA);"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"            t1 \u003d new TransactionBuilder().withPayer(person1).withAmount(\"12345.00\")"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"                    .withDescription(\"Boat trip\").withDate(date)"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"                    .withSplitMethod(\"evenly\").build();"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"            t2 \u003d new TransactionBuilder().withPayer(person3).withAmount(\"0\")"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"                    .withDescription(\"Food for barbecue\")"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"                    .withSplitMethod(\"units\").withUnits(\"1, 2, 3\").withDate(date).build();"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"            t3 \u003d new TransactionBuilder().withPayer(person5).withAmount(\"0.00\")"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"                    .withDescription(\"Open air concert\")"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"                    .withSplitMethod(\"percentage\").withPercentages(\"20, 20, 60\").withDate(date).build();"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"            t4 \u003d new TransactionBuilder().withPayer(TypicalPersons.GEORGE).withAmount(\"0.00\")"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":"                    .withDescription(\"Transport\")"},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"                    .withSplitMethod(\"evenly\").withDate(date).build();"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"            t5 \u003d new TransactionBuilder().withPayer(TypicalPersons.FIONA)"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":"                    .withAmount(\"0.00\").withDescription(\"Dinner\")"},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"                    .withDate(date)"},{"lineNumber":69,"author":{"gitID":"ongkc"},"content":"                    .withSplitMethod(\"evenly\").withDate(date).build();"},{"lineNumber":70,"author":{"gitID":"ongkc"},"content":"            t6 \u003d new TransactionBuilder().withPayer(person5).withAmount(\"1234.00\")"},{"lineNumber":71,"author":{"gitID":"ongkc"},"content":"                    .withDescription(\"Food for barbecue\")"},{"lineNumber":72,"author":{"gitID":"ongkc"},"content":"                    .withSplitMethod(\"units\").withUnits(\"1, 2, 3\").withDate(date).build();"},{"lineNumber":73,"author":{"gitID":"ongkc"},"content":"            t7 \u003d new TransactionBuilder().withPayer(person5).withAmount(\"1234.00\")"},{"lineNumber":74,"author":{"gitID":"ongkc"},"content":"                    .withDescription(\"Open air concert\")"},{"lineNumber":75,"author":{"gitID":"ongkc"},"content":"                    .withSplitMethod(\"percentage\").withPercentages(\"20, 20, 60\").withDate(date).build();"},{"lineNumber":76,"author":{"gitID":"ongkc"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":77,"author":{"gitID":"ongkc"},"content":"            dpe.printStackTrace();"},{"lineNumber":78,"author":{"gitID":"ongkc"},"content":"        } catch (IllegalValueException e) {"},{"lineNumber":79,"author":{"gitID":"ongkc"},"content":"            e.printStackTrace();"},{"lineNumber":80,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":83,"author":{"gitID":"ongkc"},"content":"    private TypicalTransactions() { } // prevents instantiation"},{"lineNumber":84,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":85,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"ongkc"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":87,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"ongkc"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":89,"author":{"gitID":"ongkc"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":90,"author":{"gitID":"ongkc"},"content":"        for (Transaction transaction : getTypicalTransactions()) {"},{"lineNumber":91,"author":{"gitID":"ongkc"},"content":"            try {"},{"lineNumber":92,"author":{"gitID":"ongkc"},"content":"                ab.addTransaction(transaction);"},{"lineNumber":93,"author":{"gitID":"ongkc"},"content":"            } catch (CommandException ce) {"},{"lineNumber":94,"author":{"gitID":"ongkc"},"content":"                System.out.println(ce.getMessage());"},{"lineNumber":95,"author":{"gitID":"ongkc"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"ongkc"},"content":"        return ab;"},{"lineNumber":98,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":100,"author":{"gitID":"ongkc"},"content":"    public static List\u003cTransaction\u003e getTypicalTransactions() {"},{"lineNumber":101,"author":{"gitID":"ongkc"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(t1, t2, t3, t4, t5, t6, t7));"},{"lineNumber":102,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":104,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":14,"ongkc":89}},{"path":"src/test/java/seedu/address/testutil/CreditorBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Balance;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":7,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":8,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":" * A utility class to help with building Creditor objects."},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":"public class CreditorBuilder {"},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"    public static final Person DEFAULT_PERSON \u003d SampleDataUtil.getSamplePersons()[0];"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"    public static final String DEFAULT_DEBT \u003d \"0.00\";"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"    private Person person;"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    private Balance debt;"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"    public CreditorBuilder() {"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"        person \u003d DEFAULT_PERSON;"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"        debt \u003d new Balance(DEFAULT_DEBT);"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"    public CreditorBuilder(Creditor creditorToCopy) {"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"        person \u003d creditorToCopy.getCreditor();"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"        debt \u003d creditorToCopy.getDebt();"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"    public CreditorBuilder withCreditor(Person person) {"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"        this.person \u003d person;"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"        return this;"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"    public CreditorBuilder withDebt(String debt) {"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"        this.debt \u003d new Balance(debt);"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"        return this;"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"    public Creditor build() {"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"        return new Creditor(person, debt);"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"-":6,"ongkc":48}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    private final PersonListPanelHandle personListPanel;"},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"    private final TransactionListPanelHandle transactionListPanel;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final ResultDisplayHandle resultDisplay;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"},{"lineNumber":21,"author":{"gitID":"Steven-Jia"},"content":"        transactionListPanel \u003d new TransactionListPanelHandle(getChildNode(TransactionListPanelHandle"},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"                .TRANSACTION_LIST_VIEW_ID));"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public PersonListPanelHandle getPersonListPanel() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return personListPanel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"phmignot"},"content":"    public TransactionListPanelHandle getTransactionListPanel() {"},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"        return transactionListPanel;"},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public ResultDisplayHandle getResultDisplay() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return resultDisplay;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":2,"phmignot":5,"-":45}},{"path":"src/test/java/guitests/guihandles/CreditorCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":" * Provides a handle to a creditor card in the creditor list panel."},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"public class CreditorCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"    private static final String DEBT_FIELD_ID \u003d \"#debt\";"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    private final Label phoneLabel;"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"    private final Label emailLabel;"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"    private final Label debtLabel;"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"    public CreditorCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"        this.debtLabel \u003d getChildNode(DEBT_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"    public String getPhone() {"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"        return phoneLabel.getText();"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"    public String getEmail() {"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"        return emailLabel.getText();"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"    public String getDebt() {"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"        return debtLabel.getText();"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"ongkc"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"phmignot":6,"-":2,"ongkc":63}},{"path":"src/test/java/guitests/guihandles/DebtorCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":" * Provides a handle to a debtor card in the debtor list panel."},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"public class DebtorCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"    private static final String PHONE_FIELD_ID \u003d \"#phone\";"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"    private static final String DEBT_FIELD_ID \u003d \"#debt\";"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    private final Label nameLabel;"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    private final Label phoneLabel;"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"    private final Label emailLabel;"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"    private final Label debtLabel;"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"    public DebtorCardHandle(Node cardNode) {"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"        super(cardNode);"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"        this.debtLabel \u003d getChildNode(DEBT_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"                .stream()"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"                .map(Label.class::cast)"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"                .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"    public String getId() {"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"        return idLabel.getText();"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"    public String getName() {"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"        return nameLabel.getText();"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"    public String getPhone() {"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"        return phoneLabel.getText();"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"    public String getEmail() {"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"        return emailLabel.getText();"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"    public String getDebt() {"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"        return debtLabel.getText();"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"        return tagLabels"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":"                .stream()"},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"                .map(Label::getText)"},{"lineNumber":69,"author":{"gitID":"ongkc"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"phmignot":6,"-":2,"ongkc":63}},{"path":"src/test/java/guitests/guihandles/TransactionCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"//@@author phmignot"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":" * Provides a handle to a transaction card in the transaction list panel."},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":" */"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":"public class TransactionCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":"    private static final String ID_FIELD_ID \u003d \"#idDisplay\";"},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"    private static final String PAYER_FIELD_ID \u003d \"#payerName\";"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"    private static final String AMOUNT_FIELD_ID \u003d \"#amount\";"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":"    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";"},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"    private static final String PAYEES_FIELD_ID \u003d \"#payees\";"},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"    private final Label idLabel;"},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":"    private final Label payerLabel;"},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"    private final Label amountLabel;"},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":"    private final Label descriptionLabel;"},{"lineNumber":25,"author":{"gitID":"phmignot"},"content":"    private final List\u003cLabel\u003e payeesLabel;"},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":"    public TransactionCardHandle(Node cardNode) {"},{"lineNumber":28,"author":{"gitID":"phmignot"},"content":"        super(cardNode);"},{"lineNumber":29,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":30,"author":{"gitID":"phmignot"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":"        this.payerLabel \u003d getChildNode(PAYER_FIELD_ID);"},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":"        this.amountLabel \u003d getChildNode(AMOUNT_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"phmignot"},"content":"        this.descriptionLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"        Region payeesContainer \u003d getChildNode(PAYEES_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"        this.payeesLabel \u003d payeesContainer"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":"                .stream()"},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":"                .map(Label.class::cast)"},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":"                .collect(Collectors.toList());"},{"lineNumber":40,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":41,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"    public String getId() {"},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":"        return idLabel.getText();"},{"lineNumber":45,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":47,"author":{"gitID":"phmignot"},"content":"    public String getPayer() {"},{"lineNumber":48,"author":{"gitID":"phmignot"},"content":"        return payerLabel.getText();"},{"lineNumber":49,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":51,"author":{"gitID":"phmignot"},"content":"    public String getAmount() {"},{"lineNumber":52,"author":{"gitID":"phmignot"},"content":"        return amountLabel.getText();"},{"lineNumber":53,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":55,"author":{"gitID":"phmignot"},"content":"    public String getDescription() {"},{"lineNumber":56,"author":{"gitID":"phmignot"},"content":"        return descriptionLabel.getText();"},{"lineNumber":57,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":59,"author":{"gitID":"phmignot"},"content":"    public String getPayees() {"},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":"        for (int i \u003d 0; i \u003c payeesLabel.size(); i++) {"},{"lineNumber":62,"author":{"gitID":"phmignot"},"content":"            builder.append(payeesLabel.get(i).getText());"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"phmignot"},"content":"        return builder.toString();"},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"phmignot"},"content":"}"},{"lineNumber":67,"author":{"gitID":"phmignot"},"content":""}],"authorContributionMap":{"phmignot":67}},{"path":"src/main/java/seedu/address/ui/CommandBox.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Logic logic;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public CommandBox(Logic logic) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Handles the key press event, {@code keyEvent}."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private void handleKeyPress(KeyEvent keyEvent) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        switch (keyEvent.getCode()) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        case UP:"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            // As up and down buttons will alter the position of the caret,"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            // consuming it causes the caret\u0027s position to remain unchanged"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"            navigateToPreviousInput();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case DOWN:"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            keyEvent.consume();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            navigateToNextInput();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            break;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            // let JavaFx handle the keypress"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Updates the text field with the previous input in {@code historySnapshot},"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * if there exists a previous input in {@code historySnapshot}"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void navigateToPreviousInput() {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasPrevious()) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.previous());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Updates the text field with the next input in {@code historySnapshot},"},{"lineNumber":79,"author":{"gitID":"-"},"content":"     * if there exists a next input in {@code historySnapshot}"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    private void navigateToNextInput() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assert historySnapshot !\u003d null;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        if (!historySnapshot.hasNext()) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        replaceText(historySnapshot.next());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * Sets {@code CommandBox}\u0027s text field with {@code text} and"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * positions the caret to the end of the {@code text}."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    private void replaceText(String text) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandTextField.setText(text);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        commandTextField.positionCaret(commandTextField.getText().length());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":103,"author":{"gitID":"Steven-Jia"},"content":"    private void handleCommandInputChanged() throws PersonNotFoundException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            historySnapshot.next();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            // process result of the command"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            logger.info(\"Result: \" + commandResult.feedbackToUser);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":114,"author":{"gitID":"-"},"content":"            initHistory();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            // handle command failure"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            logger.info(\"Invalid command: \" + commandTextField.getText());"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            raise(new NewResultAvailableEvent(e.getMessage()));"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Initializes the history snapshot."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    private void initHistory() {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // the user if she tries to navigate past the most-recent end of the historySnapshot."},{"lineNumber":129,"author":{"gitID":"-"},"content":"        historySnapshot.add(\"\");"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":151}},{"path":"src/main/java/seedu/address/ui/TransactionListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"//@@author phmignot"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"//import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":"//import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":" * Panel containing the list of transactions."},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":" */"},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":"public class TransactionListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"    private static final String FXML \u003d \"TransactionListPanel.fxml\";"},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(seedu.address.ui.TransactionListPanel.class);"},{"lineNumber":25,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"    @javafx.fxml.FXML"},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":"    private ListView\u003cTransactionCard\u003e transactionListView;"},{"lineNumber":28,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":29,"author":{"gitID":"phmignot"},"content":"    public TransactionListPanel(ObservableList\u003cTransaction\u003e transactionList) {"},{"lineNumber":30,"author":{"gitID":"phmignot"},"content":"        super(FXML);"},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":"        setConnections(transactionList);"},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":33,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"    private void setConnections(ObservableList\u003cTransaction\u003e transactionList) {"},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"        ObservableList\u003cTransactionCard\u003e mappedList \u003d EasyBind.map(transactionList, (transaction) -\u003e new TransactionCard("},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":"                transaction, transactionList.indexOf(transaction) + 1));"},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":"        transactionListView.setItems(mappedList);"},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":"        transactionListView.setCellFactory(listView -\u003e new TransactionListViewCell());"},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":41,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":"    /* Method could be used for selection in the transactionList"},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"    @Subscribe"},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":45,"author":{"gitID":"phmignot"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":46,"author":{"gitID":"phmignot"},"content":"        //scrollTo(event.targetIndex);"},{"lineNumber":47,"author":{"gitID":"phmignot"},"content":"    }*/"},{"lineNumber":48,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":49,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"phmignot"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code TransactionCard}."},{"lineNumber":51,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"phmignot"},"content":"    class TransactionListViewCell extends ListCell\u003cTransactionCard\u003e {"},{"lineNumber":53,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":54,"author":{"gitID":"phmignot"},"content":"        @Override"},{"lineNumber":55,"author":{"gitID":"phmignot"},"content":"        protected void updateItem(TransactionCard transaction, boolean empty) {"},{"lineNumber":56,"author":{"gitID":"phmignot"},"content":"            super.updateItem(transaction, empty);"},{"lineNumber":57,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":58,"author":{"gitID":"phmignot"},"content":"            if (empty || transaction \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"phmignot"},"content":"                setGraphic(null);"},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":"                setText(null);"},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":"            } else {"},{"lineNumber":62,"author":{"gitID":"phmignot"},"content":"                setGraphic(transaction.getRoot());"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":"            }"},{"lineNumber":64,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"phmignot"},"content":"}"},{"lineNumber":67,"author":{"gitID":"phmignot"},"content":""}],"authorContributionMap":{"phmignot":67}},{"path":"src/main/java/seedu/address/ui/TransactionCard.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"//@@author phmignot"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":" * An UI component that displays information of a {@code Transaction}."},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":" */"},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":"public class TransactionCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"    private static final String FXML \u003d \"TransactionListCard.fxml\";"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"    public final Transaction transaction;"},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":"    private HBox cardPane;"},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":"    private Label idDisplay;"},{"lineNumber":25,"author":{"gitID":"phmignot"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"    private Label payerName;"},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"phmignot"},"content":"    private Label amount;"},{"lineNumber":29,"author":{"gitID":"phmignot"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"phmignot"},"content":"    private Label description;"},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":"    private Label transactionType;"},{"lineNumber":33,"author":{"gitID":"phmignot"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"    private FlowPane payees;"},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":"    private Label date;"},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":"    public TransactionCard(Transaction transaction, int displayedIndex) {"},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":"       super(FXML);"},{"lineNumber":40,"author":{"gitID":"phmignot"},"content":"        this.transaction \u003d transaction;"},{"lineNumber":41,"author":{"gitID":"phmignot"},"content":"        idDisplay.setText(displayedIndex + \". \");"},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":"        payerName.setText(transaction.getPayer().getName().fullName);"},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"        amount.setText(transaction.getAmount().toString());"},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":"        description.setText(transaction.getDescription().toString());"},{"lineNumber":45,"author":{"gitID":"phmignot"},"content":"        transactionType.setText(transaction.getTransactionType().toString().toLowerCase().substring(0, 1).toUpperCase()"},{"lineNumber":46,"author":{"gitID":"phmignot"},"content":"                + transaction.getTransactionType().toString().toLowerCase().substring(1));"},{"lineNumber":47,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":48,"author":{"gitID":"phmignot"},"content":"        int numPayees \u003d transaction.getPayees().asObservableList().size();"},{"lineNumber":49,"author":{"gitID":"phmignot"},"content":"        for (int i \u003d 0; i \u003c numPayees; i++) {"},{"lineNumber":50,"author":{"gitID":"phmignot"},"content":"            Person payee \u003d transaction.getPayees().asObservableList().get(i);"},{"lineNumber":51,"author":{"gitID":"phmignot"},"content":"            payees.getChildren().add(new Label(payee.getName().fullName));"},{"lineNumber":52,"author":{"gitID":"phmignot"},"content":"            if (i !\u003d numPayees - 1) {"},{"lineNumber":53,"author":{"gitID":"phmignot"},"content":"                payees.getChildren().add(new Label(\", \"));"},{"lineNumber":54,"author":{"gitID":"phmignot"},"content":"            }"},{"lineNumber":55,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"phmignot"},"content":"        date.setText(String.valueOf(transaction.getDateTime()));"},{"lineNumber":57,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":59,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":"        // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"phmignot"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":"            return true;"},{"lineNumber":64,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"        // instanceof handles nulls"},{"lineNumber":66,"author":{"gitID":"phmignot"},"content":"        if (!(other instanceof TransactionCard)) {"},{"lineNumber":67,"author":{"gitID":"phmignot"},"content":"            return false;"},{"lineNumber":68,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":69,"author":{"gitID":"phmignot"},"content":"        // state check"},{"lineNumber":70,"author":{"gitID":"phmignot"},"content":"        TransactionCard card \u003d (TransactionCard) other;"},{"lineNumber":71,"author":{"gitID":"phmignot"},"content":"        return transaction.equals(card.transaction);"},{"lineNumber":72,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"phmignot"},"content":"}"}],"authorContributionMap":{"phmignot":73}},{"path":"src/test/java/guitests/guihandles/TransactionListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"//@@author phmignot"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":"import seedu.address.ui.TransactionCard;"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":" * Provides a handle for {@code TransactionListPanel} containing the list of {@code TransactionCard}."},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":" */"},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"public class TransactionListPanelHandle extends NodeHandle\u003cListView\u003cTransactionCard\u003e\u003e {"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"    public static final String TRANSACTION_LIST_VIEW_ID \u003d \"#transactionListView\";"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"    private Optional\u003cTransactionCard\u003e lastRememberedSelectedTransactionCard;"},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"    public TransactionListPanelHandle(ListView\u003cTransactionCard\u003e transactionListPanelNode) {"},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":"        super(transactionListPanelNode);"},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":25,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"     * Returns a handle to the selected {@code TransactionCardHandle}."},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":28,"author":{"gitID":"phmignot"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":29,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"phmignot"},"content":"    public TransactionCardHandle getHandleToSelectedCard() {"},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":"        List\u003cTransactionCard\u003e transactionList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":33,"author":{"gitID":"phmignot"},"content":"        if (transactionList.size() !\u003d 1) {"},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"            throw new AssertionError(\"Transaction list size expected 1.\");"},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":"        return new TransactionCardHandle(transactionList.get(0).getRoot());"},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":40,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"phmignot"},"content":"     * Returns the index of the selected card."},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":45,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":47,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"phmignot"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":49,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"phmignot"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":51,"author":{"gitID":"phmignot"},"content":"        List\u003cTransactionCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":52,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":53,"author":{"gitID":"phmignot"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":54,"author":{"gitID":"phmignot"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":55,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":57,"author":{"gitID":"phmignot"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":58,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":"     * Navigates the listview to display and select the transaction."},{"lineNumber":62,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":"    public void navigateToCard(Transaction transaction) {"},{"lineNumber":64,"author":{"gitID":"phmignot"},"content":"        List\u003cTransactionCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"        Optional\u003cTransactionCard\u003e matchingCard \u003d cards"},{"lineNumber":66,"author":{"gitID":"phmignot"},"content":"                .stream()"},{"lineNumber":67,"author":{"gitID":"phmignot"},"content":"                .filter(card -\u003e card.transaction.equals(transaction))"},{"lineNumber":68,"author":{"gitID":"phmignot"},"content":"                .findFirst();"},{"lineNumber":69,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":70,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":71,"author":{"gitID":"phmignot"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":72,"author":{"gitID":"phmignot"},"content":"            throw new IllegalArgumentException(\"Transaction does not exist.\");"},{"lineNumber":73,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":75,"author":{"gitID":"phmignot"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":76,"author":{"gitID":"phmignot"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":77,"author":{"gitID":"phmignot"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":78,"author":{"gitID":"phmignot"},"content":"        });"},{"lineNumber":79,"author":{"gitID":"phmignot"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":80,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":82,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"phmignot"},"content":"     * Returns the transaction card handle of a transaction associated with the {@code index} in the list."},{"lineNumber":84,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":85,"author":{"gitID":"phmignot"},"content":"    public TransactionCardHandle getTransactionCardHandle(int index) {"},{"lineNumber":86,"author":{"gitID":"phmignot"},"content":"        return getTransactionCardHandle(getRootNode().getItems().get(index).transaction);"},{"lineNumber":87,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":89,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"phmignot"},"content":"     * Returns the {@code TransactionCardHandle} of the specified {@code transaction} in the list."},{"lineNumber":91,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"phmignot"},"content":"    public TransactionCardHandle getTransactionCardHandle(Transaction transaction) {"},{"lineNumber":93,"author":{"gitID":"phmignot"},"content":"        Optional\u003cTransactionCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":94,"author":{"gitID":"phmignot"},"content":"                .filter(card -\u003e card.transaction.equals(transaction))"},{"lineNumber":95,"author":{"gitID":"phmignot"},"content":"                .map(card -\u003e new TransactionCardHandle(card.getRoot()))"},{"lineNumber":96,"author":{"gitID":"phmignot"},"content":"                .findFirst();"},{"lineNumber":97,"author":{"gitID":"phmignot"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Transaction does not exist.\"));"},{"lineNumber":98,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":100,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"phmignot"},"content":"     * Selects the {@code TransactionCard} at {@code index} in the list."},{"lineNumber":102,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"phmignot"},"content":"    public void select(int index) {"},{"lineNumber":104,"author":{"gitID":"phmignot"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":105,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":107,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":108,"author":{"gitID":"phmignot"},"content":"     * Remembers the selected {@code TransactionCard} in the list."},{"lineNumber":109,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"phmignot"},"content":"    public void rememberSelectedTransactionCard() {"},{"lineNumber":111,"author":{"gitID":"phmignot"},"content":"        List\u003cTransactionCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":112,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":113,"author":{"gitID":"phmignot"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":114,"author":{"gitID":"phmignot"},"content":"            lastRememberedSelectedTransactionCard \u003d Optional.empty();"},{"lineNumber":115,"author":{"gitID":"phmignot"},"content":"        } else {"},{"lineNumber":116,"author":{"gitID":"phmignot"},"content":"            lastRememberedSelectedTransactionCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":117,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":120,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"phmignot"},"content":"     * Returns true if the selected {@code TransactionCard} is different from the value remembered by the most recent"},{"lineNumber":122,"author":{"gitID":"phmignot"},"content":"     * {@code rememberSelectedTransactionCard()} call."},{"lineNumber":123,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":124,"author":{"gitID":"phmignot"},"content":"    public boolean isSelectedTransactionCardChanged() {"},{"lineNumber":125,"author":{"gitID":"phmignot"},"content":"        List\u003cTransactionCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":126,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":127,"author":{"gitID":"phmignot"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":128,"author":{"gitID":"phmignot"},"content":"            return lastRememberedSelectedTransactionCard.isPresent();"},{"lineNumber":129,"author":{"gitID":"phmignot"},"content":"        } else {"},{"lineNumber":130,"author":{"gitID":"phmignot"},"content":"            return !lastRememberedSelectedTransactionCard.isPresent()"},{"lineNumber":131,"author":{"gitID":"phmignot"},"content":"                    || !lastRememberedSelectedTransactionCard.get().equals(selectedItems.get(0));"},{"lineNumber":132,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":135,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"phmignot"},"content":"     * Returns the size of the list."},{"lineNumber":137,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":138,"author":{"gitID":"phmignot"},"content":"    public int getListSize() {"},{"lineNumber":139,"author":{"gitID":"phmignot"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":140,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"phmignot"},"content":"}"},{"lineNumber":142,"author":{"gitID":"phmignot"},"content":""}],"authorContributionMap":{"phmignot":142}},{"path":"src/main/java/seedu/address/ui/CreditorListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":" * Panel containing the list of creditors."},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"public class CreditorListPanel extends UiPart\u003cRegion\u003e  {"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"    private static final String FXML \u003d \"CreditorListPanel.fxml\";"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(CreditorListPanel.class);"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"    @javafx.fxml.FXML"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    private ListView\u003cCreditorCard\u003e creditorListView;"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"    public CreditorListPanel(ObservableList\u003cCreditor\u003e creditorsList) {"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"        setConnections(creditorsList);"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"    private void setConnections(ObservableList\u003cCreditor\u003e creditorsList) {"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"        ObservableList\u003cCreditorCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"                creditorsList, (creditor) -\u003e new CreditorCard(creditor, creditorsList.indexOf(creditor) + 1));"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"        creditorListView.setItems(mappedList);"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"        creditorListView.setCellFactory(listView -\u003e new CreditorListViewCell());;"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"     * Scrolls to the {@code CreditorCard} at the {@code index} and selects it."},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"    private void scrollTo(int index) {"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"            creditorListView.scrollTo(index);"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"            creditorListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"        });"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code CreditorCard}."},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"    class CreditorListViewCell extends ListCell\u003cCreditorCard\u003e {"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"        protected void updateItem(CreditorCard creditor, boolean empty) {"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"            super.updateItem(creditor, empty);"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"            if (empty || creditor \u003d\u003d null) {"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"                setGraphic(null);"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"                setText(null);"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":"            } else {"},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"                setGraphic(creditor.getRoot());"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"phmignot":7,"-":6,"ongkc":56}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"import seedu.address.commons.events.ui.PersonPanelNoSelectionEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":28,"author":{"gitID":"-"},"content":" */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":"    private TransactionListPanel transactionListPanel;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private DebtorListPanel personDebtorListPanel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private CreditorListPanel personCreditorListPanel;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"phmignot"},"content":"    private StackPane transactionListPanelPlaceholder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"phmignot"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private StackPane personDebtorListPanelPlaceholder;"},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private StackPane personCreditorListPanelPlaceholder;"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":97,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":110,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":111,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":112,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":113,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":114,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":115,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":116,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":120,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"        personDebtorListPanel \u003d new DebtorListPanel(logic.getFilteredDebtorsList());"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        personDebtorListPanelPlaceholder.getChildren().add(personDebtorListPanel.getRoot());"},{"lineNumber":135,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        personCreditorListPanel \u003d new CreditorListPanel(logic.getFilteredCreditorsList());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        personCreditorListPanelPlaceholder.getChildren().add(personCreditorListPanel.getRoot());"},{"lineNumber":138,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        transactionListPanel \u003d new TransactionListPanel(logic.getFilteredTransactionList());"},{"lineNumber":140,"author":{"gitID":"phmignot"},"content":"        transactionListPanelPlaceholder.getChildren().add(transactionListPanel.getRoot());"},{"lineNumber":141,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"        ResultDisplay resultDisplay \u003d new ResultDisplay();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":149,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":166,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":168,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"-"},"content":""},{"lineNumber":172,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":174,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":176,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":177,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":182,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"-"},"content":""},{"lineNumber":193,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":195,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":197,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        return this.personListPanel;"},{"lineNumber":203,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitID":"-"},"content":""},{"lineNumber":205,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":209,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":213,"author":{"gitID":"phmignot"},"content":"        logic.updateFilteredTransactionList(event.getNewSelection().person);"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        logic.updateDebtorsAndCreditorList(event.getNewSelection().person);"},{"lineNumber":215,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":217,"author":{"gitID":"phmignot"},"content":"    @Subscribe"},{"lineNumber":218,"author":{"gitID":"phmignot"},"content":"    private void handlePersonPanelNoSelectionEvent(PersonPanelNoSelectionEvent event) {"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":220,"author":{"gitID":"phmignot"},"content":"        logic.updateFilteredTransactionList();"},{"lineNumber":221,"author":{"gitID":"-"},"content":"        logic.updateDebtorsAndCreditorList();"},{"lineNumber":222,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"phmignot":18,"-":205}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Controller for a help page"},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/UserGuide.html\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        super(FXML, root);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browser.getEngine().load(userGuideUrl);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * * Creates a new HelpWindow."},{"lineNumber":37,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public HelpWindow() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this(new Stage());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Shows the help window."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void show() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        getRoot().show();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":63}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public final Person person;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Label phone;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Label email;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"Steven-Jia"},"content":"    private Label balance;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.person \u003d person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":48,"author":{"gitID":"Steven-Jia"},"content":"        balance.setText(person.getBalance().toString());"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":2,"-":68}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"import seedu.address.commons.events.ui.PersonPanelNoSelectionEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private ListView\u003cPersonCard\u003e personListView;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        setConnections(personList);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private void setConnections(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":39,"author":{"gitID":"-"},"content":"                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        personListView.setItems(mappedList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        personListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                        raise(new PersonPanelSelectionChangedEvent(newValue));"},{"lineNumber":51,"author":{"gitID":"phmignot"},"content":"                    } else {"},{"lineNumber":52,"author":{"gitID":"phmignot"},"content":"                        logger.fine(\"No person selected in the person list\");"},{"lineNumber":53,"author":{"gitID":"phmignot"},"content":"                        raise(new PersonPanelNoSelectionEvent());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            personListView.scrollTo(index);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            personListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        protected void updateItem(PersonCard person, boolean empty) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"                setGraphic(person.getRoot());"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"phmignot":4,"-":88}},{"path":"src/main/java/seedu/address/ui/DebtorListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":" * Panel containing the list of debtors."},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"public class DebtorListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"    private static final String FXML \u003d \"DebtorListPanel.fxml\";"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(DebtorListPanel.class);"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    @javafx.fxml.FXML"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"    private ListView\u003cDebtorCard\u003e debtorListView;"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"    public DebtorListPanel(ObservableList\u003cDebtor\u003e debtorsList) {"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"        setConnections(debtorsList);"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"    private void setConnections(ObservableList\u003cDebtor\u003e debtorsList) {"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"        ObservableList\u003cDebtorCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"                debtorsList, (debtor) -\u003e new DebtorCard(debtor, debtorsList.indexOf(debtor) + 1));"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"        debtorListView.setItems(mappedList);"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"        debtorListView.setCellFactory(listView -\u003e new DebtorListViewCell());"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"     * Scrolls to the {@code DebtorCard} at the {@code index} and selects it."},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    private void scrollTo(int index) {"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"            debtorListView.scrollTo(index);"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"            debtorListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"        });"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code DebtorCard}."},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"    class DebtorListViewCell extends ListCell\u003cDebtorCard\u003e {"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"        @Override"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"        protected void updateItem(DebtorCard debtor, boolean empty) {"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"            super.updateItem(debtor, empty);"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"            if (empty || debtor \u003d\u003d null) {"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"                setGraphic(null);"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"                setText(null);"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"            } else {"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"                setGraphic(debtor.getRoot());"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"phmignot":7,"-":6,"ongkc":55}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":"    private String appTitle \u003d \"SmartSplit\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":71}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":"    public static final String MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX \u003d"},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":"            \"The transaction index provided is invalid\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EMPTY_TRANSACTION_LIST \u003d"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"            \"No transaction in the transactions list\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"phmignot":2,"-":14}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Handler;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":17,"author":{"gitID":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":18,"author":{"gitID":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogsCenter {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"    private static final String LOG_FILE \u003d \"smartsplit.log\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Handler[] handlers \u003d logger.getHandlers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        for (Handler handler : handlers) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            logger.removeHandler(handler);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return fileHandler;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return consoleHandler;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Decorates the given string to create a log message suitable for logging event handling methods."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return \"---[Event handled][\" + e + \"]\" + message;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @see #getEventHandlingLogMessage(BaseEvent, String)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return getEventHandlingLogMessage(e, \"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"phmignot":1,"-":129}},{"path":"src/main/java/seedu/address/ui/DebtorCard.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":" * An UI component that displays information of a {@code Debtor}."},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"public class DebtorCard extends UiPart\u003cRegion\u003e  {"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":"    private static final String FXML \u003d \"DebtorListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    public final Debtor debtor;"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"    @javafx.fxml.FXML"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"    private Label phone;"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"    private Label email;"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"    private Label debt;"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"    private FlowPane tags;"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"    public DebtorCard(Debtor debtor, int displayedIndex) {"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"        super(FXML);"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"        this.debtor \u003d debtor;"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"        name.setText(debtor.getDebtor().getName().fullName);"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"        phone.setText(debtor.getDebtor().getPhone().value);"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"        email.setText(debtor.getDebtor().getEmail().value);"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"        debt.setText(debtor.getDebt().toString());"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"        debtor.getDebtor().getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"        // short circuit if same object"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"            return true;"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"        // instanceof handles nulls"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"        if (!(other instanceof DebtorCard)) {"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"            return false;"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"        // state check"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"        DebtorCard card \u003d (DebtorCard) other;"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 debtor.equals(card.debtor);"},{"lineNumber":69,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":71,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"phmignot":7,"-":1,"ongkc":63}},{"path":"src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/** Indicates the AddressBook in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class AddressBookChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public final ReadOnlyAddressBook data;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":"        return \"number of persons \" + data.getPersonList().size()"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"                + \", number of tags \" + data.getTagList().size()"},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"                + \", number of transactions \" + data.getTransactionList().size();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":3,"-":18}},{"path":"src/main/java/seedu/address/ui/CreditorCard.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":" * An UI component that displays information of a {@code Creditor}."},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"public class CreditorCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":"    private static final String FXML \u003d \"CreditorListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    public final Creditor creditor;"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"    @javafx.fxml.FXML"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    private HBox cardPane;"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"    @javafx.fxml.FXML"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"    private Label name;"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"    private Label id;"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"    private Label phone;"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"    private Label email;"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"    private Label debt;"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"    private FlowPane tags;"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"    public CreditorCard(Creditor creditor, int displayedIndex) {"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"        this.creditor \u003d creditor;"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"        name.setText(creditor.getCreditor().getName().fullName);"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"        phone.setText(creditor.getCreditor().getPhone().value);"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"        email.setText(creditor.getCreditor().getEmail().value);"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"        debt.setText(creditor.getDebt().toString());"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"        creditor.getCreditor().getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"        // short circuit if same object"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"            return true;"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"        // instanceof handles nulls"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"        if (!(other instanceof CreditorCard)) {"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"            return false;"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"        // state check"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"        CreditorCard card \u003d (CreditorCard) other;"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":"                    \u0026\u0026 creditor.equals(card.creditor); }"},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"phmignot":7,"-":1,"ongkc":57}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException, PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"phmignot"},"content":"    /** Returns an unmodifiable view of the list of transactions */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":"     * Removes any filter from the transaction list."},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":"    void updateFilteredTransactionList();"},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":40,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"phmignot"},"content":"     * Filters the transaction list by the person."},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":"     * @param person to filter with."},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":"    void updateFilteredTransactionList(Person person);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    ObservableList\u003cDebtor\u003e getFilteredDebtorsList();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    ObservableList\u003cCreditor\u003e getFilteredCreditorsList();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    void updateDebtorsAndCreditorList(Person person);"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    void updateDebtorsAndCreditorList();"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"phmignot":14,"-":39}},{"path":"src/main/java/seedu/address/commons/events/ui/PersonPanelNoSelectionEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":" * Represents no selection in the Person List Panel"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":" */"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"//@@author phmignot"},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":"public class PersonPanelNoSelectionEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"    public PersonPanelNoSelectionEvent() {"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":"}"}],"authorContributionMap":{"phmignot":13,"-":5}},{"path":"src/main/java/seedu/address/logic/parser/Parser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":6,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public interface Parser\u003cT extends Command\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a command and returns it."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    T parse(String userInput, Model model) throws ParseException, CommandException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":17}},{"path":"src/main/java/seedu/address/logic/parser/SelectCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"Steven-Jia"},"content":" * Parses input arguments and creates a new SelectPersonCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":"public class SelectCommandParser implements Parser\u003cSelectPersonCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectPersonCommand"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"     * and returns an SelectPersonCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"Steven-Jia"},"content":"    public SelectPersonCommand parse(String args, Model model) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":"            return new SelectPersonCommand(index);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"Steven-Jia"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectPersonCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":9,"-":21}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.AddTransactionCommand;"},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.DeleteTransactionCommand;"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.ListPersonsCommand;"},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.SelectPersonCommand;"},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class AddressBookParser {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"Steven-Jia"},"content":"    private final Model model;"},{"lineNumber":39,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":"    public AddressBookParser(Model model) {"},{"lineNumber":41,"author":{"gitID":"Steven-Jia"},"content":"        this.model \u003d model;"},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":44,"content":"    //@@author"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException, CommandException {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        switch (commandWord.toLowerCase()) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"Steven-Jia"},"content":"        case AddPersonCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitID":"Steven-Jia"},"content":"            return new AddPersonCommandParser().parse(arguments, model);"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        case AddTransactionCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitID":"Steven-Jia"},"content":"            return new AddTransactionCommandParser().parse(arguments, model);"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"Steven-Jia"},"content":"        case EditPersonCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"Steven-Jia"},"content":"            return new EditCommandParser().parse(arguments, model);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"Steven-Jia"},"content":"        case SelectPersonCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitID":"Steven-Jia"},"content":"            return new SelectCommandParser().parse(arguments, model);"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        case DeletePersonCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return new DeletePersonCommandParser().parse(arguments, model);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"phmignot"},"content":"        case DeleteTransactionCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"            return new DeleteTransactionCommandParser().parse(arguments, model);"},{"lineNumber":79,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            return new ClearCommand();"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"Steven-Jia"},"content":"        case FindPersonCommand.COMMAND_WORD:"},{"lineNumber":84,"author":{"gitID":"Steven-Jia"},"content":"            return new FindPersonCommandParser().parse(arguments, model);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"        case ListPersonsCommand.COMMAND_WORD:"},{"lineNumber":87,"author":{"gitID":"Steven-Jia"},"content":"            return new ListPersonsCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":1,"Steven-Jia":24,"phmignot":11,"-":73}},{"path":"src/main/java/seedu/address/logic/parser/FindPersonCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.FindPersonCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":" * Parses input arguments and creates a new FindPersonCommand object"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"public class FindPersonCommandParser implements Parser\u003cFindPersonCommand\u003e {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPersonCommand"},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"     * and returns an FindPersonCommand object for execution."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"    public FindPersonCommand parse(String args, Model model) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"Steven-Jia"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"Steven-Jia"},"content":"        return new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":9,"-":25}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"Steven-Jia"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitID":"Steven-Jia"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Amount;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Description;"},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.transaction.SplitMethod;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.TransactionType;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":27,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":30,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":31,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":32,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":33,"author":{"gitID":"-"},"content":" */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":79,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code phone} is invalid."},{"lineNumber":81,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public static Phone parsePhone(String phone) throws IllegalValueException {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":118,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":128,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":129,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":151,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"Steven-Jia"},"content":"     * Parses a {@code String amount} into a {@code Amount}."},{"lineNumber":153,"author":{"gitID":"Steven-Jia"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":154,"author":{"gitID":"Steven-Jia"},"content":"     *"},{"lineNumber":155,"author":{"gitID":"Steven-Jia"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":156,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"Steven-Jia"},"content":"    public static Amount parseAmount(String amount) throws IllegalValueException {"},{"lineNumber":158,"author":{"gitID":"Steven-Jia"},"content":"        requireNonNull(amount);"},{"lineNumber":159,"author":{"gitID":"Steven-Jia"},"content":"        String parsedAmount \u003d amount.trim();"},{"lineNumber":160,"author":{"gitID":"Steven-Jia"},"content":"        if (!parsedAmount.contains(\".\")) {"},{"lineNumber":161,"author":{"gitID":"Steven-Jia"},"content":"            parsedAmount +\u003d \".00\";"},{"lineNumber":162,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"Steven-Jia"},"content":"        if (!Amount.isValidAmount(parsedAmount)) {"},{"lineNumber":164,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(Amount.MESSAGE_AMOUNT_CONSTRAINTS);"},{"lineNumber":165,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":166,"author":{"gitID":"Steven-Jia"},"content":"        return new Amount(parsedAmount);"},{"lineNumber":167,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":169,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"Steven-Jia"},"content":"     * Parses {@code Collection\u003cString\u003e Amount} into a {@code Set\u003cAmount\u003e}."},{"lineNumber":171,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":172,"author":{"gitID":"Steven-Jia"},"content":"    public static Optional\u003cAmount\u003e parseAmount(Optional\u003cString\u003e amount) throws IllegalValueException {"},{"lineNumber":173,"author":{"gitID":"Steven-Jia"},"content":"        requireNonNull(amount);"},{"lineNumber":174,"author":{"gitID":"Steven-Jia"},"content":"        return amount.isPresent() ? Optional.of(parseAmount(amount.get())) : Optional.empty();"},{"lineNumber":175,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":177,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"ongkc"},"content":"     * Parses a {@code String description} into a {@code Description}."},{"lineNumber":179,"author":{"gitID":"ongkc"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":180,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":181,"author":{"gitID":"ongkc"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":182,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":183,"author":{"gitID":"ongkc"},"content":"    public static Description parseDescription(String description) throws IllegalValueException {"},{"lineNumber":184,"author":{"gitID":"ongkc"},"content":"        requireNonNull(description);"},{"lineNumber":185,"author":{"gitID":"ongkc"},"content":"        String trimmedDescription \u003d description.trim();"},{"lineNumber":186,"author":{"gitID":"ongkc"},"content":"        if (!Description.isValidDescription(trimmedDescription)) {"},{"lineNumber":187,"author":{"gitID":"ongkc"},"content":"            throw new IllegalValueException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":188,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"ongkc"},"content":"        return new Description(trimmedDescription);"},{"lineNumber":190,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":192,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"ongkc"},"content":"     * Parses {@code Collection\u003cString\u003e Description} into a {@code Set\u003cDescription\u003e}."},{"lineNumber":194,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"ongkc"},"content":"    public static Optional\u003cDescription\u003e parseDescription(Optional\u003cString\u003e description) throws IllegalValueException {"},{"lineNumber":196,"author":{"gitID":"ongkc"},"content":"        requireNonNull(description);"},{"lineNumber":197,"author":{"gitID":"ongkc"},"content":"        return description.isPresent() ? Optional.of(parseDescription(description.get())) : Optional.empty();"},{"lineNumber":198,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":200,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"ongkc"},"content":"     * Parses {@code Collection\u003cString\u003e TransactionType} into a {@code Set\u003cTransactionType\u003e}."},{"lineNumber":202,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":203,"author":{"gitID":"ongkc"},"content":"    public static TransactionType parseTransactionType(String type) throws IllegalValueException {"},{"lineNumber":204,"author":{"gitID":"ongkc"},"content":"        requireNonNull(type);"},{"lineNumber":205,"author":{"gitID":"ongkc"},"content":"        String trimmedType \u003d type.trim();"},{"lineNumber":206,"author":{"gitID":"ongkc"},"content":"        if (!TransactionType.isValidTransactionType(trimmedType)) {"},{"lineNumber":207,"author":{"gitID":"ongkc"},"content":"            throw new IllegalValueException(TransactionType.MESSAGE_TRANSACTION_TYPE_CONSTRAINTS);"},{"lineNumber":208,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"ongkc"},"content":"        return new TransactionType(trimmedType);"},{"lineNumber":210,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":212,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":213,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":214,"author":{"gitID":"Steven-Jia"},"content":"     * Parses a {@code String splitMethod} into a {@code SplitMethod}."},{"lineNumber":215,"author":{"gitID":"Steven-Jia"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":216,"author":{"gitID":"Steven-Jia"},"content":"     *"},{"lineNumber":217,"author":{"gitID":"Steven-Jia"},"content":"     * @throws IllegalValueException if the given {@code splitMethod} is invalid."},{"lineNumber":218,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":219,"author":{"gitID":"Steven-Jia"},"content":"    public static SplitMethod parseSplitMethod(String splitMethod) throws IllegalValueException {"},{"lineNumber":220,"author":{"gitID":"Steven-Jia"},"content":"        requireNonNull(splitMethod);"},{"lineNumber":221,"author":{"gitID":"Steven-Jia"},"content":"        String trimmedSplitMethod \u003d splitMethod.trim();"},{"lineNumber":222,"author":{"gitID":"Steven-Jia"},"content":"        if (!SplitMethod.isValidSplitMethod(trimmedSplitMethod)) {"},{"lineNumber":223,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(SplitMethod.MESSAGE_SPLIT_METHOD_CONSTRAINTS);"},{"lineNumber":224,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":225,"author":{"gitID":"Steven-Jia"},"content":"        return new SplitMethod(trimmedSplitMethod);"},{"lineNumber":226,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":228,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":229,"author":{"gitID":"Steven-Jia"},"content":"     * Parses {@code String splitMethod} into a {@code SplitMethod}."},{"lineNumber":230,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":231,"author":{"gitID":"Steven-Jia"},"content":"    public static SplitMethod parseSplitMethod(Optional\u003cString\u003e splitMethod) throws IllegalValueException {"},{"lineNumber":232,"author":{"gitID":"Steven-Jia"},"content":"        requireNonNull(splitMethod);"},{"lineNumber":233,"author":{"gitID":"Steven-Jia"},"content":"        return splitMethod.isPresent() ? parseSplitMethod(splitMethod.get())"},{"lineNumber":234,"author":{"gitID":"Steven-Jia"},"content":"                : new SplitMethod(SplitMethod.SPLIT_METHOD_EVENLY);"},{"lineNumber":235,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":236,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":237,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":238,"author":{"gitID":"Steven-Jia"},"content":"     * Parses a {@code String unitsList} into a {@code List\u003cInteger\u003e}."},{"lineNumber":239,"author":{"gitID":"Steven-Jia"},"content":"     * Leading and trailing whitespaces between values will be trimmed."},{"lineNumber":240,"author":{"gitID":"Steven-Jia"},"content":"     *"},{"lineNumber":241,"author":{"gitID":"Steven-Jia"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":242,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":243,"author":{"gitID":"Steven-Jia"},"content":"    public static List\u003cInteger\u003e parseUnitsList(String unitsList) throws IllegalValueException {"},{"lineNumber":244,"author":{"gitID":"Steven-Jia"},"content":"        requireNonNull(unitsList);"},{"lineNumber":245,"author":{"gitID":"Steven-Jia"},"content":"        ArrayList\u003cInteger\u003e trimmedUnitsList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":246,"author":{"gitID":"Steven-Jia"},"content":"        if (unitsList.matches(\"[0-9]+(,( )?[0-9]+)*\")) {"},{"lineNumber":247,"author":{"gitID":"Steven-Jia"},"content":"            String[] unitsArray \u003d unitsList.split(\",\");"},{"lineNumber":248,"author":{"gitID":"Steven-Jia"},"content":"            for (String unit: unitsArray) {"},{"lineNumber":249,"author":{"gitID":"Steven-Jia"},"content":"                trimmedUnitsList.add(Integer.valueOf(unit.trim()));"},{"lineNumber":250,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":251,"author":{"gitID":"Steven-Jia"},"content":"        } else {"},{"lineNumber":252,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(\"List of units can only take comma-separated integers\");"},{"lineNumber":253,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"Steven-Jia"},"content":"        return trimmedUnitsList;"},{"lineNumber":255,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":257,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":258,"author":{"gitID":"Steven-Jia"},"content":"     * Parses {@code Collection\u003cString\u003e unitsList} into a {@code List\u003cInteger\u003e}."},{"lineNumber":259,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":260,"author":{"gitID":"Steven-Jia"},"content":"    public static List\u003cInteger\u003e parseUnitsList(Optional\u003cString\u003e unitsList) throws IllegalValueException {"},{"lineNumber":261,"author":{"gitID":"Steven-Jia"},"content":"        requireNonNull(unitsList);"},{"lineNumber":262,"author":{"gitID":"Steven-Jia"},"content":"        return unitsList.isPresent() ? parseUnitsList(unitsList.get()) : Collections.emptyList();"},{"lineNumber":263,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":264,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":265,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":266,"author":{"gitID":"Steven-Jia"},"content":"     * Parses a {@code String percentagesList} into a {@code List\u003cInteger\u003e}."},{"lineNumber":267,"author":{"gitID":"Steven-Jia"},"content":"     * Leading and trailing whitespaces between values will be trimmed."},{"lineNumber":268,"author":{"gitID":"Steven-Jia"},"content":"     *"},{"lineNumber":269,"author":{"gitID":"Steven-Jia"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":270,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":271,"author":{"gitID":"Steven-Jia"},"content":"    public static List\u003cInteger\u003e parsePercentagesList(String percentagesList) throws IllegalValueException {"},{"lineNumber":272,"author":{"gitID":"Steven-Jia"},"content":"        requireNonNull(percentagesList);"},{"lineNumber":273,"author":{"gitID":"Steven-Jia"},"content":"        ArrayList\u003cInteger\u003e trimmedPercentagesList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":274,"author":{"gitID":"Steven-Jia"},"content":"        if (percentagesList.matches(\"[0-9]+(,( )?[0-9]+)*\")) {"},{"lineNumber":275,"author":{"gitID":"Steven-Jia"},"content":"            String[] percentagesArray \u003d percentagesList.split(\",\");"},{"lineNumber":276,"author":{"gitID":"Steven-Jia"},"content":"            for (String percentage: percentagesArray) {"},{"lineNumber":277,"author":{"gitID":"Steven-Jia"},"content":"                trimmedPercentagesList.add(Integer.valueOf(percentage.trim()));"},{"lineNumber":278,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":279,"author":{"gitID":"Steven-Jia"},"content":"        } else {"},{"lineNumber":280,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(\"List of percentages can only take comma-separated integers\");"},{"lineNumber":281,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":282,"author":{"gitID":"Steven-Jia"},"content":"        return trimmedPercentagesList;"},{"lineNumber":283,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":284,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":285,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":286,"author":{"gitID":"Steven-Jia"},"content":"     * Parses {@code Collection\u003cString\u003e percentagesList} into a {@code List\u003cInteger\u003e}."},{"lineNumber":287,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":288,"author":{"gitID":"Steven-Jia"},"content":"    public static List\u003cInteger\u003e parsePercentagesList(Optional\u003cString\u003e percentagesList) throws IllegalValueException {"},{"lineNumber":289,"author":{"gitID":"Steven-Jia"},"content":"        requireNonNull(percentagesList);"},{"lineNumber":290,"author":{"gitID":"Steven-Jia"},"content":"        return percentagesList.isPresent() ? parsePercentagesList(percentagesList.get()) : Collections.emptyList();"},{"lineNumber":291,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":293,"author":{"gitID":"Steven-Jia"},"content":"}"}],"authorContributionMap":{"Steven-Jia":112,"-":145,"ongkc":36}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TRANSACTION_TYPE \u003d new Prefix(\"type/\");"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"a/\");"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PAYER \u003d new Prefix(\"payer/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_PAYEE \u003d new Prefix(\"payee/\");"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"    public static final Prefix PREFIX_SPLIT_METHOD \u003d new Prefix(\"m/\");"},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"    public static final Prefix PREFIX_SPLIT_BY_UNITS \u003d new Prefix(\"units/\");"},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"    public static final Prefix PREFIX_SPLIT_BY_PERCENTAGE \u003d new Prefix(\"percentage/\");"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":3,"-":19}},{"path":"src/main/java/seedu/address/logic/util/CalculationUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"Steven-Jia"},"content":"package seedu.address.logic.util;"},{"lineNumber":2,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":3,"author":{"gitID":"Steven-Jia"},"content":"import java.math.BigDecimal;"},{"lineNumber":4,"author":{"gitID":"Steven-Jia"},"content":"import java.math.RoundingMode;"},{"lineNumber":5,"author":{"gitID":"Steven-Jia"},"content":"import java.text.DecimalFormat;"},{"lineNumber":6,"author":{"gitID":"Steven-Jia"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":8,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Balance;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Amount;"},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.TransactionType;"},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":" * Contains utility methods used for calculating balances of Persons."},{"lineNumber":16,"author":{"gitID":"Steven-Jia"},"content":" */"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":"public class CalculationUtil {"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"    private static final int NUMBER_OF_DECIMAL_PLACES \u003d 2;"},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"     * Returns the amount to add to the balance of a payer."},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    public static Balance calculateAmountToAddForPayer(Boolean isAddingTransaction,"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"                                                       Transaction transaction) {"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"        if (!isAddingTransaction) {"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"            return calculateAmountToAddForPayerForDeleteTransaction(transaction);"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"        } else {"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"            return calculateAmountToAddForPayerForPaymentTransaction(transaction);"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"     * Returns the amount to add to the balance or debt of a payee."},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"    public static Balance calculateAmountToAddForPayee(Boolean isAddingTransaction,"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"                                                       Integer splitMethodValuesListIndex,"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"                                                       Transaction transaction) {"},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":"        //@@author steven-jia"},{"lineNumber":41,"author":{"gitID":"Steven-Jia"},"content":"        // This is a deleteTransaction command"},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":"        if (!isAddingTransaction) {"},{"lineNumber":43,"author":{"gitID":"Steven-Jia"},"content":"            return calculateAmountToAddForPayeeForDeleteTransaction(splitMethodValuesListIndex, transaction);"},{"lineNumber":44,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"        //@@author ongkc"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"        switch (transaction.getTransactionType().value.toLowerCase()) {"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"        case TransactionType.TRANSACTION_TYPE_PAYDEBT:"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"            return calculateAmountToAddForPayeeForPaydebtTransaction(transaction);"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"        case TransactionType.TRANSACTION_TYPE_PAYMENT:"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"        default:"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"            return calculateAmountToAddForPayeeForPaymentTransaction(splitMethodValuesListIndex, transaction);"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"     * Calculates amount to add to the payee\u0027s balance after a new paydebt transaction is added."},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"     * Returned amount will be negative."},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"    private static Balance calculateAmountToAddForPayeeForPaydebtTransaction(Transaction transaction) {"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"        Double amountToAdd \u003d Double.valueOf(transaction.getAmount().value);"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"        return getRoundedFormattedBalance(amountToAdd);"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":65,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":66,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"Steven-Jia"},"content":"     * Calculates amount to add to the payer\u0027s balance after a new payment transaction is added."},{"lineNumber":68,"author":{"gitID":"Steven-Jia"},"content":"     * Returned amount will be positive."},{"lineNumber":69,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"Steven-Jia"},"content":"    public static Balance calculateAmountToAddForPayerForPaymentTransaction(Transaction transaction) {"},{"lineNumber":71,"author":{"gitID":"Steven-Jia"},"content":"        Double amountToAdd;"},{"lineNumber":72,"author":{"gitID":"Steven-Jia"},"content":"        switch (transaction.getSplitMethod().method) {"},{"lineNumber":73,"author":{"gitID":"Steven-Jia"},"content":"        case UNITS:"},{"lineNumber":74,"author":{"gitID":"Steven-Jia"},"content":"            Integer numberOfUnitsForPayer \u003d transaction.getUnits().get(0);"},{"lineNumber":75,"author":{"gitID":"Steven-Jia"},"content":"            int totalNumberOfUnits \u003d calculateTotalNumberOfUnits(transaction.getUnits());"},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":"            amountToAdd \u003d transaction.getAmount().getDoubleValue()"},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":"                    * numberOfUnitsForPayer / totalNumberOfUnits;"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":"        case PERCENTAGE:"},{"lineNumber":80,"author":{"gitID":"Steven-Jia"},"content":"            Integer percentageForPayer \u003d transaction.getPercentages().get(0);"},{"lineNumber":81,"author":{"gitID":"Steven-Jia"},"content":"            amountToAdd \u003d transaction.getAmount().getDoubleValue()"},{"lineNumber":82,"author":{"gitID":"Steven-Jia"},"content":"                    * percentageForPayer / 100;"},{"lineNumber":83,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":84,"author":{"gitID":"Steven-Jia"},"content":"        case EVENLY:"},{"lineNumber":85,"author":{"gitID":"Steven-Jia"},"content":"        default:"},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"            amountToAdd \u003d calculateAmountForPayerSplitEvenly(transaction.getAmount(),"},{"lineNumber":87,"author":{"gitID":"Steven-Jia"},"content":"                    transaction.getPayees());"},{"lineNumber":88,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":89,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"Steven-Jia"},"content":"        return getRoundedFormattedBalance(amountToAdd);"},{"lineNumber":91,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":93,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"Steven-Jia"},"content":"     * Calculates amount to add to the payee\u0027s balance after a new payment transaction is added."},{"lineNumber":95,"author":{"gitID":"Steven-Jia"},"content":"     * Returned amount will be negative."},{"lineNumber":96,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"Steven-Jia"},"content":"    public static Balance calculateAmountToAddForPayeeForPaymentTransaction(Integer splitMethodValuesListIndex,"},{"lineNumber":98,"author":{"gitID":"Steven-Jia"},"content":"                                                                            Transaction transaction) {"},{"lineNumber":99,"author":{"gitID":"Steven-Jia"},"content":"        Double amountToAdd;"},{"lineNumber":100,"author":{"gitID":"Steven-Jia"},"content":"        switch (transaction.getSplitMethod().method) {"},{"lineNumber":101,"author":{"gitID":"Steven-Jia"},"content":"        case UNITS:"},{"lineNumber":102,"author":{"gitID":"Steven-Jia"},"content":"            Integer numberOfUnitsForPayee \u003d transaction.getUnits().get(splitMethodValuesListIndex);"},{"lineNumber":103,"author":{"gitID":"Steven-Jia"},"content":"            int totalNumberOfUnits \u003d calculateTotalNumberOfUnits(transaction.getUnits());"},{"lineNumber":104,"author":{"gitID":"Steven-Jia"},"content":"            amountToAdd \u003d Double.valueOf(transaction.getAmount().value) * numberOfUnitsForPayee"},{"lineNumber":105,"author":{"gitID":"Steven-Jia"},"content":"                    / totalNumberOfUnits;"},{"lineNumber":106,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":107,"author":{"gitID":"Steven-Jia"},"content":"        case PERCENTAGE:"},{"lineNumber":108,"author":{"gitID":"Steven-Jia"},"content":"            Integer percentageForPayee \u003d transaction.getPercentages().get(splitMethodValuesListIndex);"},{"lineNumber":109,"author":{"gitID":"Steven-Jia"},"content":"            amountToAdd \u003d Double.valueOf(transaction.getAmount().value) * percentageForPayee / 100;"},{"lineNumber":110,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":111,"author":{"gitID":"Steven-Jia"},"content":"        case EVENLY:"},{"lineNumber":112,"author":{"gitID":"Steven-Jia"},"content":"        default:"},{"lineNumber":113,"author":{"gitID":"Steven-Jia"},"content":"            amountToAdd \u003d calculateAmountForPayeeSplitEvenly(transaction.getAmount(),"},{"lineNumber":114,"author":{"gitID":"Steven-Jia"},"content":"                    transaction.getPayees());"},{"lineNumber":115,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":116,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"Steven-Jia"},"content":"        return getRoundedFormattedBalance(amountToAdd);"},{"lineNumber":118,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"Steven-Jia"},"content":"     * Calculates amount to add to the payer\u0027s balance after a transaction is deleted."},{"lineNumber":121,"author":{"gitID":"Steven-Jia"},"content":"     * Returned amount will be negative."},{"lineNumber":122,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"Steven-Jia"},"content":"    public static Balance calculateAmountToAddForPayerForDeleteTransaction(Transaction transaction) {"},{"lineNumber":124,"author":{"gitID":"Steven-Jia"},"content":"        if (transaction.getTransactionType().value.equals(TransactionType.TRANSACTION_TYPE_PAYDEBT)) {"},{"lineNumber":125,"author":{"gitID":"Steven-Jia"},"content":"            return getRoundedFormattedBalance(-transaction.getAmount().getDoubleValue());"},{"lineNumber":126,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":128,"author":{"gitID":"Steven-Jia"},"content":"        Double amountToAdd;"},{"lineNumber":129,"author":{"gitID":"Steven-Jia"},"content":"        switch (transaction.getSplitMethod().method) {"},{"lineNumber":130,"author":{"gitID":"Steven-Jia"},"content":"        case UNITS:"},{"lineNumber":131,"author":{"gitID":"Steven-Jia"},"content":"            Integer numberOfUnitsForPayer \u003d transaction.getUnits().get(0);"},{"lineNumber":132,"author":{"gitID":"Steven-Jia"},"content":"            int totalNumberOfUnits \u003d calculateTotalNumberOfUnits(transaction.getUnits());"},{"lineNumber":133,"author":{"gitID":"Steven-Jia"},"content":"            amountToAdd \u003d -transaction.getAmount().getDoubleValue()"},{"lineNumber":134,"author":{"gitID":"Steven-Jia"},"content":"                    * numberOfUnitsForPayer / totalNumberOfUnits;"},{"lineNumber":135,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":136,"author":{"gitID":"Steven-Jia"},"content":"        case PERCENTAGE:"},{"lineNumber":137,"author":{"gitID":"Steven-Jia"},"content":"            Integer percentageForPayer \u003d transaction.getPercentages().get(0);"},{"lineNumber":138,"author":{"gitID":"Steven-Jia"},"content":"            amountToAdd \u003d -transaction.getAmount().getDoubleValue()"},{"lineNumber":139,"author":{"gitID":"Steven-Jia"},"content":"                    * percentageForPayer / 100;"},{"lineNumber":140,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":141,"author":{"gitID":"Steven-Jia"},"content":"        case EVENLY:"},{"lineNumber":142,"author":{"gitID":"Steven-Jia"},"content":"        default:"},{"lineNumber":143,"author":{"gitID":"Steven-Jia"},"content":"            amountToAdd \u003d -calculateAmountForPayerSplitEvenly(transaction.getAmount(),"},{"lineNumber":144,"author":{"gitID":"Steven-Jia"},"content":"                    transaction.getPayees());"},{"lineNumber":145,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":146,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":147,"author":{"gitID":"Steven-Jia"},"content":"        return getRoundedFormattedBalance(amountToAdd);"},{"lineNumber":148,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"Steven-Jia"},"content":"     * Calculates amount to add to the payee\u0027s balance after a transaction is deleted."},{"lineNumber":151,"author":{"gitID":"Steven-Jia"},"content":"     * Returned amount will be positive."},{"lineNumber":152,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"Steven-Jia"},"content":"    public static Balance calculateAmountToAddForPayeeForDeleteTransaction(Integer splitMethodValuesListIndex,"},{"lineNumber":154,"author":{"gitID":"Steven-Jia"},"content":"                                                                           Transaction transaction) {"},{"lineNumber":155,"author":{"gitID":"Steven-Jia"},"content":"        if (transaction.getTransactionType().value.equals(TransactionType.TRANSACTION_TYPE_PAYDEBT)) {"},{"lineNumber":156,"author":{"gitID":"Steven-Jia"},"content":"            return getRoundedFormattedBalance(transaction.getAmount().getDoubleValue()).getInverse();"},{"lineNumber":157,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":159,"author":{"gitID":"Steven-Jia"},"content":"        Double amountToAdd;"},{"lineNumber":160,"author":{"gitID":"Steven-Jia"},"content":"        switch (transaction.getSplitMethod().method) {"},{"lineNumber":161,"author":{"gitID":"Steven-Jia"},"content":"        case UNITS:"},{"lineNumber":162,"author":{"gitID":"Steven-Jia"},"content":"            Integer numberOfUnitsForPayee \u003d transaction.getUnits().get(splitMethodValuesListIndex);"},{"lineNumber":163,"author":{"gitID":"Steven-Jia"},"content":"            int totalNumberOfUnits \u003d calculateTotalNumberOfUnits(transaction.getUnits());"},{"lineNumber":164,"author":{"gitID":"Steven-Jia"},"content":"            amountToAdd \u003d -transaction.getAmount().getDoubleValue() * numberOfUnitsForPayee"},{"lineNumber":165,"author":{"gitID":"Steven-Jia"},"content":"                    / totalNumberOfUnits;"},{"lineNumber":166,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":167,"author":{"gitID":"Steven-Jia"},"content":"        case PERCENTAGE:"},{"lineNumber":168,"author":{"gitID":"Steven-Jia"},"content":"            Integer percentageForPayee \u003d transaction.getPercentages().get(splitMethodValuesListIndex);"},{"lineNumber":169,"author":{"gitID":"Steven-Jia"},"content":"            amountToAdd \u003d -transaction.getAmount().getDoubleValue() * percentageForPayee / 100;"},{"lineNumber":170,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":171,"author":{"gitID":"Steven-Jia"},"content":"        case EVENLY:"},{"lineNumber":172,"author":{"gitID":"Steven-Jia"},"content":"        default:"},{"lineNumber":173,"author":{"gitID":"Steven-Jia"},"content":"            amountToAdd \u003d -calculateAmountForPayeeSplitEvenly(transaction.getAmount(),"},{"lineNumber":174,"author":{"gitID":"Steven-Jia"},"content":"                    transaction.getPayees());"},{"lineNumber":175,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":176,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":177,"author":{"gitID":"Steven-Jia"},"content":"        return getRoundedFormattedBalance(amountToAdd);"},{"lineNumber":178,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":180,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":181,"author":{"gitID":"Steven-Jia"},"content":"     * Calculates amount to add to a payer\u0027s balance for a transaction that is split evenly."},{"lineNumber":182,"author":{"gitID":"Steven-Jia"},"content":"     * Returned amount will be positive."},{"lineNumber":183,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":184,"author":{"gitID":"Steven-Jia"},"content":"    private static Double calculateAmountForPayerSplitEvenly(Amount amount, UniquePersonList payees) {"},{"lineNumber":185,"author":{"gitID":"Steven-Jia"},"content":"        int numberOfInvolvedPersons \u003d calculateNumberOfInvolvedPersons(payees);"},{"lineNumber":186,"author":{"gitID":"Steven-Jia"},"content":"        return Double.valueOf(amount.value) / numberOfInvolvedPersons;"},{"lineNumber":187,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":189,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":190,"author":{"gitID":"Steven-Jia"},"content":"     * Calculates amount to add to a payee\u0027s balance for a transaction that is split evenly."},{"lineNumber":191,"author":{"gitID":"Steven-Jia"},"content":"     * Returned amount will be positive."},{"lineNumber":192,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":193,"author":{"gitID":"Steven-Jia"},"content":"    private static Double calculateAmountForPayeeSplitEvenly(Amount amount, UniquePersonList payees) {"},{"lineNumber":194,"author":{"gitID":"Steven-Jia"},"content":"        int numberOfInvolvedPersons \u003d calculateNumberOfInvolvedPersons(payees);"},{"lineNumber":195,"author":{"gitID":"Steven-Jia"},"content":"        return Double.valueOf(amount.value) / numberOfInvolvedPersons;"},{"lineNumber":196,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":197,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":198,"author":{"gitID":"Steven-Jia"},"content":"    private static Balance getRoundedFormattedBalance(Double amountToAdd) {"},{"lineNumber":199,"author":{"gitID":"Steven-Jia"},"content":"        amountToAdd \u003d round(amountToAdd, NUMBER_OF_DECIMAL_PLACES);"},{"lineNumber":200,"author":{"gitID":"Steven-Jia"},"content":"        DecimalFormat formatter \u003d new DecimalFormat(\"#.00\");"},{"lineNumber":201,"author":{"gitID":"Steven-Jia"},"content":"        return new Balance(String.valueOf(formatter.format(amountToAdd)));"},{"lineNumber":202,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":204,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":205,"author":{"gitID":"Steven-Jia"},"content":"     * Calculates the total number of people involved in a transaction"},{"lineNumber":206,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":207,"author":{"gitID":"Steven-Jia"},"content":"    public static int calculateNumberOfInvolvedPersons(UniquePersonList payees) {"},{"lineNumber":208,"author":{"gitID":"Steven-Jia"},"content":"        return payees.asObservableList().size() + 1;"},{"lineNumber":209,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":210,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":211,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":212,"author":{"gitID":"Steven-Jia"},"content":"     * Calculates the total number of units given a list of units"},{"lineNumber":213,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"Steven-Jia"},"content":"    private static int calculateTotalNumberOfUnits(List\u003cInteger\u003e units) {"},{"lineNumber":215,"author":{"gitID":"Steven-Jia"},"content":"        int totalNumberOfUnits \u003d 0;"},{"lineNumber":216,"author":{"gitID":"Steven-Jia"},"content":"        for (Integer unit: units) {"},{"lineNumber":217,"author":{"gitID":"Steven-Jia"},"content":"            totalNumberOfUnits +\u003d unit;"},{"lineNumber":218,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":219,"author":{"gitID":"Steven-Jia"},"content":"        return totalNumberOfUnits;"},{"lineNumber":220,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":222,"author":{"gitID":"Steven-Jia"},"content":"    private static double round(double value, int places) {"},{"lineNumber":223,"author":{"gitID":"Steven-Jia"},"content":"        BigDecimal amount \u003d new BigDecimal(value);"},{"lineNumber":224,"author":{"gitID":"Steven-Jia"},"content":"        amount \u003d amount.setScale(places, RoundingMode.HALF_UP);"},{"lineNumber":225,"author":{"gitID":"Steven-Jia"},"content":"        return amount.doubleValue();"},{"lineNumber":226,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":228,"author":{"gitID":"Steven-Jia"},"content":"}"},{"lineNumber":229,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":230,"author":{"gitID":"Steven-Jia"},"content":""}],"authorContributionMap":{"Steven-Jia":187,"phmignot":2,"-":2,"ongkc":39}},{"path":"src/main/java/seedu/address/logic/parser/DeletePersonCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.DeletePersonCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class DeletePersonCommandParser implements Parser\u003cDeletePersonCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * and returns an DeleteCommand object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public DeletePersonCommand parse(String args, Model model) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            return new DeletePersonCommand(index);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":30}},{"path":"src/main/java/seedu/address/logic/parser/AddPersonCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.AddPersonCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Balance;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":" * Parses input arguments and creates a new AddPersonCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class AddPersonCommandParser implements Parser\u003cAddPersonCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Steven-Jia"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonCommand"},{"lineNumber":30,"author":{"gitID":"Steven-Jia"},"content":"     * and returns an AddPersonCommand object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"    public AddPersonCommand parse(String args, Model model) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitID":"Steven-Jia"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"},{"lineNumber":46,"author":{"gitID":"Steven-Jia"},"content":"            Balance balance \u003d new Balance(\"0.00\");"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            Person person \u003d new Person(name, phone, email, balance, tagList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"            return new AddPersonCommand(person);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":10,"-":55}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.EditPersonCommand;"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":" * Parses input arguments and creates a new EditPersonCommand object"},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"Steven-Jia"},"content":"public class EditCommandParser implements Parser\u003cEditPersonCommand\u003e {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"Steven-Jia"},"content":"     * Parses the given {@code String} of arguments in the context of the EditPersonCommand"},{"lineNumber":30,"author":{"gitID":"Steven-Jia"},"content":"     * and returns an EditPersonCommand object for execution."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"    public EditPersonCommand parse(String args, Model model) throws ParseException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitID":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Index index;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":43,"author":{"gitID":"Steven-Jia"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":57,"author":{"gitID":"Steven-Jia"},"content":"            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"Steven-Jia"},"content":"        return new EditPersonCommand(index, editPersonDescriptor);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            return Optional.empty();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":11,"-":67}},{"path":"src/main/java/seedu/address/logic/parser/DeleteTransactionCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.DeleteTransactionCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"//@author phmignot"},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":" * Parses input arguments and creates a new DeleteTransactionCommand object"},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":" */"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":"public class DeleteTransactionCommandParser implements Parser\u003cDeleteTransactionCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteTransactionCommand"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"     * and returns an DeleteTransactionCommand object for execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"    public DeleteTransactionCommand parse(String args, Model model) throws ParseException {"},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"        try {"},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"            return new DeleteTransactionCommand(index);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTransactionCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":30,"author":{"gitID":"phmignot"},"content":"}"},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":""}],"authorContributionMap":{"Steven-Jia":2,"phmignot":20,"-":9}},{"path":"src/main/java/seedu/address/logic/parser/AddTransactionCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.commands.AddTransactionCommand.MESSAGE_INVALID_NUMBER_OF_VALUES;"},{"lineNumber":5,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.commands.AddTransactionCommand.MESSAGE_INVALID_PERCENTAGE_VALUES;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.AddTransactionCommand.MESSAGE_MISSING_PERCENTAGES_VALUES;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.AddTransactionCommand.MESSAGE_MISSING_UNITS_VALUES;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.AddTransactionCommand.MESSAGE_NONEXISTENT_PERSON;"},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.commands.AddTransactionCommand.MESSAGE_PAYEE_IS_PAYER;"},{"lineNumber":10,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.commands.AddTransactionCommand.MESSAGE_TOO_MANY_PREFIXES_FOR_PAYDEBT;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYEE;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYER;"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPLIT_BY_PERCENTAGE;"},{"lineNumber":16,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPLIT_BY_UNITS;"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPLIT_METHOD;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"import java.time.Clock;"},{"lineNumber":21,"author":{"gitID":"Steven-Jia"},"content":"import java.time.Instant;"},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"import java.time.ZoneId;"},{"lineNumber":23,"author":{"gitID":"Steven-Jia"},"content":"import java.util.Collections;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":25,"author":{"gitID":"Steven-Jia"},"content":"import java.util.List;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.AddTransactionCommand;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":32,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.Model;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Amount;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Description;"},{"lineNumber":38,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.transaction.SplitMethod;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.TransactionType;"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":" * Parses input arguments and creates a new AddTransactionCommand object"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"public class AddTransactionCommandParser implements Parser\u003cAddTransactionCommand\u003e {"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"    private TransactionType transactionType;"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"    private SplitMethod splitMethod;"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"    private List\u003cInteger\u003e units \u003d Collections.emptyList();"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"    private List\u003cInteger\u003e percentages \u003d Collections.emptyList();"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"     * Parses the given {@code String} of arguments in the context of the AddTransactionCommand"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"     * and returns an AddTransactionCommand object for execution."},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"    public AddTransactionCommand parse(String args, Model model) throws ParseException {"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_TRANSACTION_TYPE, PREFIX_PAYER, PREFIX_AMOUNT,"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"                        PREFIX_DESCRIPTION, PREFIX_PAYEE, PREFIX_SPLIT_METHOD, PREFIX_SPLIT_BY_UNITS,"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"                        PREFIX_SPLIT_BY_PERCENTAGE);"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_TRANSACTION_TYPE, PREFIX_PAYER, PREFIX_AMOUNT,"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"                PREFIX_DESCRIPTION, PREFIX_PAYEE)"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"                    AddTransactionCommand.MESSAGE_USAGE));"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":68,"author":{"gitID":"Steven-Jia"},"content":"        //@@author steven-jia"},{"lineNumber":69,"author":{"gitID":"Steven-Jia"},"content":"        parseTransactionType(argMultimap);"},{"lineNumber":70,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":71,"author":{"gitID":"Steven-Jia"},"content":"        if (transactionType.value.toLowerCase().equals(TransactionType.TRANSACTION_TYPE_PAYMENT)) {"},{"lineNumber":72,"author":{"gitID":"Steven-Jia"},"content":"            parseSplitMethod(argMultimap);"},{"lineNumber":73,"author":{"gitID":"Steven-Jia"},"content":"        } else if (transactionType.value.toLowerCase().equals(TransactionType.TRANSACTION_TYPE_PAYDEBT)) {"},{"lineNumber":74,"author":{"gitID":"Steven-Jia"},"content":"            if (arePrefixesPresent(argMultimap, PREFIX_SPLIT_METHOD)"},{"lineNumber":75,"author":{"gitID":"Steven-Jia"},"content":"                    || arePrefixesPresent(argMultimap, PREFIX_SPLIT_BY_UNITS)"},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":"                    || arePrefixesPresent(argMultimap, PREFIX_SPLIT_BY_PERCENTAGE)) {"},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":"                throw new ParseException(MESSAGE_TOO_MANY_PREFIXES_FOR_PAYDEBT);"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":"            splitMethod \u003d new SplitMethod(SplitMethod.SPLIT_METHOD_NOT_APPLICABLE);"},{"lineNumber":80,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":81,"author":{"gitID":"ongkc"},"content":"        //@@author ongkc"},{"lineNumber":82,"author":{"gitID":"ongkc"},"content":"        try {"},{"lineNumber":83,"author":{"gitID":"ongkc"},"content":"            Person payer \u003d model.findPersonByName(ParserUtil.parseName(argMultimap.getValue(PREFIX_PAYER)).get());"},{"lineNumber":84,"author":{"gitID":"ongkc"},"content":"            Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT)).get();"},{"lineNumber":85,"author":{"gitID":"ongkc"},"content":"            Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)).get();"},{"lineNumber":86,"author":{"gitID":"ongkc"},"content":"            UniquePersonList payees \u003d model.getPayeesList(argMultimap, model);"},{"lineNumber":87,"author":{"gitID":"ongkc"},"content":"            Date dateTime \u003d Date.from(Instant.now(Clock.system(ZoneId.of(\"Asia/Singapore\"))));"},{"lineNumber":88,"author":{"gitID":"Steven-Jia"},"content":"            //@@author steven-jia"},{"lineNumber":89,"author":{"gitID":"Steven-Jia"},"content":"            validatePayees(payer, payees);"},{"lineNumber":90,"author":{"gitID":"Steven-Jia"},"content":"            validateSplitMethodValues(payees, splitMethod, units, percentages);"},{"lineNumber":91,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":92,"author":{"gitID":"Steven-Jia"},"content":"            Transaction transaction \u003d new Transaction(transactionType, payer, amount, description, dateTime,"},{"lineNumber":93,"author":{"gitID":"Steven-Jia"},"content":"                    payees, splitMethod, units, percentages);"},{"lineNumber":94,"author":{"gitID":"Steven-Jia"},"content":"            return new AddTransactionCommand(transaction);"},{"lineNumber":95,"author":{"gitID":"Steven-Jia"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":96,"author":{"gitID":"Steven-Jia"},"content":"            throw new ParseException(MESSAGE_NONEXISTENT_PERSON, pnfe);"},{"lineNumber":97,"author":{"gitID":"Steven-Jia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":98,"author":{"gitID":"Steven-Jia"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":99,"author":{"gitID":"Steven-Jia"},"content":"        } catch (CommandException a) {"},{"lineNumber":100,"author":{"gitID":"Steven-Jia"},"content":"            throw new ParseException(a.getMessage(), a);"},{"lineNumber":101,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":102,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":104,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"Steven-Jia"},"content":"     * Attempts to parse the split method"},{"lineNumber":106,"author":{"gitID":"Steven-Jia"},"content":"     * @param argMultimap"},{"lineNumber":107,"author":{"gitID":"Steven-Jia"},"content":"     * @throws ParseException if the split method is not one of the listed options"},{"lineNumber":108,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":109,"author":{"gitID":"Steven-Jia"},"content":"    private void parseSplitMethod(ArgumentMultimap argMultimap) throws ParseException {"},{"lineNumber":110,"author":{"gitID":"Steven-Jia"},"content":"        try {"},{"lineNumber":111,"author":{"gitID":"Steven-Jia"},"content":"            splitMethod \u003d ParserUtil.parseSplitMethod(argMultimap.getValue(PREFIX_SPLIT_METHOD));"},{"lineNumber":112,"author":{"gitID":"Steven-Jia"},"content":"            switch (splitMethod.method) {"},{"lineNumber":113,"author":{"gitID":"Steven-Jia"},"content":"            case EVENLY:"},{"lineNumber":114,"author":{"gitID":"Steven-Jia"},"content":"                break;"},{"lineNumber":115,"author":{"gitID":"Steven-Jia"},"content":"            case UNITS:"},{"lineNumber":116,"author":{"gitID":"Steven-Jia"},"content":"                units \u003d ParserUtil.parseUnitsList(argMultimap.getValue(PREFIX_SPLIT_BY_UNITS));"},{"lineNumber":117,"author":{"gitID":"Steven-Jia"},"content":"                break;"},{"lineNumber":118,"author":{"gitID":"Steven-Jia"},"content":"            case PERCENTAGE:"},{"lineNumber":119,"author":{"gitID":"Steven-Jia"},"content":"                percentages \u003d ParserUtil.parsePercentagesList(argMultimap.getValue(PREFIX_SPLIT_BY_PERCENTAGE));"},{"lineNumber":120,"author":{"gitID":"Steven-Jia"},"content":"                break;"},{"lineNumber":121,"author":{"gitID":"Steven-Jia"},"content":"            default:"},{"lineNumber":122,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":123,"author":{"gitID":"Steven-Jia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":124,"author":{"gitID":"Steven-Jia"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":125,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":126,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":128,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"Steven-Jia"},"content":"     * Parses the transaction type"},{"lineNumber":130,"author":{"gitID":"Steven-Jia"},"content":"     * @param argMultimap"},{"lineNumber":131,"author":{"gitID":"Steven-Jia"},"content":"     * @throws ParseException if the transaction type is not one of the listed options"},{"lineNumber":132,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"Steven-Jia"},"content":"    private void parseTransactionType(ArgumentMultimap argMultimap) throws ParseException {"},{"lineNumber":134,"author":{"gitID":"Steven-Jia"},"content":"        try {"},{"lineNumber":135,"author":{"gitID":"Steven-Jia"},"content":"            transactionType \u003d ParserUtil.parseTransactionType(argMultimap.getValue("},{"lineNumber":136,"author":{"gitID":"Steven-Jia"},"content":"                    PREFIX_TRANSACTION_TYPE).get());"},{"lineNumber":137,"author":{"gitID":"Steven-Jia"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":138,"author":{"gitID":"Steven-Jia"},"content":"            throw new ParseException(ive.getMessage(), ive);"},{"lineNumber":139,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":142,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"Steven-Jia"},"content":"     * Checks list of units and list of percentages for validity"},{"lineNumber":144,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"Steven-Jia"},"content":"    private void validateSplitMethodValues(UniquePersonList payees, SplitMethod splitMethod,"},{"lineNumber":146,"author":{"gitID":"Steven-Jia"},"content":"                                           List\u003cInteger\u003e units, List\u003cInteger\u003e percentages)"},{"lineNumber":147,"author":{"gitID":"Steven-Jia"},"content":"            throws IllegalValueException {"},{"lineNumber":148,"author":{"gitID":"Steven-Jia"},"content":"        if (splitMethod.method.equals(SplitMethod.Method.UNITS)) {"},{"lineNumber":149,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":150,"author":{"gitID":"Steven-Jia"},"content":"            if (units.isEmpty()) {"},{"lineNumber":151,"author":{"gitID":"Steven-Jia"},"content":"                throw new IllegalValueException(String.format(MESSAGE_MISSING_UNITS_VALUES,"},{"lineNumber":152,"author":{"gitID":"Steven-Jia"},"content":"                        splitMethod.toString()));"},{"lineNumber":153,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":154,"author":{"gitID":"Steven-Jia"},"content":"            if (units.size() !\u003d payees.asObservableList().size() + 1) {"},{"lineNumber":155,"author":{"gitID":"Steven-Jia"},"content":"                throw new IllegalValueException("},{"lineNumber":156,"author":{"gitID":"Steven-Jia"},"content":"                        String.format(MESSAGE_INVALID_NUMBER_OF_VALUES, splitMethod.toString()));"},{"lineNumber":157,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":158,"author":{"gitID":"Steven-Jia"},"content":"        } else if (splitMethod.method.equals(SplitMethod.Method.PERCENTAGE)) {"},{"lineNumber":159,"author":{"gitID":"Steven-Jia"},"content":"            if (percentages.isEmpty()) {"},{"lineNumber":160,"author":{"gitID":"Steven-Jia"},"content":"                throw new ParseException(String.format(MESSAGE_MISSING_PERCENTAGES_VALUES,"},{"lineNumber":161,"author":{"gitID":"Steven-Jia"},"content":"                        splitMethod.toString()));"},{"lineNumber":162,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":163,"author":{"gitID":"Steven-Jia"},"content":"            if (percentages.size() !\u003d payees.asObservableList().size() + 1) {"},{"lineNumber":164,"author":{"gitID":"Steven-Jia"},"content":"                throw new IllegalValueException(String.format(MESSAGE_INVALID_NUMBER_OF_VALUES,"},{"lineNumber":165,"author":{"gitID":"Steven-Jia"},"content":"                        splitMethod.toString()));"},{"lineNumber":166,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":167,"author":{"gitID":"Steven-Jia"},"content":"            Integer total \u003d 0;"},{"lineNumber":168,"author":{"gitID":"Steven-Jia"},"content":"            for (Integer percentage: percentages) {"},{"lineNumber":169,"author":{"gitID":"Steven-Jia"},"content":"                total +\u003d percentage;"},{"lineNumber":170,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":171,"author":{"gitID":"Steven-Jia"},"content":"            if (total !\u003d 100) {"},{"lineNumber":172,"author":{"gitID":"Steven-Jia"},"content":"                throw new IllegalValueException(MESSAGE_INVALID_PERCENTAGE_VALUES);"},{"lineNumber":173,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":174,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":175,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":177,"author":{"gitID":"Steven-Jia"},"content":"    private void validatePayees(Person payer, UniquePersonList payees) throws CommandException {"},{"lineNumber":178,"author":{"gitID":"Steven-Jia"},"content":"        if (payees.contains(payer)) {"},{"lineNumber":179,"author":{"gitID":"Steven-Jia"},"content":"            throw new CommandException(MESSAGE_PAYEE_IS_PAYER);"},{"lineNumber":180,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":183,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":184,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"ongkc"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":186,"author":{"gitID":"ongkc"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":187,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"ongkc"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":189,"author":{"gitID":"ongkc"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":190,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":192,"author":{"gitID":"ongkc"},"content":"}"},{"lineNumber":193,"author":{"gitID":"ongkc"},"content":""}],"authorContributionMap":{"Steven-Jia":122,"-":26,"ongkc":45}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Clears the Smartsplit applcation."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class ClearCommand extends UndoableCommand {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"SmartSplit has been cleared!\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        model.resetData(new AddressBook());"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/ListPersonsCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"Steven-Jia"},"content":"public class ListPersonsCommand extends Command {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"listpersons\";"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":16}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of persons."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * @return summary message for persons displayed"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static String getMessageForPersonListShownSummary(int displaySize) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        return String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"Steven-Jia"},"content":"    public abstract CommandResult execute() throws CommandException, PersonNotFoundException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":43}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Redo the previously undone command."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class RedoCommand extends Command {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"Steven-Jia"},"content":"    public CommandResult execute() throws CommandException, PersonNotFoundException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, undoRedoStack);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        if (!undoRedoStack.canRedo()) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_FAILURE);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        undoRedoStack.popRedo().redo();"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.undoRedoStack \u003d undoRedoStack;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":36}},{"path":"src/test/java/seedu/address/logic/commands/DeleteTransactionCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":"import static seedu.address.testutil.AddressBookBuilder.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TRANSACTION;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TRANSACTION;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SEVENTH_TRANSACTION;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SIXTH_TRANSACTION;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"public class DeleteTransactionCommandTest {"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"    @Rule"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"        Transaction transactionToDelete \u003d model.getFilteredTransactionList().get("},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"                INDEX_FIRST_TRANSACTION.getZeroBased());"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteTransactionCommand \u003d prepareCommand(INDEX_FIRST_TRANSACTION);"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"        transactionToDelete.setTransactionType(\"paydebt\");"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"        String expectedMessage \u003d String.format(DeleteTransactionCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS,"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"                transactionToDelete);"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"        expectedModel.deleteTransaction(transactionToDelete);"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(deleteTransactionCommand, model, expectedMessage, expectedModel);"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"        transactionToDelete.setTransactionType(\"payment\");"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"    public void execute_validIndexUnfilteredListPaydebt_success() throws Exception {"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"        Transaction transactionToDelete \u003d model.getFilteredTransactionList().get("},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"                INDEX_FIRST_TRANSACTION.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteTransactionCommand \u003d prepareCommand(INDEX_FIRST_TRANSACTION);"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"        String expectedMessage \u003d String.format(DeleteTransactionCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS,"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"                transactionToDelete);"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"        expectedModel.deleteTransaction(transactionToDelete);"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(deleteTransactionCommand, model, expectedMessage, expectedModel);"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"    public void execute_validIndexUnfilteredListUnits_success() throws Exception {"},{"lineNumber":69,"author":{"gitID":"ongkc"},"content":"        Transaction transactionToDelete \u003d model.getFilteredTransactionList().get("},{"lineNumber":70,"author":{"gitID":"ongkc"},"content":"                INDEX_SIXTH_TRANSACTION.getZeroBased());"},{"lineNumber":71,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteTransactionCommand \u003d prepareCommand(INDEX_SIXTH_TRANSACTION);"},{"lineNumber":72,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":73,"author":{"gitID":"ongkc"},"content":"        String expectedMessage \u003d String.format(DeleteTransactionCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS,"},{"lineNumber":74,"author":{"gitID":"ongkc"},"content":"                transactionToDelete);"},{"lineNumber":75,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":76,"author":{"gitID":"ongkc"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":77,"author":{"gitID":"ongkc"},"content":"        expectedModel.deleteTransaction(transactionToDelete);"},{"lineNumber":78,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":79,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(deleteTransactionCommand, model, expectedMessage, expectedModel);"},{"lineNumber":80,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"ongkc"},"content":"    public void execute_validIndexUnfilteredListPercentage_success() throws Exception {"},{"lineNumber":83,"author":{"gitID":"ongkc"},"content":"        Transaction transactionToDelete \u003d model.getFilteredTransactionList().get("},{"lineNumber":84,"author":{"gitID":"ongkc"},"content":"                INDEX_SEVENTH_TRANSACTION.getZeroBased());"},{"lineNumber":85,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteTransactionCommand \u003d prepareCommand(INDEX_SEVENTH_TRANSACTION);"},{"lineNumber":86,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":87,"author":{"gitID":"ongkc"},"content":"        String expectedMessage \u003d String.format(DeleteTransactionCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS,"},{"lineNumber":88,"author":{"gitID":"ongkc"},"content":"                transactionToDelete);"},{"lineNumber":89,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":90,"author":{"gitID":"ongkc"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":91,"author":{"gitID":"ongkc"},"content":"        expectedModel.deleteTransaction(transactionToDelete);"},{"lineNumber":92,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":93,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(deleteTransactionCommand, model, expectedMessage, expectedModel);"},{"lineNumber":94,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"ongkc"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"},{"lineNumber":97,"author":{"gitID":"ongkc"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"},{"lineNumber":98,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteTransactionCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":99,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":100,"author":{"gitID":"ongkc"},"content":"        assertCommandFailure(deleteTransactionCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"},{"lineNumber":101,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":103,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"ongkc"},"content":"    public void execute_validIndexFilteredList_success() throws Exception {"},{"lineNumber":105,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":106,"author":{"gitID":"ongkc"},"content":"        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"},{"lineNumber":107,"author":{"gitID":"ongkc"},"content":"                .get(INDEX_FIRST_TRANSACTION.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteTransactionCommand \u003d prepareCommand(INDEX_FIRST_TRANSACTION);"},{"lineNumber":109,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":110,"author":{"gitID":"ongkc"},"content":"        String expectedMessage \u003d String.format(DeleteTransactionCommand.MESSAGE_DELETE_TRANSACTION_SUCCESS,"},{"lineNumber":111,"author":{"gitID":"ongkc"},"content":"                transactionToDelete);"},{"lineNumber":112,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":113,"author":{"gitID":"ongkc"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":114,"author":{"gitID":"ongkc"},"content":"        expectedModel.deleteTransaction(transactionToDelete);"},{"lineNumber":115,"author":{"gitID":"ongkc"},"content":"        showNoTransaction(expectedModel);"},{"lineNumber":116,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":117,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(deleteTransactionCommand, model, expectedMessage, expectedModel);"},{"lineNumber":118,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":120,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"ongkc"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() throws PersonNotFoundException {"},{"lineNumber":122,"author":{"gitID":"ongkc"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"},{"lineNumber":123,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteTransactionCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":124,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":125,"author":{"gitID":"ongkc"},"content":"        assertCommandFailure(deleteTransactionCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"},{"lineNumber":126,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":128,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":129,"author":{"gitID":"ongkc"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":130,"author":{"gitID":"ongkc"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":131,"author":{"gitID":"ongkc"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":132,"author":{"gitID":"ongkc"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":133,"author":{"gitID":"ongkc"},"content":"        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"},{"lineNumber":134,"author":{"gitID":"ongkc"},"content":"                .get(INDEX_FIRST_TRANSACTION.getZeroBased());"},{"lineNumber":135,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteTransactionCommand \u003d prepareCommand(INDEX_FIRST_TRANSACTION);"},{"lineNumber":136,"author":{"gitID":"ongkc"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":137,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":138,"author":{"gitID":"ongkc"},"content":"        // delete -\u003e first person deleted"},{"lineNumber":139,"author":{"gitID":"ongkc"},"content":"        deleteTransactionCommand.execute();"},{"lineNumber":140,"author":{"gitID":"ongkc"},"content":"        undoRedoStack.push(deleteTransactionCommand);"},{"lineNumber":141,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":142,"author":{"gitID":"ongkc"},"content":"        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"},{"lineNumber":143,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":144,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":145,"author":{"gitID":"ongkc"},"content":"        // redo -\u003e same first person deleted again"},{"lineNumber":146,"author":{"gitID":"ongkc"},"content":"        expectedModel.deleteTransaction(transactionToDelete);"},{"lineNumber":147,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":148,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":150,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"ongkc"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() throws PersonNotFoundException {"},{"lineNumber":152,"author":{"gitID":"ongkc"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":153,"author":{"gitID":"ongkc"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":154,"author":{"gitID":"ongkc"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":155,"author":{"gitID":"ongkc"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTransactionList().size() + 1);"},{"lineNumber":156,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteTransactionCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":157,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":158,"author":{"gitID":"ongkc"},"content":"        // execution failed -\u003e deleteCommand not pushed into undoRedoStack"},{"lineNumber":159,"author":{"gitID":"ongkc"},"content":"        assertCommandFailure(deleteTransactionCommand, model, Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"},{"lineNumber":160,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":161,"author":{"gitID":"ongkc"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":162,"author":{"gitID":"ongkc"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":163,"author":{"gitID":"ongkc"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":164,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":166,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":167,"author":{"gitID":"ongkc"},"content":"     * 1. Deletes a {@code Transaction} from a filtered list."},{"lineNumber":168,"author":{"gitID":"ongkc"},"content":"     * 2. Undo the deletion."},{"lineNumber":169,"author":{"gitID":"ongkc"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted transaction in the"},{"lineNumber":170,"author":{"gitID":"ongkc"},"content":"     * unfiltered list is same from the index at the filtered list."},{"lineNumber":171,"author":{"gitID":"ongkc"},"content":"     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the transaction object regardless of indexing."},{"lineNumber":172,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":173,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":174,"author":{"gitID":"ongkc"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameTransactionDeleted() throws Exception {"},{"lineNumber":175,"author":{"gitID":"ongkc"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":176,"author":{"gitID":"ongkc"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":177,"author":{"gitID":"ongkc"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":178,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteTransactionCommand \u003d prepareCommand(INDEX_FIRST_TRANSACTION);"},{"lineNumber":179,"author":{"gitID":"ongkc"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":180,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":181,"author":{"gitID":"ongkc"},"content":"        Transaction transactionToDelete \u003d model.getFilteredTransactionList()"},{"lineNumber":182,"author":{"gitID":"ongkc"},"content":"                .get(INDEX_FIRST_TRANSACTION.getZeroBased());"},{"lineNumber":183,"author":{"gitID":"ongkc"},"content":"        deleteTransactionCommand.execute();"},{"lineNumber":184,"author":{"gitID":"ongkc"},"content":"        undoRedoStack.push(deleteTransactionCommand);"},{"lineNumber":185,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":186,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":187,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":188,"author":{"gitID":"ongkc"},"content":"        expectedModel.deleteTransaction(transactionToDelete);"},{"lineNumber":189,"author":{"gitID":"ongkc"},"content":"        assertEquals(transactionToDelete, model.getFilteredTransactionList()"},{"lineNumber":190,"author":{"gitID":"ongkc"},"content":"                .get(INDEX_FIRST_TRANSACTION.getZeroBased()));"},{"lineNumber":191,"author":{"gitID":"ongkc"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":192,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":193,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":194,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":195,"author":{"gitID":"ongkc"},"content":"    public void execute_payerOrPayeesDoNotExist_throwsCommandException() throws CommandException,"},{"lineNumber":196,"author":{"gitID":"ongkc"},"content":"            PersonNotFoundException {"},{"lineNumber":197,"author":{"gitID":"ongkc"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":198,"author":{"gitID":"ongkc"},"content":"        Transaction transactionToDelete \u003d model.getAddressBook().getTransactionList().get(1);"},{"lineNumber":199,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":200,"author":{"gitID":"ongkc"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":201,"author":{"gitID":"ongkc"},"content":"        thrown.expectMessage(DeleteTransactionCommand.MESSAGE_NONEXISTENT_PAYER_PAYEES);"},{"lineNumber":202,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":203,"author":{"gitID":"ongkc"},"content":"        getDeleteTransactionCommand(transactionToDelete, expectedModel).execute();"},{"lineNumber":204,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":205,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":206,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":207,"author":{"gitID":"ongkc"},"content":"    public void execute_emptyTransactionList_throwsCommandException() throws CommandException,"},{"lineNumber":208,"author":{"gitID":"ongkc"},"content":"            PersonNotFoundException {"},{"lineNumber":209,"author":{"gitID":"ongkc"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs());"},{"lineNumber":210,"author":{"gitID":"ongkc"},"content":"        thrown.expect(CommandException.class);"},{"lineNumber":211,"author":{"gitID":"ongkc"},"content":"        thrown.expectMessage(Messages.MESSAGE_EMPTY_TRANSACTION_LIST);"},{"lineNumber":212,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":213,"author":{"gitID":"ongkc"},"content":"        getDeleteTransactionCommand(expectedModel).execute();"},{"lineNumber":214,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":216,"author":{"gitID":"ongkc"},"content":"    @Test"},{"lineNumber":217,"author":{"gitID":"ongkc"},"content":"    public void equals() throws Exception {"},{"lineNumber":218,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteFirstCommand \u003d prepareCommand(INDEX_FIRST_TRANSACTION);"},{"lineNumber":219,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteSecondCommand \u003d prepareCommand(INDEX_SECOND_TRANSACTION);"},{"lineNumber":220,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":221,"author":{"gitID":"ongkc"},"content":"        // same object -\u003e returns true"},{"lineNumber":222,"author":{"gitID":"ongkc"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":223,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":224,"author":{"gitID":"ongkc"},"content":"        // same values -\u003e returns true"},{"lineNumber":225,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_TRANSACTION);"},{"lineNumber":226,"author":{"gitID":"ongkc"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":227,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":228,"author":{"gitID":"ongkc"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":229,"author":{"gitID":"ongkc"},"content":"        deleteFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":230,"author":{"gitID":"ongkc"},"content":"        assertFalse(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":231,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":232,"author":{"gitID":"ongkc"},"content":"        // different types -\u003e returns false"},{"lineNumber":233,"author":{"gitID":"ongkc"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":234,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":235,"author":{"gitID":"ongkc"},"content":"        // null -\u003e returns false"},{"lineNumber":236,"author":{"gitID":"ongkc"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":237,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":238,"author":{"gitID":"ongkc"},"content":"        // different transaction -\u003e returns false"},{"lineNumber":239,"author":{"gitID":"ongkc"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":240,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":241,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":242,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":243,"author":{"gitID":"ongkc"},"content":"     * Returns a {@code DeleteCommand} with the parameter {@code index}."},{"lineNumber":244,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":245,"author":{"gitID":"ongkc"},"content":"    private DeleteTransactionCommand prepareCommand(Index index) {"},{"lineNumber":246,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand deleteTransactionCommand \u003d new DeleteTransactionCommand(index);"},{"lineNumber":247,"author":{"gitID":"ongkc"},"content":"        deleteTransactionCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":248,"author":{"gitID":"ongkc"},"content":"        return deleteTransactionCommand;"},{"lineNumber":249,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":250,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":251,"author":{"gitID":"ongkc"},"content":"     * Generates a new AddPersonCommand with the details of the given person."},{"lineNumber":252,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":253,"author":{"gitID":"ongkc"},"content":"    private DeleteTransactionCommand getDeleteTransactionCommand(Transaction transaction, Model model) throws"},{"lineNumber":254,"author":{"gitID":"ongkc"},"content":"            PersonNotFoundException, CommandException {"},{"lineNumber":255,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand command \u003d new DeleteTransactionCommand(INDEX_SECOND_TRANSACTION);"},{"lineNumber":256,"author":{"gitID":"ongkc"},"content":"        model.deletePerson(transaction.getPayer());"},{"lineNumber":257,"author":{"gitID":"ongkc"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":258,"author":{"gitID":"ongkc"},"content":"        return command;"},{"lineNumber":259,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":261,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":262,"author":{"gitID":"ongkc"},"content":"     * Generates a new AddPersonCommand with the details of the given person."},{"lineNumber":263,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"ongkc"},"content":"    private DeleteTransactionCommand getDeleteTransactionCommand(Model model) {"},{"lineNumber":265,"author":{"gitID":"ongkc"},"content":"        DeleteTransactionCommand command \u003d new DeleteTransactionCommand(INDEX_FIRST_TRANSACTION);"},{"lineNumber":266,"author":{"gitID":"ongkc"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":267,"author":{"gitID":"ongkc"},"content":"        return command;"},{"lineNumber":268,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":269,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":270,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":271,"author":{"gitID":"ongkc"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":272,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":273,"author":{"gitID":"ongkc"},"content":"    private void showNoTransaction(Model model) {"},{"lineNumber":274,"author":{"gitID":"ongkc"},"content":"        model.updateFilteredTransactionList(p -\u003e false);"},{"lineNumber":275,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":276,"author":{"gitID":"ongkc"},"content":"        assertTrue(model.getFilteredTransactionList().isEmpty());"},{"lineNumber":277,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":278,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"phmignot":1,"-":29,"ongkc":248}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private ReadOnlyAddressBook previousAddressBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException, PersonNotFoundException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Stores the current state of {@code model#addressBook}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private void saveAddressBookSnapshot() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.previousAddressBook \u003d new AddressBook(model.getAddressBook());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Reverts the AddressBook to the state before this command"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * was executed and updates the filtered person list to"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * show all persons."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        requireAllNonNull(model, previousAddressBook);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        model.resetData(previousAddressBook);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Executes the command and updates the filtered person"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * list to show all persons."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"Steven-Jia"},"content":"    protected final void redo() throws PersonNotFoundException {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":56,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"Steven-Jia"},"content":"    public final CommandResult execute() throws CommandException, PersonNotFoundException {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        saveAddressBookSnapshot();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":3,"-":65}},{"path":"src/main/java/seedu/address/logic/commands/AddPersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Adds a person to the SmartSplit."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class AddPersonCommand extends UndoableCommand {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"addperson\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":26,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":28,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":30,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":31,"author":{"gitID":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":34,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\""},{"lineNumber":35,"author":{"gitID":"Steven-Jia"},"content":"            + \" The name must be unique.\";"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final Person toAdd;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Creates an AddPersonCommand to add the specified {@code Person}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public AddPersonCommand(Person person) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(person);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            model.addPerson(toAdd);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                || (other instanceof AddPersonCommand // instanceof handles nulls"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":2,"-":63}},{"path":"src/main/java/seedu/address/logic/commands/AddTransactionCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYEE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYER;"},{"lineNumber":8,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPLIT_BY_PERCENTAGE;"},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPLIT_BY_UNITS;"},{"lineNumber":10,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SPLIT_METHOD;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION_TYPE;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":" * Adds a new transaction to the SplitSplit application."},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"public class AddTransactionCommand extends UndoableCommand {"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    public static final String COMMAND_WORD \u003d \"addtransaction\";"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new transaction to the address book. \\n\""},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"            + PREFIX_TRANSACTION_TYPE + \"TRANSACTION TYPE \""},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"            + PREFIX_PAYER + \"PAYER NAME \""},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"            + PREFIX_AMOUNT + \"AMOUNT \""},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"            + PREFIX_DESCRIPTION + \"DESCRIPTION \""},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"            + \"[\" + PREFIX_PAYEE + \"PAYEE NAME] \""},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"            + PREFIX_SPLIT_METHOD + \"SPLIT METHOD \""},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"            + PREFIX_SPLIT_BY_UNITS + \"LIST OF UNITS \""},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"            + PREFIX_SPLIT_BY_PERCENTAGE + \"LIST OF PERCENTAGES...\\n\""},{"lineNumber":35,"author":{"gitID":"Steven-Jia"},"content":"            //@@author steven-jia"},{"lineNumber":36,"author":{"gitID":"Steven-Jia"},"content":"            + \"The transaction type options are: \\\"payment\\\" or \\\"paydebt\\\". \\n\""},{"lineNumber":37,"author":{"gitID":"Steven-Jia"},"content":"            + \"The split method options are: \\\"evenly\\\", \\\"units\\\", or \\\"percentage\\\". \""},{"lineNumber":38,"author":{"gitID":"Steven-Jia"},"content":"            + \"Only add a split method if you are recording a payment (i.e. the transaction type is \\\"payment\\\"). \\n\""},{"lineNumber":39,"author":{"gitID":"Steven-Jia"},"content":"            + \"Units and percentages must be entered as a comma-separated list. \""},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":"            + \"The first number in the list is associated with the payer \""},{"lineNumber":41,"author":{"gitID":"Steven-Jia"},"content":"            + \"and subsequent numbers are associated with each payee in the order in which they are listed. \\n\""},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":"            + \"Example 1: \" + COMMAND_WORD + \" \""},{"lineNumber":43,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_TRANSACTION_TYPE + \"payment \""},{"lineNumber":44,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_PAYER + \"John Doe \""},{"lineNumber":45,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_AMOUNT + \"120.00 \""},{"lineNumber":46,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_DESCRIPTION + \"Taxi ride to NUS \""},{"lineNumber":47,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_PAYEE + \"Alex Yeoh \""},{"lineNumber":48,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_PAYEE + \"Bernice Yu \""},{"lineNumber":49,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_SPLIT_METHOD + \"evenly \\n\""},{"lineNumber":50,"author":{"gitID":"Steven-Jia"},"content":"            + \"Example 2: \" + COMMAND_WORD + \" \""},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_TRANSACTION_TYPE + \"payment \""},{"lineNumber":52,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_PAYER + \"Alex Yeoh \""},{"lineNumber":53,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_AMOUNT + \"50.00 \""},{"lineNumber":54,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_DESCRIPTION + \"Team dinner \""},{"lineNumber":55,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_PAYEE + \"John Doe \""},{"lineNumber":56,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_PAYEE + \"Bernice Yu \""},{"lineNumber":57,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_SPLIT_METHOD + \"percentage \""},{"lineNumber":58,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_SPLIT_BY_PERCENTAGE + \"40, 40, 20 \\n\""},{"lineNumber":59,"author":{"gitID":"Steven-Jia"},"content":"            + \"Example 3: \" + COMMAND_WORD + \" \""},{"lineNumber":60,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_TRANSACTION_TYPE + \"payment \""},{"lineNumber":61,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_PAYER + \"Bernice Yu \""},{"lineNumber":62,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_AMOUNT + \"35.00 \""},{"lineNumber":63,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_DESCRIPTION + \"Team apparel items \""},{"lineNumber":64,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_PAYEE + \"Alex Yeoh \""},{"lineNumber":65,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_PAYEE + \"John Doe \""},{"lineNumber":66,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_SPLIT_METHOD + \"units \""},{"lineNumber":67,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_SPLIT_BY_UNITS + \"4, 2, 1 \\n\""},{"lineNumber":68,"author":{"gitID":"Steven-Jia"},"content":"            + \"Example 4: \" + COMMAND_WORD + \" \""},{"lineNumber":69,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_TRANSACTION_TYPE + \"paydebt \""},{"lineNumber":70,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_PAYER + \"Bernice Yu \""},{"lineNumber":71,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_AMOUNT + \"40.00 \""},{"lineNumber":72,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_DESCRIPTION + \"Amount owed for taxi ride \""},{"lineNumber":73,"author":{"gitID":"Steven-Jia"},"content":"            + PREFIX_PAYEE + \"John Doe\";"},{"lineNumber":74,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":75,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_INVALID_NUMBER_OF_VALUES \u003d \"The number of %1$s values does not match\""},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":"            + \" the number of persons involved. Remember to include the payer in the count.\";"},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_INVALID_PERCENTAGE_VALUES \u003d \"The sum of the percentages does not equal 100.\";"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_ONLY_ONE_PAYEE_FOR_PAYDEBT \u003d \"Paydebt transactions can only have 1 payee\";"},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_PAYEE_NOT_OWED_ANY_DEBT \u003d \"Payee is not owed any debt\";"},{"lineNumber":80,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_PAYEE_IS_BEING_OVERPAID \u003d \"Payee is being overpaid. Ensure that the transaction \""},{"lineNumber":81,"author":{"gitID":"Steven-Jia"},"content":"            + \"amount does not exceed the balance owed.\";"},{"lineNumber":82,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_TOO_MANY_PREFIXES_FOR_PAYDEBT \u003d \"Paydebt transactions do not require \""},{"lineNumber":83,"author":{"gitID":"Steven-Jia"},"content":"            + \"a split method, a list of units, nor a list of percentages. Ensure that those prefixes are not entered.\";"},{"lineNumber":84,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_NONEXISTENT_PERSON \u003d \"The specified payer or payee(s) do not exist\";"},{"lineNumber":85,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_PAYEE_IS_PAYER \u003d \"A payee cannot be the payer\";"},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_MISSING_PERCENTAGES_VALUES \u003d \"The percentage value is missing.\";"},{"lineNumber":87,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_MISSING_UNITS_VALUES \u003d \"The unit value is missing.\";"},{"lineNumber":88,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":89,"author":{"gitID":"ongkc"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New transaction added\";"},{"lineNumber":90,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":91,"author":{"gitID":"ongkc"},"content":"    private final Transaction toAdd;"},{"lineNumber":92,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":93,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"ongkc"},"content":"     * Creates an AddTransactionCommand to add the specified {@code Transaction}"},{"lineNumber":95,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"ongkc"},"content":"    public AddTransactionCommand(Transaction transaction) {"},{"lineNumber":97,"author":{"gitID":"ongkc"},"content":"        requireNonNull(transaction);"},{"lineNumber":98,"author":{"gitID":"ongkc"},"content":"        toAdd \u003d transaction;"},{"lineNumber":99,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":101,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"ongkc"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":103,"author":{"gitID":"ongkc"},"content":"        requireNonNull(model);"},{"lineNumber":104,"author":{"gitID":"ongkc"},"content":"        try {"},{"lineNumber":105,"author":{"gitID":"ongkc"},"content":"            model.addTransaction(toAdd);"},{"lineNumber":106,"author":{"gitID":"ongkc"},"content":"            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":107,"author":{"gitID":"ongkc"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":108,"author":{"gitID":"ongkc"},"content":"            throw new CommandException(MESSAGE_NONEXISTENT_PERSON);"},{"lineNumber":109,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":110,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":112,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":113,"author":{"gitID":"ongkc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitID":"ongkc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitID":"ongkc"},"content":"                || (other instanceof AddTransactionCommand// instanceof handles nulls"},{"lineNumber":116,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 toAdd.equals(((AddTransactionCommand) other).toAdd));"},{"lineNumber":117,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"Steven-Jia":57,"-":12,"ongkc":49}},{"path":"src/main/java/seedu/address/logic/commands/EditPersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSACTIONS;"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_NO_TRANSACTION;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Balance;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitID":"-"},"content":" * Edits the details of an existing person in the smartsplit application."},{"lineNumber":34,"author":{"gitID":"-"},"content":" */"},{"lineNumber":35,"author":{"gitID":"Steven-Jia"},"content":"public class EditPersonCommand extends UndoableCommand {"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"editperson\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":40,"author":{"gitID":"-"},"content":"            + \"by the index number used in the last person listing. \""},{"lineNumber":41,"author":{"gitID":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":42,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":43,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":44,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":45,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":46,"author":{"gitID":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":47,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":48,"author":{"gitID":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":49,"author":{"gitID":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private final Index index;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private Person personToEdit;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    private Person editedPerson;"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"Steven-Jia"},"content":"    public EditPersonCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(index);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.index \u003d index;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"            model.updatePerson(personToEdit, editedPerson);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException dpe) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException pnfe) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The target person cannot be missing\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":83,"author":{"gitID":"phmignot"},"content":"        model.updateFilteredTransactionList(PREDICATE_SHOW_NO_TRANSACTION);"},{"lineNumber":84,"author":{"gitID":"phmignot"},"content":"        model.updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":110,"author":{"gitID":"Steven-Jia"},"content":"        Balance unchangedBalance \u003d personToEdit.getBalance();"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"Steven-Jia"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, unchangedBalance, updatedTags);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":124,"author":{"gitID":"Steven-Jia"},"content":"        if (!(other instanceof EditPersonCommand)) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":129,"author":{"gitID":"Steven-Jia"},"content":"        EditPersonCommand e \u003d (EditPersonCommand) other;"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":131,"author":{"gitID":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"},{"lineNumber":132,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        private Name name;"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        private Phone phone;"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        private Email email;"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"         * Copy constructor."},{"lineNumber":149,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":150,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":159,"author":{"gitID":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":160,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.tags);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            this.name \u003d name;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":182,"author":{"gitID":"-"},"content":"            this.email \u003d email;"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":186,"author":{"gitID":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":190,"author":{"gitID":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":191,"author":{"gitID":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":192,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"        /**"},{"lineNumber":198,"author":{"gitID":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":199,"author":{"gitID":"-"},"content":"         * if modification is attempted."},{"lineNumber":200,"author":{"gitID":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":201,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":202,"author":{"gitID":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":203,"author":{"gitID":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":204,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":208,"author":{"gitID":"-"},"content":"            // short circuit if same object"},{"lineNumber":209,"author":{"gitID":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"                return true;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":214,"author":{"gitID":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":215,"author":{"gitID":"-"},"content":"                return false;"},{"lineNumber":216,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"            // state check"},{"lineNumber":219,"author":{"gitID":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":222,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":223,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":224,"author":{"gitID":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitID":"-"},"content":""},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":229,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":7,"phmignot":4,"-":218}},{"path":"src/main/java/seedu/address/logic/commands/DeleteTransactionCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":"//@phmignot"},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":" * Deletes a transaction identified using its displayed index from the list of transactions."},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":" */"},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"public class DeleteTransactionCommand extends UndoableCommand {"},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"deletetransaction\";"},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":"            + \": Deletes the transaction identified by its index number used in the list of transactions.\\n\""},{"lineNumber":25,"author":{"gitID":"phmignot"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":28,"author":{"gitID":"phmignot"},"content":"    public static final String MESSAGE_DELETE_TRANSACTION_SUCCESS \u003d \"Deleted Transaction: %1$s\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NONEXISTENT_PAYER_PAYEES \u003d"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            \"The payer or payee(s) in the transaction do not exist\";"},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":"    private final Index targetIndex;"},{"lineNumber":33,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"    private Transaction transactionToDelete;"},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":"    public DeleteTransactionCommand(Index targetIndex) {"},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":40,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":41,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"        requireNonNull(transactionToDelete);"},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":"        try {"},{"lineNumber":45,"author":{"gitID":"phmignot"},"content":"            model.deleteTransaction(transactionToDelete);"},{"lineNumber":46,"author":{"gitID":"phmignot"},"content":"        } catch (TransactionNotFoundException tnfe) {"},{"lineNumber":47,"author":{"gitID":"phmignot"},"content":"            throw new AssertionError(\"The target transaction cannot be missing\");"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        } catch (PersonNotFoundException e) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new CommandException(MESSAGE_NONEXISTENT_PAYER_PAYEES);"},{"lineNumber":50,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"phmignot"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_TRANSACTION_SUCCESS, transactionToDelete));"},{"lineNumber":52,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"phmignot"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        List\u003cTransaction\u003e lastShownList \u003d model.getFilteredTransactionList();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        if (lastShownList.isEmpty()) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_EMPTY_TRANSACTION_LIST);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_TRANSACTION_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":64,"author":{"gitID":"phmignot"},"content":"        transactionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":67,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"phmignot"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitID":"phmignot"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitID":"phmignot"},"content":"                || (other instanceof seedu.address.logic.commands.DeleteTransactionCommand // instanceof handles nulls"},{"lineNumber":71,"author":{"gitID":"phmignot"},"content":"                \u0026\u0026 this.targetIndex"},{"lineNumber":72,"author":{"gitID":"phmignot"},"content":"                .equals(((seedu.address.logic.commands.DeleteTransactionCommand) other).targetIndex) // state check"},{"lineNumber":73,"author":{"gitID":"phmignot"},"content":"                \u0026\u0026 Objects.equals(this.transactionToDelete, ("},{"lineNumber":74,"author":{"gitID":"phmignot"},"content":"                        (seedu.address.logic.commands.DeleteTransactionCommand) other).transactionToDelete));"},{"lineNumber":75,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"phmignot"},"content":"}"},{"lineNumber":77,"author":{"gitID":"phmignot"},"content":""}],"authorContributionMap":{"phmignot":65,"-":12}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CREDITORS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DEBTORS;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_NO_CREDITORS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_NO_DEBTORS;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.DebtsList;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.DebtsTable;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":25,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.TransactionContainsPersonPredicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":"        addressBookParser \u003d new AddressBookParser(model);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"Steven-Jia"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException, PersonNotFoundException {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            CommandResult result \u003d command.execute();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        return model.getFilteredTransactionList();"},{"lineNumber":68,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public ObservableList\u003cDebtor\u003e getFilteredDebtorsList() {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return model.getFilteredDebtors();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public ObservableList\u003cCreditor\u003e getFilteredCreditorsList() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return model.getFilteredCreditors();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    //@author phmignot"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Update the transaction list to show all transaction"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":89,"author":{"gitID":"phmignot"},"content":"    public void updateFilteredTransactionList() {"},{"lineNumber":90,"author":{"gitID":"phmignot"},"content":"        model.updateFilteredTransactionList(Model.PREDICATE_SHOW_ALL_TRANSACTIONS);"},{"lineNumber":91,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     * Update the transaction list to show transactions of the selected person"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":96,"author":{"gitID":"phmignot"},"content":"    public void updateFilteredTransactionList(Person person) {"},{"lineNumber":97,"author":{"gitID":"phmignot"},"content":"        TransactionContainsPersonPredicate predicate \u003d new TransactionContainsPersonPredicate(person);"},{"lineNumber":98,"author":{"gitID":"phmignot"},"content":"        model.updateFilteredTransactionList(predicate);"},{"lineNumber":99,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":101,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"ongkc"},"content":"     * Update the Debtor and Creditor list to an empty list"},{"lineNumber":103,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":105,"author":{"gitID":"ongkc"},"content":"    public void updateDebtorsAndCreditorList() {"},{"lineNumber":106,"author":{"gitID":"ongkc"},"content":"        model.updateDebtorList(PREDICATE_SHOW_NO_DEBTORS);"},{"lineNumber":107,"author":{"gitID":"ongkc"},"content":"        model.updateCreditorList(PREDICATE_SHOW_NO_CREDITORS);"},{"lineNumber":108,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"ongkc"},"content":"     * Update the people in the Debtor and Creditor list"},{"lineNumber":111,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"ongkc"},"content":"    public void updateDebtorsAndCreditorList(Person person) {"},{"lineNumber":113,"author":{"gitID":"ongkc"},"content":"        model.updateCreditorList(PREDICATE_SHOW_ALL_CREDITORS);"},{"lineNumber":114,"author":{"gitID":"ongkc"},"content":"        model.updateDebtorList(PREDICATE_SHOW_ALL_DEBTORS);"},{"lineNumber":115,"author":{"gitID":"ongkc"},"content":"        DebtsTable debtsTable \u003d model.getAddressBook().getDebtsTable();"},{"lineNumber":116,"author":{"gitID":"ongkc"},"content":"        DebtsList debtsList \u003d debtsTable.get(person);"},{"lineNumber":117,"author":{"gitID":"ongkc"},"content":"        model.getAddressBook().setDebtors(debtsList);"},{"lineNumber":118,"author":{"gitID":"ongkc"},"content":"        model.getAddressBook().setCreditors(debtsList);"},{"lineNumber":119,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":121,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":122,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"Steven-Jia":2,"phmignot":14,"-":83,"ongkc":23}},{"path":"src/main/java/seedu/address/logic/commands/SelectPersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":" * Selects a person identified using its last displayed index from the SmartSplit addressbook."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"public class SelectPersonCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"selectperson\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \": Selects the person identified by the index number used in the last person listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":"    public SelectPersonCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"Steven-Jia"},"content":"                || (other instanceof SelectPersonCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"Steven-Jia"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectPersonCommand) other).targetIndex)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":5,"-":47}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedPerson.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Balance;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * JAXB-friendly version of the Person."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class XmlAdaptedPerson {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private String phone;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"    private String balance;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedPerson."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Constructs an {@code XmlAdaptedPerson} with the given person details."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"Steven-Jia"},"content":"    public XmlAdaptedPerson(String name, String phone, String email, String balance,"},{"lineNumber":48,"author":{"gitID":"Steven-Jia"},"content":"                            List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":52,"author":{"gitID":"Steven-Jia"},"content":"        this.balance \u003d balance;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * Converts a given Person into this class for JAXB use."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedPerson"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public XmlAdaptedPerson(Person source) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":67,"author":{"gitID":"Steven-Jia"},"content":"        balance \u003d source.getBalance().value;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person"},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        if (this.phone \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        if (!Phone.isValidPhone(this.phone)) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        final Phone phone \u003d new Phone(this.phone);"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"Steven-Jia"},"content":"        //@@author steven-jia"},{"lineNumber":111,"author":{"gitID":"Steven-Jia"},"content":"        if (this.balance \u003d\u003d null) {"},{"lineNumber":112,"author":{"gitID":"Steven-Jia"},"content":"            // Retroactively apply a balance of 0.00 to saved Persons without a balance"},{"lineNumber":113,"author":{"gitID":"Steven-Jia"},"content":"            this.balance \u003d \"0.00\";"},{"lineNumber":114,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"Steven-Jia"},"content":"        if (!Balance.isValidBalance(this.balance)) {"},{"lineNumber":116,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(Balance.MESSAGE_BALANCE_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"Steven-Jia"},"content":"        final Balance balance \u003d new Balance(this.balance);"},{"lineNumber":119,"author":{"gitID":"Steven-Jia"},"content":"        //@@author"},{"lineNumber":120,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":121,"author":{"gitID":"Steven-Jia"},"content":"        return new Person(name, phone, email, balance, tags);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":127,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedPerson)) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        return Objects.equals(name, otherPerson.name)"},{"lineNumber":136,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"},{"lineNumber":137,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(email, otherPerson.email)"},{"lineNumber":138,"author":{"gitID":"Steven-Jia"},"content":"                \u0026\u0026 Objects.equals(balance, otherPerson.balance)"},{"lineNumber":139,"author":{"gitID":"-"},"content":"                \u0026\u0026 tagged.equals(otherPerson.tagged);"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":19,"-":122}},{"path":"src/main/java/seedu/address/logic/commands/FindPersonCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_NO_PERSON;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * Keyword matching is case sensitive."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"Steven-Jia"},"content":"public class FindPersonCommand extends Command {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"findperson\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"    public FindPersonCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_NO_PERSON);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":36,"author":{"gitID":"Steven-Jia"},"content":"                || (other instanceof FindPersonCommand // instanceof handles nulls"},{"lineNumber":37,"author":{"gitID":"Steven-Jia"},"content":"                \u0026\u0026 this.predicate.equals(((FindPersonCommand) other).predicate)); // state check"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":4,"-":35}},{"path":"src/main/java/seedu/address/storage/XmlSerializableAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * An Immutable AddressBook that is serializable to XML format"},{"lineNumber":17,"author":{"gitID":"-"},"content":" */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"@XmlRootElement(name \u003d \"addressbook\")"},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class XmlSerializableAddressBook {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedPerson\u003e persons;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTransaction\u003e transactions;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Creates an empty XmlSerializableAddressBook."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        transactions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        transactions.addAll(src.getTransactionList().stream()"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                .map(XmlAdaptedTransaction::new).collect(Collectors.toList()));"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Converts this addressbook into the model\u0027s {@code AddressBook} object."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * {@code XmlAdaptedPerson} or {@code XmlAdaptedTag}."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            addressBook.addTag(t.toModelType());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        for (XmlAdaptedPerson p : persons) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            addressBook.addPerson(p.toModelType());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTransaction tr : transactions) {"},{"lineNumber":65,"author":{"gitID":"Steven-Jia"},"content":"            try {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"                addressBook.addTransaction(tr.toModelType());"},{"lineNumber":67,"author":{"gitID":"Steven-Jia"},"content":"            } catch (CommandException e) {"},{"lineNumber":68,"author":{"gitID":"Steven-Jia"},"content":"                e.printStackTrace();"},{"lineNumber":69,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlSerializableAddressBook)) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        XmlSerializableAddressBook otherAb \u003d (XmlSerializableAddressBook) other;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        return persons.equals(otherAb.persons) \u0026\u0026 tags.equals(otherAb.tags);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":4,"-":84}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAddressBookStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"Steven-Jia"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing SmartSplit ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"Steven-Jia"},"content":"        logger.info(\"Starting SmarSplit \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":210,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":2,"-":210}},{"path":"src/main/java/seedu/address/model/transaction/TransactionContainsPersonPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"//@@author phmignot"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":"package seedu.address.model.transaction;"},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":" * Tests that the {@code Person} involved in a transaction matches the {@code Person} given."},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":" */"},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"public class TransactionContainsPersonPredicate implements Predicate\u003cTransaction\u003e {"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":"    private final Person person;"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":"    public TransactionContainsPersonPredicate(Person person) {"},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"        this.person \u003d person;"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":"    public boolean test(Transaction transaction) {"},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"        return transaction.isImplied(person);"},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":25,"author":{"gitID":"phmignot"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":"                || (other instanceof TransactionContainsPersonPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitID":"phmignot"},"content":"                \u0026\u0026 this.person.equals(((TransactionContainsPersonPredicate) other).person)); // state check"},{"lineNumber":29,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":"}"}],"authorContributionMap":{"phmignot":31}},{"path":"src/main/java/seedu/address/model/transaction/exceptions/TransactionNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"//@@author phmignot"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":"package seedu.address.model.transaction.exceptions;"},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":" * Signals that the operation is unable to find the specified transaction."},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":" */"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"public class TransactionNotFoundException extends Exception {}"}],"authorContributionMap":{"phmignot":7}},{"path":"src/main/java/seedu/address/model/transaction/Amount.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.transaction;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":7,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"ongkc"},"content":" * Represents the amount that a Payer paid in a SmartSplit transaction."},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":"public class Amount {"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":"    public static final String MESSAGE_AMOUNT_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"            \"Amount can only take in a positive numerical number up to 2 decimal places, \""},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"                    + \"and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"    // The first character of the amount must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    // otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"    public static final String AMOUNT_VALIDATION_REGEX \u003d \"^\\\\d+(\\\\.\\\\d{1,2})?$\";"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"     * Constructs an {@code Amount}."},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"     * @param amount A valid amount."},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"    public Amount(String amount) {"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"        requireNonNull(amount);"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"        checkArgument(isValidAmount(amount), MESSAGE_AMOUNT_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"        this.value \u003d amount;"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"     * Returns true if a given string is a valid amount."},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"    public static boolean isValidAmount(String test) {"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"        return test.matches(AMOUNT_VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"    public double getDoubleValue() {"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"        return Double.valueOf(value);"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"        return value;"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"                || (other instanceof Amount // instanceof handles nulls"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 this.value.equals(((Amount) other).value)); // state check"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"    public int hashCode() {"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"        return value.hashCode();"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"}"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":""}],"authorContributionMap":{"-":5,"ongkc":56}},{"path":"src/main/java/seedu/address/model/transaction/Description.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.transaction;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":6,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ongkc"},"content":" * Represents a Transaction\u0027s description in the address book."},{"lineNumber":8,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"public class Description {"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":"    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":"            \"Transaction description can take any value and should not be blank\";"},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":"    /*"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"     * Description must not be only space or \"\" (a blank string)."},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":"    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"^(\\\\s|\\\\S)*(\\\\S)+(\\\\s|\\\\S)*$\";"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"     * Constructs an {@code Description}."},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"     * @param description A valid description."},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"    public Description(String description) {"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"        requireNonNull(description);"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"        checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"        this.value \u003d description;"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"     * Returns true if a given string is a valid person email."},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"    public static boolean isValidDescription(String test) {"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"        return test.matches(DESCRIPTION_VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"        return value;"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"        return value.hashCode();"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"}"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":""}],"authorContributionMap":{"-":4,"ongkc":43}},{"path":"src/main/java/seedu/address/model/transaction/SplitMethod.java","lines":[{"lineNumber":1,"author":{"gitID":"Steven-Jia"},"content":"package seedu.address.model.transaction;"},{"lineNumber":2,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":3,"author":{"gitID":"Steven-Jia"},"content":"//@@author steven-jia"},{"lineNumber":4,"author":{"gitID":"Steven-Jia"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":7,"author":{"gitID":"Steven-Jia"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"Steven-Jia"},"content":" * Represents a Transaction\u0027s split method in SmartSplit."},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":" */"},{"lineNumber":10,"author":{"gitID":"Steven-Jia"},"content":"public class SplitMethod {"},{"lineNumber":11,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":12,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":"     * Split methods that can be used"},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"    public enum Method {"},{"lineNumber":16,"author":{"gitID":"Steven-Jia"},"content":"        NOT_APPLICABLE,"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":"        EVENLY,"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"        UNITS,"},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"        PERCENTAGE"},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_SPLIT_METHOD_CONSTRAINTS \u003d"},{"lineNumber":23,"author":{"gitID":"Steven-Jia"},"content":"            \"Transaction split method can only be \\\"evenly\\\", \\\"units\\\", or \\\"percentage\\\"\";"},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":25,"author":{"gitID":"Steven-Jia"},"content":"    public static final String SPLIT_METHOD_NOT_APPLICABLE \u003d \"not_applicable\";"},{"lineNumber":26,"author":{"gitID":"Steven-Jia"},"content":"    public static final String SPLIT_METHOD_EVENLY \u003d \"evenly\";"},{"lineNumber":27,"author":{"gitID":"Steven-Jia"},"content":"    public static final String SPLIT_METHOD_UNITS \u003d \"units\";"},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":"    public static final String SPLIT_METHOD_PERCENTAGE \u003d \"percentage\";"},{"lineNumber":29,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":30,"author":{"gitID":"Steven-Jia"},"content":"    public final Method method;"},{"lineNumber":31,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":32,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"     * Constructs a {@code splitMethod}."},{"lineNumber":34,"author":{"gitID":"Steven-Jia"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"Steven-Jia"},"content":"     * @param splitMethod A valid split method."},{"lineNumber":36,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"Steven-Jia"},"content":"    public SplitMethod(String splitMethod) {"},{"lineNumber":38,"author":{"gitID":"Steven-Jia"},"content":"        requireNonNull(splitMethod);"},{"lineNumber":39,"author":{"gitID":"Steven-Jia"},"content":"        checkArgument(isValidSplitMethod(splitMethod), MESSAGE_SPLIT_METHOD_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":"        switch (splitMethod) {"},{"lineNumber":41,"author":{"gitID":"Steven-Jia"},"content":"        case SPLIT_METHOD_NOT_APPLICABLE:"},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":"            this.method \u003d Method.NOT_APPLICABLE;"},{"lineNumber":43,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":44,"author":{"gitID":"Steven-Jia"},"content":"        case SPLIT_METHOD_EVENLY:"},{"lineNumber":45,"author":{"gitID":"Steven-Jia"},"content":"            this.method \u003d Method.EVENLY;"},{"lineNumber":46,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":47,"author":{"gitID":"Steven-Jia"},"content":"        case SPLIT_METHOD_UNITS:"},{"lineNumber":48,"author":{"gitID":"Steven-Jia"},"content":"            this.method \u003d Method.UNITS;"},{"lineNumber":49,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":50,"author":{"gitID":"Steven-Jia"},"content":"        case SPLIT_METHOD_PERCENTAGE:"},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"            this.method \u003d Method.PERCENTAGE;"},{"lineNumber":52,"author":{"gitID":"Steven-Jia"},"content":"            break;"},{"lineNumber":53,"author":{"gitID":"Steven-Jia"},"content":"        default:"},{"lineNumber":54,"author":{"gitID":"Steven-Jia"},"content":"            this.method \u003d Method.EVENLY;"},{"lineNumber":55,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":58,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":59,"author":{"gitID":"Steven-Jia"},"content":"     * Returns true if a given string is a valid split method."},{"lineNumber":60,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Steven-Jia"},"content":"    public static boolean isValidSplitMethod(String test) {"},{"lineNumber":62,"author":{"gitID":"Steven-Jia"},"content":"        return test.toLowerCase().matches(SPLIT_METHOD_EVENLY)"},{"lineNumber":63,"author":{"gitID":"Steven-Jia"},"content":"            || test.toLowerCase().matches(SPLIT_METHOD_UNITS)"},{"lineNumber":64,"author":{"gitID":"Steven-Jia"},"content":"            || test.toLowerCase().matches(SPLIT_METHOD_PERCENTAGE)"},{"lineNumber":65,"author":{"gitID":"Steven-Jia"},"content":"            || test.toLowerCase().matches(SPLIT_METHOD_NOT_APPLICABLE);"},{"lineNumber":66,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":68,"author":{"gitID":"Steven-Jia"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"Steven-Jia"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitID":"Steven-Jia"},"content":"        return method.toString().toLowerCase();"},{"lineNumber":71,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":73,"author":{"gitID":"Steven-Jia"},"content":"    @Override"},{"lineNumber":74,"author":{"gitID":"Steven-Jia"},"content":"    public int hashCode() {"},{"lineNumber":75,"author":{"gitID":"Steven-Jia"},"content":"        return method.hashCode();"},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"}"}],"authorContributionMap":{"Steven-Jia":78}},{"path":"src/main/java/seedu/address/model/DebtsList.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.person.Balance;"},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":" * DebtsList of a Person, contains every person matched with the amount is owed or owes."},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":" */"},{"lineNumber":10,"author":{"gitID":"phmignot"},"content":"//@@author phmignot"},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"public class DebtsList extends HashMap\u003cPerson, Balance\u003e {"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":"    public DebtsList() {"},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":"        super();"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"     * Updates the debt of a person. If the person has no previous debt, then the person"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":"     * is added to the HashMap."},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"     * @param person that owes or is owed money."},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":"     * @param debtToAdd to add to the old debt."},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":"    public void updateDebt(Person person, Balance debtToAdd) {"},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"        if (!this.containsKey(person)) {"},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":"            this.put(person, new Balance(\"0.00\"));"},{"lineNumber":25,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"        Balance oldDebts \u003d this.get(person);"},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":"        this.replace(person, oldDebts.add(debtToAdd));"},{"lineNumber":28,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":30,"author":{"gitID":"phmignot"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":"        if (this.containsKey(target)) {"},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":"            Balance targetBalance \u003d this.remove(target);"},{"lineNumber":33,"author":{"gitID":"phmignot"},"content":"            this.put(editedPerson, targetBalance);"},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":"     * Displays the content of DebtsList in the terminal."},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"phmignot"},"content":"    public void display() {"},{"lineNumber":41,"author":{"gitID":"phmignot"},"content":"        System.out.print(\"dl \u003d \");"},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":"        this.forEach(((person, balance) -\u003e System.out.print(person.getName().fullName"},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"            + \": \" + balance.toString() + \" \")));"},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"phmignot"},"content":"}"}],"authorContributionMap":{"phmignot":45}},{"path":"src/main/java/seedu/address/model/transaction/Transaction.java","lines":[{"lineNumber":1,"author":{"gitID":"Steven-Jia"},"content":"//@@author steven-jia"},{"lineNumber":2,"author":{"gitID":"Steven-Jia"},"content":"package seedu.address.model.transaction;"},{"lineNumber":3,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":4,"author":{"gitID":"Steven-Jia"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"Steven-Jia"},"content":"import java.util.Date;"},{"lineNumber":6,"author":{"gitID":"Steven-Jia"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"Steven-Jia"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":11,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":12,"author":{"gitID":"Steven-Jia"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":" * Represents a Transaction in SmartSplit."},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":" */"},{"lineNumber":16,"author":{"gitID":"Steven-Jia"},"content":"public class Transaction {"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":"    private static Integer lastTransactionId \u003d 0;"},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"    private Integer id;"},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"    private Date dateTime;"},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"    private Person payer;"},{"lineNumber":21,"author":{"gitID":"Steven-Jia"},"content":"    private final Amount amount;"},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"    private final Description description;"},{"lineNumber":23,"author":{"gitID":"Steven-Jia"},"content":"    private UniquePersonList payees;"},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":"    private TransactionType transactionType;"},{"lineNumber":25,"author":{"gitID":"Steven-Jia"},"content":"    private final SplitMethod splitMethod;"},{"lineNumber":26,"author":{"gitID":"Steven-Jia"},"content":"    private ArrayList\u003cInteger\u003e units;"},{"lineNumber":27,"author":{"gitID":"Steven-Jia"},"content":"    private ArrayList\u003cInteger\u003e percentages;"},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":29,"author":{"gitID":"Steven-Jia"},"content":"    public Transaction(TransactionType transactionType, Person payer, Amount amount, Description description,"},{"lineNumber":30,"author":{"gitID":"Steven-Jia"},"content":"                       Date dateTime, UniquePersonList payees, SplitMethod splitMethod, List\u003cInteger\u003e units,"},{"lineNumber":31,"author":{"gitID":"Steven-Jia"},"content":"                       List\u003cInteger\u003e percentages) {"},{"lineNumber":32,"author":{"gitID":"Steven-Jia"},"content":"        this.transactionType \u003d transactionType;"},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":34,"author":{"gitID":"Steven-Jia"},"content":"        this.id \u003d lastTransactionId++;"},{"lineNumber":35,"author":{"gitID":"Steven-Jia"},"content":"        this.payer \u003d payer;"},{"lineNumber":36,"author":{"gitID":"Steven-Jia"},"content":"        this.amount \u003d amount;"},{"lineNumber":37,"author":{"gitID":"Steven-Jia"},"content":"        this.description \u003d description;"},{"lineNumber":38,"author":{"gitID":"Steven-Jia"},"content":"        this.payees \u003d payees;"},{"lineNumber":39,"author":{"gitID":"Steven-Jia"},"content":"        this.splitMethod \u003d splitMethod;"},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":"        initializeSplitMethodListValues(units, percentages);"},{"lineNumber":41,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":43,"author":{"gitID":"Steven-Jia"},"content":"    public Transaction(Transaction transaction) {"},{"lineNumber":44,"author":{"gitID":"Steven-Jia"},"content":"        this.transactionType \u003d transaction.getTransactionType();"},{"lineNumber":45,"author":{"gitID":"Steven-Jia"},"content":"        this.dateTime \u003d transaction.getDateTime();"},{"lineNumber":46,"author":{"gitID":"Steven-Jia"},"content":"        this.id \u003d transaction.getId();"},{"lineNumber":47,"author":{"gitID":"Steven-Jia"},"content":"        this.payer \u003d transaction.getPayer();"},{"lineNumber":48,"author":{"gitID":"Steven-Jia"},"content":"        this.amount \u003d transaction.getAmount();"},{"lineNumber":49,"author":{"gitID":"Steven-Jia"},"content":"        this.description \u003d transaction.getDescription();"},{"lineNumber":50,"author":{"gitID":"Steven-Jia"},"content":"        this.payees \u003d transaction.getPayees();"},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"        this.splitMethod \u003d transaction.getSplitMethod();"},{"lineNumber":52,"author":{"gitID":"Steven-Jia"},"content":"        this.units \u003d transaction.getUnits();"},{"lineNumber":53,"author":{"gitID":"Steven-Jia"},"content":"        this.percentages \u003d transaction.getPercentages();"},{"lineNumber":54,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"Steven-Jia"},"content":"     * @param units"},{"lineNumber":57,"author":{"gitID":"Steven-Jia"},"content":"     * @param percentages"},{"lineNumber":58,"author":{"gitID":"Steven-Jia"},"content":"     * Initializes the split method units list if the split method is by units"},{"lineNumber":59,"author":{"gitID":"Steven-Jia"},"content":"     * or initializes the split method percentages list if the split method is by percentage."},{"lineNumber":60,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Steven-Jia"},"content":"    private void initializeSplitMethodListValues(List\u003cInteger\u003e units, List\u003cInteger\u003e percentages) {"},{"lineNumber":62,"author":{"gitID":"Steven-Jia"},"content":"        if (this.splitMethod.toString().equals(SplitMethod.SPLIT_METHOD_UNITS)) {"},{"lineNumber":63,"author":{"gitID":"Steven-Jia"},"content":"            this.units \u003d new ArrayList\u003c\u003e(units);"},{"lineNumber":64,"author":{"gitID":"Steven-Jia"},"content":"            this.percentages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":65,"author":{"gitID":"Steven-Jia"},"content":"        } else if (this.splitMethod.toString().equals(SplitMethod.SPLIT_METHOD_PERCENTAGE)) {"},{"lineNumber":66,"author":{"gitID":"Steven-Jia"},"content":"            this.units \u003d new ArrayList\u003c\u003e();"},{"lineNumber":67,"author":{"gitID":"Steven-Jia"},"content":"            this.percentages \u003d new ArrayList\u003c\u003e(percentages);"},{"lineNumber":68,"author":{"gitID":"Steven-Jia"},"content":"        } else {"},{"lineNumber":69,"author":{"gitID":"Steven-Jia"},"content":"            this.units \u003d new ArrayList\u003c\u003e();"},{"lineNumber":70,"author":{"gitID":"Steven-Jia"},"content":"            this.percentages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":71,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"Steven-Jia"},"content":"    public void setTransactionType(String transactionType) {"},{"lineNumber":74,"author":{"gitID":"Steven-Jia"},"content":"        this.transactionType \u003d new TransactionType(transactionType);"},{"lineNumber":75,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":"    public Integer getId() {"},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":"        return id;"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":80,"author":{"gitID":"Steven-Jia"},"content":"    public Date getDateTime() {"},{"lineNumber":81,"author":{"gitID":"Steven-Jia"},"content":"        return dateTime;"},{"lineNumber":82,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":84,"author":{"gitID":"Steven-Jia"},"content":"    public Person getPayer() {"},{"lineNumber":85,"author":{"gitID":"Steven-Jia"},"content":"        return payer;"},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":88,"author":{"gitID":"Steven-Jia"},"content":"    public void setPayer(Person payer) {"},{"lineNumber":89,"author":{"gitID":"Steven-Jia"},"content":"        this.payer \u003d payer;"},{"lineNumber":90,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":92,"author":{"gitID":"Steven-Jia"},"content":"    public Amount getAmount() {"},{"lineNumber":93,"author":{"gitID":"Steven-Jia"},"content":"        return amount;"},{"lineNumber":94,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":96,"author":{"gitID":"Steven-Jia"},"content":"    public Description getDescription() {"},{"lineNumber":97,"author":{"gitID":"Steven-Jia"},"content":"        return description;"},{"lineNumber":98,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":100,"author":{"gitID":"Steven-Jia"},"content":"    public UniquePersonList getPayees() {"},{"lineNumber":101,"author":{"gitID":"Steven-Jia"},"content":"        return payees;"},{"lineNumber":102,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":104,"author":{"gitID":"Steven-Jia"},"content":"    public void setPayees(UniquePersonList payees) {"},{"lineNumber":105,"author":{"gitID":"Steven-Jia"},"content":"        this.payees \u003d payees;"},{"lineNumber":106,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":108,"author":{"gitID":"Steven-Jia"},"content":"    public TransactionType getTransactionType() {"},{"lineNumber":109,"author":{"gitID":"Steven-Jia"},"content":"        return transactionType;"},{"lineNumber":110,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":112,"author":{"gitID":"Steven-Jia"},"content":"    public SplitMethod getSplitMethod() {"},{"lineNumber":113,"author":{"gitID":"Steven-Jia"},"content":"        return splitMethod;"},{"lineNumber":114,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":116,"author":{"gitID":"Steven-Jia"},"content":"    public ArrayList\u003cInteger\u003e getUnits() {"},{"lineNumber":117,"author":{"gitID":"Steven-Jia"},"content":"        return units;"},{"lineNumber":118,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":120,"author":{"gitID":"Steven-Jia"},"content":"    public ArrayList\u003cInteger\u003e getPercentages() {"},{"lineNumber":121,"author":{"gitID":"Steven-Jia"},"content":"        return percentages;"},{"lineNumber":122,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":124,"author":{"gitID":"Steven-Jia"},"content":"    @Override"},{"lineNumber":125,"author":{"gitID":"Steven-Jia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":126,"author":{"gitID":"Steven-Jia"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":127,"author":{"gitID":"Steven-Jia"},"content":"            return true;"},{"lineNumber":128,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":130,"author":{"gitID":"Steven-Jia"},"content":"        if (!(other instanceof Transaction)) {"},{"lineNumber":131,"author":{"gitID":"Steven-Jia"},"content":"            return false;"},{"lineNumber":132,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":134,"author":{"gitID":"Steven-Jia"},"content":"        Transaction otherTransaction \u003d (Transaction) other;"},{"lineNumber":135,"author":{"gitID":"Steven-Jia"},"content":"        return otherTransaction.getId().equals(this.getId());"},{"lineNumber":136,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":138,"author":{"gitID":"Steven-Jia"},"content":"    @Override"},{"lineNumber":139,"author":{"gitID":"Steven-Jia"},"content":"    public int hashCode() {"},{"lineNumber":140,"author":{"gitID":"Steven-Jia"},"content":"        return Objects.hash(id, transactionType, dateTime, payer, amount,"},{"lineNumber":141,"author":{"gitID":"Steven-Jia"},"content":"                description, payees, splitMethod, units, percentages);"},{"lineNumber":142,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":143,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":144,"author":{"gitID":"Steven-Jia"},"content":"    @Override"},{"lineNumber":145,"author":{"gitID":"Steven-Jia"},"content":"    public String toString() {"},{"lineNumber":146,"author":{"gitID":"Steven-Jia"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":147,"author":{"gitID":"Steven-Jia"},"content":"        builder.append(\" Transaction id: \")"},{"lineNumber":148,"author":{"gitID":"Steven-Jia"},"content":"                .append(getId())"},{"lineNumber":149,"author":{"gitID":"Steven-Jia"},"content":"                .append(\"\\n Transaction Type: \")"},{"lineNumber":150,"author":{"gitID":"Steven-Jia"},"content":"                .append(getTransactionType())"},{"lineNumber":151,"author":{"gitID":"Steven-Jia"},"content":"                .append(\"\\n Created on: \")"},{"lineNumber":152,"author":{"gitID":"Steven-Jia"},"content":"                .append(getDateTime())"},{"lineNumber":153,"author":{"gitID":"Steven-Jia"},"content":"                .append(\"\\n Transaction paid by: \")"},{"lineNumber":154,"author":{"gitID":"Steven-Jia"},"content":"                .append(getPayer().getName())"},{"lineNumber":155,"author":{"gitID":"Steven-Jia"},"content":"                .append(\"\\n Amount: \")"},{"lineNumber":156,"author":{"gitID":"Steven-Jia"},"content":"                .append(getAmount().toString())"},{"lineNumber":157,"author":{"gitID":"Steven-Jia"},"content":"                .append(\"\\n Description: \")"},{"lineNumber":158,"author":{"gitID":"Steven-Jia"},"content":"                .append(getDescription().toString())"},{"lineNumber":159,"author":{"gitID":"Steven-Jia"},"content":"                .append(\"\\n Payees: \")"},{"lineNumber":160,"author":{"gitID":"Steven-Jia"},"content":"                .append(getPayees().asObservableList().toString())"},{"lineNumber":161,"author":{"gitID":"Steven-Jia"},"content":"                .append(\"\\n Split method: \")"},{"lineNumber":162,"author":{"gitID":"Steven-Jia"},"content":"                .append(getSplitMethod().toString())"},{"lineNumber":163,"author":{"gitID":"Steven-Jia"},"content":"                .append(\"\\n Units list: \")"},{"lineNumber":164,"author":{"gitID":"Steven-Jia"},"content":"                .append(getUnits().toString())"},{"lineNumber":165,"author":{"gitID":"Steven-Jia"},"content":"                .append(\"\\n Percentages list: \")"},{"lineNumber":166,"author":{"gitID":"Steven-Jia"},"content":"                .append(getPercentages().toString());"},{"lineNumber":167,"author":{"gitID":"Steven-Jia"},"content":"        return builder.toString();"},{"lineNumber":168,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":170,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"Steven-Jia"},"content":"     * Tests if a person is implied in this transaction."},{"lineNumber":172,"author":{"gitID":"Steven-Jia"},"content":"     * @param person to check his implication."},{"lineNumber":173,"author":{"gitID":"Steven-Jia"},"content":"     * @return true if the person is the payer or one of the payee;"},{"lineNumber":174,"author":{"gitID":"Steven-Jia"},"content":"     * false otherwise."},{"lineNumber":175,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":176,"author":{"gitID":"Steven-Jia"},"content":"    public boolean isImplied(Person person) {"},{"lineNumber":177,"author":{"gitID":"Steven-Jia"},"content":"        return (payer.equals(person) || payees.contains(person));"},{"lineNumber":178,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":180,"author":{"gitID":"Steven-Jia"},"content":"}"}],"authorContributionMap":{"Steven-Jia":180}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":8,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Balance;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return new Person[] {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Alice Pauline\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":"                    new Balance(\"0.00\"), getTagSet(\"friends\")),"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Benson Meier\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":26,"author":{"gitID":"Steven-Jia"},"content":"                    new Balance(\"0.00\"), getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Carl Kurz\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":"                    new Balance(\"0.00\"), getTagSet(\"neighbours\")),"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Daniel Meier\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":30,"author":{"gitID":"Steven-Jia"},"content":"                    new Balance(\"0.00\"), getTagSet(\"family\")),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Elle Meyer\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":32,"author":{"gitID":"Steven-Jia"},"content":"                    new Balance(\"0.00\"), getTagSet(\"classmates\")),"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            new Person(new Name(\"Jack Kunz\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":34,"author":{"gitID":"Steven-Jia"},"content":"                    new Balance(\"0.00\"), getTagSet(\"colleagues\"))"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                sampleAb.addPerson(samplePerson);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public static UniquePersonList getPayeesSet(String... strings) throws DuplicatePersonException {"},{"lineNumber":66,"author":{"gitID":"Steven-Jia"},"content":"        UniquePersonList payees \u003d new UniquePersonList();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            for (Person person: getSamplePersons()) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                if (person.getName().fullName \u003d\u003d s) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                    payees.add(person);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return payees;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":8,"-":70}},{"path":"src/main/java/seedu/address/model/transaction/TransactionList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.transaction;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":15,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":" * Record all transactions to the list."},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":" *"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"public class TransactionList implements Iterable\u003cTransaction\u003e {"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    private final ObservableList\u003cTransaction\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"     * Adds a transaction to the list."},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"    public void add(Transaction toAdd) {"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"        requireNonNull(toAdd);"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"        internalList.add(toAdd);"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"    public ObservableList\u003cTransaction\u003e asObservableList() {"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    public Iterator\u003cTransaction\u003e iterator() {"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"        return internalList.iterator();"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 this.internalList.equals(((TransactionList) other).internalList));"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"        return internalList.hashCode();"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":59,"author":{"gitID":"phmignot"},"content":"    //@@author phmignot"},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":"     * Removes the equivalent transaction from the list of transactions."},{"lineNumber":62,"author":{"gitID":"phmignot"},"content":"     *"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":"     * @throws TransactionNotFoundException if no such transaction could be found in the list."},{"lineNumber":64,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"    public void remove(Transaction toRemove) throws TransactionNotFoundException {"},{"lineNumber":66,"author":{"gitID":"phmignot"},"content":"        requireNonNull(toRemove);"},{"lineNumber":67,"author":{"gitID":"phmignot"},"content":"        final boolean transactionFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":68,"author":{"gitID":"phmignot"},"content":"        if (!transactionFoundAndDeleted) {"},{"lineNumber":69,"author":{"gitID":"phmignot"},"content":"            throw new TransactionNotFoundException();"},{"lineNumber":70,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"phmignot"},"content":"     * Replaces the list of transactions by a input list of transaction."},{"lineNumber":74,"author":{"gitID":"phmignot"},"content":"     * @param transactions that will be the new transactions\u0027 list."},{"lineNumber":75,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"phmignot"},"content":"    public void setTransactions(List\u003cTransaction\u003e transactions) {"},{"lineNumber":77,"author":{"gitID":"phmignot"},"content":"        requireAllNonNull(transactions);"},{"lineNumber":78,"author":{"gitID":"phmignot"},"content":"        internalList.setAll(transactions);"},{"lineNumber":79,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":81,"author":{"gitID":"phmignot"},"content":"    public void setPerson(Person target, Person editedPerson) throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":82,"author":{"gitID":"phmignot"},"content":"        for (Transaction transaction : this.asObservableList()) {"},{"lineNumber":83,"author":{"gitID":"phmignot"},"content":"            Person payer \u003d transaction.getPayer();"},{"lineNumber":84,"author":{"gitID":"phmignot"},"content":"            UniquePersonList payees \u003d transaction.getPayees();"},{"lineNumber":85,"author":{"gitID":"phmignot"},"content":"            Transaction editedTransaction \u003d new Transaction(transaction);"},{"lineNumber":86,"author":{"gitID":"phmignot"},"content":"            UniquePersonList editedpayees \u003d new UniquePersonList();"},{"lineNumber":87,"author":{"gitID":"phmignot"},"content":"            editedpayees.setPersons(payees);"},{"lineNumber":88,"author":{"gitID":"phmignot"},"content":"            if (!target.equals(editedPerson) \u0026\u0026 (payees.contains(editedPerson) || payer.equals(editedPerson))) {"},{"lineNumber":89,"author":{"gitID":"phmignot"},"content":"                throw new DuplicatePersonException();"},{"lineNumber":90,"author":{"gitID":"phmignot"},"content":"            }"},{"lineNumber":91,"author":{"gitID":"phmignot"},"content":"            if (payees.contains(target) \u0026\u0026 payer.equals(target)) {"},{"lineNumber":92,"author":{"gitID":"phmignot"},"content":"                throw new DuplicatePersonException();"},{"lineNumber":93,"author":{"gitID":"phmignot"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"phmignot"},"content":"            if (payer.equals(target)) {"},{"lineNumber":95,"author":{"gitID":"phmignot"},"content":"                editedTransaction.setPayer(editedPerson);"},{"lineNumber":96,"author":{"gitID":"phmignot"},"content":"            }"},{"lineNumber":97,"author":{"gitID":"phmignot"},"content":"            if (payees.contains(target)) {"},{"lineNumber":98,"author":{"gitID":"phmignot"},"content":"                editedpayees.setPerson(target, editedPerson);"},{"lineNumber":99,"author":{"gitID":"phmignot"},"content":"                editedTransaction.setPayees(editedpayees);"},{"lineNumber":100,"author":{"gitID":"phmignot"},"content":"            }"},{"lineNumber":101,"author":{"gitID":"phmignot"},"content":"            internalList.set(internalList.indexOf(transaction), editedTransaction);"},{"lineNumber":102,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"phmignot"},"content":"}"}],"authorContributionMap":{"phmignot":48,"-":13,"ongkc":43}},{"path":"src/main/java/seedu/address/model/person/Phone.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Steven-Jia"},"content":" * Represents a Person\u0027s phone number in SmartSplit."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"-"},"content":"            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.value \u003d phone;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person phone number."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return test.matches(PHONE_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":52}},{"path":"src/main/java/seedu/address/model/person/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"Steven-Jia"},"content":" * Represents a Person\u0027s email in SmartSplit."},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Person emails should be of the format local-part@domain \""},{"lineNumber":13,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":14,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":27,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @param email A valid email address."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.value \u003d email;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Returns if a given string is a valid person email."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":65}},{"path":"src/main/java/seedu/address/model/transaction/TransactionType.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.transaction;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":6,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"ongkc"},"content":" * Types of transaction"},{"lineNumber":8,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"public class TransactionType {"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":"    public static final String MESSAGE_TRANSACTION_TYPE_CONSTRAINTS \u003d"},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":"            \"Transaction type can only be \\\"paydebt\\\" or \\\"payment\\\" \""},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"                    + \"and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"    /*"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"    public static final String TRANSACTION_TYPE_PAYMENT \u003d \"payment\";"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"    public static final String TRANSACTION_TYPE_PAYDEBT \u003d \"paydebt\";"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"     * Constructs an {@code TransactionType}."},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"     * @param type a valid transaction type."},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"    public TransactionType(String type) {"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"        requireNonNull(type);"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"        checkArgument(isValidTransactionType(type), MESSAGE_TRANSACTION_TYPE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"        this.value \u003d type;"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"     * Returns true if a given string is a valid transaction type."},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"    public static boolean isValidTransactionType(String test) {"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"        if (test.toLowerCase().equals(TRANSACTION_TYPE_PAYMENT) || test.toLowerCase().equals("},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"                TRANSACTION_TYPE_PAYDEBT)) {"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"            return true;"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"        return false;"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"        return value;"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"                || (other instanceof TransactionType // instanceof handles nulls"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 this.value.equals(((TransactionType) other).value)); // state check"},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"    public int hashCode() {"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"        return value.hashCode();"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"-":4,"ongkc":57}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"-"},"content":" * @see Person#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public boolean contains(Person toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"Steven-Jia"},"content":"        return internalList.stream().anyMatch("},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"            person -\u003e person.getName().fullName.toLowerCase().equals(toCheck.getName().fullName.toLowerCase())"},{"lineNumber":34,"author":{"gitID":"Steven-Jia"},"content":"        );"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Adds a person to the list."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void add(Person toAdd) throws DuplicatePersonException {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if the replacement is equivalent to another existing person in the list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void setPerson(Person target, Person editedPerson)"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 internalList.contains(editedPerson)) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        internalList.set(index, editedPerson);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if no such person could be found in the list."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean remove(Person toRemove) throws PersonNotFoundException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        requireNonNull(toRemove);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        final boolean personFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!personFoundAndDeleted) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return personFoundAndDeleted;"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void setPersons(UniquePersonList replacement) {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        requireAllNonNull(persons);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        final UniquePersonList replacement \u003d new UniquePersonList();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        for (final Person person : persons) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            replacement.add(person);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        setPersons(replacement);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public ObservableList\u003cPerson\u003e asObservableList() {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls"},{"lineNumber":115,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniquePersonList) other).internalList));"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":3,"-":121}},{"path":"src/main/java/seedu/address/model/person/Debtor.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":3,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"ongkc"},"content":" * Represents a Debtor in SmartSplit."},{"lineNumber":5,"author":{"gitID":"ongkc"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":6,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":7,"author":{"gitID":"ongkc"},"content":"public class Debtor {"},{"lineNumber":8,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"    private final Person debtor;"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":"    private Balance debt \u003d new Balance(\"0.00\");"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":"    public Debtor(Person debtor, Balance debt) {"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"        this.debtor \u003d debtor;"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"        this.debt \u003d debt;"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"    public Person getDebtor() {"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"        return debtor;"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    public Balance getDebt() {"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"        return debt; }"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"}"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":""}],"authorContributionMap":{"-":1,"ongkc":26}},{"path":"src/main/java/seedu/address/model/person/Person.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":" * Represents a Person in SmartSplit."},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private final Phone phone;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":21,"author":{"gitID":"Steven-Jia"},"content":"    private Balance balance;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":"    public Person(Name name, Phone phone, Email email, Balance balance, Set\u003cTag\u003e tags) {"},{"lineNumber":29,"author":{"gitID":"Steven-Jia"},"content":"        requireAllNonNull(name, phone, email, tags);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"        this.balance \u003d balance;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return phone;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"Steven-Jia"},"content":"    public Balance getBalance() {"},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"        return balance;"},{"lineNumber":52,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * if modification is attempted."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        return otherPerson.getName().equals(this.getName());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":"    public void setBalance(Balance newBalance) {"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"        this.balance \u003d newBalance;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":81,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":82,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"Steven-Jia"},"content":"     * Update the balance of the person"},{"lineNumber":84,"author":{"gitID":"Steven-Jia"},"content":"     * @param balanceToAdd"},{"lineNumber":85,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"    public void addToBalance(Balance balanceToAdd) {"},{"lineNumber":87,"author":{"gitID":"Steven-Jia"},"content":"        Balance newBalance \u003d this.balance.add(balanceToAdd);"},{"lineNumber":88,"author":{"gitID":"Steven-Jia"},"content":"        if (newBalance.getDoubleValue() \u003d\u003d 0) {"},{"lineNumber":89,"author":{"gitID":"Steven-Jia"},"content":"            setBalance(new Balance(\"0.00\"));"},{"lineNumber":90,"author":{"gitID":"Steven-Jia"},"content":"        } else {"},{"lineNumber":91,"author":{"gitID":"Steven-Jia"},"content":"            setBalance(newBalance);"},{"lineNumber":92,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"Steven-Jia"},"content":"    //@@author"},{"lineNumber":95,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":99,"author":{"gitID":"phmignot"},"content":"        return Objects.hash(name, phone, email, tags);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        builder.append(getName())"},{"lineNumber":106,"author":{"gitID":"-"},"content":"                .append(\" Phone: \")"},{"lineNumber":107,"author":{"gitID":"-"},"content":"                .append(getPhone())"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                .append(\" Email: \")"},{"lineNumber":109,"author":{"gitID":"-"},"content":"                .append(getEmail())"},{"lineNumber":110,"author":{"gitID":"Steven-Jia"},"content":"                .append(\" Balance: \")"},{"lineNumber":111,"author":{"gitID":"Steven-Jia"},"content":"                .append(getBalance())"},{"lineNumber":112,"author":{"gitID":"-"},"content":"                .append(\" Tags: \");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return builder.toString();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":28,"phmignot":2,"-":87}},{"path":"src/main/java/seedu/address/model/person/Creditor.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":3,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"ongkc"},"content":" * Represents a Creditor in SmartSplit."},{"lineNumber":5,"author":{"gitID":"ongkc"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":6,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":7,"author":{"gitID":"ongkc"},"content":"public class Creditor {"},{"lineNumber":8,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"    private final Person creditor;"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":"    private Balance debt \u003d new Balance(\"0.00\");"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":"    public Creditor(Person creditor, Balance debt) {"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":"        this.creditor \u003d creditor;"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"        this.debt \u003d debt;"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"    public Person getCreditor() {"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"        return creditor;"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    public Balance getDebt() {"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"        return debt; }"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"-":1,"ongkc":23}},{"path":"src/main/java/seedu/address/model/person/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Steven-Jia"},"content":" * Represents a Person\u0027s name in SmartSplit."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"-"},"content":"            \"Person names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid person name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"                \u0026\u0026 this.fullName.toLowerCase().equals(((Name) other).fullName.toLowerCase())); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":2,"-":57}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"     * Returns an unmodifiable view of the transaction list."},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":"    ObservableList\u003cTransaction\u003e getTransactionList();"},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    DebtsTable getDebtsTable();"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    ObservableList\u003cDebtor\u003e getDebtorsList();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    void setDebtors(DebtsList debtsList);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    void setCreditors(DebtsList debtsList);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"phmignot":6,"-":32}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":"    private String addressBookFilePath \u003d \"data/smartsplit.xml\";"},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":"    private String addressBookName \u003d \"SmartSplit\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this.setGuiSettings(1500, 780, 0, 0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public String getAddressBookFilePath() {"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setAddressBookFilePath(String addressBookFilePath) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public String getAddressBookName() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return addressBookName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void setAddressBookName(String addressBookName) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.addressBookName \u003d addressBookName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        sb.append(\"\\nAddressBook name : \" + addressBookName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"phmignot":2,"-":76}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTransaction.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"Steven-Jia"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"Steven-Jia"},"content":"import java.time.Instant;"},{"lineNumber":5,"author":{"gitID":"Steven-Jia"},"content":"import java.time.ZoneId;"},{"lineNumber":6,"author":{"gitID":"Steven-Jia"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitID":"Steven-Jia"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Amount;"},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Description;"},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.transaction.SplitMethod;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.TransactionType;"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":" * JAXB-friendly adapted version of the Transaction."},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"public class XmlAdaptedTransaction {"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Transaction\u0027s %s field is missing!\";"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT_DATE \u003d"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"            \"Transaction\u0027s %s field is missing, or is in wrong format \""},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"                    + \"(date format example: 2018-04-14T17:22:56.218+08:00)\";"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"    private String transactionType;"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":"    private XmlAdaptedPerson payer;"},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"    private String amount;"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"    private String description;"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"    private Date dateTime;"},{"lineNumber":46,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":47,"author":{"gitID":"Steven-Jia"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":48,"author":{"gitID":"Steven-Jia"},"content":"    private List\u003cXmlAdaptedPerson\u003e payees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitID":"Steven-Jia"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":50,"author":{"gitID":"Steven-Jia"},"content":"    private String splitMethod;"},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"    @XmlElement"},{"lineNumber":52,"author":{"gitID":"Steven-Jia"},"content":"    private String unitsList;"},{"lineNumber":53,"author":{"gitID":"Steven-Jia"},"content":"    @XmlElement"},{"lineNumber":54,"author":{"gitID":"Steven-Jia"},"content":"    private String percentagesList;"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"     * Constructs an XmlAdaptedTransaction."},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"    public XmlAdaptedTransaction() {}"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":"     * Constructs an {@code XmlAdaptedTransaction} with the given transactions details."},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"    public XmlAdaptedTransaction(String transactionType, Person payer, String amount, String description,"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":"                                 UniquePersonList payees, String splitMethod, List\u003cInteger\u003e unitsList,"},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"                                 List\u003cInteger\u003e percentagesList) {"},{"lineNumber":69,"author":{"gitID":"ongkc"},"content":"        this.payer \u003d new XmlAdaptedPerson(payer);"},{"lineNumber":70,"author":{"gitID":"ongkc"},"content":"        this.transactionType \u003d transactionType;"},{"lineNumber":71,"author":{"gitID":"ongkc"},"content":"        this.amount \u003d amount;"},{"lineNumber":72,"author":{"gitID":"ongkc"},"content":"        this.description \u003d description;"},{"lineNumber":73,"author":{"gitID":"ongkc"},"content":"        this.dateTime \u003d Date.from(Instant.now(Clock.system(ZoneId.of(\"Asia/Singapore\"))));"},{"lineNumber":74,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":75,"author":{"gitID":"Steven-Jia"},"content":"        //@@author steven-jia"},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":"        List\u003cXmlAdaptedPerson\u003e payeesToStore \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":"        payees.asObservableList().forEach(payee -\u003e payeesToStore.add(new XmlAdaptedPerson(payee)));"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"        this.payees \u003d payeesToStore;"},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":"        this.splitMethod \u003d splitMethod;"},{"lineNumber":80,"author":{"gitID":"Steven-Jia"},"content":"        if (!unitsList.isEmpty()) {"},{"lineNumber":81,"author":{"gitID":"Steven-Jia"},"content":"            this.unitsList \u003d buildIntegerListString(unitsList);"},{"lineNumber":82,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"Steven-Jia"},"content":"        if (!percentagesList.isEmpty()) {"},{"lineNumber":84,"author":{"gitID":"Steven-Jia"},"content":"            this.percentagesList \u003d buildIntegerListString(percentagesList);"},{"lineNumber":85,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":88,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"ongkc"},"content":"     * Constructs an {@code XmlAdaptedTransaction} with the given transaction details."},{"lineNumber":90,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"ongkc"},"content":"    public XmlAdaptedTransaction(String transactionType, Person payer, String amount, String description,"},{"lineNumber":92,"author":{"gitID":"ongkc"},"content":"                                 UniquePersonList payees, Date dateTime, String splitMethod, List\u003cInteger\u003e unitsList,"},{"lineNumber":93,"author":{"gitID":"ongkc"},"content":"                                 List\u003cInteger\u003e percentagesList) {"},{"lineNumber":94,"author":{"gitID":"ongkc"},"content":"        this.payer \u003d new XmlAdaptedPerson(payer);"},{"lineNumber":95,"author":{"gitID":"ongkc"},"content":"        this.transactionType \u003d transactionType;"},{"lineNumber":96,"author":{"gitID":"ongkc"},"content":"        this.amount \u003d amount;"},{"lineNumber":97,"author":{"gitID":"ongkc"},"content":"        this.description \u003d description;"},{"lineNumber":98,"author":{"gitID":"ongkc"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":99,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":100,"author":{"gitID":"Steven-Jia"},"content":"        //@@author steven-jia"},{"lineNumber":101,"author":{"gitID":"Steven-Jia"},"content":"        List\u003cXmlAdaptedPerson\u003e payeesToStore \u003d new ArrayList\u003c\u003e();"},{"lineNumber":102,"author":{"gitID":"Steven-Jia"},"content":"        payees.asObservableList().forEach(payee -\u003e payeesToStore.add(new XmlAdaptedPerson(payee)));"},{"lineNumber":103,"author":{"gitID":"Steven-Jia"},"content":"        this.payees \u003d payeesToStore;"},{"lineNumber":104,"author":{"gitID":"Steven-Jia"},"content":"        this.splitMethod \u003d splitMethod;"},{"lineNumber":105,"author":{"gitID":"Steven-Jia"},"content":"        if (!unitsList.isEmpty()) {"},{"lineNumber":106,"author":{"gitID":"Steven-Jia"},"content":"            this.unitsList \u003d buildIntegerListString(unitsList);"},{"lineNumber":107,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":108,"author":{"gitID":"Steven-Jia"},"content":"        if (!percentagesList.isEmpty()) {"},{"lineNumber":109,"author":{"gitID":"Steven-Jia"},"content":"            this.percentagesList \u003d buildIntegerListString(percentagesList);"},{"lineNumber":110,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":113,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":114,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"ongkc"},"content":"     * Converts a given Transaction into this class for JAXB use."},{"lineNumber":116,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":117,"author":{"gitID":"ongkc"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedTransaction"},{"lineNumber":118,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"ongkc"},"content":"    public XmlAdaptedTransaction(Transaction source) {"},{"lineNumber":120,"author":{"gitID":"ongkc"},"content":"        transactionType \u003d source.getTransactionType().value;"},{"lineNumber":121,"author":{"gitID":"ongkc"},"content":"        payer \u003d new XmlAdaptedPerson(source.getPayer());"},{"lineNumber":122,"author":{"gitID":"ongkc"},"content":"        amount \u003d source.getAmount().toString();"},{"lineNumber":123,"author":{"gitID":"ongkc"},"content":"        description \u003d source.getDescription().value;"},{"lineNumber":124,"author":{"gitID":"ongkc"},"content":"        dateTime \u003d source.getDateTime();"},{"lineNumber":125,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":126,"author":{"gitID":"Steven-Jia"},"content":"        //@@author steven-jia"},{"lineNumber":127,"author":{"gitID":"Steven-Jia"},"content":"        List\u003cXmlAdaptedPerson\u003e payeesToStore \u003d new ArrayList\u003c\u003e();"},{"lineNumber":128,"author":{"gitID":"Steven-Jia"},"content":"        source.getPayees().asObservableList().forEach(payee -\u003e payeesToStore.add(new XmlAdaptedPerson(payee)));"},{"lineNumber":129,"author":{"gitID":"Steven-Jia"},"content":"        payees \u003d payeesToStore;"},{"lineNumber":130,"author":{"gitID":"Steven-Jia"},"content":"        splitMethod \u003d source.getSplitMethod().toString();"},{"lineNumber":131,"author":{"gitID":"Steven-Jia"},"content":"        if (!source.getUnits().isEmpty()) {"},{"lineNumber":132,"author":{"gitID":"Steven-Jia"},"content":"            unitsList \u003d buildIntegerListString(source.getUnits());"},{"lineNumber":133,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":134,"author":{"gitID":"Steven-Jia"},"content":"        if (!source.getPercentages().isEmpty()) {"},{"lineNumber":135,"author":{"gitID":"Steven-Jia"},"content":"            percentagesList \u003d buildIntegerListString(source.getPercentages());"},{"lineNumber":136,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":137,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":139,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":140,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":141,"author":{"gitID":"ongkc"},"content":"     * Converts this jaxb-friendly adapted transaction\u0027s object into the model\u0027s Transaction object."},{"lineNumber":142,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":143,"author":{"gitID":"ongkc"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted Transaction"},{"lineNumber":144,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"ongkc"},"content":"    public Transaction toModelType() throws IllegalValueException {"},{"lineNumber":146,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":147,"author":{"gitID":"Steven-Jia"},"content":"        //@@author steven-jia"},{"lineNumber":148,"author":{"gitID":"Steven-Jia"},"content":"        if (this.payer \u003d\u003d null) {"},{"lineNumber":149,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Payer\"));"},{"lineNumber":150,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":151,"author":{"gitID":"Steven-Jia"},"content":"        validatePersonFields(this.payer.toModelType());"},{"lineNumber":152,"author":{"gitID":"Steven-Jia"},"content":"        final Person payer \u003d this.payer.toModelType();"},{"lineNumber":153,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":154,"author":{"gitID":"ongkc"},"content":"        //@@author ongkc"},{"lineNumber":155,"author":{"gitID":"ongkc"},"content":"        if (this.amount \u003d\u003d null) {"},{"lineNumber":156,"author":{"gitID":"ongkc"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"},{"lineNumber":157,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"ongkc"},"content":"        if (!this.amount.contains(\".\")) {"},{"lineNumber":159,"author":{"gitID":"ongkc"},"content":"            this.amount +\u003d \".00\";"},{"lineNumber":160,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":161,"author":{"gitID":"ongkc"},"content":"        if (!Amount.isValidAmount(this.amount)) {"},{"lineNumber":162,"author":{"gitID":"ongkc"},"content":"            throw new IllegalValueException(Amount.MESSAGE_AMOUNT_CONSTRAINTS);"},{"lineNumber":163,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":164,"author":{"gitID":"ongkc"},"content":"        final Amount amount \u003d new Amount(this.amount);"},{"lineNumber":165,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":166,"author":{"gitID":"ongkc"},"content":"        if (this.description \u003d\u003d null) {"},{"lineNumber":167,"author":{"gitID":"ongkc"},"content":"            throw new IllegalValueException(String.format"},{"lineNumber":168,"author":{"gitID":"ongkc"},"content":"                    (MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"},{"lineNumber":169,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"ongkc"},"content":"        if (!Description.isValidDescription(this.description)) {"},{"lineNumber":171,"author":{"gitID":"ongkc"},"content":"            throw new IllegalValueException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":173,"author":{"gitID":"ongkc"},"content":"        final Description description \u003d new Description(this.description);"},{"lineNumber":174,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":175,"author":{"gitID":"ongkc"},"content":"        if (this.transactionType \u003d\u003d null) {"},{"lineNumber":176,"author":{"gitID":"ongkc"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":177,"author":{"gitID":"ongkc"},"content":"                    TransactionType.class.getSimpleName()));"},{"lineNumber":178,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":179,"author":{"gitID":"ongkc"},"content":"        if (!TransactionType.isValidTransactionType(this.transactionType)) {"},{"lineNumber":180,"author":{"gitID":"ongkc"},"content":"            throw new IllegalValueException(TransactionType.MESSAGE_TRANSACTION_TYPE_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":182,"author":{"gitID":"ongkc"},"content":"        final TransactionType transactionType \u003d new TransactionType(this.transactionType);"},{"lineNumber":183,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":184,"author":{"gitID":"ongkc"},"content":"        if (this.dateTime \u003d\u003d null) {"},{"lineNumber":185,"author":{"gitID":"ongkc"},"content":"            throw new IllegalValueException(String.format"},{"lineNumber":186,"author":{"gitID":"ongkc"},"content":"                    (MISSING_FIELD_MESSAGE_FORMAT_DATE, Date.class.getSimpleName()));"},{"lineNumber":187,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":189,"author":{"gitID":"ongkc"},"content":"        final Date dateTime \u003d this.dateTime;"},{"lineNumber":190,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":191,"author":{"gitID":"Steven-Jia"},"content":"        //@@author steven-jia"},{"lineNumber":192,"author":{"gitID":"Steven-Jia"},"content":"        if (this.payees.isEmpty()) {"},{"lineNumber":193,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Payees\"));"},{"lineNumber":194,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":196,"author":{"gitID":"Steven-Jia"},"content":"        for (XmlAdaptedPerson payee: this.payees) {"},{"lineNumber":197,"author":{"gitID":"Steven-Jia"},"content":"            validatePersonFields(payee.toModelType());"},{"lineNumber":198,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"Steven-Jia"},"content":"        UniquePersonList convertedPayees \u003d new UniquePersonList();"},{"lineNumber":200,"author":{"gitID":"Steven-Jia"},"content":"        for (XmlAdaptedPerson payee: this.payees) {"},{"lineNumber":201,"author":{"gitID":"Steven-Jia"},"content":"            convertedPayees.add(payee.toModelType());"},{"lineNumber":202,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":203,"author":{"gitID":"Steven-Jia"},"content":"        final UniquePersonList payees \u003d convertedPayees;"},{"lineNumber":204,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":205,"author":{"gitID":"Steven-Jia"},"content":"        if (this.splitMethod \u003d\u003d null) {"},{"lineNumber":206,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":207,"author":{"gitID":"Steven-Jia"},"content":"                    SplitMethod.class.getSimpleName()));"},{"lineNumber":208,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"Steven-Jia"},"content":"        if (!SplitMethod.isValidSplitMethod(this.splitMethod)) {"},{"lineNumber":210,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(SplitMethod.MESSAGE_SPLIT_METHOD_CONSTRAINTS);"},{"lineNumber":211,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":212,"author":{"gitID":"Steven-Jia"},"content":"        final SplitMethod splitMethod \u003d new SplitMethod(this.splitMethod);"},{"lineNumber":213,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":214,"author":{"gitID":"Steven-Jia"},"content":"        final List\u003cInteger\u003e units \u003d new ArrayList\u003c\u003e();"},{"lineNumber":215,"author":{"gitID":"Steven-Jia"},"content":"        if (this.unitsList !\u003d null) {"},{"lineNumber":216,"author":{"gitID":"Steven-Jia"},"content":"            String[] unitsArray \u003d this.unitsList.split(\",\");"},{"lineNumber":217,"author":{"gitID":"Steven-Jia"},"content":"            for (String unit: unitsArray) {"},{"lineNumber":218,"author":{"gitID":"Steven-Jia"},"content":"                units.add(Integer.valueOf(unit.trim()));"},{"lineNumber":219,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":220,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":221,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":222,"author":{"gitID":"Steven-Jia"},"content":"        final List\u003cInteger\u003e percentages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":223,"author":{"gitID":"Steven-Jia"},"content":"        if (this.percentagesList !\u003d null) {"},{"lineNumber":224,"author":{"gitID":"Steven-Jia"},"content":"            String[] percentagesArray \u003d this.percentagesList.split(\",\");"},{"lineNumber":225,"author":{"gitID":"Steven-Jia"},"content":"            for (String percentage: percentagesArray) {"},{"lineNumber":226,"author":{"gitID":"Steven-Jia"},"content":"                percentages.add(Integer.valueOf(percentage.trim()));"},{"lineNumber":227,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":228,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":229,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":230,"author":{"gitID":"Steven-Jia"},"content":"        return new Transaction(transactionType, payer, amount, description, dateTime, payees,"},{"lineNumber":231,"author":{"gitID":"Steven-Jia"},"content":"                splitMethod, units, percentages);"},{"lineNumber":232,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":234,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":235,"author":{"gitID":"Steven-Jia"},"content":"     * Checks each field of the {@code person} for validity"},{"lineNumber":236,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":237,"author":{"gitID":"Steven-Jia"},"content":"    private void validatePersonFields(Person person) throws IllegalValueException {"},{"lineNumber":238,"author":{"gitID":"Steven-Jia"},"content":"        if (person.getName().fullName \u003d\u003d null) {"},{"lineNumber":239,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":240,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"Steven-Jia"},"content":"        if (!Name.isValidName(person.getName().fullName)) {"},{"lineNumber":242,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":243,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":244,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":245,"author":{"gitID":"Steven-Jia"},"content":"        if (person.getPhone().value \u003d\u003d null) {"},{"lineNumber":246,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":247,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":248,"author":{"gitID":"Steven-Jia"},"content":"        if (!Phone.isValidPhone(person.getPhone().value)) {"},{"lineNumber":249,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"},{"lineNumber":250,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":251,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":252,"author":{"gitID":"Steven-Jia"},"content":"        if (person.getEmail().value \u003d\u003d null) {"},{"lineNumber":253,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":254,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":255,"author":{"gitID":"Steven-Jia"},"content":"        if (!Email.isValidEmail(person.getEmail().value)) {"},{"lineNumber":256,"author":{"gitID":"Steven-Jia"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":257,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":258,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":259,"author":{"gitID":"Steven-Jia"},"content":"        for (Tag tag: person.getTags()) {"},{"lineNumber":260,"author":{"gitID":"Steven-Jia"},"content":"            if (!Tag.isValidTagName(tag.tagName)) {"},{"lineNumber":261,"author":{"gitID":"Steven-Jia"},"content":"                throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":262,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":263,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":264,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":266,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":267,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":268,"author":{"gitID":"ongkc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":269,"author":{"gitID":"ongkc"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":270,"author":{"gitID":"ongkc"},"content":"            return true;"},{"lineNumber":271,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":272,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":273,"author":{"gitID":"ongkc"},"content":"        if (!(other instanceof XmlAdaptedTransaction)) {"},{"lineNumber":274,"author":{"gitID":"ongkc"},"content":"            return false;"},{"lineNumber":275,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":276,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":277,"author":{"gitID":"ongkc"},"content":"        XmlAdaptedTransaction otherTransaction \u003d (XmlAdaptedTransaction) other;"},{"lineNumber":278,"author":{"gitID":"ongkc"},"content":"        return Objects.equals(payer, otherTransaction.payer)"},{"lineNumber":279,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 Objects.equals(amount, otherTransaction.amount)"},{"lineNumber":280,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 Objects.equals(description, otherTransaction.description)"},{"lineNumber":281,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 Objects.equals(payees, otherTransaction.payees)"},{"lineNumber":282,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 Objects.equals(transactionType, otherTransaction.transactionType)"},{"lineNumber":283,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 Objects.equals(splitMethod, otherTransaction.splitMethod);"},{"lineNumber":284,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":285,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":286,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":287,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":288,"author":{"gitID":"Steven-Jia"},"content":"     * Converts integersList into a comma-separated string for storage"},{"lineNumber":289,"author":{"gitID":"Steven-Jia"},"content":"     * @param integersList"},{"lineNumber":290,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":291,"author":{"gitID":"Steven-Jia"},"content":"    private String buildIntegerListString(List\u003cInteger\u003e integersList) {"},{"lineNumber":292,"author":{"gitID":"Steven-Jia"},"content":"        String integersListString \u003d \"\";"},{"lineNumber":293,"author":{"gitID":"Steven-Jia"},"content":"        for (int i \u003d 0; i \u003c integersList.size(); i++) {"},{"lineNumber":294,"author":{"gitID":"Steven-Jia"},"content":"            integersListString +\u003d String.valueOf(integersList.get(i));"},{"lineNumber":295,"author":{"gitID":"Steven-Jia"},"content":"            if (i !\u003d integersList.size() - 1) {"},{"lineNumber":296,"author":{"gitID":"Steven-Jia"},"content":"                integersListString +\u003d \", \";"},{"lineNumber":297,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":298,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":299,"author":{"gitID":"Steven-Jia"},"content":"        return integersListString;"},{"lineNumber":300,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":301,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":302,"author":{"gitID":"Steven-Jia"},"content":"}"}],"authorContributionMap":{"Steven-Jia":156,"phmignot":2,"-":12,"ongkc":132}},{"path":"src/main/java/seedu/address/model/AddressBook.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.commands.AddTransactionCommand.MESSAGE_ONLY_ONE_PAYEE_FOR_PAYDEBT;"},{"lineNumber":5,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.commands.AddTransactionCommand.MESSAGE_PAYEE_IS_BEING_OVERPAID;"},{"lineNumber":6,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.commands.AddTransactionCommand.MESSAGE_PAYEE_NOT_OWED_ANY_DEBT;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.DeletePersonCommand.MESSAGE_DEBT_NOT_PAID;"},{"lineNumber":8,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.util.CalculationUtil.calculateAmountToAddForPayee;"},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.util.CalculationUtil.calculateAmountToAddForPayer;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Balance;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniqueCreditorList;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniqueDebtorList;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.TransactionList;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.transaction.TransactionType;"},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitID":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final TransactionList transactions;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    private UniqueDebtorList debtors;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private UniqueCreditorList creditors;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    private DebtsTable debtsTable;"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        transactions \u003d new TransactionList();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        debtors \u003d new UniqueDebtorList();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        creditors \u003d new UniqueCreditorList();"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":"        debtsTable \u003d new DebtsTable();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public AddressBook() {}"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":85,"author":{"gitID":"ongkc"},"content":"    public void setDebtors(DebtsList debtsList)  {"},{"lineNumber":86,"author":{"gitID":"ongkc"},"content":"        this.debtors.setDebtors(debtsList);"},{"lineNumber":87,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":89,"author":{"gitID":"ongkc"},"content":"    public void setCreditors(DebtsList debtsList) {"},{"lineNumber":90,"author":{"gitID":"ongkc"},"content":"        this.creditors.setCreditors(debtsList); }"},{"lineNumber":91,"author":{"gitID":"ongkc"},"content":"    public void setTransactions(List\u003cTransaction\u003e transactions) {"},{"lineNumber":92,"author":{"gitID":"ongkc"},"content":"        this.transactions.setTransactions(transactions);"},{"lineNumber":93,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"ongkc"},"content":"    public void setDebtsTable(DebtsTable debtsTable) {"},{"lineNumber":95,"author":{"gitID":"ongkc"},"content":"        final DebtsTable replacement \u003d new DebtsTable();"},{"lineNumber":96,"author":{"gitID":"ongkc"},"content":"        for (DebtsTable.Entry\u003cPerson, DebtsList\u003e entry : debtsTable.entrySet()) {"},{"lineNumber":97,"author":{"gitID":"ongkc"},"content":"            DebtsList debtsList \u003d new DebtsList();"},{"lineNumber":98,"author":{"gitID":"ongkc"},"content":"            debtsList.putAll(entry.getValue());"},{"lineNumber":99,"author":{"gitID":"ongkc"},"content":"            replacement.put(entry.getKey(), debtsList);"},{"lineNumber":100,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"ongkc"},"content":"        this.debtsTable \u003d replacement;"},{"lineNumber":102,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"ongkc"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":105,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"ongkc"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":107,"author":{"gitID":"ongkc"},"content":"        requireNonNull(newData);"},{"lineNumber":108,"author":{"gitID":"ongkc"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":109,"author":{"gitID":"ongkc"},"content":"        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"},{"lineNumber":110,"author":{"gitID":"ongkc"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":111,"author":{"gitID":"ongkc"},"content":"                .collect(Collectors.toList());"},{"lineNumber":112,"author":{"gitID":"ongkc"},"content":"        List\u003cTransaction\u003e syncedTransactionList \u003d newData.getTransactionList();"},{"lineNumber":113,"author":{"gitID":"ongkc"},"content":"        DebtsTable syncedDebtsTable \u003d newData.getDebtsTable();"},{"lineNumber":114,"author":{"gitID":"ongkc"},"content":"        try {"},{"lineNumber":115,"author":{"gitID":"ongkc"},"content":"            setPersons(syncedPersonList);"},{"lineNumber":116,"author":{"gitID":"ongkc"},"content":"            setTransactions(syncedTransactionList);"},{"lineNumber":117,"author":{"gitID":"ongkc"},"content":"            setDebtsTable(syncedDebtsTable);"},{"lineNumber":118,"author":{"gitID":"ongkc"},"content":"        } catch (DuplicatePersonException e) {"},{"lineNumber":119,"author":{"gitID":"ongkc"},"content":"            throw new AssertionError(\"SmartSplit should not have duplicate persons\");"},{"lineNumber":120,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":121,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":123,"author":{"gitID":"ongkc"},"content":"    //// person-level operations"},{"lineNumber":124,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":125,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":126,"author":{"gitID":"ongkc"},"content":"     * Adds a person to the address book."},{"lineNumber":127,"author":{"gitID":"ongkc"},"content":"     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":128,"author":{"gitID":"ongkc"},"content":"     * and updates the Tag objects in the person to point to those in {@link #tags}."},{"lineNumber":129,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"ongkc"},"content":"     * @throws DuplicatePersonException if an equivalent person already exists."},{"lineNumber":131,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"ongkc"},"content":"    public void addPerson(Person p) throws DuplicatePersonException {"},{"lineNumber":133,"author":{"gitID":"ongkc"},"content":"        Person person \u003d syncWithMasterTagList(p);"},{"lineNumber":134,"author":{"gitID":"ongkc"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":135,"author":{"gitID":"ongkc"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":136,"author":{"gitID":"ongkc"},"content":"        // in the person list."},{"lineNumber":137,"author":{"gitID":"ongkc"},"content":"        persons.add(person);"},{"lineNumber":138,"author":{"gitID":"ongkc"},"content":"        debtsTable.add(person);"},{"lineNumber":139,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":141,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"ongkc"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":143,"author":{"gitID":"ongkc"},"content":"     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."},{"lineNumber":144,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":145,"author":{"gitID":"ongkc"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":146,"author":{"gitID":"ongkc"},"content":"     *      another existing person in the list."},{"lineNumber":147,"author":{"gitID":"ongkc"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":148,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":149,"author":{"gitID":"ongkc"},"content":"     * @see #syncWithMasterTagList(Person)"},{"lineNumber":150,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"ongkc"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":152,"author":{"gitID":"ongkc"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":153,"author":{"gitID":"ongkc"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":154,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":155,"author":{"gitID":"ongkc"},"content":"        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"},{"lineNumber":156,"author":{"gitID":"ongkc"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":157,"author":{"gitID":"ongkc"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any person"},{"lineNumber":158,"author":{"gitID":"ongkc"},"content":"        // in the person list."},{"lineNumber":159,"author":{"gitID":"ongkc"},"content":"        persons.setPerson(target, syncedEditedPerson);"},{"lineNumber":160,"author":{"gitID":"ongkc"},"content":"        debtsTable.setPerson(target, editedPerson);"},{"lineNumber":161,"author":{"gitID":"ongkc"},"content":"        transactions.setPerson(target, editedPerson);"},{"lineNumber":162,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":163,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":164,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":165,"author":{"gitID":"ongkc"},"content":"     *  Updates the master tag list to include tags in {@code person} that are not in the list."},{"lineNumber":166,"author":{"gitID":"ongkc"},"content":"     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"},{"lineNumber":167,"author":{"gitID":"ongkc"},"content":"     *  list."},{"lineNumber":168,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":169,"author":{"gitID":"ongkc"},"content":"    private Person syncWithMasterTagList(Person person) {"},{"lineNumber":170,"author":{"gitID":"ongkc"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"},{"lineNumber":171,"author":{"gitID":"ongkc"},"content":"        tags.mergeFrom(personTags);"},{"lineNumber":172,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":173,"author":{"gitID":"ongkc"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":174,"author":{"gitID":"ongkc"},"content":"        // used for checking person tag references"},{"lineNumber":175,"author":{"gitID":"ongkc"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":176,"author":{"gitID":"ongkc"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":177,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":178,"author":{"gitID":"ongkc"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":179,"author":{"gitID":"ongkc"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":180,"author":{"gitID":"ongkc"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":181,"author":{"gitID":"ongkc"},"content":"        return new Person("},{"lineNumber":182,"author":{"gitID":"ongkc"},"content":"                person.getName(), person.getPhone(), person.getEmail(), person.getBalance(),"},{"lineNumber":183,"author":{"gitID":"ongkc"},"content":"                correctTagReferences);"},{"lineNumber":184,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":186,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"ongkc"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":188,"author":{"gitID":"ongkc"},"content":"     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."},{"lineNumber":189,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":190,"author":{"gitID":"ongkc"},"content":"    public boolean removePerson(Person key) throws PersonNotFoundException, CommandException {"},{"lineNumber":191,"author":{"gitID":"ongkc"},"content":"        //@@author ongkc"},{"lineNumber":192,"author":{"gitID":"ongkc"},"content":"        if (debtExists(key)) {"},{"lineNumber":193,"author":{"gitID":"ongkc"},"content":"            throw new CommandException(String.format(MESSAGE_DEBT_NOT_PAID, key));"},{"lineNumber":194,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":195,"author":{"gitID":"ongkc"},"content":"        if (persons.remove(key)) {"},{"lineNumber":196,"author":{"gitID":"ongkc"},"content":"            return true;"},{"lineNumber":197,"author":{"gitID":"ongkc"},"content":"        } else {"},{"lineNumber":198,"author":{"gitID":"ongkc"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":199,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":201,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":202,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":203,"author":{"gitID":"ongkc"},"content":"     * check if the person to be deleted still owed any unpaid debt"},{"lineNumber":204,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":205,"author":{"gitID":"ongkc"},"content":"    private boolean debtExists(Person key) {"},{"lineNumber":206,"author":{"gitID":"ongkc"},"content":"        DebtsList debtsList \u003d debtsTable.get(key);"},{"lineNumber":207,"author":{"gitID":"ongkc"},"content":"        if (debtsList !\u003d null) {"},{"lineNumber":208,"author":{"gitID":"ongkc"},"content":"            for (Balance value : debtsList.values()) {"},{"lineNumber":209,"author":{"gitID":"ongkc"},"content":"                if (value.getDoubleValue() !\u003d 0) {"},{"lineNumber":210,"author":{"gitID":"ongkc"},"content":"                    return true;"},{"lineNumber":211,"author":{"gitID":"ongkc"},"content":"                }"},{"lineNumber":212,"author":{"gitID":"ongkc"},"content":"            }"},{"lineNumber":213,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":214,"author":{"gitID":"ongkc"},"content":"        return false;"},{"lineNumber":215,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":216,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":217,"author":{"gitID":"ongkc"},"content":"    //// tag-level operations"},{"lineNumber":218,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":219,"author":{"gitID":"ongkc"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":220,"author":{"gitID":"ongkc"},"content":"        tags.add(t);"},{"lineNumber":221,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":223,"author":{"gitID":"ongkc"},"content":"    //// util methods"},{"lineNumber":224,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":225,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":226,"author":{"gitID":"ongkc"},"content":"    public String toString() {"},{"lineNumber":227,"author":{"gitID":"ongkc"},"content":"        return persons.asObservableList().size() + \" persons, \""},{"lineNumber":228,"author":{"gitID":"ongkc"},"content":"                + tags.asObservableList().size() +  \" tags, \""},{"lineNumber":229,"author":{"gitID":"ongkc"},"content":"                + transactions.asObservableList().size() + \" transactions\";"},{"lineNumber":230,"author":{"gitID":"ongkc"},"content":"        // TODO: refine later"},{"lineNumber":231,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":233,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":234,"author":{"gitID":"ongkc"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":235,"author":{"gitID":"ongkc"},"content":"        return persons.asObservableList();"},{"lineNumber":236,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":238,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":239,"author":{"gitID":"ongkc"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":240,"author":{"gitID":"ongkc"},"content":"        return tags.asObservableList();"},{"lineNumber":241,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":242,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":243,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":244,"author":{"gitID":"ongkc"},"content":"    public DebtsTable getDebtsTable() {"},{"lineNumber":245,"author":{"gitID":"ongkc"},"content":"        return debtsTable;"},{"lineNumber":246,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":248,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":249,"author":{"gitID":"ongkc"},"content":"    public ObservableList\u003cTransaction\u003e getTransactionList() {"},{"lineNumber":250,"author":{"gitID":"ongkc"},"content":"        return transactions.asObservableList();"},{"lineNumber":251,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":252,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":253,"author":{"gitID":"ongkc"},"content":"    public ObservableList\u003cDebtor\u003e getDebtorsList() {"},{"lineNumber":254,"author":{"gitID":"ongkc"},"content":"        return debtors.asObservableList();"},{"lineNumber":255,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":256,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":257,"author":{"gitID":"ongkc"},"content":"    public ObservableList\u003cCreditor\u003e getCreditorsList() {"},{"lineNumber":258,"author":{"gitID":"ongkc"},"content":"        return creditors.asObservableList();"},{"lineNumber":259,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":260,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":261,"author":{"gitID":"ongkc"},"content":"    public boolean equals(Object other) {"},{"lineNumber":262,"author":{"gitID":"ongkc"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":263,"author":{"gitID":"ongkc"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":264,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"},{"lineNumber":265,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"},{"lineNumber":266,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":267,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":268,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":269,"author":{"gitID":"ongkc"},"content":"    public int hashCode() {"},{"lineNumber":270,"author":{"gitID":"ongkc"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":271,"author":{"gitID":"ongkc"},"content":"        return Objects.hash(persons, tags);"},{"lineNumber":272,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":273,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":274,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":275,"author":{"gitID":"ongkc"},"content":"     * Adds a {@code transaction} to the list of transactions."},{"lineNumber":276,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":277,"author":{"gitID":"ongkc"},"content":"    public void addTransaction(Transaction transaction) throws CommandException {"},{"lineNumber":278,"author":{"gitID":"Steven-Jia"},"content":"        //@@author steven-jia"},{"lineNumber":279,"author":{"gitID":"Steven-Jia"},"content":"        if (transaction.getTransactionType().toString().toLowerCase()"},{"lineNumber":280,"author":{"gitID":"Steven-Jia"},"content":"                .equals(TransactionType.TRANSACTION_TYPE_PAYDEBT)) {"},{"lineNumber":281,"author":{"gitID":"Steven-Jia"},"content":"            if (transaction.getPayees().asObservableList().size() \u003e 1) {"},{"lineNumber":282,"author":{"gitID":"Steven-Jia"},"content":"                throw new CommandException(MESSAGE_ONLY_ONE_PAYEE_FOR_PAYDEBT);"},{"lineNumber":283,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":284,"author":{"gitID":"Steven-Jia"},"content":"            Person payeeToFind \u003d transaction.getPayees().asObservableList().get(0);"},{"lineNumber":285,"author":{"gitID":"Steven-Jia"},"content":"            if (isNotOwedAnyDebt(transaction, payeeToFind)) {"},{"lineNumber":286,"author":{"gitID":"Steven-Jia"},"content":"                throw new CommandException(MESSAGE_PAYEE_NOT_OWED_ANY_DEBT);"},{"lineNumber":287,"author":{"gitID":"Steven-Jia"},"content":"            } else if (isBeingOverpaid(transaction, payeeToFind)) {"},{"lineNumber":288,"author":{"gitID":"Steven-Jia"},"content":"                throw new CommandException(MESSAGE_PAYEE_IS_BEING_OVERPAID);"},{"lineNumber":289,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":290,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":291,"author":{"gitID":"ongkc"},"content":"        //@@author ongkc"},{"lineNumber":292,"author":{"gitID":"ongkc"},"content":"        transactions.add(transaction);"},{"lineNumber":293,"author":{"gitID":"ongkc"},"content":"        debtsTable.updateDebts(transaction, true);"},{"lineNumber":294,"author":{"gitID":"ongkc"},"content":"        debtsTable.display();"},{"lineNumber":295,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":296,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":297,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":298,"author":{"gitID":"ongkc"},"content":"     * Update each payer and payee(s) balance whenever each new transaction is added or deleted"},{"lineNumber":299,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"ongkc"},"content":"    public void updatePayerAndPayeesBalance(Boolean isAddingTransaction, Transaction transaction, Person payer,"},{"lineNumber":301,"author":{"gitID":"ongkc"},"content":"                                            UniquePersonList payees) {"},{"lineNumber":302,"author":{"gitID":"ongkc"},"content":"        if (!transaction.getTransactionType().value.toLowerCase().equals(TransactionType.TRANSACTION_TYPE_PAYDEBT)) {"},{"lineNumber":303,"author":{"gitID":"ongkc"},"content":"            updatePayerBalance(isAddingTransaction, transaction, payer);"},{"lineNumber":304,"author":{"gitID":"Steven-Jia"},"content":"            //@@author steven-jia"},{"lineNumber":305,"author":{"gitID":"Steven-Jia"},"content":"            for (int i \u003d 0; i \u003c payees.asObservableList().size(); i++) {"},{"lineNumber":306,"author":{"gitID":"Steven-Jia"},"content":"                Person payee \u003d payees.asObservableList().get(i);"},{"lineNumber":307,"author":{"gitID":"Steven-Jia"},"content":"                Integer splitMethodValuesListIndex \u003d i + 1;"},{"lineNumber":308,"author":{"gitID":"Steven-Jia"},"content":"                updatePayeeBalance(payee, isAddingTransaction, splitMethodValuesListIndex, transaction);"},{"lineNumber":309,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":310,"author":{"gitID":"Steven-Jia"},"content":"            //@@author"},{"lineNumber":311,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":315,"author":{"gitID":"Steven-Jia"},"content":"     * Update payer balance whenever a new transaction is added or deleted"},{"lineNumber":316,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":317,"author":{"gitID":"-"},"content":"    private void updatePayerBalance(Boolean isAddingTransaction, Transaction transaction, Person payer) {"},{"lineNumber":318,"author":{"gitID":"-"},"content":"        payer.addToBalance(calculateAmountToAddForPayer(isAddingTransaction, transaction));"},{"lineNumber":319,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":320,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":321,"author":{"gitID":"Steven-Jia"},"content":"     * Update payee balance whenever a new transaction is added or deleted"},{"lineNumber":322,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":323,"author":{"gitID":"Steven-Jia"},"content":"    private void updatePayeeBalance(Person payee,"},{"lineNumber":324,"author":{"gitID":"Steven-Jia"},"content":"                                    Boolean isAddingTransaction,"},{"lineNumber":325,"author":{"gitID":"Steven-Jia"},"content":"                                    Integer splitMethodValuesListIndex,"},{"lineNumber":326,"author":{"gitID":"Steven-Jia"},"content":"                                    Transaction transaction) {"},{"lineNumber":327,"author":{"gitID":"Steven-Jia"},"content":"        payee.addToBalance(calculateAmountToAddForPayee(isAddingTransaction,"},{"lineNumber":328,"author":{"gitID":"Steven-Jia"},"content":"                    splitMethodValuesListIndex, transaction));"},{"lineNumber":329,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":330,"author":{"gitID":"-"},"content":"    //@author phmignot"},{"lineNumber":331,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":332,"author":{"gitID":"phmignot"},"content":"     * Removes {@code target} from the list of transactions."},{"lineNumber":333,"author":{"gitID":"phmignot"},"content":"     * @throws TransactionNotFoundException if the {@code target} is not in the list of transactions."},{"lineNumber":334,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":335,"author":{"gitID":"Steven-Jia"},"content":"    public void removeTransaction(Transaction target) throws TransactionNotFoundException {"},{"lineNumber":336,"author":{"gitID":"Steven-Jia"},"content":"        transactions.remove(target);"},{"lineNumber":337,"author":{"gitID":"Steven-Jia"},"content":"        debtsTable.updateDebts(target, false);"},{"lineNumber":338,"author":{"gitID":"-"},"content":"        debtsTable.display();"},{"lineNumber":339,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":340,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":341,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":342,"author":{"gitID":"Steven-Jia"},"content":"    private boolean isNotOwedAnyDebt(Transaction transaction, Person payeeToFind) {"},{"lineNumber":343,"author":{"gitID":"Steven-Jia"},"content":"        return debtsTable.size() !\u003d 0"},{"lineNumber":344,"author":{"gitID":"Steven-Jia"},"content":"                \u0026\u0026 (debtsTable.get(transaction.getPayer()).get(payeeToFind) \u003d\u003d null"},{"lineNumber":345,"author":{"gitID":"Steven-Jia"},"content":"                || debtsTable.get(transaction.getPayer()).get(payeeToFind).getDoubleValue() \u003c\u003d 0);"},{"lineNumber":346,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":347,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":348,"author":{"gitID":"Steven-Jia"},"content":"    private boolean isBeingOverpaid(Transaction transaction, Person payeeToFind) {"},{"lineNumber":349,"author":{"gitID":"Steven-Jia"},"content":"        return transaction.getAmount().getDoubleValue()"},{"lineNumber":350,"author":{"gitID":"Steven-Jia"},"content":"                \u003e debtsTable.get(transaction.getPayer()).get(payeeToFind).getDoubleValue();"},{"lineNumber":351,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":352,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":353,"author":{"gitID":"Steven-Jia"},"content":"}"}],"authorContributionMap":{"Steven-Jia":49,"phmignot":10,"-":87,"ongkc":207}},{"path":"src/main/java/seedu/address/model/person/UniqueDebtorList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":3,"author":{"gitID":"ongkc"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":5,"author":{"gitID":"ongkc"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":7,"author":{"gitID":"ongkc"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitID":"ongkc"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"import seedu.address.model.DebtsList;"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":" * A list of debtors"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":"public class UniqueDebtorList implements Iterable\u003cDebtor\u003e {"},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":"    private final ObservableList\u003cDebtor\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"     * Returns true if the list contains an equivalent Debtor as the given argument."},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"    public boolean contains(Debtor toCheck) {"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"        requireNonNull(toCheck);"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"     * Adds a person to the list."},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"    public void add(Debtor toAdd) {"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"        requireNonNull(toAdd);"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"        internalList.add(toAdd);"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":"    public void setDebtor(UniqueDebtorList replacement) {"},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"    public void setDebtors(DebtsList debtsList) {"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"        final UniqueDebtorList replacement \u003d new UniqueDebtorList();"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":"        for (DebtsList.Entry\u003cPerson, Balance\u003e entry : debtsList.entrySet()) {"},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"            if (entry.getValue().getDoubleValue() \u003c 0) {"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"                Person person \u003d entry.getKey();"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"                Balance debt \u003d entry.getValue().getInverse();"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"                Debtor debtor \u003d new Debtor(person, debt);"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"                replacement.add(debtor);"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"        setDebtor(replacement);"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"    public ObservableList\u003cDebtor\u003e asObservableList() {"},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"        return internalList.hashCode();"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":"    public Iterator\u003cDebtor\u003e iterator() {"},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":"        return internalList.iterator();"},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"-":1,"ongkc":68}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"Steven-Jia"},"content":" * Represents a Tag in SmartSplit."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"Steven-Jia":1,"-":53}},{"path":"src/main/java/seedu/address/model/person/Balance.java","lines":[{"lineNumber":1,"author":{"gitID":"Steven-Jia"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":"import java.text.DecimalFormat;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":8,"author":{"gitID":"Steven-Jia"},"content":"//@@author steven-jia"},{"lineNumber":9,"author":{"gitID":"Steven-Jia"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"Steven-Jia"},"content":" * Represents a Person\u0027s balance or debt in SmartSplit."},{"lineNumber":11,"author":{"gitID":"Steven-Jia"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidBalance(String)}"},{"lineNumber":12,"author":{"gitID":"Steven-Jia"},"content":" */"},{"lineNumber":13,"author":{"gitID":"Steven-Jia"},"content":"public class Balance {"},{"lineNumber":14,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":"    public static final String MESSAGE_BALANCE_CONSTRAINTS \u003d"},{"lineNumber":16,"author":{"gitID":"Steven-Jia"},"content":"            \"Balance should only contain numeric characters up to 2 digits, and it should not be blank,\";"},{"lineNumber":17,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":18,"author":{"gitID":"Steven-Jia"},"content":"    /*"},{"lineNumber":19,"author":{"gitID":"Steven-Jia"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":20,"author":{"gitID":"Steven-Jia"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":21,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"Steven-Jia"},"content":"    public static final String BALANCE_VALIDATION_REGEX \u003d \"^-?\\\\d*\\\\.\\\\d{2}$\";"},{"lineNumber":23,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":24,"author":{"gitID":"Steven-Jia"},"content":"    public final String value;"},{"lineNumber":25,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":26,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"Steven-Jia"},"content":"     * Constructs a {@code Balance}."},{"lineNumber":28,"author":{"gitID":"Steven-Jia"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"Steven-Jia"},"content":"     * @param balance A valid balance."},{"lineNumber":30,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"Steven-Jia"},"content":"    public Balance(String balance) {"},{"lineNumber":32,"author":{"gitID":"Steven-Jia"},"content":"        requireNonNull(balance);"},{"lineNumber":33,"author":{"gitID":"Steven-Jia"},"content":"        checkArgument(isValidBalance(balance), MESSAGE_BALANCE_CONSTRAINTS);"},{"lineNumber":34,"author":{"gitID":"Steven-Jia"},"content":"        this.value \u003d balance;"},{"lineNumber":35,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":37,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"Steven-Jia"},"content":"     * Returns true if a given string is a valid person balance."},{"lineNumber":39,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"Steven-Jia"},"content":"    public static boolean isValidBalance(String test) {"},{"lineNumber":41,"author":{"gitID":"Steven-Jia"},"content":"        return test.matches(BALANCE_VALIDATION_REGEX);"},{"lineNumber":42,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":44,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":45,"author":{"gitID":"Steven-Jia"},"content":"    public double getDoubleValue() {"},{"lineNumber":46,"author":{"gitID":"Steven-Jia"},"content":"        return Double.valueOf(value);"},{"lineNumber":47,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":49,"author":{"gitID":"Steven-Jia"},"content":"    public Balance getInverse() {"},{"lineNumber":50,"author":{"gitID":"Steven-Jia"},"content":"        if (this.value.contains(\"-\")) {"},{"lineNumber":51,"author":{"gitID":"Steven-Jia"},"content":"            return new Balance(this.value.substring(1));"},{"lineNumber":52,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"Steven-Jia"},"content":"        return new Balance(\"-\" + this.value);"},{"lineNumber":54,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":56,"author":{"gitID":"Steven-Jia"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"Steven-Jia"},"content":"     * Adds the value of two balance"},{"lineNumber":58,"author":{"gitID":"Steven-Jia"},"content":"     * @param balance to add."},{"lineNumber":59,"author":{"gitID":"Steven-Jia"},"content":"     * @return Balance with the value of the sum."},{"lineNumber":60,"author":{"gitID":"Steven-Jia"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"Steven-Jia"},"content":"    public Balance add(Balance balance) {"},{"lineNumber":62,"author":{"gitID":"Steven-Jia"},"content":"        double addition \u003d this.getDoubleValue() + balance.getDoubleValue();"},{"lineNumber":63,"author":{"gitID":"Steven-Jia"},"content":"        DecimalFormat formatter \u003d new DecimalFormat(\"#.00\");"},{"lineNumber":64,"author":{"gitID":"Steven-Jia"},"content":"        return new Balance(String.valueOf(formatter.format(addition)));"},{"lineNumber":65,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":67,"author":{"gitID":"Steven-Jia"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"Steven-Jia"},"content":"    public String toString() {"},{"lineNumber":69,"author":{"gitID":"Steven-Jia"},"content":"        return value;"},{"lineNumber":70,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":72,"author":{"gitID":"Steven-Jia"},"content":"    @Override"},{"lineNumber":73,"author":{"gitID":"Steven-Jia"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitID":"Steven-Jia"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":75,"author":{"gitID":"Steven-Jia"},"content":"                || (other instanceof Balance // instanceof handles nulls"},{"lineNumber":76,"author":{"gitID":"Steven-Jia"},"content":"                \u0026\u0026 this.value.equals(((Balance) other).value)); // state check"},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":"    @Override"},{"lineNumber":80,"author":{"gitID":"Steven-Jia"},"content":"    public int hashCode() {"},{"lineNumber":81,"author":{"gitID":"Steven-Jia"},"content":"        return value.hashCode();"},{"lineNumber":82,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":84,"author":{"gitID":"Steven-Jia"},"content":"}"}],"authorContributionMap":{"Steven-Jia":79,"phmignot":2,"-":3}},{"path":"src/main/java/seedu/address/model/DebtsTable.java","lines":[{"lineNumber":1,"author":{"gitID":"phmignot"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"Steven-Jia"},"content":"import static seedu.address.logic.util.CalculationUtil.calculateAmountToAddForPayee;"},{"lineNumber":5,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":6,"author":{"gitID":"phmignot"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":8,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.person.Balance;"},{"lineNumber":9,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":12,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":13,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":14,"author":{"gitID":"phmignot"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"Steven-Jia"},"content":" * Stores all the debts between the persons in SmartSplit."},{"lineNumber":16,"author":{"gitID":"phmignot"},"content":" */"},{"lineNumber":17,"author":{"gitID":"phmignot"},"content":"//@@author phmignot"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":"public class DebtsTable extends HashMap\u003cPerson, DebtsList\u003e {"},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":20,"author":{"gitID":"phmignot"},"content":"    public DebtsTable() {"},{"lineNumber":21,"author":{"gitID":"phmignot"},"content":"        super();"},{"lineNumber":22,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":24,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"phmignot"},"content":"     * Updates the DebtsTable due to a transaction"},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"     * payeeDebt is a negative {@Code Balance} value, because the payee owes money."},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":"     * payerDebt is a positive {@Code Balance} value, because the payer is owed."},{"lineNumber":28,"author":{"gitID":"phmignot"},"content":"     * @param transaction to register the table."},{"lineNumber":29,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"phmignot"},"content":"    public void updateDebts(Transaction transaction, Boolean isAddingTransaction) {"},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":"        Person payer \u003d transaction.getPayer();"},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":"        if (!this.containsKey(payer)) {"},{"lineNumber":33,"author":{"gitID":"phmignot"},"content":"            this.add(payer);"},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"            System.out.println(\"Adding payer \" + payer.getName().fullName);"},{"lineNumber":35,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":"        DebtsList payerDebtsList \u003d this.get(payer);"},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":"        for (int i \u003d 0; i \u003c transaction.getPayees().asObservableList().size(); i++) {"},{"lineNumber":38,"author":{"gitID":"phmignot"},"content":"            Person payee \u003d transaction.getPayees().asObservableList().get(i);"},{"lineNumber":39,"author":{"gitID":"phmignot"},"content":"            if (!this.containsKey(payee)) {"},{"lineNumber":40,"author":{"gitID":"phmignot"},"content":"                this.add(payee);"},{"lineNumber":41,"author":{"gitID":"phmignot"},"content":"                System.out.println(\"Adding payee \" + payee.getName().fullName);"},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"            Balance payerDebtToAdd \u003d calculateAmountToAddForPayee(isAddingTransaction,"},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":"                    i + 1, transaction);"},{"lineNumber":45,"author":{"gitID":"phmignot"},"content":"            Balance payeeDebtToAdd \u003d payerDebtToAdd.getInverse();"},{"lineNumber":46,"author":{"gitID":"phmignot"},"content":"            DebtsList payeeDebtsList \u003d this.get(payee);"},{"lineNumber":47,"author":{"gitID":"phmignot"},"content":"            payerDebtsList.updateDebt(payee, payeeDebtToAdd);"},{"lineNumber":48,"author":{"gitID":"phmignot"},"content":"            payeeDebtsList.updateDebt(payer, payerDebtToAdd);"},{"lineNumber":49,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":52,"author":{"gitID":"phmignot"},"content":"    public void add(Person personToAdd) {"},{"lineNumber":53,"author":{"gitID":"phmignot"},"content":"        this.putIfAbsent(personToAdd, new DebtsList());"},{"lineNumber":54,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":56,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":57,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"phmignot"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":59,"author":{"gitID":"phmignot"},"content":"     *"},{"lineNumber":60,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"phmignot"},"content":"    public void setPerson(Person target, Person editedPerson) throws PersonNotFoundException, DuplicatePersonException {"},{"lineNumber":62,"author":{"gitID":"phmignot"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":63,"author":{"gitID":"phmignot"},"content":"        requireNonNull(target);"},{"lineNumber":64,"author":{"gitID":"phmignot"},"content":"        if (!this.containsKey(target)) {"},{"lineNumber":65,"author":{"gitID":"phmignot"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":66,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"phmignot"},"content":"        if (!target.equals(editedPerson) \u0026\u0026 this.containsKey(editedPerson)) {"},{"lineNumber":68,"author":{"gitID":"phmignot"},"content":"            throw new DuplicatePersonException();"},{"lineNumber":69,"author":{"gitID":"phmignot"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"phmignot"},"content":"        DebtsList targetDebtsList \u003d this.remove(target);"},{"lineNumber":71,"author":{"gitID":"phmignot"},"content":"        this.put(editedPerson, targetDebtsList);"},{"lineNumber":72,"author":{"gitID":"phmignot"},"content":"        this.replaceAll(((person, debtsList) -\u003e {"},{"lineNumber":73,"author":{"gitID":"phmignot"},"content":"            debtsList.setPerson(target, editedPerson);"},{"lineNumber":74,"author":{"gitID":"phmignot"},"content":"            return debtsList;"},{"lineNumber":75,"author":{"gitID":"phmignot"},"content":"        }));"},{"lineNumber":76,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":77,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":79,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":80,"author":{"gitID":"phmignot"},"content":"     * Displays the content of the Debts Table in the terminal."},{"lineNumber":81,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":82,"author":{"gitID":"phmignot"},"content":"    public void display() {"},{"lineNumber":83,"author":{"gitID":"phmignot"},"content":"        System.out.println(\"DEBTS TABLE : \");"},{"lineNumber":84,"author":{"gitID":"phmignot"},"content":"        this.forEach(((person, debtsList) -\u003e {"},{"lineNumber":85,"author":{"gitID":"phmignot"},"content":"            System.out.println(person.getName().fullName + \": \");"},{"lineNumber":86,"author":{"gitID":"phmignot"},"content":"            debtsList.display();"},{"lineNumber":87,"author":{"gitID":"phmignot"},"content":"            System.out.println();"},{"lineNumber":88,"author":{"gitID":"phmignot"},"content":"        }));"},{"lineNumber":89,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"phmignot"},"content":"}"},{"lineNumber":91,"author":{"gitID":"phmignot"},"content":""}],"authorContributionMap":{"Steven-Jia":2,"phmignot":86,"-":3}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PAYEE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"Steven-Jia"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitID":"Steven-Jia"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.model.AddressBookChangedEvent;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":25,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonFoundException;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":31,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":36,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":37,"author":{"gitID":"-"},"content":" */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cTransaction\u003e filteredTransactions;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cDebtor\u003e filteredDebtors;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cCreditor\u003e filteredCreditors;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        filteredTransactions \u003d new FilteredList\u003c\u003e(this.addressBook.getTransactionList());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        filteredDebtors \u003d new FilteredList\u003c\u003e(this.addressBook.getDebtorsList());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        filteredCreditors \u003d new FilteredList\u003c\u003e(this.addressBook.getCreditorsList());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        return addressBook;"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    private void indicateAddressBookChanged() {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        raise(new AddressBookChangedEvent(addressBook));"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    public synchronized void deletePerson(Person target) throws PersonNotFoundException, CommandException {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public synchronized void addPerson(Person person) throws DuplicatePersonException {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    public void updatePerson(Person target, Person editedPerson)"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        addressBook.updatePerson(target, editedPerson);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        indicateAddressBookChanged();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":105,"author":{"gitID":"Steven-Jia"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"Steven-Jia"},"content":"    public Person findPersonByName(Name name) throws PersonNotFoundException {"},{"lineNumber":107,"author":{"gitID":"Steven-Jia"},"content":"        Set\u003cPerson\u003e matchingPersons \u003d addressBook.getPersonList()"},{"lineNumber":108,"author":{"gitID":"Steven-Jia"},"content":"                .stream()"},{"lineNumber":109,"author":{"gitID":"Steven-Jia"},"content":"                .filter(person -\u003e person.getName().equals(name))"},{"lineNumber":110,"author":{"gitID":"Steven-Jia"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":111,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":112,"author":{"gitID":"Steven-Jia"},"content":"        if (!matchingPersons.isEmpty()) {"},{"lineNumber":113,"author":{"gitID":"Steven-Jia"},"content":"            return matchingPersons.iterator().next();"},{"lineNumber":114,"author":{"gitID":"Steven-Jia"},"content":"        } else {"},{"lineNumber":115,"author":{"gitID":"Steven-Jia"},"content":"            throw new PersonNotFoundException();"},{"lineNumber":116,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":117,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":119,"author":{"gitID":"Steven-Jia"},"content":"    public UniquePersonList getPayeesList(ArgumentMultimap argMultimap, Model model)"},{"lineNumber":120,"author":{"gitID":"Steven-Jia"},"content":"            throws PersonNotFoundException, IllegalValueException {"},{"lineNumber":121,"author":{"gitID":"Steven-Jia"},"content":"        UniquePersonList payees \u003d new UniquePersonList();"},{"lineNumber":122,"author":{"gitID":"Steven-Jia"},"content":"        List\u003cString\u003e payeeNamesToAdd \u003d argMultimap.getAllValues(PREFIX_PAYEE);"},{"lineNumber":123,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":124,"author":{"gitID":"Steven-Jia"},"content":"        if (!payeeNamesToAdd.isEmpty()) {"},{"lineNumber":125,"author":{"gitID":"Steven-Jia"},"content":"            for (String payeeName: payeeNamesToAdd) {"},{"lineNumber":126,"author":{"gitID":"Steven-Jia"},"content":"                payees.add(model.findPersonByName(ParserUtil.parseName(payeeName)));"},{"lineNumber":127,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":128,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":129,"author":{"gitID":"Steven-Jia"},"content":"        return payees;"},{"lineNumber":130,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"Steven-Jia"},"content":"    public UniquePersonList getPayeesList(UniquePersonList transactionPayees)"},{"lineNumber":132,"author":{"gitID":"Steven-Jia"},"content":"            throws PersonNotFoundException {"},{"lineNumber":133,"author":{"gitID":"Steven-Jia"},"content":"        UniquePersonList payees \u003d new UniquePersonList();"},{"lineNumber":134,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":135,"author":{"gitID":"Steven-Jia"},"content":"        for (Person payee: transactionPayees) {"},{"lineNumber":136,"author":{"gitID":"Steven-Jia"},"content":"            try {"},{"lineNumber":137,"author":{"gitID":"Steven-Jia"},"content":"                payees.add(findPersonByName(payee.getName()));"},{"lineNumber":138,"author":{"gitID":"Steven-Jia"},"content":"            } catch (PersonNotFoundException pnfe) {"},{"lineNumber":139,"author":{"gitID":"Steven-Jia"},"content":"                throw new PersonNotFoundException();"},{"lineNumber":140,"author":{"gitID":"Steven-Jia"},"content":"            } catch (DuplicatePersonException e) {"},{"lineNumber":141,"author":{"gitID":"Steven-Jia"},"content":"                e.printStackTrace();"},{"lineNumber":142,"author":{"gitID":"Steven-Jia"},"content":"            }"},{"lineNumber":143,"author":{"gitID":"Steven-Jia"},"content":"        }"},{"lineNumber":144,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":145,"author":{"gitID":"Steven-Jia"},"content":"        return payees;"},{"lineNumber":146,"author":{"gitID":"Steven-Jia"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":148,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"ongkc"},"content":"     * Check if the payer or payee in the transaction indicated exists"},{"lineNumber":150,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":152,"author":{"gitID":"ongkc"},"content":"    public boolean personNotFoundInTransaction(Person person) throws PersonFoundException {"},{"lineNumber":153,"author":{"gitID":"ongkc"},"content":"        Set\u003cTransaction\u003e matchingTransactions \u003d addressBook.getTransactionList()"},{"lineNumber":154,"author":{"gitID":"ongkc"},"content":"                .stream()"},{"lineNumber":155,"author":{"gitID":"ongkc"},"content":"                .filter(transaction -\u003e transaction.getPayer().equals(person))"},{"lineNumber":156,"author":{"gitID":"ongkc"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":157,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":158,"author":{"gitID":"ongkc"},"content":"        if (matchingTransactions.isEmpty()) {"},{"lineNumber":159,"author":{"gitID":"ongkc"},"content":"            return true;"},{"lineNumber":160,"author":{"gitID":"ongkc"},"content":"        } else {"},{"lineNumber":161,"author":{"gitID":"ongkc"},"content":"            throw new PersonFoundException();"},{"lineNumber":162,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":163,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":165,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"ongkc"},"content":"    public List\u003cTransaction\u003e findTransactionsWithPerson(Person person) {"},{"lineNumber":167,"author":{"gitID":"ongkc"},"content":"        List\u003cTransaction\u003e matchingTransactions \u003d addressBook.getTransactionList()"},{"lineNumber":168,"author":{"gitID":"ongkc"},"content":"                .filtered(transaction -\u003e transaction.getPayer().equals(person));"},{"lineNumber":169,"author":{"gitID":"ongkc"},"content":"        return matchingTransactions;"},{"lineNumber":170,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"ongkc"},"content":"     * Returns an unmodifiable view of the list of {@code Transaction}"},{"lineNumber":173,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":175,"author":{"gitID":"ongkc"},"content":"    public ObservableList\u003cTransaction\u003e getFilteredTransactionList() {"},{"lineNumber":176,"author":{"gitID":"ongkc"},"content":"        return FXCollections.unmodifiableObservableList(filteredTransactions);"},{"lineNumber":177,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":178,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":179,"author":{"gitID":"ongkc"},"content":"    public ObservableList\u003cDebtor\u003e getFilteredDebtors() {"},{"lineNumber":180,"author":{"gitID":"ongkc"},"content":"        return FXCollections.unmodifiableObservableList(filteredDebtors);"},{"lineNumber":181,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":183,"author":{"gitID":"ongkc"},"content":"    public ObservableList\u003cCreditor\u003e getFilteredCreditors() {"},{"lineNumber":184,"author":{"gitID":"ongkc"},"content":"        return FXCollections.unmodifiableObservableList(filteredCreditors);"},{"lineNumber":185,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":187,"author":{"gitID":"ongkc"},"content":"    public void addTransaction(Transaction transaction) throws CommandException, PersonNotFoundException {"},{"lineNumber":188,"author":{"gitID":"ongkc"},"content":"        addressBook.addTransaction(transaction);"},{"lineNumber":189,"author":{"gitID":"ongkc"},"content":"        addressBook.updatePayerAndPayeesBalance(true, transaction, findPersonByName("},{"lineNumber":190,"author":{"gitID":"ongkc"},"content":"                    transaction.getPayer().getName()), getPayeesList(transaction.getPayees()));"},{"lineNumber":191,"author":{"gitID":"ongkc"},"content":"        updateFilteredTransactionList(PREDICATE_SHOW_ALL_TRANSACTIONS);"},{"lineNumber":192,"author":{"gitID":"ongkc"},"content":"        updateDebtorList(PREDICATE_SHOW_NO_DEBTORS);"},{"lineNumber":193,"author":{"gitID":"ongkc"},"content":"        updateCreditorList(PREDICATE_SHOW_NO_CREDITORS);"},{"lineNumber":194,"author":{"gitID":"ongkc"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_NO_PERSON);"},{"lineNumber":195,"author":{"gitID":"ongkc"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":196,"author":{"gitID":"ongkc"},"content":"        indicateAddressBookChanged();"},{"lineNumber":197,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":198,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":199,"author":{"gitID":"phmignot"},"content":"    //@@author phmignot"},{"lineNumber":200,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":201,"author":{"gitID":"phmignot"},"content":"    public void deleteTransaction(Transaction target) throws TransactionNotFoundException, PersonNotFoundException {"},{"lineNumber":202,"author":{"gitID":"phmignot"},"content":"        addressBook.updatePayerAndPayeesBalance(false, target,"},{"lineNumber":203,"author":{"gitID":"phmignot"},"content":"                findPersonByName(target.getPayer().getName()), getPayeesList(target.getPayees()));"},{"lineNumber":204,"author":{"gitID":"phmignot"},"content":"        addressBook.removeTransaction(target);"},{"lineNumber":205,"author":{"gitID":"phmignot"},"content":"        updateDebtorList(PREDICATE_SHOW_NO_DEBTORS);"},{"lineNumber":206,"author":{"gitID":"phmignot"},"content":"        updateCreditorList(PREDICATE_SHOW_NO_CREDITORS);"},{"lineNumber":207,"author":{"gitID":"phmignot"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_NO_PERSON);"},{"lineNumber":208,"author":{"gitID":"phmignot"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":209,"author":{"gitID":"phmignot"},"content":"        indicateAddressBookChanged();"},{"lineNumber":210,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":211,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":212,"author":{"gitID":"phmignot"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":213,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":214,"author":{"gitID":"phmignot"},"content":"    /**"},{"lineNumber":215,"author":{"gitID":"phmignot"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":216,"author":{"gitID":"phmignot"},"content":"     * {@code addressBook}"},{"lineNumber":217,"author":{"gitID":"phmignot"},"content":"     */"},{"lineNumber":218,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":219,"author":{"gitID":"phmignot"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":220,"author":{"gitID":"phmignot"},"content":"        return FXCollections.unmodifiableObservableList(filteredPersons);"},{"lineNumber":221,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":222,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":223,"author":{"gitID":"phmignot"},"content":"    @Override"},{"lineNumber":224,"author":{"gitID":"phmignot"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":225,"author":{"gitID":"phmignot"},"content":"        requireNonNull(predicate);"},{"lineNumber":226,"author":{"gitID":"phmignot"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":227,"author":{"gitID":"phmignot"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"ongkc"},"content":"    //@@author ongkc"},{"lineNumber":229,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":230,"author":{"gitID":"ongkc"},"content":"    public void updateDebtorList(Predicate\u003cDebtor\u003e predicate) {"},{"lineNumber":231,"author":{"gitID":"ongkc"},"content":"        requireNonNull(predicate);"},{"lineNumber":232,"author":{"gitID":"ongkc"},"content":"        filteredDebtors.setPredicate(predicate);"},{"lineNumber":233,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":234,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":235,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":236,"author":{"gitID":"ongkc"},"content":"    public void updateCreditorList(Predicate\u003cCreditor\u003e predicate) {"},{"lineNumber":237,"author":{"gitID":"ongkc"},"content":"        requireNonNull(predicate);"},{"lineNumber":238,"author":{"gitID":"ongkc"},"content":"        filteredCreditors.setPredicate(predicate);"},{"lineNumber":239,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":240,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":241,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":242,"author":{"gitID":"ongkc"},"content":"    public void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate) {"},{"lineNumber":243,"author":{"gitID":"ongkc"},"content":"        requireNonNull(predicate);"},{"lineNumber":244,"author":{"gitID":"ongkc"},"content":"        filteredTransactions.setPredicate(predicate);"},{"lineNumber":245,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":247,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":248,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":249,"author":{"gitID":"ongkc"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":250,"author":{"gitID":"ongkc"},"content":"        // short circuit if same object"},{"lineNumber":251,"author":{"gitID":"ongkc"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":252,"author":{"gitID":"ongkc"},"content":"            return true;"},{"lineNumber":253,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":254,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":255,"author":{"gitID":"ongkc"},"content":"        // instanceof handles nulls"},{"lineNumber":256,"author":{"gitID":"ongkc"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":257,"author":{"gitID":"ongkc"},"content":"            return false;"},{"lineNumber":258,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":259,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":260,"author":{"gitID":"ongkc"},"content":"        // state check"},{"lineNumber":261,"author":{"gitID":"ongkc"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":262,"author":{"gitID":"ongkc"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":263,"author":{"gitID":"ongkc"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":264,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"Steven-Jia":46,"phmignot":31,"-":98,"ongkc":90}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"phmignot"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Creditor;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Debtor;"},{"lineNumber":12,"author":{"gitID":"Steven-Jia"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonFoundException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":18,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.Transaction;"},{"lineNumber":19,"author":{"gitID":"phmignot"},"content":"import seedu.address.model.transaction.exceptions.TransactionNotFoundException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":26,"author":{"gitID":"phmignot"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d  unused -\u003e true;"},{"lineNumber":27,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    Predicate\u003cDebtor\u003e PREDICATE_SHOW_ALL_DEBTORS \u003d  unused -\u003e true;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    Predicate\u003cCreditor\u003e PREDICATE_SHOW_ALL_CREDITORS \u003d  unused -\u003e true;"},{"lineNumber":32,"author":{"gitID":"phmignot"},"content":"    /** {@code Predicate} that always evaluate to false */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    Predicate\u003cDebtor\u003e PREDICATE_SHOW_NO_DEBTORS \u003d  unused -\u003e false;"},{"lineNumber":34,"author":{"gitID":"phmignot"},"content":"    /** {@code Predicate} that always evaluate to false */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    Predicate\u003cCreditor\u003e PREDICATE_SHOW_NO_CREDITORS \u003d  unused -\u003e false;"},{"lineNumber":36,"author":{"gitID":"phmignot"},"content":"    /** {@code Predicate} that always evaluate to false */"},{"lineNumber":37,"author":{"gitID":"phmignot"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_NO_PERSON \u003d  unused -\u003e false;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    Predicate\u003cTransaction\u003e PREDICATE_SHOW_ALL_TRANSACTIONS \u003d unused -\u003e true;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"phmignot"},"content":"    /** {@code Predicate} that always evaluate to false */"},{"lineNumber":43,"author":{"gitID":"phmignot"},"content":"    Predicate\u003cTransaction\u003e PREDICATE_SHOW_NO_TRANSACTION \u003d unused -\u003e false;"},{"lineNumber":44,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    void resetData(ReadOnlyAddressBook newData);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /** Deletes the given person. */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    void deletePerson(Person target) throws PersonNotFoundException, CommandException;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /** Adds the given person */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    void addPerson(Person person) throws DuplicatePersonException;"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *      another existing person in the list."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * @throws PersonNotFoundException if {@code target} could not be found in the list."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    void updatePerson(Person target, Person editedPerson)"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            throws DuplicatePersonException, PersonNotFoundException;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":67,"author":{"gitID":"Steven-Jia"},"content":"    /** Finds a person by name */"},{"lineNumber":68,"author":{"gitID":"Steven-Jia"},"content":"    Person findPersonByName(Name name) throws PersonNotFoundException;"},{"lineNumber":69,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":70,"author":{"gitID":"Steven-Jia"},"content":"    UniquePersonList getPayeesList(ArgumentMultimap argMultimap, Model model) throws PersonNotFoundException,"},{"lineNumber":71,"author":{"gitID":"Steven-Jia"},"content":"            IllegalValueException;"},{"lineNumber":72,"author":{"gitID":"Steven-Jia"},"content":""},{"lineNumber":73,"author":{"gitID":"Steven-Jia"},"content":"    //@@author"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"Steven-Jia"},"content":"    //@@author steven-jia"},{"lineNumber":78,"author":{"gitID":"Steven-Jia"},"content":"    /** Returns a boolean if a transaction ,that have {@code person} as the payer, has been found. */"},{"lineNumber":79,"author":{"gitID":"Steven-Jia"},"content":"    boolean personNotFoundInTransaction(Person person) throws TransactionNotFoundException, PersonFoundException;"},{"lineNumber":80,"author":{"gitID":"phmignot"},"content":"    //@@author phmignot"},{"lineNumber":81,"author":{"gitID":"phmignot"},"content":"    /** Returns a List of transactions that have {@code person} as the payer */"},{"lineNumber":82,"author":{"gitID":"phmignot"},"content":"    List\u003cTransaction\u003e findTransactionsWithPerson(Person person);"},{"lineNumber":83,"author":{"gitID":"phmignot"},"content":"    //@@author"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    /** Returns an unmodifiable view of the filtered transaction list */"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    ObservableList\u003cTransaction\u003e getFilteredTransactionList();"},{"lineNumber":86,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Updates the filter of the filtered transaction list to filter by the given {@code predicate}."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    void updateFilteredTransactionList(Predicate\u003cTransaction\u003e predicate);"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"Steven-Jia"},"content":"    void addTransaction(Transaction transaction) throws PersonNotFoundException, CommandException;"},{"lineNumber":100,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":101,"author":{"gitID":"phmignot"},"content":"    //@@author phmignot"},{"lineNumber":102,"author":{"gitID":"phmignot"},"content":"    /** Deletes the given person. */"},{"lineNumber":103,"author":{"gitID":"phmignot"},"content":"    void deleteTransaction(Transaction target) throws TransactionNotFoundException, CommandException,"},{"lineNumber":104,"author":{"gitID":"phmignot"},"content":"            PersonNotFoundException;"},{"lineNumber":105,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":106,"author":{"gitID":"phmignot"},"content":"    ObservableList\u003cDebtor\u003e getFilteredDebtors();"},{"lineNumber":107,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":108,"author":{"gitID":"phmignot"},"content":"    ObservableList\u003cCreditor\u003e getFilteredCreditors();"},{"lineNumber":109,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":110,"author":{"gitID":"phmignot"},"content":"    void updateDebtorList(Predicate\u003cDebtor\u003e predicateShowNoDebtors);"},{"lineNumber":111,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":112,"author":{"gitID":"phmignot"},"content":"    void updateCreditorList(Predicate\u003cCreditor\u003e predicateShowAllCreditors);"},{"lineNumber":113,"author":{"gitID":"phmignot"},"content":""},{"lineNumber":114,"author":{"gitID":"phmignot"},"content":"}"}],"authorContributionMap":{"Steven-Jia":13,"phmignot":32,"-":69}},{"path":"src/main/java/seedu/address/model/person/UniqueCreditorList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitID":"ongkc"},"content":"//@@author ongkc"},{"lineNumber":3,"author":{"gitID":"ongkc"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":5,"author":{"gitID":"ongkc"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":7,"author":{"gitID":"ongkc"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitID":"ongkc"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitID":"ongkc"},"content":"import seedu.address.model.DebtsList;"},{"lineNumber":10,"author":{"gitID":"ongkc"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":11,"author":{"gitID":"ongkc"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"ongkc"},"content":" * A list of creditors"},{"lineNumber":13,"author":{"gitID":"ongkc"},"content":" */"},{"lineNumber":14,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":15,"author":{"gitID":"ongkc"},"content":"public class UniqueCreditorList implements Iterable\u003cCreditor\u003e {"},{"lineNumber":16,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":17,"author":{"gitID":"ongkc"},"content":"    private final ObservableList\u003cCreditor\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":18,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":19,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"ongkc"},"content":"     * Returns true if the list contains an equivalent Debtor as the given argument."},{"lineNumber":21,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"ongkc"},"content":"    public boolean contains(Debtor toCheck) {"},{"lineNumber":23,"author":{"gitID":"ongkc"},"content":"        requireNonNull(toCheck);"},{"lineNumber":24,"author":{"gitID":"ongkc"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":25,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"ongkc"},"content":"     * Adds a person to the list."},{"lineNumber":28,"author":{"gitID":"ongkc"},"content":"     *"},{"lineNumber":29,"author":{"gitID":"ongkc"},"content":"     * @throws DuplicatePersonException if the person to add is a duplicate of an existing person in the list."},{"lineNumber":30,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"ongkc"},"content":"    public void add(Creditor toAdd) {"},{"lineNumber":32,"author":{"gitID":"ongkc"},"content":"        requireNonNull(toAdd);"},{"lineNumber":33,"author":{"gitID":"ongkc"},"content":"        internalList.add(toAdd);"},{"lineNumber":34,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":36,"author":{"gitID":"ongkc"},"content":"    public void setCreditors(UniqueCreditorList replacement) {"},{"lineNumber":37,"author":{"gitID":"ongkc"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":38,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":40,"author":{"gitID":"ongkc"},"content":"    public void setCreditors(DebtsList debtsList) {"},{"lineNumber":41,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":42,"author":{"gitID":"ongkc"},"content":"        final UniqueCreditorList replacement \u003d new UniqueCreditorList();"},{"lineNumber":43,"author":{"gitID":"ongkc"},"content":"        for (DebtsList.Entry\u003cPerson, Balance\u003e entry : debtsList.entrySet()) {"},{"lineNumber":44,"author":{"gitID":"ongkc"},"content":"            if (entry.getValue().getDoubleValue() \u003e 0) {"},{"lineNumber":45,"author":{"gitID":"ongkc"},"content":"                Person person \u003d entry.getKey();"},{"lineNumber":46,"author":{"gitID":"ongkc"},"content":"                Balance debt \u003d entry.getValue();"},{"lineNumber":47,"author":{"gitID":"ongkc"},"content":"                Creditor creditor \u003d new Creditor(person, debt);"},{"lineNumber":48,"author":{"gitID":"ongkc"},"content":"                replacement.add(creditor);"},{"lineNumber":49,"author":{"gitID":"ongkc"},"content":"            }"},{"lineNumber":50,"author":{"gitID":"ongkc"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"ongkc"},"content":"        setCreditors(replacement);"},{"lineNumber":52,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":54,"author":{"gitID":"ongkc"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"ongkc"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":56,"author":{"gitID":"ongkc"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"ongkc"},"content":"    public ObservableList\u003cCreditor\u003e asObservableList() {"},{"lineNumber":58,"author":{"gitID":"ongkc"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":59,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":61,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"ongkc"},"content":"    public int hashCode() {"},{"lineNumber":63,"author":{"gitID":"ongkc"},"content":"        return internalList.hashCode();"},{"lineNumber":64,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":66,"author":{"gitID":"ongkc"},"content":""},{"lineNumber":67,"author":{"gitID":"ongkc"},"content":"    @Override"},{"lineNumber":68,"author":{"gitID":"ongkc"},"content":"    public Iterator\u003cCreditor\u003e iterator() {"},{"lineNumber":69,"author":{"gitID":"ongkc"},"content":"        return internalList.iterator();"},{"lineNumber":70,"author":{"gitID":"ongkc"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"ongkc"},"content":"}"}],"authorContributionMap":{"-":1,"ongkc":70}}]
